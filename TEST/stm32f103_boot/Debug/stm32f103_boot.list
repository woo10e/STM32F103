
stm32f103_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080039cc  080039cc  000139cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a74  08003a74  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  08003a74  08003a74  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a74  08003a74  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08003a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f28  200000e8  08003b60  000200e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001010  08003b60  00021010  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fc4  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049fc  00000000  00000000  000330d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009a11  00000000  00000000  00037acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  000414e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016c8  00000000  00000000  000421d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6b0  00000000  00000000  00043898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c8f8  00000000  00000000  0005ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087962  00000000  00000000  0007c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001041a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ed4  00000000  00000000  001041f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	080039b4 	.word	0x080039b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	080039b4 	.word	0x080039b4

0800014c <apInit>:



void apInit(void)
{
}
 800014c:	4770      	bx	lr

0800014e <apMain>:

void apMain(void)
{
 800014e:	b510      	push	{r4, lr}
  uint32_t pre_time;


  pre_time = millis();
 8000150:	f000 f80f 	bl	8000172 <millis>
 8000154:	4604      	mov	r4, r0
  while(1)
  {
    if (millis()-pre_time >= 100)
 8000156:	f000 f80c 	bl	8000172 <millis>
 800015a:	1b00      	subs	r0, r0, r4
 800015c:	2863      	cmp	r0, #99	; 0x63
 800015e:	d9fa      	bls.n	8000156 <apMain+0x8>
    {
      pre_time = millis();
 8000160:	f000 f807 	bl	8000172 <millis>
 8000164:	4604      	mov	r4, r0
      ledToggle(_DEF_LED1);
 8000166:	2000      	movs	r0, #0
 8000168:	f000 f982 	bl	8000470 <ledToggle>
 800016c:	e7f3      	b.n	8000156 <apMain+0x8>

0800016e <delay>:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}

void delay(uint32_t ms)
{
  HAL_Delay(ms);
 800016e:	f000 baaf 	b.w	80006d0 <HAL_Delay>

08000172 <millis>:
}

uint32_t millis(void)
{
  return HAL_GetTick();
 8000172:	f000 baa7 	b.w	80006c4 <HAL_GetTick>

08000176 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8000176:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000178:	2414      	movs	r4, #20
{
 800017a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017c:	4622      	mov	r2, r4
 800017e:	2100      	movs	r1, #0
 8000180:	a80c      	add	r0, sp, #48	; 0x30
 8000182:	f003 fc0f 	bl	80039a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000186:	4622      	mov	r2, r4
 8000188:	eb0d 0004 	add.w	r0, sp, r4
 800018c:	2100      	movs	r1, #0
 800018e:	f003 fc09 	bl	80039a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000192:	2100      	movs	r1, #0
 8000194:	2210      	movs	r2, #16
 8000196:	a801      	add	r0, sp, #4
 8000198:	f003 fc04 	bl	80039a4 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019c:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a4:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80001ac:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b4:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f001 fb4f 	bl	800185c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001be:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001c0:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c2:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ca:	4629      	mov	r1, r5
 80001cc:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ce:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d4:	f001 fd18 	bl	8001c08 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80001d8:	2111      	movs	r1, #17
 80001da:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001de:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80001e0:	e9cd 1301 	strd	r1, r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001e4:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001e6:	f001 fdbb 	bl	8001d60 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80001ea:	b015      	add	sp, #84	; 0x54
 80001ec:	bd30      	pop	{r4, r5, pc}
	...

080001f0 <bspInit>:
{
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	b086      	sub	sp, #24
  HAL_Init();
 80001f4:	f000 fa48 	bl	8000688 <HAL_Init>
  SystemClock_Config();
 80001f8:	f7ff ffbd 	bl	8000176 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001fc:	4b13      	ldr	r3, [pc, #76]	; (800024c <bspInit+0x5c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001fe:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000202:	699a      	ldr	r2, [r3, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000204:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000206:	f042 0220 	orr.w	r2, r2, #32
 800020a:	619a      	str	r2, [r3, #24]
 800020c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800020e:	4c10      	ldr	r4, [pc, #64]	; (8000250 <bspInit+0x60>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000210:	f002 0220 	and.w	r2, r2, #32
 8000214:	9200      	str	r2, [sp, #0]
 8000216:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000218:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021c:	f042 0204 	orr.w	r2, r2, #4
 8000220:	619a      	str	r2, [r3, #24]
 8000222:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000224:	a902      	add	r1, sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	f003 0304 	and.w	r3, r3, #4
 800022a:	9301      	str	r3, [sp, #4]
 800022c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800022e:	2311      	movs	r3, #17
 8000230:	e9cd 5302 	strd	r5, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000234:	2302      	movs	r3, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000236:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000238:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800023a:	f000 fbe5 	bl	8000a08 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800023e:	4632      	mov	r2, r6
 8000240:	4629      	mov	r1, r5
 8000242:	4620      	mov	r0, r4
 8000244:	f000 fcba 	bl	8000bbc <HAL_GPIO_WritePin>
}
 8000248:	b006      	add	sp, #24
 800024a:	bd70      	pop	{r4, r5, r6, pc}
 800024c:	40021000 	.word	0x40021000
 8000250:	40010800 	.word	0x40010800

08000254 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000254:	4770      	bx	lr
	...

08000258 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <HAL_MspInit+0x3c>)
{
 800025a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800025c:	699a      	ldr	r2, [r3, #24]
 800025e:	f042 0201 	orr.w	r2, r2, #1
 8000262:	619a      	str	r2, [r3, #24]
 8000264:	699a      	ldr	r2, [r3, #24]
 8000266:	f002 0201 	and.w	r2, r2, #1
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800026e:	69da      	ldr	r2, [r3, #28]
 8000270:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000274:	61da      	str	r2, [r3, #28]
 8000276:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800027a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800027e:	9301      	str	r3, [sp, #4]
 8000280:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000282:	6853      	ldr	r3, [r2, #4]
 8000284:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000288:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800028c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800028e:	b002      	add	sp, #8
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000
 8000298:	40010000 	.word	0x40010000

0800029c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800029c:	4770      	bx	lr

0800029e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800029e:	e7fe      	b.n	800029e <HardFault_Handler>

080002a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002a0:	e7fe      	b.n	80002a0 <MemManage_Handler>

080002a2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <BusFault_Handler>

080002a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <UsageFault_Handler>

080002a6 <SVC_Handler>:
 80002a6:	4770      	bx	lr

080002a8 <DebugMon_Handler>:
 80002a8:	4770      	bx	lr

080002aa <PendSV_Handler>:
 80002aa:	4770      	bx	lr

080002ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002ac:	f000 b9fe 	b.w	80006ac <HAL_IncTick>

080002b0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80002b0:	4801      	ldr	r0, [pc, #4]	; (80002b8 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80002b2:	f000 bd51 	b.w	8000d58 <HAL_PCD_IRQHandler>
 80002b6:	bf00      	nop
 80002b8:	20000904 	.word	0x20000904

080002bc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002bc:	4770      	bx	lr
	...

080002c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80002c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80002c2:	e003      	b.n	80002cc <LoopCopyDataInit>

080002c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80002c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80002c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80002ca:	3104      	adds	r1, #4

080002cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80002cc:	480a      	ldr	r0, [pc, #40]	; (80002f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80002d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80002d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80002d4:	d3f6      	bcc.n	80002c4 <CopyDataInit>
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80002d8:	e002      	b.n	80002e0 <LoopFillZerobss>

080002da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80002dc:	f842 3b04 	str.w	r3, [r2], #4

080002e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80002e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80002e4:	d3f9      	bcc.n	80002da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002e6:	f7ff ffe9 	bl	80002bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ea:	f003 fb37 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f003 fb2b 	bl	8003948 <main>
  bx lr
 80002f2:	4770      	bx	lr
  ldr r3, =_sidata
 80002f4:	08003a7c 	.word	0x08003a7c
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80002fc:	200000e4 	.word	0x200000e4
  ldr r2, =_sbss
 8000300:	200000e8 	.word	0x200000e8
  ldr r3, = _ebss
 8000304:	20001010 	.word	0x20001010

08000308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC1_2_IRQHandler>
	...

0800030c <flashInit>:

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);


bool flashInit(void)
{
 800030c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
  {
    flash_tbl[i].addr   = 0x8000000 + i*1024;
    flash_tbl[i].length = 1024;
 8000310:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000314:	4a05      	ldr	r2, [pc, #20]	; (800032c <flashInit+0x20>)
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8000316:	4906      	ldr	r1, [pc, #24]	; (8000330 <flashInit+0x24>)
    flash_tbl[i].addr   = 0x8000000 + i*1024;
 8000318:	6013      	str	r3, [r2, #0]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800031a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800031e:	428b      	cmp	r3, r1
    flash_tbl[i].length = 1024;
 8000320:	8090      	strh	r0, [r2, #4]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8000322:	f102 0208 	add.w	r2, r2, #8
 8000326:	d1f7      	bne.n	8000318 <flashInit+0xc>
  }

  return true;
}
 8000328:	2001      	movs	r0, #1
 800032a:	4770      	bx	lr
 800032c:	20000104 	.word	0x20000104
 8000330:	08010000 	.word	0x08010000

08000334 <flashErase>:
  int16_t  start_sector_num = -1;
  uint32_t sector_count = 0;



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8000334:	2300      	movs	r3, #0
{
 8000336:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000338:	4a24      	ldr	r2, [pc, #144]	; (80003cc <flashErase+0x98>)
  int16_t  start_sector_num = -1;
 800033a:	f04f 36ff 	mov.w	r6, #4294967295
  uint32_t sector_count = 0;
 800033e:	461c      	mov	r4, r3
 8000340:	4617      	mov	r7, r2


  sector_start = flash_tbl[sector_num].addr;
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
  flash_start  = addr;
  flash_end    = addr + length - 1;
 8000342:	4431      	add	r1, r6
{
 8000344:	b087      	sub	sp, #28
  flash_end    = addr + length - 1;
 8000346:	4401      	add	r1, r0
  sector_start = flash_tbl[sector_num].addr;
 8000348:	f8d2 c000 	ldr.w	ip, [r2]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 800034c:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 8000350:	f10c 35ff 	add.w	r5, ip, #4294967295


  if (sector_start >= flash_start && sector_start <= flash_end)
 8000354:	4560      	cmp	r0, ip
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8000356:	4475      	add	r5, lr
  if (sector_start >= flash_start && sector_start <= flash_end)
 8000358:	d834      	bhi.n	80003c4 <flashErase+0x90>
 800035a:	458c      	cmp	ip, r1
 800035c:	bf8c      	ite	hi
 800035e:	f04f 0e00 	movhi.w	lr, #0
 8000362:	f04f 0e01 	movls.w	lr, #1
  {
    ret = true;
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8000366:	42a8      	cmp	r0, r5
 8000368:	d805      	bhi.n	8000376 <flashErase+0x42>
  {
    ret = true;
 800036a:	428d      	cmp	r5, r1
 800036c:	bf98      	it	ls
 800036e:	f04f 0e01 	movls.w	lr, #1
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8000372:	4560      	cmp	r0, ip
 8000374:	d206      	bcs.n	8000384 <flashErase+0x50>
  {
    ret = true;
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8000376:	458c      	cmp	ip, r1
 8000378:	d801      	bhi.n	800037e <flashErase+0x4a>
 800037a:	428d      	cmp	r5, r1
 800037c:	d202      	bcs.n	8000384 <flashErase+0x50>
    if (flashInSector(i, addr, length) == true)
 800037e:	f1be 0f00 	cmp.w	lr, #0
 8000382:	d003      	beq.n	800038c <flashErase+0x58>
      if (start_sector_num < 0)
 8000384:	1c75      	adds	r5, r6, #1
        start_sector_num = i;
 8000386:	bf08      	it	eq
 8000388:	b21e      	sxtheq	r6, r3
      sector_count++;
 800038a:	3401      	adds	r4, #1
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800038c:	3301      	adds	r3, #1
 800038e:	2b40      	cmp	r3, #64	; 0x40
 8000390:	f102 0208 	add.w	r2, r2, #8
 8000394:	d1d8      	bne.n	8000348 <flashErase+0x14>
  if (sector_count > 0)
 8000396:	b194      	cbz	r4, 80003be <flashErase+0x8a>
    HAL_FLASH_Unlock();
 8000398:	f000 fa3a 	bl	8000810 <HAL_FLASH_Unlock>
    init.Banks       = FLASH_BANK_1;
 800039c:	2200      	movs	r2, #0
 800039e:	2301      	movs	r3, #1
 80003a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    init.PageAddress = flash_tbl[start_sector_num].addr;
 80003a4:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
    status = HAL_FLASHEx_Erase(&init, &page_error);
 80003a8:	a901      	add	r1, sp, #4
 80003aa:	a802      	add	r0, sp, #8
    init.NbPages     = sector_count;
 80003ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
    status = HAL_FLASHEx_Erase(&init, &page_error);
 80003b0:	f000 fad6 	bl	8000960 <HAL_FLASHEx_Erase>
    if (status == HAL_OK)
 80003b4:	fab0 f480 	clz	r4, r0
 80003b8:	0964      	lsrs	r4, r4, #5
    HAL_FLASH_Lock();
 80003ba:	f000 fa3b 	bl	8000834 <HAL_FLASH_Lock>
}
 80003be:	4620      	mov	r0, r4
 80003c0:	b007      	add	sp, #28
 80003c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool ret = false;
 80003c4:	f04f 0e00 	mov.w	lr, #0
 80003c8:	e7cd      	b.n	8000366 <flashErase+0x32>
 80003ca:	bf00      	nop
 80003cc:	20000104 	.word	0x20000104

080003d0 <flashWrite>:
{
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (addr%2 != 0)
 80003d2:	f010 0501 	ands.w	r5, r0, #1
{
 80003d6:	4606      	mov	r6, r0
 80003d8:	460c      	mov	r4, r1
 80003da:	4617      	mov	r7, r2
  if (addr%2 != 0)
 80003dc:	d119      	bne.n	8000412 <flashWrite+0x42>
  HAL_FLASH_Unlock();
 80003de:	f000 fa17 	bl	8000810 <HAL_FLASH_Unlock>
  for (int i=0; i<length; i+=2)
 80003e2:	3401      	adds	r4, #1
 80003e4:	42af      	cmp	r7, r5
 80003e6:	d804      	bhi.n	80003f2 <flashWrite+0x22>
  bool ret = true;
 80003e8:	2401      	movs	r4, #1
  HAL_FLASH_Lock();
 80003ea:	f000 fa23 	bl	8000834 <HAL_FLASH_Lock>
}
 80003ee:	4620      	mov	r0, r4
 80003f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    data |= p_data[i+1] << 8;
 80003f2:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80003f6:	7822      	ldrb	r2, [r4, #0]
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 80003f8:	2001      	movs	r0, #1
 80003fa:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80003fe:	1971      	adds	r1, r6, r5
 8000400:	2300      	movs	r3, #0
 8000402:	f000 fa4b 	bl	800089c <HAL_FLASH_Program>
    if (status != HAL_OK)
 8000406:	3402      	adds	r4, #2
 8000408:	b908      	cbnz	r0, 800040e <flashWrite+0x3e>
  for (int i=0; i<length; i+=2)
 800040a:	3502      	adds	r5, #2
 800040c:	e7ea      	b.n	80003e4 <flashWrite+0x14>
      ret = false;
 800040e:	2400      	movs	r4, #0
 8000410:	e7eb      	b.n	80003ea <flashWrite+0x1a>
    return false;
 8000412:	2400      	movs	r4, #0
 8000414:	e7eb      	b.n	80003ee <flashWrite+0x1e>
	...

08000418 <ledOff.part.0>:

void ledOff(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000418:	4b02      	ldr	r3, [pc, #8]	; (8000424 <ledOff.part.0+0xc>)
 800041a:	79da      	ldrb	r2, [r3, #7]
 800041c:	8899      	ldrh	r1, [r3, #4]
 800041e:	6818      	ldr	r0, [r3, #0]
 8000420:	f000 bbcc 	b.w	8000bbc <HAL_GPIO_WritePin>
 8000424:	20000004 	.word	0x20000004

08000428 <ledInit>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	2300      	movs	r3, #0
{
 800042a:	b510      	push	{r4, lr}
 800042c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	9304      	str	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000434:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000438:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043c:	f042 0208 	orr.w	r2, r2, #8
 8000440:	619a      	str	r2, [r3, #24]
 8000442:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000444:	a902      	add	r1, sp, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	f003 0308 	and.w	r3, r3, #8
 800044a:	9301      	str	r3, [sp, #4]
 800044c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2302      	movs	r3, #2
 8000450:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <ledInit+0x44>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000456:	889a      	ldrh	r2, [r3, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000458:	6818      	ldr	r0, [r3, #0]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800045a:	9202      	str	r2, [sp, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800045c:	f000 fad4 	bl	8000a08 <HAL_GPIO_Init>
  if (ch >= LED_MAX_CH) return;
 8000460:	f7ff ffda 	bl	8000418 <ledOff.part.0>
}
 8000464:	4620      	mov	r0, r4
 8000466:	b006      	add	sp, #24
 8000468:	bd10      	pop	{r4, pc}
 800046a:	bf00      	nop
 800046c:	20000004 	.word	0x20000004

08000470 <ledToggle>:
}

void ledToggle(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 8000470:	b920      	cbnz	r0, 800047c <ledToggle+0xc>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000472:	4b03      	ldr	r3, [pc, #12]	; (8000480 <ledToggle+0x10>)
 8000474:	8899      	ldrh	r1, [r3, #4]
 8000476:	6818      	ldr	r0, [r3, #0]
 8000478:	f000 bba5 	b.w	8000bc6 <HAL_GPIO_TogglePin>
}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	20000004 	.word	0x20000004

08000484 <resetInit>:
  bool ret = true;


  // 만약 Reset 핀이 눌렸다면
  //
  if (RCC->CSR == (1<<26))
 8000484:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <resetInit+0x7c>)
{
 8000486:	b510      	push	{r4, lr}
  if (RCC->CSR == (1<<26))
 8000488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800048a:	4c1e      	ldr	r4, [pc, #120]	; (8000504 <resetInit+0x80>)
 800048c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000490:	d10e      	bne.n	80004b0 <resetInit+0x2c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8000492:	2001      	movs	r0, #1
 8000494:	f000 f860 	bl	8000558 <rtcBackupRegRead>
 8000498:	1c41      	adds	r1, r0, #1
 800049a:	2001      	movs	r0, #1
 800049c:	f000 f862 	bl	8000564 <rtcBackupRegWrite>
    delay(500);
 80004a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a4:	f7ff fe63 	bl	800016e <delay>
    reset_count = rtcBackupRegRead(1);
 80004a8:	2001      	movs	r0, #1
 80004aa:	f000 f855 	bl	8000558 <rtcBackupRegRead>
 80004ae:	6020      	str	r0, [r4, #0]
  }

  rtcBackupRegWrite(1, 0);
 80004b0:	2100      	movs	r1, #0
 80004b2:	2001      	movs	r0, #1
 80004b4:	f000 f856 	bl	8000564 <rtcBackupRegWrite>


  if (reset_count != 2)
 80004b8:	6823      	ldr	r3, [r4, #0]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d01d      	beq.n	80004fa <resetInit+0x76>
  {
    void (**jump_func)() = (void (**)())(0x8005000 + 4);

    if ((uint32_t)(*jump_func) != 0xFFFFFFFF)
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <resetInit+0x84>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	3301      	adds	r3, #1
 80004c4:	d019      	beq.n	80004fa <resetInit+0x76>
    {
      HAL_RCC_DeInit();
 80004c6:	f001 f95d 	bl	8001784 <HAL_RCC_DeInit>
      HAL_DeInit();
 80004ca:	f000 f8a9 	bl	8000620 <HAL_DeInit>

      for (int i=0; i<8; i++)
 80004ce:	2300      	movs	r3, #0
      {
        NVIC->ICER[i] = 0xFFFFFFFF;
 80004d0:	f04f 30ff 	mov.w	r0, #4294967295
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <resetInit+0x88>)
 80004d6:	f103 0120 	add.w	r1, r3, #32
 80004da:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004e2:	f3bf 8f6f 	isb	sy
      for (int i=0; i<8; i++)
 80004e6:	3301      	adds	r3, #1
 80004e8:	2b08      	cmp	r3, #8
 80004ea:	d1f4      	bne.n	80004d6 <resetInit+0x52>
        __DSB();
        __ISB();
      }
      SysTick->CTRL = 0;
 80004ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]

      (*jump_func)();
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <resetInit+0x84>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	4798      	blx	r3
    }
  }


  return ret;
}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000
 8000504:	20000304 	.word	0x20000304
 8000508:	08005000 	.word	0x08005000
 800050c:	e000e100 	.word	0xe000e100

08000510 <rtcInit>:
bool rtcInit(void)
{
  bool ret = true;


  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <rtcInit+0x3c>)
{
 8000512:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000514:	699a      	ldr	r2, [r3, #24]


  hrtc.Instance           = RTC;
 8000516:	480e      	ldr	r0, [pc, #56]	; (8000550 <rtcInit+0x40>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000518:	f042 0210 	orr.w	r2, r2, #16
 800051c:	619a      	str	r2, [r3, #24]
 800051e:	699b      	ldr	r3, [r3, #24]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <rtcInit+0x44>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	f003 0310 	and.w	r3, r3, #16
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b01      	ldr	r3, [sp, #4]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
 800052e:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 8000532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000536:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000538:	f001 fd48 	bl	8001fcc <HAL_RTC_Init>
 800053c:	b108      	cbz	r0, 8000542 <rtcInit+0x32>
  {
    Error_Handler();
 800053e:	f7ff fe89 	bl	8000254 <Error_Handler>
  }

  return ret;
}
 8000542:	2001      	movs	r0, #1
 8000544:	b003      	add	sp, #12
 8000546:	f85d fb04 	ldr.w	pc, [sp], #4
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	20000308 	.word	0x20000308
 8000554:	40002800 	.word	0x40002800

08000558 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000558:	4601      	mov	r1, r0
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 800055a:	4801      	ldr	r0, [pc, #4]	; (8000560 <rtcBackupRegRead+0x8>)
 800055c:	f001 bd8c 	b.w	8002078 <HAL_RTCEx_BKUPRead>
 8000560:	20000308 	.word	0x20000308

08000564 <rtcBackupRegWrite>:
}

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000564:	460a      	mov	r2, r1
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000566:	4601      	mov	r1, r0
 8000568:	4801      	ldr	r0, [pc, #4]	; (8000570 <rtcBackupRegWrite+0xc>)
 800056a:	f001 bd7d 	b.w	8002068 <HAL_RTCEx_BKUPWrite>
 800056e:	bf00      	nop
 8000570:	20000308 	.word	0x20000308

08000574 <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000574:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <HAL_RTC_MspInit+0x30>)
 8000578:	6802      	ldr	r2, [r0, #0]
 800057a:	429a      	cmp	r2, r3
 800057c:	d10f      	bne.n	800059e <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800057e:	f001 f8fb 	bl	8001778 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <HAL_RTC_MspInit+0x34>)
 8000584:	69da      	ldr	r2, [r3, #28]
 8000586:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800058a:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800058c:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_RTC_MspInit+0x38>)
 800059a:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800059e:	b003      	add	sp, #12
 80005a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80005a4:	40002800 	.word	0x40002800
 80005a8:	40021000 	.word	0x40021000
 80005ac:	42420000 	.word	0x42420000

080005b0 <usbInit>:




bool usbInit(void)
{
 80005b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}


  GPIO_InitTypeDef GPIO_InitStruct = {0};

  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005b2:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80005b6:	2311      	movs	r3, #17
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005ba:	e9cd 6300 	strd	r6, r3, [sp]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	4c0e      	ldr	r4, [pc, #56]	; (80005fc <usbInit+0x4c>)
 80005c2:	4669      	mov	r1, sp
 80005c4:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	9303      	str	r3, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	9502      	str	r5, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f000 fa1d 	bl	8000a08 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80005ce:	462a      	mov	r2, r5
 80005d0:	4631      	mov	r1, r6
 80005d2:	4620      	mov	r0, r4
 80005d4:	f000 faf2 	bl	8000bbc <HAL_GPIO_WritePin>
  delay(200);
 80005d8:	20c8      	movs	r0, #200	; 0xc8
 80005da:	f7ff fdc8 	bl	800016e <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	4631      	mov	r1, r6
 80005e2:	4620      	mov	r0, r4
 80005e4:	f000 faea 	bl	8000bbc <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	4620      	mov	r0, r4
 80005ea:	4669      	mov	r1, sp
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ee:	f000 fa0b 	bl	8000a08 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 80005f2:	f002 ffe9 	bl	80035c8 <MX_USB_DEVICE_Init>

  return ret;
}
 80005f6:	2001      	movs	r0, #1
 80005f8:	b004      	add	sp, #16
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	40010800 	.word	0x40010800

08000600 <hwInit>:




void hwInit(void)
{
 8000600:	b508      	push	{r3, lr}
  bspInit();
 8000602:	f7ff fdf5 	bl	80001f0 <bspInit>
  rtcInit();
 8000606:	f7ff ff83 	bl	8000510 <rtcInit>

  resetInit();
 800060a:	f7ff ff3b 	bl	8000484 <resetInit>
  ledInit();
 800060e:	f7ff ff0b 	bl	8000428 <ledInit>
  usbInit();
 8000612:	f7ff ffcd 	bl	80005b0 <usbInit>
  flashInit();
}
 8000616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flashInit();
 800061a:	f7ff be77 	b.w	800030c <flashInit>

0800061e <HAL_MspDeInit>:
 800061e:	4770      	bx	lr

08000620 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000620:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000622:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 8000626:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <HAL_DeInit+0x1c>)
 800062a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 800062c:	611c      	str	r4, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800062e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000630:	60dc      	str	r4, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000632:	f7ff fff4 	bl	800061e <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
}
 8000636:	4620      	mov	r0, r4
 8000638:	bd10      	pop	{r4, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <HAL_InitTick+0x3c>)
{
 8000644:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000646:	7818      	ldrb	r0, [r3, #0]
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000650:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <HAL_InitTick+0x40>)
 8000652:	6810      	ldr	r0, [r2, #0]
 8000654:	fbb0 f0f3 	udiv	r0, r0, r3
 8000658:	f000 f89e 	bl	8000798 <HAL_SYSTICK_Config>
 800065c:	4604      	mov	r4, r0
 800065e:	b958      	cbnz	r0, 8000678 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000660:	2d0f      	cmp	r5, #15
 8000662:	d809      	bhi.n	8000678 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000664:	4602      	mov	r2, r0
 8000666:	4629      	mov	r1, r5
 8000668:	f04f 30ff 	mov.w	r0, #4294967295
 800066c:	f000 f854 	bl	8000718 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000670:	4620      	mov	r0, r4
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_InitTick+0x44>)
 8000674:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000676:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000678:	2001      	movs	r0, #1
 800067a:	e7fc      	b.n	8000676 <HAL_InitTick+0x36>
 800067c:	2000000c 	.word	0x2000000c
 8000680:	20000000 	.word	0x20000000
 8000684:	20000010 	.word	0x20000010

08000688 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_Init+0x20>)
{
 800068a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	f043 0310 	orr.w	r3, r3, #16
 8000694:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000696:	f000 f82d 	bl	80006f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ffd0 	bl	8000640 <HAL_InitTick>
  HAL_MspInit();
 80006a0:	f7ff fdda 	bl	8000258 <HAL_MspInit>
}
 80006a4:	2000      	movs	r0, #0
 80006a6:	bd08      	pop	{r3, pc}
 80006a8:	40022000 	.word	0x40022000

080006ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006ac:	4a03      	ldr	r2, [pc, #12]	; (80006bc <HAL_IncTick+0x10>)
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <HAL_IncTick+0x14>)
 80006b0:	6811      	ldr	r1, [r2, #0]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	440b      	add	r3, r1
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	2000031c 	.word	0x2000031c
 80006c0:	2000000c 	.word	0x2000000c

080006c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006c4:	4b01      	ldr	r3, [pc, #4]	; (80006cc <HAL_GetTick+0x8>)
 80006c6:	6818      	ldr	r0, [r3, #0]
}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	2000031c 	.word	0x2000031c

080006d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d0:	b538      	push	{r3, r4, r5, lr}
 80006d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006d4:	f7ff fff6 	bl	80006c4 <HAL_GetTick>
 80006d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006da:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80006dc:	bf1e      	ittt	ne
 80006de:	4b04      	ldrne	r3, [pc, #16]	; (80006f0 <HAL_Delay+0x20>)
 80006e0:	781b      	ldrbne	r3, [r3, #0]
 80006e2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006e4:	f7ff ffee 	bl	80006c4 <HAL_GetTick>
 80006e8:	1b43      	subs	r3, r0, r5
 80006ea:	42a3      	cmp	r3, r4
 80006ec:	d3fa      	bcc.n	80006e4 <HAL_Delay+0x14>
  {
  }
}
 80006ee:	bd38      	pop	{r3, r4, r5, pc}
 80006f0:	2000000c 	.word	0x2000000c

080006f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4907      	ldr	r1, [pc, #28]	; (8000714 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000702:	0412      	lsls	r2, r2, #16
 8000704:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000710:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	68dc      	ldr	r4, [r3, #12]
 800071e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000722:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000726:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000728:	2b04      	cmp	r3, #4
 800072a:	bf28      	it	cs
 800072c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000734:	bf98      	it	ls
 8000736:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073c:	bf88      	it	hi
 800073e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	ea21 0303 	bic.w	r3, r1, r3
 8000744:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000746:	fa05 f404 	lsl.w	r4, r5, r4
 800074a:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800074e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	bfac      	ite	ge
 8000756:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	4a07      	ldrlt	r2, [pc, #28]	; (8000778 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000760:	b2db      	uxtb	r3, r3
 8000762:	bfab      	itete	ge
 8000764:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000772:	bd30      	pop	{r4, r5, pc}
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	e000ed14 	.word	0xe000ed14

0800077c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800077c:	2800      	cmp	r0, #0
 800077e:	db08      	blt.n	8000792 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000780:	2301      	movs	r3, #1
 8000782:	0942      	lsrs	r2, r0, #5
 8000784:	f000 001f 	and.w	r0, r0, #31
 8000788:	fa03 f000 	lsl.w	r0, r3, r0
 800078c:	4b01      	ldr	r3, [pc, #4]	; (8000794 <HAL_NVIC_EnableIRQ+0x18>)
 800078e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100

08000798 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	3801      	subs	r0, #1
 800079a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800079e:	d20b      	bcs.n	80007b8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	21f0      	movs	r1, #240	; 0xf0
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ae:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007b8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <FLASH_SetErrorCode+0x48>)
 80007c2:	68d3      	ldr	r3, [r2, #12]
 80007c4:	f013 0310 	ands.w	r3, r3, #16
 80007c8:	d005      	beq.n	80007d6 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80007ca:	4910      	ldr	r1, [pc, #64]	; (800080c <FLASH_SetErrorCode+0x4c>)
 80007cc:	69cb      	ldr	r3, [r1, #28]
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80007d4:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80007d6:	68d2      	ldr	r2, [r2, #12]
 80007d8:	0750      	lsls	r0, r2, #29
 80007da:	d506      	bpl.n	80007ea <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80007dc:	490b      	ldr	r1, [pc, #44]	; (800080c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80007de:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80007e2:	69ca      	ldr	r2, [r1, #28]
 80007e4:	f042 0201 	orr.w	r2, r2, #1
 80007e8:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80007ea:	4a07      	ldr	r2, [pc, #28]	; (8000808 <FLASH_SetErrorCode+0x48>)
 80007ec:	69d1      	ldr	r1, [r2, #28]
 80007ee:	07c9      	lsls	r1, r1, #31
 80007f0:	d508      	bpl.n	8000804 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <FLASH_SetErrorCode+0x4c>)
 80007f4:	69c1      	ldr	r1, [r0, #28]
 80007f6:	f041 0104 	orr.w	r1, r1, #4
 80007fa:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80007fc:	69d1      	ldr	r1, [r2, #28]
 80007fe:	f021 0101 	bic.w	r1, r1, #1
 8000802:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000804:	60d3      	str	r3, [r2, #12]
}  
 8000806:	4770      	bx	lr
 8000808:	40022000 	.word	0x40022000
 800080c:	20000320 	.word	0x20000320

08000810 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_FLASH_Unlock+0x1c>)
 8000812:	6918      	ldr	r0, [r3, #16]
 8000814:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000818:	d007      	beq.n	800082a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <HAL_FLASH_Unlock+0x20>)
 800081c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800081e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000822:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000824:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000826:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800082a:	4770      	bx	lr
 800082c:	40022000 	.word	0x40022000
 8000830:	45670123 	.word	0x45670123

08000834 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000834:	4a03      	ldr	r2, [pc, #12]	; (8000844 <HAL_FLASH_Lock+0x10>)
}
 8000836:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000838:	6913      	ldr	r3, [r2, #16]
 800083a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083e:	6113      	str	r3, [r2, #16]
}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40022000 	.word	0x40022000

08000848 <FLASH_WaitForLastOperation>:
{
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800084c:	f7ff ff3a 	bl	80006c4 <HAL_GetTick>
 8000850:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000852:	4c11      	ldr	r4, [pc, #68]	; (8000898 <FLASH_WaitForLastOperation+0x50>)
 8000854:	68e3      	ldr	r3, [r4, #12]
 8000856:	07d8      	lsls	r0, r3, #31
 8000858:	d412      	bmi.n	8000880 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800085a:	68e3      	ldr	r3, [r4, #12]
 800085c:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800085e:	bf44      	itt	mi
 8000860:	2320      	movmi	r3, #32
 8000862:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000864:	68e3      	ldr	r3, [r4, #12]
 8000866:	06da      	lsls	r2, r3, #27
 8000868:	d406      	bmi.n	8000878 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800086a:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800086c:	07db      	lsls	r3, r3, #31
 800086e:	d403      	bmi.n	8000878 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000870:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000872:	f010 0004 	ands.w	r0, r0, #4
 8000876:	d007      	beq.n	8000888 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8000878:	f7ff ffa2 	bl	80007c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800087c:	2001      	movs	r0, #1
 800087e:	e003      	b.n	8000888 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8000880:	1c6b      	adds	r3, r5, #1
 8000882:	d0e7      	beq.n	8000854 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000884:	b90d      	cbnz	r5, 800088a <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 8000886:	2003      	movs	r0, #3
}
 8000888:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800088a:	f7ff ff1b 	bl	80006c4 <HAL_GetTick>
 800088e:	1b80      	subs	r0, r0, r6
 8000890:	42a8      	cmp	r0, r5
 8000892:	d9df      	bls.n	8000854 <FLASH_WaitForLastOperation+0xc>
 8000894:	e7f7      	b.n	8000886 <FLASH_WaitForLastOperation+0x3e>
 8000896:	bf00      	nop
 8000898:	40022000 	.word	0x40022000

0800089c <HAL_FLASH_Program>:
{
 800089c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80008a0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8000934 <HAL_FLASH_Program+0x98>
{
 80008a4:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 80008a6:	f899 3018 	ldrb.w	r3, [r9, #24]
{
 80008aa:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 80008ac:	2b01      	cmp	r3, #1
{
 80008ae:	460f      	mov	r7, r1
 80008b0:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80008b2:	d03d      	beq.n	8000930 <HAL_FLASH_Program+0x94>
 80008b4:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80008b6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80008ba:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80008be:	f7ff ffc3 	bl	8000848 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80008c2:	bb80      	cbnz	r0, 8000926 <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80008c4:	2c01      	cmp	r4, #1
 80008c6:	d003      	beq.n	80008d0 <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 80008c8:	2c02      	cmp	r4, #2
 80008ca:	bf0c      	ite	eq
 80008cc:	2402      	moveq	r4, #2
 80008ce:	2404      	movne	r4, #4
 80008d0:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008d2:	46ab      	mov	fp, r5
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008d4:	f8df a060 	ldr.w	sl, [pc, #96]	; 8000938 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008d8:	0128      	lsls	r0, r5, #4
 80008da:	f1c0 0220 	rsb	r2, r0, #32
 80008de:	f1a0 0320 	sub.w	r3, r0, #32
 80008e2:	fa06 f202 	lsl.w	r2, r6, r2
 80008e6:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008ea:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008ee:	4310      	orrs	r0, r2
 80008f0:	fa26 f303 	lsr.w	r3, r6, r3
 80008f4:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008f6:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008fa:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 8000904:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000908:	f24c 3050 	movw	r0, #50000	; 0xc350
 800090c:	f7ff ff9c 	bl	8000848 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000910:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000914:	f023 0301 	bic.w	r3, r3, #1
 8000918:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 800091c:	b918      	cbnz	r0, 8000926 <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 800091e:	3501      	adds	r5, #1
 8000920:	b2eb      	uxtb	r3, r5
 8000922:	429c      	cmp	r4, r3
 8000924:	d8d8      	bhi.n	80008d8 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8000926:	2300      	movs	r3, #0
 8000928:	f889 3018 	strb.w	r3, [r9, #24]
}
 800092c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000930:	2002      	movs	r0, #2
 8000932:	e7fb      	b.n	800092c <HAL_FLASH_Program+0x90>
 8000934:	20000320 	.word	0x20000320
 8000938:	40022000 	.word	0x40022000

0800093c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800093c:	2200      	movs	r2, #0
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <FLASH_PageErase+0x1c>)
 8000940:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <FLASH_PageErase+0x20>)
 8000944:	691a      	ldr	r2, [r3, #16]
 8000946:	f042 0202 	orr.w	r2, r2, #2
 800094a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800094c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800094e:	691a      	ldr	r2, [r3, #16]
 8000950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000954:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000956:	4770      	bx	lr
 8000958:	20000320 	.word	0x20000320
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_FLASHEx_Erase>:
{
 8000960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000964:	4f26      	ldr	r7, [pc, #152]	; (8000a00 <HAL_FLASHEx_Erase+0xa0>)
{
 8000966:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000968:	7e3b      	ldrb	r3, [r7, #24]
{
 800096a:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800096c:	2b01      	cmp	r3, #1
 800096e:	d044      	beq.n	80009fa <HAL_FLASHEx_Erase+0x9a>
 8000970:	2401      	movs	r4, #1
 8000972:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000974:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000976:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800097a:	2b02      	cmp	r3, #2
 800097c:	d11a      	bne.n	80009b4 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800097e:	f7ff ff63 	bl	8000848 <FLASH_WaitForLastOperation>
 8000982:	b120      	cbz	r0, 800098e <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000984:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000986:	2300      	movs	r3, #0
 8000988:	763b      	strb	r3, [r7, #24]
}
 800098a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800098e:	4c1d      	ldr	r4, [pc, #116]	; (8000a04 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000990:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000992:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000994:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800099e:	6923      	ldr	r3, [r4, #16]
 80009a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a4:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009a6:	f7ff ff4f 	bl	8000848 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80009aa:	6923      	ldr	r3, [r4, #16]
 80009ac:	f023 0304 	bic.w	r3, r3, #4
 80009b0:	6123      	str	r3, [r4, #16]
 80009b2:	e7e8      	b.n	8000986 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80009b4:	f7ff ff48 	bl	8000848 <FLASH_WaitForLastOperation>
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d1e3      	bne.n	8000984 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80009c4:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80009c6:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80009c8:	4c0e      	ldr	r4, [pc, #56]	; (8000a04 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80009ca:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80009ce:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80009d2:	42b3      	cmp	r3, r6
 80009d4:	d9d7      	bls.n	8000986 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80009d6:	4630      	mov	r0, r6
 80009d8:	f7ff ffb0 	bl	800093c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009e0:	f7ff ff32 	bl	8000848 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80009e4:	6923      	ldr	r3, [r4, #16]
 80009e6:	f023 0302 	bic.w	r3, r3, #2
 80009ea:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80009ec:	b110      	cbz	r0, 80009f4 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 80009ee:	f8c8 6000 	str.w	r6, [r8]
            break;
 80009f2:	e7c8      	b.n	8000986 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 80009f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009f8:	e7e7      	b.n	80009ca <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 80009fa:	2002      	movs	r0, #2
 80009fc:	e7c5      	b.n	800098a <HAL_FLASHEx_Erase+0x2a>
 80009fe:	bf00      	nop
 8000a00:	20000320 	.word	0x20000320
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a0c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000a0e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a10:	4f64      	ldr	r7, [pc, #400]	; (8000ba4 <HAL_GPIO_Init+0x19c>)
 8000a12:	4b65      	ldr	r3, [pc, #404]	; (8000ba8 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8000a14:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000bac <HAL_GPIO_Init+0x1a4>
 8000a18:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000bb0 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1c:	680d      	ldr	r5, [r1, #0]
 8000a1e:	fa35 f406 	lsrs.w	r4, r5, r6
 8000a22:	d102      	bne.n	8000a2a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000a24:	b003      	add	sp, #12
 8000a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000a2a:	f04f 0801 	mov.w	r8, #1
 8000a2e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a32:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000a36:	ea38 0505 	bics.w	r5, r8, r5
 8000a3a:	d17b      	bne.n	8000b34 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8000a3c:	684d      	ldr	r5, [r1, #4]
 8000a3e:	2d03      	cmp	r5, #3
 8000a40:	d807      	bhi.n	8000a52 <HAL_GPIO_Init+0x4a>
 8000a42:	3d01      	subs	r5, #1
 8000a44:	2d02      	cmp	r5, #2
 8000a46:	f200 8088 	bhi.w	8000b5a <HAL_GPIO_Init+0x152>
 8000a4a:	e8df f005 	tbb	[pc, r5]
 8000a4e:	9b96      	.short	0x9b96
 8000a50:	a1          	.byte	0xa1
 8000a51:	00          	.byte	0x00
 8000a52:	2d12      	cmp	r5, #18
 8000a54:	f000 8099 	beq.w	8000b8a <HAL_GPIO_Init+0x182>
 8000a58:	d86e      	bhi.n	8000b38 <HAL_GPIO_Init+0x130>
 8000a5a:	2d11      	cmp	r5, #17
 8000a5c:	f000 808f 	beq.w	8000b7e <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a60:	2cff      	cmp	r4, #255	; 0xff
 8000a62:	bf98      	it	ls
 8000a64:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a66:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a6a:	bf88      	it	hi
 8000a6c:	f100 0a04 	addhi.w	sl, r0, #4
 8000a70:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a74:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a78:	bf88      	it	hi
 8000a7a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a7c:	fa09 fb05 	lsl.w	fp, r9, r5
 8000a80:	ea28 080b 	bic.w	r8, r8, fp
 8000a84:	fa02 f505 	lsl.w	r5, r2, r5
 8000a88:	ea48 0505 	orr.w	r5, r8, r5
 8000a8c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a90:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000a94:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000a98:	d04c      	beq.n	8000b34 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9a:	69bd      	ldr	r5, [r7, #24]
 8000a9c:	f026 0803 	bic.w	r8, r6, #3
 8000aa0:	f045 0501 	orr.w	r5, r5, #1
 8000aa4:	61bd      	str	r5, [r7, #24]
 8000aa6:	69bd      	ldr	r5, [r7, #24]
 8000aa8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000aac:	f005 0501 	and.w	r5, r5, #1
 8000ab0:	9501      	str	r5, [sp, #4]
 8000ab2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ab6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aba:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000abc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000ac0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ac4:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ac8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000acc:	4d39      	ldr	r5, [pc, #228]	; (8000bb4 <HAL_GPIO_Init+0x1ac>)
 8000ace:	42a8      	cmp	r0, r5
 8000ad0:	d062      	beq.n	8000b98 <HAL_GPIO_Init+0x190>
 8000ad2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ad6:	42a8      	cmp	r0, r5
 8000ad8:	d060      	beq.n	8000b9c <HAL_GPIO_Init+0x194>
 8000ada:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ade:	42a8      	cmp	r0, r5
 8000ae0:	d05e      	beq.n	8000ba0 <HAL_GPIO_Init+0x198>
 8000ae2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ae6:	42a8      	cmp	r0, r5
 8000ae8:	bf0c      	ite	eq
 8000aea:	2503      	moveq	r5, #3
 8000aec:	2504      	movne	r5, #4
 8000aee:	fa05 f50b 	lsl.w	r5, r5, fp
 8000af2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000af6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000afa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000b00:	bf14      	ite	ne
 8000b02:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b04:	43a5      	biceq	r5, r4
 8000b06:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000b08:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b0a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000b0e:	bf14      	ite	ne
 8000b10:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b12:	43a5      	biceq	r5, r4
 8000b14:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b16:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b18:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b1c:	bf14      	ite	ne
 8000b1e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b20:	43a5      	biceq	r5, r4
 8000b22:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b24:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b26:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b2a:	bf14      	ite	ne
 8000b2c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b2e:	ea25 0404 	biceq.w	r4, r5, r4
 8000b32:	60dc      	str	r4, [r3, #12]
	position++;
 8000b34:	3601      	adds	r6, #1
 8000b36:	e771      	b.n	8000a1c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000b38:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000bb8 <HAL_GPIO_Init+0x1b0>
 8000b3c:	454d      	cmp	r5, r9
 8000b3e:	d00c      	beq.n	8000b5a <HAL_GPIO_Init+0x152>
 8000b40:	d817      	bhi.n	8000b72 <HAL_GPIO_Init+0x16a>
 8000b42:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000b46:	454d      	cmp	r5, r9
 8000b48:	d007      	beq.n	8000b5a <HAL_GPIO_Init+0x152>
 8000b4a:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000b4e:	454d      	cmp	r5, r9
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x152>
 8000b52:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000b56:	454d      	cmp	r5, r9
 8000b58:	d182      	bne.n	8000a60 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b5a:	688a      	ldr	r2, [r1, #8]
 8000b5c:	b1d2      	cbz	r2, 8000b94 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b5e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000b60:	bf08      	it	eq
 8000b62:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b66:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000b6a:	bf18      	it	ne
 8000b6c:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000b70:	e776      	b.n	8000a60 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000b72:	4565      	cmp	r5, ip
 8000b74:	d0f1      	beq.n	8000b5a <HAL_GPIO_Init+0x152>
 8000b76:	4575      	cmp	r5, lr
 8000b78:	e7ee      	b.n	8000b58 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b7a:	68ca      	ldr	r2, [r1, #12]
          break;
 8000b7c:	e770      	b.n	8000a60 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b7e:	68ca      	ldr	r2, [r1, #12]
 8000b80:	3204      	adds	r2, #4
          break;
 8000b82:	e76d      	b.n	8000a60 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b84:	68ca      	ldr	r2, [r1, #12]
 8000b86:	3208      	adds	r2, #8
          break;
 8000b88:	e76a      	b.n	8000a60 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b8a:	68ca      	ldr	r2, [r1, #12]
 8000b8c:	320c      	adds	r2, #12
          break;
 8000b8e:	e767      	b.n	8000a60 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000b90:	2200      	movs	r2, #0
 8000b92:	e765      	b.n	8000a60 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b94:	2204      	movs	r2, #4
 8000b96:	e763      	b.n	8000a60 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b98:	2500      	movs	r5, #0
 8000b9a:	e7a8      	b.n	8000aee <HAL_GPIO_Init+0xe6>
 8000b9c:	2501      	movs	r5, #1
 8000b9e:	e7a6      	b.n	8000aee <HAL_GPIO_Init+0xe6>
 8000ba0:	2502      	movs	r5, #2
 8000ba2:	e7a4      	b.n	8000aee <HAL_GPIO_Init+0xe6>
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010400 	.word	0x40010400
 8000bac:	10310000 	.word	0x10310000
 8000bb0:	10320000 	.word	0x10320000
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	10220000 	.word	0x10220000

08000bbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bbc:	b10a      	cbz	r2, 8000bc2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bbe:	6101      	str	r1, [r0, #16]
  }
}
 8000bc0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc2:	0409      	lsls	r1, r1, #16
 8000bc4:	e7fb      	b.n	8000bbe <HAL_GPIO_WritePin+0x2>

08000bc6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bc6:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bc8:	ea01 0203 	and.w	r2, r1, r3
 8000bcc:	ea21 0103 	bic.w	r1, r1, r3
 8000bd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000bd4:	6101      	str	r1, [r0, #16]
}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bda:	4604      	mov	r4, r0
{
 8000bdc:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000bde:	b310      	cbz	r0, 8000c26 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000be0:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000be4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000be8:	b91b      	cbnz	r3, 8000bf2 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bea:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bee:	f002 fdbb 	bl	8003768 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bf2:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bf4:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bf6:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bf8:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8000bfc:	f855 0b10 	ldr.w	r0, [r5], #16
 8000c00:	f001 fa52 	bl	80020a8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	1d27      	adds	r7, r4, #4
 8000c0c:	6033      	str	r3, [r6, #0]
 8000c0e:	4626      	mov	r6, r4
 8000c10:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000c14:	f856 0b10 	ldr.w	r0, [r6], #16
 8000c18:	f001 fa36 	bl	8002088 <USB_CoreInit>
 8000c1c:	4605      	mov	r5, r0
 8000c1e:	b120      	cbz	r0, 8000c2a <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c20:	2302      	movs	r3, #2
 8000c22:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000c26:	2501      	movs	r5, #1
 8000c28:	e04c      	b.n	8000cc4 <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	6820      	ldr	r0, [r4, #0]
 8000c2e:	f001 fa45 	bl	80020bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c32:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c34:	f04f 0e01 	mov.w	lr, #1
 8000c38:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c3a:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c3c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8000c40:	b2ca      	uxtb	r2, r1
 8000c42:	4594      	cmp	ip, r2
 8000c44:	f101 0101 	add.w	r1, r1, #1
 8000c48:	d81b      	bhi.n	8000c82 <HAL_PCD_Init+0xaa>
 8000c4a:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c4c:	2528      	movs	r5, #40	; 0x28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c52:	4584      	cmp	ip, r0
 8000c54:	f103 0301 	add.w	r3, r3, #1
 8000c58:	d820      	bhi.n	8000c9c <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c5a:	46ec      	mov	ip, sp
 8000c5c:	4635      	mov	r5, r6
 8000c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	f8cc 3000 	str.w	r3, [ip]
 8000c6a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000c6e:	6820      	ldr	r0, [r4, #0]
 8000c70:	f001 fa26 	bl	80020c0 <USB_DevInit>
 8000c74:	2301      	movs	r3, #1
 8000c76:	4605      	mov	r5, r0
 8000c78:	b1e8      	cbz	r0, 8000cb6 <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000c80:	e7d1      	b.n	8000c26 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8000c82:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c86:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8000c8a:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c92:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c94:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c98:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c9a:	e7d1      	b.n	8000c40 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8000c9c:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ca0:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8000ca4:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000ca8:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cac:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cb0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cb4:	e7cc      	b.n	8000c50 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 8000cb6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 8000cba:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000cbc:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000cc0:	f001 fbbf 	bl	8002442 <USB_DevDisconnect>

  return HAL_OK;
}
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	b007      	add	sp, #28
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cca:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000ccc:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8000cd0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d010      	beq.n	8000cf8 <HAL_PCD_Start+0x2e>
 8000cd6:	2501      	movs	r5, #1
 8000cd8:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000cdc:	6800      	ldr	r0, [r0, #0]
 8000cde:	f001 f9da 	bl	8002096 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f002 fe2e 	bl	8003946 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000cea:	6820      	ldr	r0, [r4, #0]
 8000cec:	f001 fba7 	bl	800243e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000cf6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	e7fc      	b.n	8000cf6 <HAL_PCD_Start+0x2c>

08000cfc <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8000cfc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000cfe:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8000d02:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d010      	beq.n	8000d2a <HAL_PCD_Stop+0x2e>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8000d0e:	6800      	ldr	r0, [r0, #0]
 8000d10:	f001 f9ca 	bl	80020a8 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8000d14:	2100      	movs	r1, #0
 8000d16:	4620      	mov	r0, r4
 8000d18:	f002 fe15 	bl	8003946 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 8000d1c:	6820      	ldr	r0, [r4, #0]
 8000d1e:	f001 fb90 	bl	8002442 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000d28:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	e7fc      	b.n	8000d28 <HAL_PCD_Stop+0x2c>

08000d2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000d2e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000d30:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8000d34:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d36:	2a01      	cmp	r2, #1
 8000d38:	d00b      	beq.n	8000d52 <HAL_PCD_SetAddress+0x24>
 8000d3a:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8000d3c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8000d40:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000d44:	6800      	ldr	r0, [r0, #0]
 8000d46:	f001 fb74 	bl	8002432 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000d50:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d52:	2002      	movs	r0, #2
 8000d54:	e7fc      	b.n	8000d50 <HAL_PCD_SetAddress+0x22>
	...

08000d58 <HAL_PCD_IRQHandler>:
{
 8000d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d60:	6800      	ldr	r0, [r0, #0]
 8000d62:	f001 fb70 	bl	8002446 <USB_ReadInterrupts>
 8000d66:	0402      	lsls	r2, r0, #16
 8000d68:	d509      	bpl.n	8000d7e <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000d6a:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8001080 <HAL_PCD_IRQHandler+0x328>
 8000d6e:	f8df 8314 	ldr.w	r8, [pc, #788]	; 8001084 <HAL_PCD_IRQHandler+0x32c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000d72:	6820      	ldr	r0, [r4, #0]
 8000d74:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000d78:	041d      	lsls	r5, r3, #16
 8000d7a:	f100 80c1 	bmi.w	8000f00 <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d7e:	6820      	ldr	r0, [r4, #0]
 8000d80:	f001 fb61 	bl	8002446 <USB_ReadInterrupts>
 8000d84:	0543      	lsls	r3, r0, #21
 8000d86:	d50f      	bpl.n	8000da8 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d88:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000d8a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d8c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d94:	041b      	lsls	r3, r3, #16
 8000d96:	0c1b      	lsrs	r3, r3, #16
 8000d98:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000d9c:	f002 fd1f 	bl	80037de <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000da0:	2100      	movs	r1, #0
 8000da2:	4620      	mov	r0, r4
 8000da4:	f7ff ffc3 	bl	8000d2e <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000da8:	6820      	ldr	r0, [r4, #0]
 8000daa:	f001 fb4c 	bl	8002446 <USB_ReadInterrupts>
 8000dae:	0441      	lsls	r1, r0, #17
 8000db0:	d508      	bpl.n	8000dc4 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000db2:	6822      	ldr	r2, [r4, #0]
 8000db4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dbc:	041b      	lsls	r3, r3, #16
 8000dbe:	0c1b      	lsrs	r3, r3, #16
 8000dc0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000dc4:	6820      	ldr	r0, [r4, #0]
 8000dc6:	f001 fb3e 	bl	8002446 <USB_ReadInterrupts>
 8000dca:	0482      	lsls	r2, r0, #18
 8000dcc:	d508      	bpl.n	8000de0 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dce:	6822      	ldr	r2, [r4, #0]
 8000dd0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dd8:	041b      	lsls	r3, r3, #16
 8000dda:	0c1b      	lsrs	r3, r3, #16
 8000ddc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000de0:	6820      	ldr	r0, [r4, #0]
 8000de2:	f001 fb30 	bl	8002446 <USB_ReadInterrupts>
 8000de6:	04c3      	lsls	r3, r0, #19
 8000de8:	d51c      	bpl.n	8000e24 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000dea:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000dec:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000dee:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000df2:	f023 0304 	bic.w	r3, r3, #4
 8000df6:	041b      	lsls	r3, r3, #16
 8000df8:	0c1b      	lsrs	r3, r3, #16
 8000dfa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000dfe:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000e02:	f023 0308 	bic.w	r3, r3, #8
 8000e06:	041b      	lsls	r3, r3, #16
 8000e08:	0c1b      	lsrs	r3, r3, #16
 8000e0a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000e0e:	f002 fd09 	bl	8003824 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e12:	6822      	ldr	r2, [r4, #0]
 8000e14:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e1c:	041b      	lsls	r3, r3, #16
 8000e1e:	0c1b      	lsrs	r3, r3, #16
 8000e20:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e24:	6820      	ldr	r0, [r4, #0]
 8000e26:	f001 fb0e 	bl	8002446 <USB_ReadInterrupts>
 8000e2a:	0507      	lsls	r7, r0, #20
 8000e2c:	d546      	bpl.n	8000ebc <HAL_PCD_IRQHandler+0x164>
 8000e2e:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	4606      	mov	r6, r0
 8000e34:	4619      	mov	r1, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	f103 0520 	add.w	r5, r3, #32
 8000e3c:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8000e40:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000e42:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8000e46:	d1f9      	bne.n	8000e3c <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000e48:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e4c:	b292      	uxth	r2, r2
 8000e4e:	f042 0201 	orr.w	r2, r2, #1
 8000e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000e56:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	0412      	lsls	r2, r2, #16
 8000e60:	0c12      	lsrs	r2, r2, #16
 8000e62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000e66:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e6a:	0556      	lsls	r6, r2, #21
 8000e6c:	d5fb      	bpl.n	8000e66 <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e6e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e76:	0412      	lsls	r2, r2, #16
 8000e78:	0c12      	lsrs	r2, r2, #16
 8000e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000e7e:	f830 2b02 	ldrh.w	r2, [r0], #2
 8000e82:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8000e86:	428d      	cmp	r5, r1
 8000e88:	d1f9      	bne.n	8000e7e <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e8a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8000e8e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e90:	b292      	uxth	r2, r2
 8000e92:	f042 0208 	orr.w	r2, r2, #8
 8000e96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e9a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ea2:	0412      	lsls	r2, r2, #16
 8000ea4:	0c12      	lsrs	r2, r2, #16
 8000ea6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000eaa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	f042 0204 	orr.w	r2, r2, #4
 8000eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8000eb8:	f002 fca4 	bl	8003804 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000ebc:	6820      	ldr	r0, [r4, #0]
 8000ebe:	f001 fac2 	bl	8002446 <USB_ReadInterrupts>
 8000ec2:	0582      	lsls	r2, r0, #22
 8000ec4:	d50b      	bpl.n	8000ede <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ec6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000ec8:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000eca:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ece:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ed2:	041b      	lsls	r3, r3, #16
 8000ed4:	0c1b      	lsrs	r3, r3, #16
 8000ed6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000eda:	f002 fc7c 	bl	80037d6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000ede:	6820      	ldr	r0, [r4, #0]
 8000ee0:	f001 fab1 	bl	8002446 <USB_ReadInterrupts>
 8000ee4:	05c3      	lsls	r3, r0, #23
 8000ee6:	d508      	bpl.n	8000efa <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ee8:	6822      	ldr	r2, [r4, #0]
 8000eea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	0c1b      	lsrs	r3, r3, #16
 8000ef6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000efa:	b005      	add	sp, #20
 8000efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000f00:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8000f04:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8000f06:	f016 060f 	ands.w	r6, r6, #15
 8000f0a:	f040 80bd 	bne.w	8001088 <HAL_PCD_IRQHandler+0x330>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f0e:	f011 0110 	ands.w	r1, r1, #16
 8000f12:	d12d      	bne.n	8000f70 <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f14:	8803      	ldrh	r3, [r0, #0]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	ea03 0309 	and.w	r3, r3, r9
 8000f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f20:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f26:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f30:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000f34:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000f38:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f3e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000f40:	4413      	add	r3, r2
 8000f42:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f44:	4620      	mov	r0, r4
 8000f46:	f002 fc3e 	bl	80037c6 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f4a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f43f af0f 	beq.w	8000d72 <HAL_PCD_IRQHandler+0x1a>
 8000f54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	f47f af0b 	bne.w	8000d72 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f5c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f60:	6821      	ldr	r1, [r4, #0]
 8000f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f66:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000f6a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000f6e:	e700      	b.n	8000d72 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000f70:	8805      	ldrh	r5, [r0, #0]
 8000f72:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000f74:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8000f78:	d021      	beq.n	8000fbe <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f7a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f7e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f88:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f8c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f90:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f98:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f9c:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8000fa0:	f001 fca4 	bl	80028ec <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fa4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000fa6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fa8:	8813      	ldrh	r3, [r2, #0]
 8000faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fae:	051b      	lsls	r3, r3, #20
 8000fb0:	0d1b      	lsrs	r3, r3, #20
 8000fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb6:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000fb8:	f002 fbf6 	bl	80037a8 <HAL_PCD_SetupStageCallback>
 8000fbc:	e6d9      	b.n	8000d72 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000fbe:	041f      	lsls	r7, r3, #16
 8000fc0:	f57f aed7 	bpl.w	8000d72 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fc4:	8803      	ldrh	r3, [r0, #0]
 8000fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fca:	051b      	lsls	r3, r3, #20
 8000fcc:	0d1b      	lsrs	r3, r3, #20
 8000fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fd4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000fd8:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000fe2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000fe6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fee:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000ff2:	b18b      	cbz	r3, 8001018 <HAL_PCD_IRQHandler+0x2c0>
 8000ff4:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8000ff8:	b171      	cbz	r1, 8001018 <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000ffa:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000ffe:	f001 fc75 	bl	80028ec <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001002:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001006:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800100a:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800100c:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800100e:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8001010:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001014:	f002 fbce 	bl	80037b4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001018:	6821      	ldr	r1, [r4, #0]
 800101a:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 800101e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001022:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8001026:	b29b      	uxth	r3, r3
 8001028:	b9cd      	cbnz	r5, 800105e <HAL_PCD_IRQHandler+0x306>
 800102a:	5ac2      	ldrh	r2, [r0, r3]
 800102c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001030:	0412      	lsls	r2, r2, #16
 8001032:	0c12      	lsrs	r2, r2, #16
 8001034:	52c2      	strh	r2, [r0, r3]
 8001036:	5ac2      	ldrh	r2, [r0, r3]
 8001038:	b292      	uxth	r2, r2
 800103a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800103e:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001040:	880b      	ldrh	r3, [r1, #0]
 8001042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800104a:	041b      	lsls	r3, r3, #16
 800104c:	0c1b      	lsrs	r3, r3, #16
 800104e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105a:	800b      	strh	r3, [r1, #0]
 800105c:	e689      	b.n	8000d72 <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800105e:	2d3e      	cmp	r5, #62	; 0x3e
 8001060:	d806      	bhi.n	8001070 <HAL_PCD_IRQHandler+0x318>
 8001062:	086a      	lsrs	r2, r5, #1
 8001064:	07ee      	lsls	r6, r5, #31
 8001066:	bf48      	it	mi
 8001068:	3201      	addmi	r2, #1
 800106a:	0292      	lsls	r2, r2, #10
 800106c:	b292      	uxth	r2, r2
 800106e:	e7e6      	b.n	800103e <HAL_PCD_IRQHandler+0x2e6>
 8001070:	096a      	lsrs	r2, r5, #5
 8001072:	06ed      	lsls	r5, r5, #27
 8001074:	bf08      	it	eq
 8001076:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800107a:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 800107e:	e7f5      	b.n	800106c <HAL_PCD_IRQHandler+0x314>
 8001080:	ffff8f0f 	.word	0xffff8f0f
 8001084:	ffff8000 	.word	0xffff8000
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001088:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800108c:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800108e:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001090:	f140 80ee 	bpl.w	8001270 <HAL_PCD_IRQHandler+0x518>
        if (ep->doublebuffer == 0U)
 8001094:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001096:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800109a:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800109e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010a2:	051b      	lsls	r3, r3, #20
 80010a4:	0d1b      	lsrs	r3, r3, #20
 80010a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010aa:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80010ae:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80010b2:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80010b6:	b9b3      	cbnz	r3, 80010e6 <HAL_PCD_IRQHandler+0x38e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010bc:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3306      	adds	r3, #6
 80010c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80010c8:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80010cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80010d0:	2d00      	cmp	r5, #0
 80010d2:	f000 80b1 	beq.w	8001238 <HAL_PCD_IRQHandler+0x4e0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80010d6:	462b      	mov	r3, r5
 80010d8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80010dc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80010e0:	f001 fc04 	bl	80028ec <USB_ReadPMA>
 80010e4:	e0a8      	b.n	8001238 <HAL_PCD_IRQHandler+0x4e0>
          if (ep->type == EP_TYPE_BULK)
 80010e6:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010ea:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 80010ee:	2a02      	cmp	r2, #2
 80010f0:	f040 8081 	bne.w	80011f6 <HAL_PCD_IRQHandler+0x49e>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80010f4:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80010f8:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 80010fc:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001100:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001104:	b2ad      	uxth	r5, r5
 8001106:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800110a:	d03b      	beq.n	8001184 <HAL_PCD_IRQHandler+0x42c>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800110c:	44ab      	add	fp, r5
 800110e:	f10b 0b02 	add.w	fp, fp, #2
 8001112:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 8001116:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 800111a:	4295      	cmp	r5, r2
 800111c:	d913      	bls.n	8001146 <HAL_PCD_IRQHandler+0x3ee>
 800111e:	2200      	movs	r2, #0
 8001120:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001124:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001128:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800112c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001130:	0412      	lsls	r2, r2, #16
 8001132:	0c12      	lsrs	r2, r2, #16
 8001134:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800113c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001140:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001144:	e004      	b.n	8001150 <HAL_PCD_IRQHandler+0x3f8>
      ep->xfer_len -= count;
 8001146:	1b52      	subs	r2, r2, r5
 8001148:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800114c:	2a00      	cmp	r2, #0
 800114e:	d0e9      	beq.n	8001124 <HAL_PCD_IRQHandler+0x3cc>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001150:	f1be 0f00 	cmp.w	lr, #0
 8001154:	d00d      	beq.n	8001172 <HAL_PCD_IRQHandler+0x41a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001156:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800115a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800115e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001162:	0412      	lsls	r2, r2, #16
 8001164:	0c12      	lsrs	r2, r2, #16
 8001166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800116a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800116e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8001172:	2d00      	cmp	r5, #0
 8001174:	d060      	beq.n	8001238 <HAL_PCD_IRQHandler+0x4e0>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001176:	2128      	movs	r1, #40	; 0x28
 8001178:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800117c:	462b      	mov	r3, r5
 800117e:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001182:	e7ab      	b.n	80010dc <HAL_PCD_IRQHandler+0x384>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001184:	445d      	add	r5, fp
 8001186:	3506      	adds	r5, #6
 8001188:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 800118c:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8001190:	4295      	cmp	r5, r2
 8001192:	d912      	bls.n	80011ba <HAL_PCD_IRQHandler+0x462>
 8001194:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001198:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800119c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011a4:	0412      	lsls	r2, r2, #16
 80011a6:	0c12      	lsrs	r2, r2, #16
 80011a8:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80011ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011b4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80011b8:	e004      	b.n	80011c4 <HAL_PCD_IRQHandler+0x46c>
      ep->xfer_len -= count;
 80011ba:	1b52      	subs	r2, r2, r5
 80011bc:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	d0e9      	beq.n	8001198 <HAL_PCD_IRQHandler+0x440>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80011c4:	f1be 0f00 	cmp.w	lr, #0
 80011c8:	d10d      	bne.n	80011e6 <HAL_PCD_IRQHandler+0x48e>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80011ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80011ce:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80011d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011d6:	0412      	lsls	r2, r2, #16
 80011d8:	0c12      	lsrs	r2, r2, #16
 80011da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011de:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80011e2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80011e6:	b33d      	cbz	r5, 8001238 <HAL_PCD_IRQHandler+0x4e0>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011e8:	2128      	movs	r1, #40	; 0x28
 80011ea:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011ee:	462b      	mov	r3, r5
 80011f0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80011f4:	e772      	b.n	80010dc <HAL_PCD_IRQHandler+0x384>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80011f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80011fa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80011fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001202:	0412      	lsls	r2, r2, #16
 8001204:	0c12      	lsrs	r2, r2, #16
 8001206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800120a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800120e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001212:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8001216:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001220:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001224:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001226:	d053      	beq.n	80012d0 <HAL_PCD_IRQHandler+0x578>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001228:	3202      	adds	r2, #2
 800122a:	4413      	add	r3, r2
 800122c:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8001230:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8001234:	2d00      	cmp	r5, #0
 8001236:	d1a1      	bne.n	800117c <HAL_PCD_IRQHandler+0x424>
        ep->xfer_count += count;
 8001238:	2128      	movs	r1, #40	; 0x28
 800123a:	4371      	muls	r1, r6
 800123c:	1863      	adds	r3, r4, r1
 800123e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001242:	442a      	add	r2, r5
 8001244:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8001248:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800124c:	442a      	add	r2, r5
 800124e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001252:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001256:	b11a      	cbz	r2, 8001260 <HAL_PCD_IRQHandler+0x508>
 8001258:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800125c:	429d      	cmp	r5, r3
 800125e:	d240      	bcs.n	80012e2 <HAL_PCD_IRQHandler+0x58a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001260:	2328      	movs	r3, #40	; 0x28
 8001262:	fb03 4306 	mla	r3, r3, r6, r4
 8001266:	4620      	mov	r0, r4
 8001268:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800126c:	f002 faa2 	bl	80037b4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001270:	063a      	lsls	r2, r7, #24
 8001272:	f57f ad7e 	bpl.w	8000d72 <HAL_PCD_IRQHandler+0x1a>
 8001276:	2528      	movs	r5, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001278:	6820      	ldr	r0, [r4, #0]
 800127a:	fb05 4506 	mla	r5, r5, r6, r4
 800127e:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8001282:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8001286:	b29b      	uxth	r3, r3
 8001288:	ea03 0309 	and.w	r3, r3, r9
 800128c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001290:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8001294:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8001298:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800129c:	2b02      	cmp	r3, #2
 800129e:	d101      	bne.n	80012a4 <HAL_PCD_IRQHandler+0x54c>
 80012a0:	05fb      	lsls	r3, r7, #23
 80012a2:	d436      	bmi.n	8001312 <HAL_PCD_IRQHandler+0x5ba>
          if (ep->xfer_len > TxByteNbre)
 80012a4:	2528      	movs	r5, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012a6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 80012aa:	fb05 4306 	mla	r3, r5, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012ae:	b292      	uxth	r2, r2
 80012b0:	3202      	adds	r2, #2
 80012b2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80012b6:	f83c c012 	ldrh.w	ip, [ip, r2, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 80012ba:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 80012bc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80012c0:	4567      	cmp	r7, ip
 80012c2:	d815      	bhi.n	80012f0 <HAL_PCD_IRQHandler+0x598>
 80012c4:	2200      	movs	r2, #0
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80012c8:	4620      	mov	r0, r4
 80012ca:	f002 fa7c 	bl	80037c6 <HAL_PCD_DataInStageCallback>
 80012ce:	e550      	b.n	8000d72 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80012d0:	3206      	adds	r2, #6
 80012d2:	4413      	add	r3, r2
 80012d4:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80012d8:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80012dc:	2d00      	cmp	r5, #0
 80012de:	d0ab      	beq.n	8001238 <HAL_PCD_IRQHandler+0x4e0>
 80012e0:	e785      	b.n	80011ee <HAL_PCD_IRQHandler+0x496>
        ep = &hpcd->OUT_ep[epindex];
 80012e2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80012e6:	6820      	ldr	r0, [r4, #0]
 80012e8:	4421      	add	r1, r4
 80012ea:	f001 f8c3 	bl	8002474 <USB_EPStartXfer>
 80012ee:	e7bf      	b.n	8001270 <HAL_PCD_IRQHandler+0x518>
            ep->xfer_len -= TxByteNbre;
 80012f0:	eba7 070c 	sub.w	r7, r7, ip
 80012f4:	641f      	str	r7, [r3, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80012f6:	2f00      	cmp	r7, #0
 80012f8:	d0e6      	beq.n	80012c8 <HAL_PCD_IRQHandler+0x570>
        ep = &hpcd->IN_ep[epindex];
 80012fa:	fb06 5505 	mla	r5, r6, r5, r5
            ep->xfer_buff += TxByteNbre;
 80012fe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8001302:	4461      	add	r1, ip
            ep->xfer_count += TxByteNbre;
 8001304:	4462      	add	r2, ip
            ep->xfer_buff += TxByteNbre;
 8001306:	63d9      	str	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800130a:	1961      	adds	r1, r4, r5
 800130c:	f001 f8b2 	bl	8002474 <USB_EPStartXfer>
 8001310:	e52f      	b.n	8000d72 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001312:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001316:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 800131a:	b292      	uxth	r2, r2
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800131c:	f017 0e40 	ands.w	lr, r7, #64	; 0x40

    if (ep->xfer_len > TxByteNbre)
 8001320:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001322:	4452      	add	r2, sl
 8001324:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001328:	f000 80a7 	beq.w	800147a <HAL_PCD_IRQHandler+0x722>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800132c:	3202      	adds	r2, #2
 800132e:	f83c c012 	ldrh.w	ip, [ip, r2, lsl #1]
 8001332:	2228      	movs	r2, #40	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8001334:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001338:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 800133a:	bf28      	it	cs
 800133c:	2300      	movcs	r3, #0
 800133e:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 8001342:	bf38      	it	cc
 8001344:	eba3 030c 	subcc.w	r3, r3, ip
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800134a:	b2bf      	uxth	r7, r7
 800134c:	b9bb      	cbnz	r3, 800137e <HAL_PCD_IRQHandler+0x626>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800134e:	4620      	mov	r0, r4
 8001350:	f002 fa39 	bl	80037c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001354:	2f00      	cmp	r7, #0
 8001356:	f000 80a7 	beq.w	80014a8 <HAL_PCD_IRQHandler+0x750>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800135a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800135e:	6822      	ldr	r2, [r4, #0]
 8001360:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	0c1b      	lsrs	r3, r3, #16
 8001370:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800137c:	e094      	b.n	80014a8 <HAL_PCD_IRQHandler+0x750>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800137e:	b16f      	cbz	r7, 800139c <HAL_PCD_IRQHandler+0x644>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001380:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	0c1b      	lsrs	r3, r3, #16
 8001390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800139c:	2328      	movs	r3, #40	; 0x28
 800139e:	fb03 4306 	mla	r3, r3, r6, r4
 80013a2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80013a6:	2a01      	cmp	r2, #1
 80013a8:	d17e      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x750>
        ep->xfer_buff += TxByteNbre;
 80013aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80013ac:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 80013b0:	eb02 070c 	add.w	r7, r2, ip
        ep->xfer_count += TxByteNbre;
 80013b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80013b6:	63df      	str	r7, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80013b8:	4462      	add	r2, ip
 80013ba:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80013bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013be:	4596      	cmp	lr, r2
 80013c0:	d329      	bcc.n	8001416 <HAL_PCD_IRQHandler+0x6be>
          ep->xfer_len_db -= len;
 80013c2:	ebae 0e02 	sub.w	lr, lr, r2
 80013c6:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80013ca:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 80013ce:	b293      	uxth	r3, r2
 80013d0:	f1bc 0f00 	cmp.w	ip, #0
 80013d4:	d144      	bne.n	8001460 <HAL_PCD_IRQHandler+0x708>
 80013d6:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 80013da:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 80013de:	fa1f fc8c 	uxth.w	ip, ip
 80013e2:	44f4      	add	ip, lr
 80013e4:	0109      	lsls	r1, r1, #4
 80013e6:	bb1a      	cbnz	r2, 8001430 <HAL_PCD_IRQHandler+0x6d8>
 80013e8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80013ec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80013f0:	0412      	lsls	r2, r2, #16
 80013f2:	0c12      	lsrs	r2, r2, #16
 80013f4:	f82c 2001 	strh.w	r2, [ip, r1]
 80013f8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80013fc:	b292      	uxth	r2, r2
 80013fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001402:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001406:	2128      	movs	r1, #40	; 0x28
 8001408:	fb01 4606 	mla	r6, r1, r6, r4
 800140c:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800140e:	4639      	mov	r1, r7
 8001410:	f001 f81f 	bl	8002452 <USB_WritePMA>
 8001414:	e048      	b.n	80014a8 <HAL_PCD_IRQHandler+0x750>
        else if (ep->xfer_len_db == 0U)
 8001416:	f1be 0f00 	cmp.w	lr, #0
 800141a:	d103      	bne.n	8001424 <HAL_PCD_IRQHandler+0x6cc>
    if (ep->xfer_len > TxByteNbre)
 800141c:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800141e:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
 8001422:	e7d2      	b.n	80013ca <HAL_PCD_IRQHandler+0x672>
          ep->xfer_fill_db = 0U;
 8001424:	2200      	movs	r2, #0
 8001426:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800142a:	649a      	str	r2, [r3, #72]	; 0x48
 800142c:	4672      	mov	r2, lr
 800142e:	e7cc      	b.n	80013ca <HAL_PCD_IRQHandler+0x672>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001430:	2a3e      	cmp	r2, #62	; 0x3e
 8001432:	d80c      	bhi.n	800144e <HAL_PCD_IRQHandler+0x6f6>
 8001434:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8001438:	07d2      	lsls	r2, r2, #31
 800143a:	bf48      	it	mi
 800143c:	f10e 0e01 	addmi.w	lr, lr, #1
 8001440:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8001444:	fa1f fe8e 	uxth.w	lr, lr
 8001448:	f82c e001 	strh.w	lr, [ip, r1]
 800144c:	e7db      	b.n	8001406 <HAL_PCD_IRQHandler+0x6ae>
 800144e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8001452:	06d2      	lsls	r2, r2, #27
 8001454:	bf08      	it	eq
 8001456:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 800145a:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800145e:	e7f1      	b.n	8001444 <HAL_PCD_IRQHandler+0x6ec>
 8001460:	f1bc 0f01 	cmp.w	ip, #1
 8001464:	d1cf      	bne.n	8001406 <HAL_PCD_IRQHandler+0x6ae>
 8001466:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800146a:	0109      	lsls	r1, r1, #4
 800146c:	fa1f fc82 	uxth.w	ip, r2
 8001470:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8001474:	4462      	add	r2, ip
 8001476:	5253      	strh	r3, [r2, r1]
 8001478:	e7c5      	b.n	8001406 <HAL_PCD_IRQHandler+0x6ae>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800147a:	3206      	adds	r2, #6
 800147c:	f83c c012 	ldrh.w	ip, [ip, r2, lsl #1]
 8001480:	2228      	movs	r2, #40	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 8001482:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001486:	459c      	cmp	ip, r3
      ep->xfer_len = 0U;
 8001488:	bf88      	it	hi
 800148a:	4673      	movhi	r3, lr
 800148c:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 8001490:	bf98      	it	ls
 8001492:	eba3 030c 	subls.w	r3, r3, ip
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001498:	b2bf      	uxth	r7, r7
 800149a:	b9c3      	cbnz	r3, 80014ce <HAL_PCD_IRQHandler+0x776>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800149c:	4620      	mov	r0, r4
 800149e:	f002 f992 	bl	80037c6 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80014a2:	2f00      	cmp	r7, #0
 80014a4:	f43f af59 	beq.w	800135a <HAL_PCD_IRQHandler+0x602>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80014a8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80014ac:	6822      	ldr	r2, [r4, #0]
 80014ae:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014bc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80014c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80014cc:	e451      	b.n	8000d72 <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80014ce:	b96f      	cbnz	r7, 80014ec <HAL_PCD_IRQHandler+0x794>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80014d0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80014d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014dc:	041b      	lsls	r3, r3, #16
 80014de:	0c1b      	lsrs	r3, r3, #16
 80014e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80014ec:	2228      	movs	r2, #40	; 0x28
 80014ee:	fb02 4206 	mla	r2, r2, r6, r4
 80014f2:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d1d6      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x750>
        ep->xfer_count += TxByteNbre;
 80014fa:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80014fc:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80014fe:	4463      	add	r3, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001500:	f8d2 e048 	ldr.w	lr, [r2, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001506:	6b93      	ldr	r3, [r2, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8001508:	4467      	add	r7, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 800150a:	459e      	cmp	lr, r3
        ep->xfer_buff += TxByteNbre;
 800150c:	63d7      	str	r7, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800150e:	d322      	bcc.n	8001556 <HAL_PCD_IRQHandler+0x7fe>
          ep->xfer_len_db -= len;
 8001510:	ebae 0e03 	sub.w	lr, lr, r3
 8001514:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001518:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800151c:	fa1f fc83 	uxth.w	ip, r3
 8001520:	2a00      	cmp	r2, #0
 8001522:	d13d      	bne.n	80015a0 <HAL_PCD_IRQHandler+0x848>
 8001524:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001528:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 800152c:	b292      	uxth	r2, r2
 800152e:	4472      	add	r2, lr
 8001530:	0109      	lsls	r1, r1, #4
 8001532:	b9eb      	cbnz	r3, 8001570 <HAL_PCD_IRQHandler+0x818>
 8001534:	5a53      	ldrh	r3, [r2, r1]
 8001536:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800153a:	041b      	lsls	r3, r3, #16
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	5253      	strh	r3, [r2, r1]
 8001540:	5a53      	ldrh	r3, [r2, r1]
 8001542:	b29b      	uxth	r3, r3
 8001544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001548:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800154a:	2128      	movs	r1, #40	; 0x28
 800154c:	fb01 4606 	mla	r6, r1, r6, r4
 8001550:	4663      	mov	r3, ip
 8001552:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8001554:	e75b      	b.n	800140e <HAL_PCD_IRQHandler+0x6b6>
        else if (ep->xfer_len_db == 0U)
 8001556:	f1be 0f00 	cmp.w	lr, #0
 800155a:	d103      	bne.n	8001564 <HAL_PCD_IRQHandler+0x80c>
    if (ep->xfer_len >= TxByteNbre)
 800155c:	4663      	mov	r3, ip
          ep->xfer_fill_db = 0U;
 800155e:	f882 e04c 	strb.w	lr, [r2, #76]	; 0x4c
 8001562:	e7d9      	b.n	8001518 <HAL_PCD_IRQHandler+0x7c0>
          ep->xfer_len_db = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	6493      	str	r3, [r2, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001568:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
 800156c:	4673      	mov	r3, lr
 800156e:	e7d3      	b.n	8001518 <HAL_PCD_IRQHandler+0x7c0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001570:	2b3e      	cmp	r3, #62	; 0x3e
 8001572:	d80c      	bhi.n	800158e <HAL_PCD_IRQHandler+0x836>
 8001574:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8001578:	07db      	lsls	r3, r3, #31
 800157a:	bf48      	it	mi
 800157c:	f10e 0e01 	addmi.w	lr, lr, #1
 8001580:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8001584:	fa1f fe8e 	uxth.w	lr, lr
 8001588:	f822 e001 	strh.w	lr, [r2, r1]
 800158c:	e7dd      	b.n	800154a <HAL_PCD_IRQHandler+0x7f2>
 800158e:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8001592:	06db      	lsls	r3, r3, #27
 8001594:	bf08      	it	eq
 8001596:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 800159a:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800159e:	e7f1      	b.n	8001584 <HAL_PCD_IRQHandler+0x82c>
 80015a0:	2a01      	cmp	r2, #1
 80015a2:	d1d2      	bne.n	800154a <HAL_PCD_IRQHandler+0x7f2>
 80015a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 80015ae:	4413      	add	r3, r2
 80015b0:	010a      	lsls	r2, r1, #4
 80015b2:	f823 c002 	strh.w	ip, [r3, r2]
 80015b6:	e7c8      	b.n	800154a <HAL_PCD_IRQHandler+0x7f2>

080015b8 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80015b8:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	4605      	mov	r5, r0
 80015c0:	f04f 0428 	mov.w	r4, #40	; 0x28
 80015c4:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 80015c8:	d01c      	beq.n	8001604 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 80015ca:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015cc:	fb00 4104 	mla	r1, r0, r4, r4
 80015d0:	4429      	add	r1, r5
    ep->is_in = 1U;
 80015d2:	704e      	strb	r6, [r1, #1]
  ep->maxpacket = ep_mps;
 80015d4:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 80015d6:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015d8:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 80015da:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80015dc:	b102      	cbz	r2, 80015e0 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 80015de:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80015e0:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80015e2:	bf04      	itt	eq
 80015e4:	2300      	moveq	r3, #0
 80015e6:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80015e8:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d012      	beq.n	8001616 <HAL_PCD_EP_Open+0x5e>
 80015f0:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015f2:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80015f4:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015f8:	f000 fd76 	bl	80020e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8001602:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001604:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001606:	4344      	muls	r4, r0
 8001608:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 800160c:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800160e:	4429      	add	r1, r5
    ep->is_in = 0U;
 8001610:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8001614:	e7de      	b.n	80015d4 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8001616:	2002      	movs	r0, #2
 8001618:	e7f3      	b.n	8001602 <HAL_PCD_EP_Open+0x4a>

0800161a <HAL_PCD_EP_Receive>:
{
 800161a:	b570      	push	{r4, r5, r6, lr}
 800161c:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8001620:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 8001622:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8001624:	4369      	muls	r1, r5
 8001626:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001628:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800162c:	4401      	add	r1, r0
  ep->xfer_len = len;
 800162e:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 8001632:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8001636:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800163a:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800163e:	6800      	ldr	r0, [r0, #0]
 8001640:	f000 ff18 	bl	8002474 <USB_EPStartXfer>
}
 8001644:	4630      	mov	r0, r6
 8001646:	bd70      	pop	{r4, r5, r6, pc}

08001648 <HAL_PCD_EP_Transmit>:
{
 8001648:	b570      	push	{r4, r5, r6, lr}
 800164a:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 800164e:	2128      	movs	r1, #40	; 0x28
 8001650:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8001654:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8001656:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 800165a:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800165c:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8001660:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001664:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8001666:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8001668:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800166a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800166e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001672:	6800      	ldr	r0, [r0, #0]
 8001674:	f000 fefe 	bl	8002474 <USB_EPStartXfer>
}
 8001678:	4630      	mov	r0, r6
 800167a:	bd70      	pop	{r4, r5, r6, pc}

0800167c <HAL_PCD_EP_SetStall>:
{
 800167c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800167e:	6843      	ldr	r3, [r0, #4]
 8001680:	f001 0507 	and.w	r5, r1, #7
 8001684:	429d      	cmp	r5, r3
{
 8001686:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001688:	d828      	bhi.n	80016dc <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 800168a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800168e:	f04f 0328 	mov.w	r3, #40	; 0x28
 8001692:	d01a      	beq.n	80016ca <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8001694:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001696:	fb05 3103 	mla	r1, r5, r3, r3
 800169a:	4401      	add	r1, r0
    ep->is_in = 1U;
 800169c:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 800169e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80016a0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80016a2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80016a4:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d019      	beq.n	80016e0 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016ac:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80016ae:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016b2:	f000 fe55 	bl	8002360 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016b6:	b925      	cbnz	r5, 80016c2 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016b8:	6820      	ldr	r0, [r4, #0]
 80016ba:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80016be:	f000 fec6 	bl	800244e <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80016c8:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80016ca:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80016cc:	434b      	muls	r3, r1
 80016ce:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80016d2:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80016d4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80016d6:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 80016da:	e7e0      	b.n	800169e <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80016dc:	2001      	movs	r0, #1
 80016de:	e7f3      	b.n	80016c8 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80016e0:	2002      	movs	r0, #2
 80016e2:	e7f1      	b.n	80016c8 <HAL_PCD_EP_SetStall+0x4c>

080016e4 <HAL_PCD_EP_ClrStall>:
{
 80016e4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016e6:	6843      	ldr	r3, [r0, #4]
 80016e8:	f001 020f 	and.w	r2, r1, #15
 80016ec:	429a      	cmp	r2, r3
{
 80016ee:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016f0:	d825      	bhi.n	800173e <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 80016f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80016f6:	f04f 0328 	mov.w	r3, #40	; 0x28
 80016fa:	f001 0207 	and.w	r2, r1, #7
 80016fe:	d015      	beq.n	800172c <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001700:	fb02 3103 	mla	r1, r2, r3, r3
 8001704:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001706:	2001      	movs	r0, #1
 8001708:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 800170a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800170c:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800170e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8001710:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001714:	2b01      	cmp	r3, #1
 8001716:	d014      	beq.n	8001742 <HAL_PCD_EP_ClrStall+0x5e>
 8001718:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800171a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800171c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001720:	f000 fe3e 	bl	80023a0 <USB_EPClearStall>
  return HAL_OK;
 8001724:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8001726:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 800172a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800172c:	4353      	muls	r3, r2
 800172e:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8001732:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001734:	4403      	add	r3, r0
 8001736:	2000      	movs	r0, #0
 8001738:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800173c:	e7e5      	b.n	800170a <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 800173e:	2001      	movs	r0, #1
 8001740:	e7f3      	b.n	800172a <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8001742:	2002      	movs	r0, #2
 8001744:	e7f1      	b.n	800172a <HAL_PCD_EP_ClrStall+0x46>

08001746 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001746:	b510      	push	{r4, lr}
 8001748:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800174a:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800174e:	bf1b      	ittet	ne
 8001750:	f001 0107 	andne.w	r1, r1, #7
 8001754:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001758:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800175c:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800175e:	bf08      	it	eq
 8001760:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001764:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8001766:	b91a      	cbnz	r2, 8001770 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8001768:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800176a:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800176c:	2000      	movs	r0, #0
 800176e:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8001770:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001772:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8001774:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001776:	e7f9      	b.n	800176c <HAL_PCDEx_PMAConfig+0x26>

08001778 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001778:	2201      	movs	r2, #1
 800177a:	4b01      	ldr	r3, [pc, #4]	; (8001780 <HAL_PWR_EnableBkUpAccess+0x8>)
 800177c:	621a      	str	r2, [r3, #32]
}
 800177e:	4770      	bx	lr
 8001780:	420e0000 	.word	0x420e0000

08001784 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001784:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001786:	f7fe ff9d 	bl	80006c4 <HAL_GetTick>
 800178a:	4605      	mov	r5, r0

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800178c:	4c2f      	ldr	r4, [pc, #188]	; (800184c <HAL_RCC_DeInit+0xc8>)
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	079b      	lsls	r3, r3, #30
 800179a:	d53b      	bpl.n	8001814 <HAL_RCC_DeInit+0x90>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 800179c:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179e:	f241 3688 	movw	r6, #5000	; 0x1388
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80017a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017aa:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80017ac:	f7fe ff8a 	bl	80006c4 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 80017b0:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 80017b2:	4605      	mov	r5, r0
  CLEAR_REG(RCC->CFGR);
 80017b4:	6063      	str	r3, [r4, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80017b6:	6863      	ldr	r3, [r4, #4]
 80017b8:	f013 0f0c 	tst.w	r3, #12
 80017bc:	d132      	bne.n	8001824 <HAL_RCC_DeInit+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_RCC_DeInit+0xcc>)
 80017c0:	4a24      	ldr	r2, [pc, #144]	; (8001854 <HAL_RCC_DeInit+0xd0>)
 80017c2:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_RCC_DeInit+0xd4>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	f7fe ff3a 	bl	8000640 <HAL_InitTick>
 80017cc:	4605      	mov	r5, r0
 80017ce:	2800      	cmp	r0, #0
 80017d0:	d13a      	bne.n	8001848 <HAL_RCC_DeInit+0xc4>
  {
    return HAL_ERROR;
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80017d2:	f7fe ff77 	bl	80006c4 <HAL_GetTick>
 80017d6:	4606      	mov	r6, r0

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017de:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80017e6:	d123      	bne.n	8001830 <HAL_RCC_DeInit+0xac>
      return HAL_TIMEOUT;
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 80017e8:	6063      	str	r3, [r4, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80017ea:	f7fe ff6b 	bl	80006c4 <HAL_GetTick>
 80017ee:	4606      	mov	r6, r0

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017f6:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80017fe:	d11d      	bne.n	800183c <HAL_RCC_DeInit+0xb8>
      return HAL_TIMEOUT;
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001800:	6822      	ldr	r2, [r4, #0]
 8001802:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001806:	6022      	str	r2, [r4, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001808:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800180a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800180e:	6262      	str	r2, [r4, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001810:	60a3      	str	r3, [r4, #8]

  return HAL_OK;
 8001812:	e005      	b.n	8001820 <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001814:	f7fe ff56 	bl	80006c4 <HAL_GetTick>
 8001818:	1b40      	subs	r0, r0, r5
 800181a:	2802      	cmp	r0, #2
 800181c:	d9bb      	bls.n	8001796 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 800181e:	2503      	movs	r5, #3
}
 8001820:	4628      	mov	r0, r5
 8001822:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7fe ff4e 	bl	80006c4 <HAL_GetTick>
 8001828:	1b40      	subs	r0, r0, r5
 800182a:	42b0      	cmp	r0, r6
 800182c:	d9c3      	bls.n	80017b6 <HAL_RCC_DeInit+0x32>
 800182e:	e7f6      	b.n	800181e <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7fe ff48 	bl	80006c4 <HAL_GetTick>
 8001834:	1b80      	subs	r0, r0, r6
 8001836:	2802      	cmp	r0, #2
 8001838:	d9d2      	bls.n	80017e0 <HAL_RCC_DeInit+0x5c>
 800183a:	e7f0      	b.n	800181e <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183c:	f7fe ff42 	bl	80006c4 <HAL_GetTick>
 8001840:	1b80      	subs	r0, r0, r6
 8001842:	2864      	cmp	r0, #100	; 0x64
 8001844:	d9d8      	bls.n	80017f8 <HAL_RCC_DeInit+0x74>
 8001846:	e7ea      	b.n	800181e <HAL_RCC_DeInit+0x9a>
    return HAL_ERROR;
 8001848:	2501      	movs	r5, #1
 800184a:	e7e9      	b.n	8001820 <HAL_RCC_DeInit+0x9c>
 800184c:	40021000 	.word	0x40021000
 8001850:	20000000 	.word	0x20000000
 8001854:	007a1200 	.word	0x007a1200
 8001858:	20000010 	.word	0x20000010

0800185c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800185c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001860:	4605      	mov	r5, r0
 8001862:	b338      	cbz	r0, 80018b4 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001864:	6803      	ldr	r3, [r0, #0]
 8001866:	07db      	lsls	r3, r3, #31
 8001868:	d410      	bmi.n	800188c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186a:	682b      	ldr	r3, [r5, #0]
 800186c:	079f      	lsls	r7, r3, #30
 800186e:	d45e      	bmi.n	800192e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	0719      	lsls	r1, r3, #28
 8001874:	f100 8095 	bmi.w	80019a2 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	682b      	ldr	r3, [r5, #0]
 800187a:	075a      	lsls	r2, r3, #29
 800187c:	f100 80c1 	bmi.w	8001a02 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001880:	69e8      	ldr	r0, [r5, #28]
 8001882:	2800      	cmp	r0, #0
 8001884:	f040 812c 	bne.w	8001ae0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001888:	2000      	movs	r0, #0
 800188a:	e029      	b.n	80018e0 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800188c:	4c90      	ldr	r4, [pc, #576]	; (8001ad0 <HAL_RCC_OscConfig+0x274>)
 800188e:	6863      	ldr	r3, [r4, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b04      	cmp	r3, #4
 8001896:	d007      	beq.n	80018a8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001898:	6863      	ldr	r3, [r4, #4]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d10a      	bne.n	80018b8 <HAL_RCC_OscConfig+0x5c>
 80018a2:	6863      	ldr	r3, [r4, #4]
 80018a4:	03de      	lsls	r6, r3, #15
 80018a6:	d507      	bpl.n	80018b8 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	039c      	lsls	r4, r3, #14
 80018ac:	d5dd      	bpl.n	800186a <HAL_RCC_OscConfig+0xe>
 80018ae:	686b      	ldr	r3, [r5, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1da      	bne.n	800186a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80018b4:	2001      	movs	r0, #1
 80018b6:	e013      	b.n	80018e0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b8:	686b      	ldr	r3, [r5, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d112      	bne.n	80018e6 <HAL_RCC_OscConfig+0x8a>
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018c8:	f7fe fefc 	bl	80006c4 <HAL_GetTick>
 80018cc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	0398      	lsls	r0, r3, #14
 80018d2:	d4ca      	bmi.n	800186a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7fe fef6 	bl	80006c4 <HAL_GetTick>
 80018d8:	1b80      	subs	r0, r0, r6
 80018da:	2864      	cmp	r0, #100	; 0x64
 80018dc:	d9f7      	bls.n	80018ce <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80018de:	2003      	movs	r0, #3
}
 80018e0:	b002      	add	sp, #8
 80018e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e6:	b99b      	cbnz	r3, 8001910 <HAL_RCC_OscConfig+0xb4>
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ee:	6023      	str	r3, [r4, #0]
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018f8:	f7fe fee4 	bl	80006c4 <HAL_GetTick>
 80018fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	0399      	lsls	r1, r3, #14
 8001902:	d5b2      	bpl.n	800186a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7fe fede 	bl	80006c4 <HAL_GetTick>
 8001908:	1b80      	subs	r0, r0, r6
 800190a:	2864      	cmp	r0, #100	; 0x64
 800190c:	d9f7      	bls.n	80018fe <HAL_RCC_OscConfig+0xa2>
 800190e:	e7e6      	b.n	80018de <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	d103      	bne.n	8001920 <HAL_RCC_OscConfig+0xc4>
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6023      	str	r3, [r4, #0]
 800191e:	e7cf      	b.n	80018c0 <HAL_RCC_OscConfig+0x64>
 8001920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001924:	6023      	str	r3, [r4, #0]
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192c:	e7cb      	b.n	80018c6 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192e:	4c68      	ldr	r4, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x274>)
 8001930:	6863      	ldr	r3, [r4, #4]
 8001932:	f013 0f0c 	tst.w	r3, #12
 8001936:	d007      	beq.n	8001948 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001938:	6863      	ldr	r3, [r4, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	d110      	bne.n	8001964 <HAL_RCC_OscConfig+0x108>
 8001942:	6863      	ldr	r3, [r4, #4]
 8001944:	03da      	lsls	r2, r3, #15
 8001946:	d40d      	bmi.n	8001964 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	079b      	lsls	r3, r3, #30
 800194c:	d502      	bpl.n	8001954 <HAL_RCC_OscConfig+0xf8>
 800194e:	692b      	ldr	r3, [r5, #16]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d1af      	bne.n	80018b4 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	696a      	ldr	r2, [r5, #20]
 8001958:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800195c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001960:	6023      	str	r3, [r4, #0]
 8001962:	e785      	b.n	8001870 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001964:	692a      	ldr	r2, [r5, #16]
 8001966:	4b5b      	ldr	r3, [pc, #364]	; (8001ad4 <HAL_RCC_OscConfig+0x278>)
 8001968:	b16a      	cbz	r2, 8001986 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800196e:	f7fe fea9 	bl	80006c4 <HAL_GetTick>
 8001972:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	079f      	lsls	r7, r3, #30
 8001978:	d4ec      	bmi.n	8001954 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197a:	f7fe fea3 	bl	80006c4 <HAL_GetTick>
 800197e:	1b80      	subs	r0, r0, r6
 8001980:	2802      	cmp	r0, #2
 8001982:	d9f7      	bls.n	8001974 <HAL_RCC_OscConfig+0x118>
 8001984:	e7ab      	b.n	80018de <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001986:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001988:	f7fe fe9c 	bl	80006c4 <HAL_GetTick>
 800198c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	0798      	lsls	r0, r3, #30
 8001992:	f57f af6d 	bpl.w	8001870 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001996:	f7fe fe95 	bl	80006c4 <HAL_GetTick>
 800199a:	1b80      	subs	r0, r0, r6
 800199c:	2802      	cmp	r0, #2
 800199e:	d9f6      	bls.n	800198e <HAL_RCC_OscConfig+0x132>
 80019a0:	e79d      	b.n	80018de <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a2:	69aa      	ldr	r2, [r5, #24]
 80019a4:	4e4a      	ldr	r6, [pc, #296]	; (8001ad0 <HAL_RCC_OscConfig+0x274>)
 80019a6:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <HAL_RCC_OscConfig+0x278>)
 80019a8:	b1e2      	cbz	r2, 80019e4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80019aa:	2201      	movs	r2, #1
 80019ac:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80019b0:	f7fe fe88 	bl	80006c4 <HAL_GetTick>
 80019b4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80019b8:	079b      	lsls	r3, r3, #30
 80019ba:	d50d      	bpl.n	80019d8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80019c0:	4b45      	ldr	r3, [pc, #276]	; (8001ad8 <HAL_RCC_OscConfig+0x27c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80019c8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80019ca:	bf00      	nop
  }
  while (Delay --);
 80019cc:	9b01      	ldr	r3, [sp, #4]
 80019ce:	1e5a      	subs	r2, r3, #1
 80019d0:	9201      	str	r2, [sp, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f9      	bne.n	80019ca <HAL_RCC_OscConfig+0x16e>
 80019d6:	e74f      	b.n	8001878 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7fe fe74 	bl	80006c4 <HAL_GetTick>
 80019dc:	1b00      	subs	r0, r0, r4
 80019de:	2802      	cmp	r0, #2
 80019e0:	d9e9      	bls.n	80019b6 <HAL_RCC_OscConfig+0x15a>
 80019e2:	e77c      	b.n	80018de <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80019e4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80019e8:	f7fe fe6c 	bl	80006c4 <HAL_GetTick>
 80019ec:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80019f0:	079f      	lsls	r7, r3, #30
 80019f2:	f57f af41 	bpl.w	8001878 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f6:	f7fe fe65 	bl	80006c4 <HAL_GetTick>
 80019fa:	1b00      	subs	r0, r0, r4
 80019fc:	2802      	cmp	r0, #2
 80019fe:	d9f6      	bls.n	80019ee <HAL_RCC_OscConfig+0x192>
 8001a00:	e76d      	b.n	80018de <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a02:	4c33      	ldr	r4, [pc, #204]	; (8001ad0 <HAL_RCC_OscConfig+0x274>)
 8001a04:	69e3      	ldr	r3, [r4, #28]
 8001a06:	00d8      	lsls	r0, r3, #3
 8001a08:	d424      	bmi.n	8001a54 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001a0a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0c:	69e3      	ldr	r3, [r4, #28]
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a12:	61e3      	str	r3, [r4, #28]
 8001a14:	69e3      	ldr	r3, [r4, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4e2f      	ldr	r6, [pc, #188]	; (8001adc <HAL_RCC_OscConfig+0x280>)
 8001a20:	6833      	ldr	r3, [r6, #0]
 8001a22:	05d9      	lsls	r1, r3, #23
 8001a24:	d518      	bpl.n	8001a58 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a26:	68eb      	ldr	r3, [r5, #12]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d126      	bne.n	8001a7a <HAL_RCC_OscConfig+0x21e>
 8001a2c:	6a23      	ldr	r3, [r4, #32]
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a34:	f7fe fe46 	bl	80006c4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a3c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	6a23      	ldr	r3, [r4, #32]
 8001a40:	079b      	lsls	r3, r3, #30
 8001a42:	d53f      	bpl.n	8001ac4 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001a44:	2f00      	cmp	r7, #0
 8001a46:	f43f af1b 	beq.w	8001880 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4a:	69e3      	ldr	r3, [r4, #28]
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	61e3      	str	r3, [r4, #28]
 8001a52:	e715      	b.n	8001880 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001a54:	2700      	movs	r7, #0
 8001a56:	e7e2      	b.n	8001a1e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a58:	6833      	ldr	r3, [r6, #0]
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a60:	f7fe fe30 	bl	80006c4 <HAL_GetTick>
 8001a64:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a66:	6833      	ldr	r3, [r6, #0]
 8001a68:	05da      	lsls	r2, r3, #23
 8001a6a:	d4dc      	bmi.n	8001a26 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6c:	f7fe fe2a 	bl	80006c4 <HAL_GetTick>
 8001a70:	eba0 0008 	sub.w	r0, r0, r8
 8001a74:	2864      	cmp	r0, #100	; 0x64
 8001a76:	d9f6      	bls.n	8001a66 <HAL_RCC_OscConfig+0x20a>
 8001a78:	e731      	b.n	80018de <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7a:	b9ab      	cbnz	r3, 8001aa8 <HAL_RCC_OscConfig+0x24c>
 8001a7c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	6223      	str	r3, [r4, #32]
 8001a88:	6a23      	ldr	r3, [r4, #32]
 8001a8a:	f023 0304 	bic.w	r3, r3, #4
 8001a8e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a90:	f7fe fe18 	bl	80006c4 <HAL_GetTick>
 8001a94:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	6a23      	ldr	r3, [r4, #32]
 8001a98:	0798      	lsls	r0, r3, #30
 8001a9a:	d5d3      	bpl.n	8001a44 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7fe fe12 	bl	80006c4 <HAL_GetTick>
 8001aa0:	1b80      	subs	r0, r0, r6
 8001aa2:	4540      	cmp	r0, r8
 8001aa4:	d9f7      	bls.n	8001a96 <HAL_RCC_OscConfig+0x23a>
 8001aa6:	e71a      	b.n	80018de <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	6a23      	ldr	r3, [r4, #32]
 8001aac:	d103      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x25a>
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6223      	str	r3, [r4, #32]
 8001ab4:	e7ba      	b.n	8001a2c <HAL_RCC_OscConfig+0x1d0>
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6223      	str	r3, [r4, #32]
 8001abc:	6a23      	ldr	r3, [r4, #32]
 8001abe:	f023 0304 	bic.w	r3, r3, #4
 8001ac2:	e7b6      	b.n	8001a32 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7fe fdfe 	bl	80006c4 <HAL_GetTick>
 8001ac8:	1b80      	subs	r0, r0, r6
 8001aca:	4540      	cmp	r0, r8
 8001acc:	d9b7      	bls.n	8001a3e <HAL_RCC_OscConfig+0x1e2>
 8001ace:	e706      	b.n	80018de <HAL_RCC_OscConfig+0x82>
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	42420000 	.word	0x42420000
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae0:	4c2a      	ldr	r4, [pc, #168]	; (8001b8c <HAL_RCC_OscConfig+0x330>)
 8001ae2:	6863      	ldr	r3, [r4, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d03e      	beq.n	8001b6a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aec:	2200      	movs	r2, #0
 8001aee:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_RCC_OscConfig+0x334>)
 8001af0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001af2:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af4:	d12c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001af6:	f7fe fde5 	bl	80006c4 <HAL_GetTick>
 8001afa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	0199      	lsls	r1, r3, #6
 8001b00:	d420      	bmi.n	8001b44 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b02:	6a2b      	ldr	r3, [r5, #32]
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d105      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b0a:	6862      	ldr	r2, [r4, #4]
 8001b0c:	68a9      	ldr	r1, [r5, #8]
 8001b0e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b12:	430a      	orrs	r2, r1
 8001b14:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b16:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001b18:	6862      	ldr	r2, [r4, #4]
 8001b1a:	430b      	orrs	r3, r1
 8001b1c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001b20:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001b22:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b24:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_RCC_OscConfig+0x334>)
 8001b28:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001b2a:	f7fe fdcb 	bl	80006c4 <HAL_GetTick>
 8001b2e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	019a      	lsls	r2, r3, #6
 8001b34:	f53f aea8 	bmi.w	8001888 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7fe fdc4 	bl	80006c4 <HAL_GetTick>
 8001b3c:	1b40      	subs	r0, r0, r5
 8001b3e:	2802      	cmp	r0, #2
 8001b40:	d9f6      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2d4>
 8001b42:	e6cc      	b.n	80018de <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7fe fdbe 	bl	80006c4 <HAL_GetTick>
 8001b48:	1b80      	subs	r0, r0, r6
 8001b4a:	2802      	cmp	r0, #2
 8001b4c:	d9d6      	bls.n	8001afc <HAL_RCC_OscConfig+0x2a0>
 8001b4e:	e6c6      	b.n	80018de <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001b50:	f7fe fdb8 	bl	80006c4 <HAL_GetTick>
 8001b54:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	019b      	lsls	r3, r3, #6
 8001b5a:	f57f ae95 	bpl.w	8001888 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7fe fdb1 	bl	80006c4 <HAL_GetTick>
 8001b62:	1b40      	subs	r0, r0, r5
 8001b64:	2802      	cmp	r0, #2
 8001b66:	d9f6      	bls.n	8001b56 <HAL_RCC_OscConfig+0x2fa>
 8001b68:	e6b9      	b.n	80018de <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6a:	2801      	cmp	r0, #1
 8001b6c:	f43f aeb8 	beq.w	80018e0 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001b70:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	6a2a      	ldr	r2, [r5, #32]
 8001b74:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001b78:	4291      	cmp	r1, r2
 8001b7a:	f47f ae9b 	bne.w	80018b4 <HAL_RCC_OscConfig+0x58>
 8001b7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b84:	4293      	cmp	r3, r2
 8001b86:	f43f ae7f 	beq.w	8001888 <HAL_RCC_OscConfig+0x2c>
 8001b8a:	e693      	b.n	80018b4 <HAL_RCC_OscConfig+0x58>
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	42420000 	.word	0x42420000

08001b94 <HAL_RCC_GetSysClockFreq>:
{
 8001b94:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001b98:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b9a:	ac02      	add	r4, sp, #8
 8001b9c:	f103 0510 	add.w	r5, r3, #16
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	3308      	adds	r3, #8
 8001ba8:	c203      	stmia	r2!, {r0, r1}
 8001baa:	42ab      	cmp	r3, r5
 8001bac:	4614      	mov	r4, r2
 8001bae:	d1f7      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bb0:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001bb4:	4911      	ldr	r1, [pc, #68]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bb6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001bba:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001bbc:	f003 020c 	and.w	r2, r3, #12
 8001bc0:	2a08      	cmp	r2, #8
 8001bc2:	d117      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bc4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001bc8:	3218      	adds	r2, #24
 8001bca:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bcc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bce:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bd2:	d50c      	bpl.n	8001bee <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bd4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bd8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bdc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bde:	3318      	adds	r3, #24
 8001be0:	446b      	add	r3, sp
 8001be2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001be6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001bea:	b007      	add	sp, #28
 8001bec:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x70>)
 8001bf0:	4358      	muls	r0, r3
 8001bf2:	e7fa      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001bf6:	e7f8      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x56>
 8001bf8:	080039e4 	.word	0x080039e4
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	007a1200 	.word	0x007a1200
 8001c04:	003d0900 	.word	0x003d0900

08001c08 <HAL_RCC_ClockConfig>:
{
 8001c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001c0e:	4604      	mov	r4, r0
 8001c10:	b910      	cbnz	r0, 8001c18 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c12:	2001      	movs	r0, #1
}
 8001c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4a44      	ldr	r2, [pc, #272]	; (8001d2c <HAL_RCC_ClockConfig+0x124>)
 8001c1a:	6813      	ldr	r3, [r2, #0]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	428b      	cmp	r3, r1
 8001c22:	d328      	bcc.n	8001c76 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	6821      	ldr	r1, [r4, #0]
 8001c26:	078e      	lsls	r6, r1, #30
 8001c28:	d430      	bmi.n	8001c8c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	07ca      	lsls	r2, r1, #31
 8001c2c:	d443      	bmi.n	8001cb6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2e:	4a3f      	ldr	r2, [pc, #252]	; (8001d2c <HAL_RCC_ClockConfig+0x124>)
 8001c30:	6813      	ldr	r3, [r2, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	42ab      	cmp	r3, r5
 8001c38:	d865      	bhi.n	8001d06 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3a:	6822      	ldr	r2, [r4, #0]
 8001c3c:	4d3c      	ldr	r5, [pc, #240]	; (8001d30 <HAL_RCC_ClockConfig+0x128>)
 8001c3e:	f012 0f04 	tst.w	r2, #4
 8001c42:	d16c      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c44:	0713      	lsls	r3, r2, #28
 8001c46:	d506      	bpl.n	8001c56 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c48:	686b      	ldr	r3, [r5, #4]
 8001c4a:	6922      	ldr	r2, [r4, #16]
 8001c4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c54:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c56:	f7ff ff9d 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001c5a:	686b      	ldr	r3, [r5, #4]
 8001c5c:	4a35      	ldr	r2, [pc, #212]	; (8001d34 <HAL_RCC_ClockConfig+0x12c>)
 8001c5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	40d8      	lsrs	r0, r3
 8001c66:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <HAL_RCC_ClockConfig+0x130>)
 8001c68:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <HAL_RCC_ClockConfig+0x134>)
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	f7fe fce7 	bl	8000640 <HAL_InitTick>
  return HAL_OK;
 8001c72:	2000      	movs	r0, #0
 8001c74:	e7ce      	b.n	8001c14 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	6813      	ldr	r3, [r2, #0]
 8001c78:	f023 0307 	bic.w	r3, r3, #7
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c80:	6813      	ldr	r3, [r2, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	428b      	cmp	r3, r1
 8001c88:	d1c3      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xa>
 8001c8a:	e7cb      	b.n	8001c24 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_RCC_ClockConfig+0x128>)
 8001c8e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c92:	bf1e      	ittt	ne
 8001c94:	685a      	ldrne	r2, [r3, #4]
 8001c96:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001c9a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c9e:	bf42      	ittt	mi
 8001ca0:	685a      	ldrmi	r2, [r3, #4]
 8001ca2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001ca6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	68a0      	ldr	r0, [r4, #8]
 8001cac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cb0:	4302      	orrs	r2, r0
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	e7b9      	b.n	8001c2a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	6862      	ldr	r2, [r4, #4]
 8001cb8:	4e1d      	ldr	r6, [pc, #116]	; (8001d30 <HAL_RCC_ClockConfig+0x128>)
 8001cba:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cbe:	d11a      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	d0a5      	beq.n	8001c12 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ccc:	f023 0303 	bic.w	r3, r3, #3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001cd4:	f7fe fcf6 	bl	80006c4 <HAL_GetTick>
 8001cd8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	6873      	ldr	r3, [r6, #4]
 8001cdc:	6862      	ldr	r2, [r4, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ce6:	d0a2      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7fe fcec 	bl	80006c4 <HAL_GetTick>
 8001cec:	1bc0      	subs	r0, r0, r7
 8001cee:	4540      	cmp	r0, r8
 8001cf0:	d9f3      	bls.n	8001cda <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	e78e      	b.n	8001c14 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	2a02      	cmp	r2, #2
 8001cf8:	d102      	bne.n	8001d00 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001cfe:	e7e1      	b.n	8001cc4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	f013 0f02 	tst.w	r3, #2
 8001d04:	e7de      	b.n	8001cc4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	6813      	ldr	r3, [r2, #0]
 8001d08:	f023 0307 	bic.w	r3, r3, #7
 8001d0c:	432b      	orrs	r3, r5
 8001d0e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d10:	6813      	ldr	r3, [r2, #0]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	42ab      	cmp	r3, r5
 8001d18:	f47f af7b 	bne.w	8001c12 <HAL_RCC_ClockConfig+0xa>
 8001d1c:	e78d      	b.n	8001c3a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1e:	686b      	ldr	r3, [r5, #4]
 8001d20:	68e1      	ldr	r1, [r4, #12]
 8001d22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d26:	430b      	orrs	r3, r1
 8001d28:	606b      	str	r3, [r5, #4]
 8001d2a:	e78b      	b.n	8001c44 <HAL_RCC_ClockConfig+0x3c>
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	080039cc 	.word	0x080039cc
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000010 	.word	0x20000010

08001d40 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001d4a:	5cd3      	ldrb	r3, [r2, r3]
 8001d4c:	4a03      	ldr	r2, [pc, #12]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d4e:	6810      	ldr	r0, [r2, #0]
}
 8001d50:	40d8      	lsrs	r0, r3
 8001d52:	4770      	bx	lr
 8001d54:	40021000 	.word	0x40021000
 8001d58:	080039dc 	.word	0x080039dc
 8001d5c:	20000000 	.word	0x20000000

08001d60 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d60:	6803      	ldr	r3, [r0, #0]
{
 8001d62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d66:	07d9      	lsls	r1, r3, #31
{
 8001d68:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d6a:	d520      	bpl.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6c:	4c36      	ldr	r4, [pc, #216]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001d6e:	69e3      	ldr	r3, [r4, #28]
 8001d70:	00da      	lsls	r2, r3, #3
 8001d72:	d432      	bmi.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001d74:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	69e3      	ldr	r3, [r4, #28]
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	61e3      	str	r3, [r4, #28]
 8001d7e:	69e3      	ldr	r3, [r4, #28]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4f30      	ldr	r7, [pc, #192]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	05db      	lsls	r3, r3, #23
 8001d8e:	d526      	bpl.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d90:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d92:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d96:	d136      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d98:	6a23      	ldr	r3, [r4, #32]
 8001d9a:	686a      	ldr	r2, [r5, #4]
 8001d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da0:	4313      	orrs	r3, r2
 8001da2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001da4:	b11e      	cbz	r6, 8001dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da6:	69e3      	ldr	r3, [r4, #28]
 8001da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dac:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001dae:	6828      	ldr	r0, [r5, #0]
 8001db0:	0783      	lsls	r3, r0, #30
 8001db2:	d506      	bpl.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001db4:	4924      	ldr	r1, [pc, #144]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001db6:	68ab      	ldr	r3, [r5, #8]
 8001db8:	684a      	ldr	r2, [r1, #4]
 8001dba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dc2:	f010 0010 	ands.w	r0, r0, #16
 8001dc6:	d01b      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001dca:	68e9      	ldr	r1, [r5, #12]
 8001dcc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001dce:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	6053      	str	r3, [r2, #4]
 8001dd8:	e012      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001dda:	2600      	movs	r6, #0
 8001ddc:	e7d4      	b.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001de6:	f7fe fc6d 	bl	80006c4 <HAL_GetTick>
 8001dea:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	05d8      	lsls	r0, r3, #23
 8001df0:	d4ce      	bmi.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df2:	f7fe fc67 	bl	80006c4 <HAL_GetTick>
 8001df6:	eba0 0008 	sub.w	r0, r0, r8
 8001dfa:	2864      	cmp	r0, #100	; 0x64
 8001dfc:	d9f6      	bls.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001dfe:	2003      	movs	r0, #3
}
 8001e00:	b002      	add	sp, #8
 8001e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e06:	686a      	ldr	r2, [r5, #4]
 8001e08:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d0c3      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e10:	2001      	movs	r0, #1
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e14:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e16:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e1a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e20:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8001e24:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e26:	07d9      	lsls	r1, r3, #31
 8001e28:	d5b6      	bpl.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001e2a:	f7fe fc4b 	bl	80006c4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001e32:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	6a23      	ldr	r3, [r4, #32]
 8001e36:	079a      	lsls	r2, r3, #30
 8001e38:	d4ae      	bmi.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7fe fc43 	bl	80006c4 <HAL_GetTick>
 8001e3e:	1bc0      	subs	r0, r0, r7
 8001e40:	4540      	cmp	r0, r8
 8001e42:	d9f7      	bls.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e44:	e7db      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	42420000 	.word	0x42420000

08001e54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001e54:	4602      	mov	r2, r0
 8001e56:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 8001e5a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e5c:	ad02      	add	r5, sp, #8
 8001e5e:	f103 0610 	add.w	r6, r3, #16
 8001e62:	462c      	mov	r4, r5
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	3308      	adds	r3, #8
 8001e6a:	c403      	stmia	r4!, {r0, r1}
 8001e6c:	42b3      	cmp	r3, r6
 8001e6e:	4625      	mov	r5, r4
 8001e70:	d1f7      	bne.n	8001e62 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e72:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001e76:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e78:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8001e7c:	d047      	beq.n	8001f0e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8001e7e:	2a10      	cmp	r2, #16
 8001e80:	d003      	beq.n	8001e8a <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8001e82:	2a01      	cmp	r2, #1
 8001e84:	d024      	beq.n	8001ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8001e86:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8001e88:	e036      	b.n	8001ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 8001e8a:	4a28      	ldr	r2, [pc, #160]	; (8001f2c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8001e8c:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001e8e:	6810      	ldr	r0, [r2, #0]
 8001e90:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001e94:	d030      	beq.n	8001ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e96:	f3c1 4383 	ubfx	r3, r1, #18, #4
 8001e9a:	3318      	adds	r3, #24
 8001e9c:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e9e:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ea0:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ea4:	bf49      	itett	mi
 8001ea6:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ea8:	4b21      	ldrpl	r3, [pc, #132]	; (8001f30 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eaa:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 8001eae:	3318      	addmi	r3, #24
 8001eb0:	bf41      	itttt	mi
 8001eb2:	446b      	addmi	r3, sp
 8001eb4:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001eb8:	4b1e      	ldrmi	r3, [pc, #120]	; (8001f34 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001eba:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ebe:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001ec0:	6853      	ldr	r3, [r2, #4]
 8001ec2:	025b      	lsls	r3, r3, #9
 8001ec4:	d418      	bmi.n	8001ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001eca:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001ece:	e013      	b.n	8001ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001ed0:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001ed4:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8001ed6:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001ed8:	4019      	ands	r1, r3
 8001eda:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001ede:	d01f      	beq.n	8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee8:	d108      	bne.n	8001efc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 8001eea:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001eee:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001ef0:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8001ef4:	bf18      	it	ne
 8001ef6:	4618      	movne	r0, r3
}
 8001ef8:	b006      	add	sp, #24
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f00:	d1c1      	bne.n	8001e86 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 8001f02:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001f04:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001f08:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8001f0c:	e7f2      	b.n	8001ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001f0e:	f7ff ff17 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	e7d4      	b.n	8001eca <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 8001f20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f24:	e7e8      	b.n	8001ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8001f26:	bf00      	nop
 8001f28:	080039e4 	.word	0x080039e4
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	003d0900 	.word	0x003d0900
 8001f34:	007a1200 	.word	0x007a1200

08001f38 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001f38:	b538      	push	{r3, r4, r5, lr}
 8001f3a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8001f3c:	f7fe fbc2 	bl	80006c4 <HAL_GetTick>
 8001f40:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	0692      	lsls	r2, r2, #26
 8001f48:	d505      	bpl.n	8001f56 <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 8001f4a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	f042 0210 	orr.w	r2, r2, #16
 8001f52:	605a      	str	r2, [r3, #4]
}
 8001f54:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001f56:	f7fe fbb5 	bl	80006c4 <HAL_GetTick>
 8001f5a:	1b40      	subs	r0, r0, r5
 8001f5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f60:	d9ef      	bls.n	8001f42 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8001f62:	2003      	movs	r0, #3
 8001f64:	e7f6      	b.n	8001f54 <RTC_EnterInitMode+0x1c>

08001f66 <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f66:	6802      	ldr	r2, [r0, #0]
{
 8001f68:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f6a:	6853      	ldr	r3, [r2, #4]
{
 8001f6c:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f6e:	f023 0310 	bic.w	r3, r3, #16
 8001f72:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 8001f74:	f7fe fba6 	bl	80006c4 <HAL_GetTick>
 8001f78:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	069b      	lsls	r3, r3, #26
 8001f80:	d501      	bpl.n	8001f86 <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001f82:	2000      	movs	r0, #0
}
 8001f84:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001f86:	f7fe fb9d 	bl	80006c4 <HAL_GetTick>
 8001f8a:	1b40      	subs	r0, r0, r5
 8001f8c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f90:	d9f3      	bls.n	8001f7a <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8001f92:	2003      	movs	r0, #3
 8001f94:	e7f6      	b.n	8001f84 <RTC_ExitInitMode+0x1e>

08001f96 <HAL_RTC_WaitForSynchro>:
{
 8001f96:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8001f98:	4604      	mov	r4, r0
 8001f9a:	b1a8      	cbz	r0, 8001fc8 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001f9c:	6802      	ldr	r2, [r0, #0]
 8001f9e:	6853      	ldr	r3, [r2, #4]
 8001fa0:	f023 0308 	bic.w	r3, r3, #8
 8001fa4:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001fa6:	f7fe fb8d 	bl	80006c4 <HAL_GetTick>
 8001faa:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	071b      	lsls	r3, r3, #28
 8001fb2:	d501      	bpl.n	8001fb8 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8001fb4:	2000      	movs	r0, #0
}
 8001fb6:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001fb8:	f7fe fb84 	bl	80006c4 <HAL_GetTick>
 8001fbc:	1b40      	subs	r0, r0, r5
 8001fbe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fc2:	d9f3      	bls.n	8001fac <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	e7f6      	b.n	8001fb6 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8001fc8:	2001      	movs	r0, #1
 8001fca:	e7f4      	b.n	8001fb6 <HAL_RTC_WaitForSynchro+0x20>

08001fcc <HAL_RTC_Init>:
{
 8001fcc:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8001fce:	4604      	mov	r4, r0
 8001fd0:	b170      	cbz	r0, 8001ff0 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001fd2:	7c43      	ldrb	r3, [r0, #17]
 8001fd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fd8:	b913      	cbnz	r3, 8001fe0 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001fda:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001fdc:	f7fe faca 	bl	8000574 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fe0:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001fe2:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fe4:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001fe6:	f7ff ffd6 	bl	8001f96 <HAL_RTC_WaitForSynchro>
 8001fea:	b118      	cbz	r0, 8001ff4 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001fec:	2304      	movs	r3, #4
 8001fee:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	e036      	b.n	8002062 <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff ff9f 	bl	8001f38 <RTC_EnterInitMode>
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d1f6      	bne.n	8001fec <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001ffe:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002000:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002002:	6853      	ldr	r3, [r2, #4]
 8002004:	f023 0307 	bic.w	r3, r3, #7
 8002008:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800200a:	4a16      	ldr	r2, [pc, #88]	; (8002064 <HAL_RTC_Init+0x98>)
 800200c:	b118      	cbz	r0, 8002016 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800200e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002010:	f021 0101 	bic.w	r1, r1, #1
 8002014:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002016:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002018:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800201c:	4303      	orrs	r3, r0
 800201e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002020:	6860      	ldr	r0, [r4, #4]
 8002022:	1c43      	adds	r3, r0, #1
 8002024:	d105      	bne.n	8002032 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002026:	2001      	movs	r0, #1
 8002028:	f7ff ff14 	bl	8001e54 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 800202c:	2800      	cmp	r0, #0
 800202e:	d0dd      	beq.n	8001fec <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8002030:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002032:	6822      	ldr	r2, [r4, #0]
 8002034:	6893      	ldr	r3, [r2, #8]
 8002036:	f023 030f 	bic.w	r3, r3, #15
 800203a:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800203e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002040:	68d3      	ldr	r3, [r2, #12]
 8002042:	b280      	uxth	r0, r0
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	4318      	orrs	r0, r3
 800204a:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800204c:	4620      	mov	r0, r4
 800204e:	f7ff ff8a 	bl	8001f66 <RTC_ExitInitMode>
 8002052:	2301      	movs	r3, #1
 8002054:	b110      	cbz	r0, 800205c <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002056:	2204      	movs	r2, #4
 8002058:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 800205a:	e7c9      	b.n	8001ff0 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800205c:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800205e:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8002060:	7463      	strb	r3, [r4, #17]
}
 8002062:	bd10      	pop	{r4, pc}
 8002064:	40006c00 	.word	0x40006c00

08002068 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 8002068:	0089      	lsls	r1, r1, #2
 800206a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800206e:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8002072:	b292      	uxth	r2, r2
 8002074:	600a      	str	r2, [r1, #0]
}
 8002076:	4770      	bx	lr

08002078 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 8002078:	0089      	lsls	r1, r1, #2
 800207a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800207e:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8002082:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 8002084:	b280      	uxth	r0, r0
 8002086:	4770      	bx	lr

08002088 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002088:	b084      	sub	sp, #16
 800208a:	a801      	add	r0, sp, #4
 800208c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002090:	b004      	add	sp, #16
 8002092:	2000      	movs	r0, #0
 8002094:	4770      	bx	lr

08002096 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002096:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002098:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800209c:	2000      	movs	r0, #0
 800209e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80020a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80020a6:	4770      	bx	lr

080020a8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80020a8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80020ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020b0:	045b      	lsls	r3, r3, #17
 80020b2:	0c5b      	lsrs	r3, r3, #17
 80020b4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80020b8:	2000      	movs	r0, #0
 80020ba:	4770      	bx	lr

080020bc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80020bc:	2000      	movs	r0, #0
 80020be:	4770      	bx	lr

080020c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80020c0:	b084      	sub	sp, #16
 80020c2:	b510      	push	{r4, lr}
 80020c4:	4604      	mov	r4, r0
 80020c6:	a803      	add	r0, sp, #12
 80020c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80020cc:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 80020d4:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80020d8:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80020dc:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80020e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020e4:	b004      	add	sp, #16
 80020e6:	4770      	bx	lr

080020e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80020ea:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80020ec:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80020ee:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 80020f2:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80020f4:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80020f8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80020fc:	0424      	lsls	r4, r4, #16
 80020fe:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8002100:	2d03      	cmp	r5, #3
 8002102:	d848      	bhi.n	8002196 <USB_ActivateEndpoint+0xae>
 8002104:	e8df f005 	tbb	[pc, r5]
 8002108:	40424402 	.word	0x40424402
  HAL_StatusTypeDef ret = HAL_OK;
 800210c:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800210e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002112:	f248 0680 	movw	r6, #32896	; 0x8080
 8002116:	4334      	orrs	r4, r6
 8002118:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800211c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002120:	4f8c      	ldr	r7, [pc, #560]	; (8002354 <USB_ActivateEndpoint+0x26c>)
 8002122:	b2a4      	uxth	r4, r4
 8002124:	403c      	ands	r4, r7
 8002126:	4314      	orrs	r4, r2
 8002128:	4334      	orrs	r4, r6
 800212a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800212e:	7b0c      	ldrb	r4, [r1, #12]
 8002130:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8002134:	2c00      	cmp	r4, #0
 8002136:	d17b      	bne.n	8002230 <USB_ActivateEndpoint+0x148>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002138:	88ce      	ldrh	r6, [r1, #6]
    if (ep->is_in != 0U)
 800213a:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800213c:	0876      	lsrs	r6, r6, #1
 800213e:	0076      	lsls	r6, r6, #1
    if (ep->is_in != 0U)
 8002140:	b35c      	cbz	r4, 800219a <USB_ActivateEndpoint+0xb2>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002142:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002146:	b2a4      	uxth	r4, r4
 8002148:	4464      	add	r4, ip
 800214a:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800214e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002152:	064e      	lsls	r6, r1, #25
 8002154:	d509      	bpl.n	800216a <USB_ActivateEndpoint+0x82>
 8002156:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800215a:	b289      	uxth	r1, r1
 800215c:	4039      	ands	r1, r7
 800215e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002162:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8002166:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800216a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800216e:	4c7a      	ldr	r4, [pc, #488]	; (8002358 <USB_ActivateEndpoint+0x270>)
 8002170:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8002172:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002174:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8002178:	d001      	beq.n	800217e <USB_ActivateEndpoint+0x96>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800217a:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800217e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002182:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002186:	e0a9      	b.n	80022dc <USB_ActivateEndpoint+0x1f4>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002188:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800218c:	2000      	movs	r0, #0
      break;
 800218e:	e7c0      	b.n	8002112 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002190:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8002194:	e7fa      	b.n	800218c <USB_ActivateEndpoint+0xa4>
  switch (ep->type)
 8002196:	2001      	movs	r0, #1
 8002198:	e7bb      	b.n	8002112 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800219a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800219e:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80021a0:	b2a4      	uxth	r4, r4
 80021a2:	4464      	add	r4, ip
 80021a4:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80021a8:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80021ac:	b2a4      	uxth	r4, r4
 80021ae:	4464      	add	r4, ip
 80021b0:	bb6d      	cbnz	r5, 800220e <USB_ActivateEndpoint+0x126>
 80021b2:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 80021b6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80021ba:	0409      	lsls	r1, r1, #16
 80021bc:	0c09      	lsrs	r1, r1, #16
 80021be:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
 80021c2:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 80021c6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80021ca:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80021ce:	b289      	uxth	r1, r1
 80021d0:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80021d4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80021d8:	044f      	lsls	r7, r1, #17
 80021da:	d50d      	bpl.n	80021f8 <USB_ActivateEndpoint+0x110>
 80021dc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80021e0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80021e4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80021e8:	0409      	lsls	r1, r1, #16
 80021ea:	0c09      	lsrs	r1, r1, #16
 80021ec:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80021f0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80021f4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80021f8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80021fc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8002200:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002204:	0409      	lsls	r1, r1, #16
 8002206:	0c09      	lsrs	r1, r1, #16
 8002208:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800220c:	e7b7      	b.n	800217e <USB_ActivateEndpoint+0x96>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800220e:	2d3e      	cmp	r5, #62	; 0x3e
 8002210:	d805      	bhi.n	800221e <USB_ActivateEndpoint+0x136>
 8002212:	0869      	lsrs	r1, r5, #1
 8002214:	07ed      	lsls	r5, r5, #31
 8002216:	bf48      	it	mi
 8002218:	3101      	addmi	r1, #1
 800221a:	0289      	lsls	r1, r1, #10
 800221c:	e7d7      	b.n	80021ce <USB_ActivateEndpoint+0xe6>
 800221e:	096e      	lsrs	r6, r5, #5
 8002220:	06e9      	lsls	r1, r5, #27
 8002222:	494e      	ldr	r1, [pc, #312]	; (800235c <USB_ActivateEndpoint+0x274>)
 8002224:	bf08      	it	eq
 8002226:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800222a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800222e:	e7ce      	b.n	80021ce <USB_ActivateEndpoint+0xe6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002230:	f833 6022 	ldrh.w	r6, [r3, r2, lsl #2]
 8002234:	b2b6      	uxth	r6, r6
 8002236:	403e      	ands	r6, r7
 8002238:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
 800223c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8002240:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002244:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002248:	890e      	ldrh	r6, [r1, #8]
 800224a:	b2a4      	uxth	r4, r4
 800224c:	0876      	lsrs	r6, r6, #1
 800224e:	4464      	add	r4, ip
 8002250:	0076      	lsls	r6, r6, #1
 8002252:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 8002256:	894e      	ldrh	r6, [r1, #10]
 8002258:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800225c:	0876      	lsrs	r6, r6, #1
 800225e:	b2a4      	uxth	r4, r4
 8002260:	4464      	add	r4, ip
 8002262:	0076      	lsls	r6, r6, #1
 8002264:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 8002268:	7849      	ldrb	r1, [r1, #1]
 800226a:	bbd1      	cbnz	r1, 80022e2 <USB_ActivateEndpoint+0x1fa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800226c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002270:	044e      	lsls	r6, r1, #17
 8002272:	d509      	bpl.n	8002288 <USB_ActivateEndpoint+0x1a0>
 8002274:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002278:	b289      	uxth	r1, r1
 800227a:	4039      	ands	r1, r7
 800227c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8002280:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002284:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002288:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800228c:	064d      	lsls	r5, r1, #25
 800228e:	d50d      	bpl.n	80022ac <USB_ActivateEndpoint+0x1c4>
 8002290:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002294:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002298:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800229c:	0409      	lsls	r1, r1, #16
 800229e:	0c09      	lsrs	r1, r1, #16
 80022a0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80022a4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80022a8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80022ac:	f248 0480 	movw	r4, #32896	; 0x8080
 80022b0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80022b4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80022b8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80022bc:	0409      	lsls	r1, r1, #16
 80022be:	0c09      	lsrs	r1, r1, #16
 80022c0:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80022c4:	4321      	orrs	r1, r4
 80022c6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80022ca:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80022ce:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80022d2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80022d6:	0409      	lsls	r1, r1, #16
 80022d8:	0c09      	lsrs	r1, r1, #16
 80022da:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022dc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
    }
  }

  return ret;
}
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80022e2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80022e6:	044c      	lsls	r4, r1, #17
 80022e8:	d509      	bpl.n	80022fe <USB_ActivateEndpoint+0x216>
 80022ea:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80022ee:	b289      	uxth	r1, r1
 80022f0:	4039      	ands	r1, r7
 80022f2:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80022f6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80022fa:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80022fe:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002302:	0649      	lsls	r1, r1, #25
 8002304:	d50d      	bpl.n	8002322 <USB_ActivateEndpoint+0x23a>
 8002306:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800230a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800230e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002312:	0409      	lsls	r1, r1, #16
 8002314:	0c09      	lsrs	r1, r1, #16
 8002316:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800231a:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800231e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002322:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002326:	4c0c      	ldr	r4, [pc, #48]	; (8002358 <USB_ActivateEndpoint+0x270>)
 8002328:	b289      	uxth	r1, r1
 800232a:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 800232c:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800232e:	bf18      	it	ne
 8002330:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002334:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002338:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800233c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002340:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002344:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8002348:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800234c:	0409      	lsls	r1, r1, #16
 800234e:	0c09      	lsrs	r1, r1, #16
 8002350:	e715      	b.n	800217e <USB_ActivateEndpoint+0x96>
 8002352:	bf00      	nop
 8002354:	ffff8f8f 	.word	0xffff8f8f
 8002358:	ffff8fbf 	.word	0xffff8fbf
 800235c:	ffff8000 	.word	0xffff8000

08002360 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002360:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002362:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8002364:	b18b      	cbz	r3, 800238a <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002366:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800236a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800236e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800237a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002382:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002386:	2000      	movs	r0, #0
 8002388:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800238a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800238e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800239e:	e7ec      	b.n	800237a <USB_EPSetStall+0x1a>

080023a0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80023a0:	7b0b      	ldrb	r3, [r1, #12]
 80023a2:	bb3b      	cbnz	r3, 80023f4 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 80023a4:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023a6:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80023a8:	b333      	cbz	r3, 80023f8 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023ae:	065b      	lsls	r3, r3, #25
 80023b0:	d50d      	bpl.n	80023ce <USB_EPClearStall+0x2e>
 80023b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	041b      	lsls	r3, r3, #16
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023ca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80023ce:	78cb      	ldrb	r3, [r1, #3]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d00f      	beq.n	80023f4 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80023d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80023f4:	2000      	movs	r0, #0
 80023f6:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023fc:	045b      	lsls	r3, r3, #17
 80023fe:	d50d      	bpl.n	800241c <USB_EPClearStall+0x7c>
 8002400:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240c:	041b      	lsls	r3, r3, #16
 800240e:	0c1b      	lsrs	r3, r3, #16
 8002410:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002418:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800241c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002428:	041b      	lsls	r3, r3, #16
 800242a:	0c1b      	lsrs	r3, r3, #16
 800242c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002430:	e7da      	b.n	80023e8 <USB_EPClearStall+0x48>

08002432 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002432:	b911      	cbnz	r1, 800243a <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800243a:	2000      	movs	r0, #0
 800243c:	4770      	bx	lr

0800243e <USB_DevConnect>:
 800243e:	2000      	movs	r0, #0
 8002440:	4770      	bx	lr

08002442 <USB_DevDisconnect>:
 8002442:	2000      	movs	r0, #0
 8002444:	4770      	bx	lr

08002446 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002446:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800244a:	b280      	uxth	r0, r0
 800244c:	4770      	bx	lr

0800244e <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800244e:	2000      	movs	r0, #0
 8002450:	4770      	bx	lr

08002452 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002452:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002456:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002458:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8002462:	429a      	cmp	r2, r3
 8002464:	d100      	bne.n	8002468 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8002466:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8002468:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800246c:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8002470:	e7f7      	b.n	8002462 <USB_WritePMA+0x10>
	...

08002474 <USB_EPStartXfer>:
{
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8002478:	7849      	ldrb	r1, [r1, #1]
{
 800247a:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 800247c:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 800247e:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8002480:	f040 813d 	bne.w	80026fe <USB_EPStartXfer+0x28a>
    if (ep->xfer_len > ep->maxpacket)
 8002484:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002488:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800248a:	6961      	ldr	r1, [r4, #20]
 800248c:	4576      	cmp	r6, lr
 800248e:	bf28      	it	cs
 8002490:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 8002492:	bb02      	cbnz	r2, 80024d6 <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002494:	b2b6      	uxth	r6, r6
 8002496:	88e2      	ldrh	r2, [r4, #6]
 8002498:	4633      	mov	r3, r6
 800249a:	f7ff ffda 	bl	8002452 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800249e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80024a2:	7821      	ldrb	r1, [r4, #0]
 80024a4:	b290      	uxth	r0, r2
 80024a6:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80024aa:	0109      	lsls	r1, r1, #4
 80024ac:	4402      	add	r2, r0
 80024ae:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80024b0:	7822      	ldrb	r2, [r4, #0]
 80024b2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80024b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024be:	041b      	lsls	r3, r3, #16
 80024c0:	0c1b      	lsrs	r3, r3, #16
 80024c2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 80024c6:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80024c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80024d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 80024d6:	78e3      	ldrb	r3, [r4, #3]
          PCD_SET_EP_DBUF(USBx, ep->num);
 80024d8:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 80024da:	2b02      	cmp	r3, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80024dc:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 80024e0:	f040 80d2 	bne.w	8002688 <USB_EPStartXfer+0x214>
        if (ep->xfer_len_db > ep->maxpacket)
 80024e4:	6a23      	ldr	r3, [r4, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 80024e6:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 80024ea:	459e      	cmp	lr, r3
 80024ec:	f080 80b5 	bcs.w	800265a <USB_EPStartXfer+0x1e6>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80024f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80024f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024f8:	0412      	lsls	r2, r2, #16
 80024fa:	0c12      	lsrs	r2, r2, #16
 80024fc:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002504:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002508:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
          ep->xfer_len_db -= len;
 800250c:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800250e:	f017 0740 	ands.w	r7, r7, #64	; 0x40
          ep->xfer_len_db -= len;
 8002512:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002514:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002518:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800251a:	d050      	beq.n	80025be <USB_EPStartXfer+0x14a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800251c:	b297      	uxth	r7, r2
 800251e:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002522:	443a      	add	r2, r7
 8002524:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002528:	8962      	ldrh	r2, [r4, #10]
 800252a:	f7ff ff92 	bl	8002452 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800252e:	6a22      	ldr	r2, [r4, #32]
 8002530:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002532:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002534:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8002536:	bf8a      	itet	hi
 8002538:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800253a:	2300      	movls	r3, #0
 800253c:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800253e:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8002540:	4431      	add	r1, r6
 8002542:	6223      	str	r3, [r4, #32]
 8002544:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002546:	b293      	uxth	r3, r2
 8002548:	bb68      	cbnz	r0, 80025a6 <USB_EPStartXfer+0x132>
 800254a:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800254e:	7826      	ldrb	r6, [r4, #0]
 8002550:	b280      	uxth	r0, r0
 8002552:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8002556:	0136      	lsls	r6, r6, #4
 8002558:	4438      	add	r0, r7
 800255a:	b96a      	cbnz	r2, 8002578 <USB_EPStartXfer+0x104>
 800255c:	5a32      	ldrh	r2, [r6, r0]
 800255e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002562:	0412      	lsls	r2, r2, #16
 8002564:	0c12      	lsrs	r2, r2, #16
 8002566:	5232      	strh	r2, [r6, r0]
 8002568:	5a32      	ldrh	r2, [r6, r0]
 800256a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800256e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002572:	b292      	uxth	r2, r2
 8002574:	5232      	strh	r2, [r6, r0]
 8002576:	e008      	b.n	800258a <USB_EPStartXfer+0x116>
 8002578:	2a3e      	cmp	r2, #62	; 0x3e
 800257a:	d80b      	bhi.n	8002594 <USB_EPStartXfer+0x120>
 800257c:	0857      	lsrs	r7, r2, #1
 800257e:	07d2      	lsls	r2, r2, #31
 8002580:	bf48      	it	mi
 8002582:	3701      	addmi	r7, #1
 8002584:	02bf      	lsls	r7, r7, #10
 8002586:	b2bf      	uxth	r7, r7
 8002588:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800258a:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800258c:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800258e:	f7ff ff60 	bl	8002452 <USB_WritePMA>
 8002592:	e78d      	b.n	80024b0 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002594:	0957      	lsrs	r7, r2, #5
 8002596:	06d2      	lsls	r2, r2, #27
 8002598:	4aa7      	ldr	r2, [pc, #668]	; (8002838 <USB_EPStartXfer+0x3c4>)
 800259a:	bf08      	it	eq
 800259c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80025a0:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80025a4:	e7e5      	b.n	8002572 <USB_EPStartXfer+0xfe>
 80025a6:	2801      	cmp	r0, #1
 80025a8:	d1ef      	bne.n	800258a <USB_EPStartXfer+0x116>
 80025aa:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80025ae:	7820      	ldrb	r0, [r4, #0]
 80025b0:	b296      	uxth	r6, r2
 80025b2:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80025b6:	0100      	lsls	r0, r0, #4
 80025b8:	4432      	add	r2, r6
 80025ba:	5283      	strh	r3, [r0, r2]
 80025bc:	e7e5      	b.n	800258a <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80025be:	fa1f fe82 	uxth.w	lr, r2
 80025c2:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80025c6:	4472      	add	r2, lr
 80025c8:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80025cc:	8922      	ldrh	r2, [r4, #8]
 80025ce:	f7ff ff40 	bl	8002452 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80025d2:	6a22      	ldr	r2, [r4, #32]
 80025d4:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80025d6:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80025d8:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80025da:	bf84      	itt	hi
 80025dc:	1b97      	subhi	r7, r2, r6
 80025de:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80025e0:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 80025e2:	4431      	add	r1, r6
 80025e4:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db -= len;
 80025e6:	6227      	str	r7, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80025e8:	b293      	uxth	r3, r2
 80025ea:	bb50      	cbnz	r0, 8002642 <USB_EPStartXfer+0x1ce>
 80025ec:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80025f0:	7826      	ldrb	r6, [r4, #0]
 80025f2:	b280      	uxth	r0, r0
 80025f4:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 80025f8:	0136      	lsls	r6, r6, #4
 80025fa:	4438      	add	r0, r7
 80025fc:	b96a      	cbnz	r2, 800261a <USB_EPStartXfer+0x1a6>
 80025fe:	5a32      	ldrh	r2, [r6, r0]
 8002600:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002604:	0412      	lsls	r2, r2, #16
 8002606:	0c12      	lsrs	r2, r2, #16
 8002608:	5232      	strh	r2, [r6, r0]
 800260a:	5a32      	ldrh	r2, [r6, r0]
 800260c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002610:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002614:	b292      	uxth	r2, r2
 8002616:	5232      	strh	r2, [r6, r0]
 8002618:	e008      	b.n	800262c <USB_EPStartXfer+0x1b8>
 800261a:	2a3e      	cmp	r2, #62	; 0x3e
 800261c:	d808      	bhi.n	8002630 <USB_EPStartXfer+0x1bc>
 800261e:	0857      	lsrs	r7, r2, #1
 8002620:	07d2      	lsls	r2, r2, #31
 8002622:	bf48      	it	mi
 8002624:	3701      	addmi	r7, #1
 8002626:	02bf      	lsls	r7, r7, #10
 8002628:	b2bf      	uxth	r7, r7
 800262a:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800262c:	8962      	ldrh	r2, [r4, #10]
 800262e:	e7ad      	b.n	800258c <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002630:	0957      	lsrs	r7, r2, #5
 8002632:	06d2      	lsls	r2, r2, #27
 8002634:	4a80      	ldr	r2, [pc, #512]	; (8002838 <USB_EPStartXfer+0x3c4>)
 8002636:	bf08      	it	eq
 8002638:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800263c:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002640:	e7e8      	b.n	8002614 <USB_EPStartXfer+0x1a0>
 8002642:	2801      	cmp	r0, #1
 8002644:	d1f2      	bne.n	800262c <USB_EPStartXfer+0x1b8>
 8002646:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800264a:	7820      	ldrb	r0, [r4, #0]
 800264c:	b296      	uxth	r6, r2
 800264e:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8002652:	0100      	lsls	r0, r0, #4
 8002654:	4432      	add	r2, r6
 8002656:	5283      	strh	r3, [r0, r2]
 8002658:	e7e8      	b.n	800262c <USB_EPStartXfer+0x1b8>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800265a:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800265e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002662:	0412      	lsls	r2, r2, #16
 8002664:	0c12      	lsrs	r2, r2, #16
 8002666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800266a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800266e:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002672:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002676:	b29b      	uxth	r3, r3
 8002678:	b296      	uxth	r6, r2
 800267a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800267e:	4432      	add	r2, r6
 8002680:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002684:	8922      	ldrh	r2, [r4, #8]
 8002686:	e782      	b.n	800258e <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002688:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800268c:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800268e:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002692:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002696:	b290      	uxth	r0, r2
 8002698:	bf15      	itete	ne
 800269a:	f205 420c 	addwne	r2, r5, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800269e:	f205 4204 	addweq	r2, r5, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80026a2:	1812      	addne	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026a4:	1812      	addeq	r2, r2, r0
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80026a6:	bf15      	itete	ne
 80026a8:	f822 300c 	strhne.w	r3, [r2, ip]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026ac:	f822 300c 	strheq.w	r3, [r2, ip]
          pmabuffer = ep->pmaaddr1;
 80026b0:	8962      	ldrhne	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 80026b2:	8922      	ldrheq	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026b4:	4628      	mov	r0, r5
 80026b6:	f7ff fecc 	bl	8002452 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80026ba:	7863      	ldrb	r3, [r4, #1]
 80026bc:	7822      	ldrb	r2, [r4, #0]
 80026be:	b973      	cbnz	r3, 80026de <USB_EPStartXfer+0x26a>
 80026c0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80026c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	0c1b      	lsrs	r3, r3, #16
 80026d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026d8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80026dc:	e6e8      	b.n	80024b0 <USB_EPStartXfer+0x3c>
 80026de:	2b01      	cmp	r3, #1
 80026e0:	f47f aee6 	bne.w	80024b0 <USB_EPStartXfer+0x3c>
 80026e4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80026e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	0c1b      	lsrs	r3, r3, #16
 80026f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fc:	e7ec      	b.n	80026d8 <USB_EPStartXfer+0x264>
    if (ep->doublebuffer == 0U)
 80026fe:	b9ea      	cbnz	r2, 800273c <USB_EPStartXfer+0x2c8>
      if (ep->xfer_len > ep->maxpacket)
 8002700:	69a3      	ldr	r3, [r4, #24]
 8002702:	6921      	ldr	r1, [r4, #16]
 8002704:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8002706:	bf88      	it	hi
 8002708:	1a5a      	subhi	r2, r3, r1
 800270a:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800270c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002710:	bf88      	it	hi
 8002712:	460b      	movhi	r3, r1
 8002714:	7821      	ldrb	r1, [r4, #0]
 8002716:	b292      	uxth	r2, r2
 8002718:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800271c:	0109      	lsls	r1, r1, #4
 800271e:	4402      	add	r2, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80c8 	beq.w	80028b6 <USB_EPStartXfer+0x442>
 8002726:	2b3e      	cmp	r3, #62	; 0x3e
 8002728:	f200 80d3 	bhi.w	80028d2 <USB_EPStartXfer+0x45e>
 800272c:	0858      	lsrs	r0, r3, #1
 800272e:	07de      	lsls	r6, r3, #31
 8002730:	bf48      	it	mi
 8002732:	3001      	addmi	r0, #1
 8002734:	0280      	lsls	r0, r0, #10
 8002736:	b280      	uxth	r0, r0
 8002738:	5250      	strh	r0, [r2, r1]
 800273a:	e048      	b.n	80027ce <USB_EPStartXfer+0x35a>
      if (ep->type == EP_TYPE_BULK)
 800273c:	78e3      	ldrb	r3, [r4, #3]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d17c      	bne.n	800283c <USB_EPStartXfer+0x3c8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002742:	bb51      	cbnz	r1, 800279a <USB_EPStartXfer+0x326>
 8002744:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002748:	7821      	ldrb	r1, [r4, #0]
 800274a:	b293      	uxth	r3, r2
 800274c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002750:	441a      	add	r2, r3
 8002752:	6923      	ldr	r3, [r4, #16]
 8002754:	0109      	lsls	r1, r1, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d145      	bne.n	80027e6 <USB_EPStartXfer+0x372>
 800275a:	5a88      	ldrh	r0, [r1, r2]
 800275c:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002760:	0400      	lsls	r0, r0, #16
 8002762:	0c00      	lsrs	r0, r0, #16
 8002764:	5288      	strh	r0, [r1, r2]
 8002766:	5a88      	ldrh	r0, [r1, r2]
 8002768:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800276c:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002770:	b280      	uxth	r0, r0
 8002772:	5288      	strh	r0, [r1, r2]
 8002774:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002778:	7822      	ldrb	r2, [r4, #0]
 800277a:	b289      	uxth	r1, r1
 800277c:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8002780:	0112      	lsls	r2, r2, #4
 8002782:	4401      	add	r1, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d03f      	beq.n	8002808 <USB_EPStartXfer+0x394>
 8002788:	2b3e      	cmp	r3, #62	; 0x3e
 800278a:	d84b      	bhi.n	8002824 <USB_EPStartXfer+0x3b0>
 800278c:	0858      	lsrs	r0, r3, #1
 800278e:	07db      	lsls	r3, r3, #31
 8002790:	bf48      	it	mi
 8002792:	3001      	addmi	r0, #1
 8002794:	0280      	lsls	r0, r0, #10
 8002796:	b280      	uxth	r0, r0
 8002798:	5250      	strh	r0, [r2, r1]
        if (ep->xfer_count != 0U)
 800279a:	69e3      	ldr	r3, [r4, #28]
 800279c:	b1bb      	cbz	r3, 80027ce <USB_EPStartXfer+0x35a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800279e:	f244 0340 	movw	r3, #16448	; 0x4040
 80027a2:	7822      	ldrb	r2, [r4, #0]
 80027a4:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80027a8:	ea03 0001 	and.w	r0, r3, r1
 80027ac:	438b      	bics	r3, r1
 80027ae:	d000      	beq.n	80027b2 <USB_EPStartXfer+0x33e>
 80027b0:	b968      	cbnz	r0, 80027ce <USB_EPStartXfer+0x35a>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80027b2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80027b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	041b      	lsls	r3, r3, #16
 80027c0:	0c1b      	lsrs	r3, r3, #16
 80027c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ca:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027ce:	7822      	ldrb	r2, [r4, #0]
 80027d0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80027d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	0c1b      	lsrs	r3, r3, #16
 80027e0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80027e4:	e66f      	b.n	80024c6 <USB_EPStartXfer+0x52>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80027e6:	2b3e      	cmp	r3, #62	; 0x3e
 80027e8:	d805      	bhi.n	80027f6 <USB_EPStartXfer+0x382>
 80027ea:	0858      	lsrs	r0, r3, #1
 80027ec:	07de      	lsls	r6, r3, #31
 80027ee:	bf48      	it	mi
 80027f0:	3001      	addmi	r0, #1
 80027f2:	0280      	lsls	r0, r0, #10
 80027f4:	e7bc      	b.n	8002770 <USB_EPStartXfer+0x2fc>
 80027f6:	095e      	lsrs	r6, r3, #5
 80027f8:	06d8      	lsls	r0, r3, #27
 80027fa:	480f      	ldr	r0, [pc, #60]	; (8002838 <USB_EPStartXfer+0x3c4>)
 80027fc:	bf08      	it	eq
 80027fe:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002802:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8002806:	e7b3      	b.n	8002770 <USB_EPStartXfer+0x2fc>
 8002808:	5a53      	ldrh	r3, [r2, r1]
 800280a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800280e:	041b      	lsls	r3, r3, #16
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	5253      	strh	r3, [r2, r1]
 8002814:	5a53      	ldrh	r3, [r2, r1]
 8002816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800281a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800281e:	b29b      	uxth	r3, r3
 8002820:	5253      	strh	r3, [r2, r1]
 8002822:	e7ba      	b.n	800279a <USB_EPStartXfer+0x326>
 8002824:	0958      	lsrs	r0, r3, #5
 8002826:	06df      	lsls	r7, r3, #27
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <USB_EPStartXfer+0x3c4>)
 800282a:	bf08      	it	eq
 800282c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002830:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002834:	e7f3      	b.n	800281e <USB_EPStartXfer+0x3aa>
 8002836:	bf00      	nop
 8002838:	ffff8000 	.word	0xffff8000
      else if (ep->type == EP_TYPE_ISOC)
 800283c:	2b01      	cmp	r3, #1
 800283e:	d151      	bne.n	80028e4 <USB_EPStartXfer+0x470>
        if (ep->xfer_len > ep->maxpacket)
 8002840:	69a3      	ldr	r3, [r4, #24]
 8002842:	6922      	ldr	r2, [r4, #16]
 8002844:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8002846:	bf94      	ite	ls
 8002848:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 800284a:	1a98      	subhi	r0, r3, r2
 800284c:	61a0      	str	r0, [r4, #24]
 800284e:	bf88      	it	hi
 8002850:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002852:	2900      	cmp	r1, #0
 8002854:	d1bb      	bne.n	80027ce <USB_EPStartXfer+0x35a>
 8002856:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800285a:	7821      	ldrb	r1, [r4, #0]
 800285c:	b292      	uxth	r2, r2
 800285e:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8002862:	0109      	lsls	r1, r1, #4
 8002864:	4402      	add	r2, r0
 8002866:	b9ab      	cbnz	r3, 8002894 <USB_EPStartXfer+0x420>
 8002868:	5a88      	ldrh	r0, [r1, r2]
 800286a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800286e:	0400      	lsls	r0, r0, #16
 8002870:	0c00      	lsrs	r0, r0, #16
 8002872:	5288      	strh	r0, [r1, r2]
 8002874:	5a88      	ldrh	r0, [r1, r2]
 8002876:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800287a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800287e:	b280      	uxth	r0, r0
 8002880:	5288      	strh	r0, [r1, r2]
 8002882:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002886:	7822      	ldrb	r2, [r4, #0]
 8002888:	b289      	uxth	r1, r1
 800288a:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	4401      	add	r1, r0
 8002892:	e745      	b.n	8002720 <USB_EPStartXfer+0x2ac>
 8002894:	2b3e      	cmp	r3, #62	; 0x3e
 8002896:	d805      	bhi.n	80028a4 <USB_EPStartXfer+0x430>
 8002898:	0858      	lsrs	r0, r3, #1
 800289a:	07de      	lsls	r6, r3, #31
 800289c:	bf48      	it	mi
 800289e:	3001      	addmi	r0, #1
 80028a0:	0280      	lsls	r0, r0, #10
 80028a2:	e7ec      	b.n	800287e <USB_EPStartXfer+0x40a>
 80028a4:	095e      	lsrs	r6, r3, #5
 80028a6:	4810      	ldr	r0, [pc, #64]	; (80028e8 <USB_EPStartXfer+0x474>)
 80028a8:	06df      	lsls	r7, r3, #27
 80028aa:	bf08      	it	eq
 80028ac:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80028b0:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80028b4:	e7e3      	b.n	800287e <USB_EPStartXfer+0x40a>
 80028b6:	5a53      	ldrh	r3, [r2, r1]
 80028b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028bc:	041b      	lsls	r3, r3, #16
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	5253      	strh	r3, [r2, r1]
 80028c2:	5a53      	ldrh	r3, [r2, r1]
 80028c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	5253      	strh	r3, [r2, r1]
 80028d0:	e77d      	b.n	80027ce <USB_EPStartXfer+0x35a>
 80028d2:	0958      	lsrs	r0, r3, #5
 80028d4:	06db      	lsls	r3, r3, #27
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <USB_EPStartXfer+0x474>)
 80028d8:	bf08      	it	eq
 80028da:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80028de:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80028e2:	e7f3      	b.n	80028cc <USB_EPStartXfer+0x458>
        return HAL_ERROR;
 80028e4:	2001      	movs	r0, #1
 80028e6:	e5f5      	b.n	80024d4 <USB_EPStartXfer+0x60>
 80028e8:	ffff8000 	.word	0xffff8000

080028ec <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80028ec:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 80028f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80028f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 80028f6:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 80028f8:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80028fa:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 80028fc:	462e      	mov	r6, r5
 80028fe:	3402      	adds	r4, #2
 8002900:	b936      	cbnz	r6, 8002910 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002902:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8002904:	bf44      	itt	mi
 8002906:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800290a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800290e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002910:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8002914:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8002916:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002918:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800291c:	0a00      	lsrs	r0, r0, #8
 800291e:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 8002922:	e7ec      	b.n	80028fe <USB_ReadPMA+0x12>

08002924 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_CfgDesc);
 8002924:	231b      	movs	r3, #27
 8002926:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_CfgDesc;
}
 8002928:	4800      	ldr	r0, [pc, #0]	; (800292c <USBD_DFU_GetCfgDesc+0x8>)
 800292a:	4770      	bx	lr
 800292c:	20000050 	.word	0x20000050

08002930 <USBD_DFU_DataIn>:
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{

  return USBD_OK;
}
 8002930:	2000      	movs	r0, #0
 8002932:	4770      	bx	lr

08002934 <USBD_DFU_EP0_RxReady>:
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 8002934:	2000      	movs	r0, #0
 8002936:	4770      	bx	lr

08002938 <USBD_DFU_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8002938:	230a      	movs	r3, #10
 800293a:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_DeviceQualifierDesc;
}
 800293c:	4800      	ldr	r0, [pc, #0]	; (8002940 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 800293e:	4770      	bx	lr
 8002940:	2000006c 	.word	0x2000006c

08002944 <USBD_DFU_EP0_TxReady>:
{
 8002944:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002946:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
{
 800294a:	4605      	mov	r5, r0
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800294c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002950:	2b04      	cmp	r3, #4
 8002952:	d164      	bne.n	8002a1e <USBD_DFU_EP0_TxReady+0xda>
    if (hdfu->wblock_num == 0U)
 8002954:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
 8002958:	2900      	cmp	r1, #0
 800295a:	d151      	bne.n	8002a00 <USBD_DFU_EP0_TxReady+0xbc>
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 800295c:	7823      	ldrb	r3, [r4, #0]
 800295e:	b99b      	cbnz	r3, 8002988 <USBD_DFU_EP0_TxReady+0x44>
 8002960:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002964:	2b01      	cmp	r3, #1
 8002966:	d13c      	bne.n	80029e2 <USBD_DFU_EP0_TxReady+0x9e>
    hdfu->wlength = 0U;
 8002968:	2000      	movs	r0, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800296a:	2303      	movs	r3, #3
    hdfu->wlength = 0U;
 800296c:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8002970:	f8c4 0400 	str.w	r0, [r4, #1024]	; 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002974:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8002978:	f884 0411 	strb.w	r0, [r4, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800297c:	f8a4 0412 	strh.w	r0, [r4, #1042]	; 0x412
    hdfu->dev_status[4] = hdfu->dev_state;
 8002980:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
}
 8002984:	b003      	add	sp, #12
 8002986:	bd30      	pop	{r4, r5, pc}
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8002988:	2b21      	cmp	r3, #33	; 0x21
 800298a:	d110      	bne.n	80029ae <USBD_DFU_EP0_TxReady+0x6a>
 800298c:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002990:	2b05      	cmp	r3, #5
 8002992:	d126      	bne.n	80029e2 <USBD_DFU_EP0_TxReady+0x9e>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002994:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8002996:	78a2      	ldrb	r2, [r4, #2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        hdfu->data_ptr = hdfu->buffer.d8[1];
 800299e:	7862      	ldrb	r2, [r4, #1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80029a0:	4413      	add	r3, r2
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80029a2:	7922      	ldrb	r2, [r4, #4]
 80029a4:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80029a8:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
 80029ac:	e7dc      	b.n	8002968 <USBD_DFU_EP0_TxReady+0x24>
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 80029ae:	2b41      	cmp	r3, #65	; 0x41
 80029b0:	d117      	bne.n	80029e2 <USBD_DFU_EP0_TxReady+0x9e>
 80029b2:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d113      	bne.n	80029e2 <USBD_DFU_EP0_TxReady+0x9e>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80029ba:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80029bc:	78a0      	ldrb	r0, [r4, #2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80029be:	041b      	lsls	r3, r3, #16
 80029c0:	eb03 2300 	add.w	r3, r3, r0, lsl #8
        hdfu->data_ptr = hdfu->buffer.d8[1];
 80029c4:	7860      	ldrb	r0, [r4, #1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80029c6:	4403      	add	r3, r0
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80029c8:	7920      	ldrb	r0, [r4, #4]
 80029ca:	eb03 6000 	add.w	r0, r3, r0, lsl #24
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 80029ce:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80029d2:	f8c4 0408 	str.w	r0, [r4, #1032]	; 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4798      	blx	r3
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 80029da:	2800      	cmp	r0, #0
 80029dc:	d0c4      	beq.n	8002968 <USBD_DFU_EP0_TxReady+0x24>
          return USBD_FAIL;
 80029de:	2002      	movs	r0, #2
 80029e0:	e7d0      	b.n	8002984 <USBD_DFU_EP0_TxReady+0x40>
        hdfu->wlength = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 80029e8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
        req.bmRequest = 0U;
 80029ec:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 80029f0:	2301      	movs	r3, #1
        USBD_CtlError(pdev, &req);
 80029f2:	4669      	mov	r1, sp
 80029f4:	4628      	mov	r0, r5
        req.wLength = 1U;
 80029f6:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 80029fa:	f000 fd7d 	bl	80034f8 <USBD_CtlError>
 80029fe:	e7b3      	b.n	8002968 <USBD_DFU_EP0_TxReady+0x24>
      if (hdfu->wblock_num > 1U)
 8002a00:	2901      	cmp	r1, #1
 8002a02:	d0b1      	beq.n	8002968 <USBD_DFU_EP0_TxReady+0x24>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002a04:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002a08:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002a0c:	3902      	subs	r1, #2
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002a0e:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	4620      	mov	r0, r4
 8002a16:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
 8002a1a:	4798      	blx	r3
 8002a1c:	e7dd      	b.n	80029da <USBD_DFU_EP0_TxReady+0x96>
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8002a1e:	2b07      	cmp	r3, #7
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	d10f      	bne.n	8002a46 <USBD_DFU_EP0_TxReady+0x102>

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002a26:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <USBD_DFU_EP0_TxReady+0x140>)
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002a28:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002a2c:	7d12      	ldrb	r2, [r2, #20]
 8002a2e:	f012 0204 	ands.w	r2, r2, #4
 8002a32:	d00a      	beq.n	8002a4a <USBD_DFU_EP0_TxReady+0x106>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002a34:	2206      	movs	r2, #6

    hdfu->dev_status[1] = 0U;
 8002a36:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002a3a:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 8002a3e:	f8a4 3412 	strh.w	r3, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 8002a42:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
  return USBD_OK;
 8002a46:	4618      	mov	r0, r3
 8002a48:	e79c      	b.n	8002984 <USBD_DFU_EP0_TxReady+0x40>
    return;
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002a4a:	2308      	movs	r3, #8

    hdfu->dev_status[1] = 0U;
 8002a4c:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002a50:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 8002a54:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 8002a58:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8002a5c:	f000 fa24 	bl	8002ea8 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002a60:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002a68:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002a6c:	4906      	ldr	r1, [pc, #24]	; (8002a88 <USBD_DFU_EP0_TxReady+0x144>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <USBD_DFU_EP0_TxReady+0x148>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002a70:	68ca      	ldr	r2, [r1, #12]
 8002a72:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60cb      	str	r3, [r1, #12]
 8002a7a:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002a7e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002a80:	e7fd      	b.n	8002a7e <USBD_DFU_EP0_TxReady+0x13a>
 8002a82:	bf00      	nop
 8002a84:	20000050 	.word	0x20000050
 8002a88:	e000ed00 	.word	0xe000ed00
 8002a8c:	05fa0004 	.word	0x05fa0004

08002a90 <USBD_DFU_DeInit>:
{
 8002a90:	b538      	push	{r3, r4, r5, lr}
  hdfu->dev_state = DFU_STATE_IDLE;
 8002a92:	2202      	movs	r2, #2
  hdfu->wblock_num = 0U;
 8002a94:	2500      	movs	r5, #0
{
 8002a96:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002a98:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  hdfu->dev_state = DFU_STATE_IDLE;
 8002a9c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002aa0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002aa4:	f883 5410 	strb.w	r5, [r3, #1040]	; 0x410
  hdfu->wblock_num = 0U;
 8002aa8:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8002aac:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002ab0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002ab8:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8002abc:	f000 ff42 	bl	8003944 <USBD_static_free>
}
 8002ac0:	4628      	mov	r0, r5
    pdev->pClassData = NULL;
 8002ac2:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8002ac6:	bd38      	pop	{r3, r4, r5, pc}

08002ac8 <USBD_DFU_Init>:
{
 8002ac8:	b510      	push	{r4, lr}
 8002aca:	4604      	mov	r4, r0
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8002acc:	f240 401c 	movw	r0, #1052	; 0x41c
 8002ad0:	f000 ff34 	bl	800393c <USBD_static_malloc>
 8002ad4:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8002ad8:	b1a8      	cbz	r0, 8002b06 <USBD_DFU_Init+0x3e>
    hdfu->wblock_num = 0U;
 8002ada:	2300      	movs	r3, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8002adc:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002ade:	f8c0 3410 	str.w	r3, [r0, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002ae2:	f8a0 2418 	strh.w	r2, [r0, #1048]	; 0x418
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002ae6:	f8a0 2414 	strh.w	r2, [r0, #1044]	; 0x414
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002aea:	4908      	ldr	r1, [pc, #32]	; (8002b0c <USBD_DFU_Init+0x44>)
    hdfu->wblock_num = 0U;
 8002aec:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
    hdfu->wlength = 0U;
 8002af0:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
    hdfu->alt_setting = 0U;
 8002af4:	f8c0 340c 	str.w	r3, [r0, #1036]	; 0x40c
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8002af8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002afc:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4798      	blx	r3
 8002b04:	b100      	cbz	r0, 8002b08 <USBD_DFU_Init+0x40>
      return USBD_FAIL;
 8002b06:	2002      	movs	r0, #2
}
 8002b08:	bd10      	pop	{r4, pc}
 8002b0a:	bf00      	nop
 8002b0c:	08005000 	.word	0x08005000

08002b10 <USBD_DFU_IsoOutIncomplete>:
 8002b10:	2000      	movs	r0, #0
 8002b12:	4770      	bx	lr

08002b14 <USBD_DFU_GetUsrStringDesc>:
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002b14:	2906      	cmp	r1, #6
{
 8002b16:	b508      	push	{r3, lr}
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002b18:	d807      	bhi.n	8002b2a <USBD_DFU_GetUsrStringDesc+0x16>
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8002b1a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002b1e:	4904      	ldr	r1, [pc, #16]	; (8002b30 <USBD_DFU_GetUsrStringDesc+0x1c>)
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	f000 fcf4 	bl	800350e <USBD_GetString>
 8002b26:	4802      	ldr	r0, [pc, #8]	; (8002b30 <USBD_DFU_GetUsrStringDesc+0x1c>)
}
 8002b28:	bd08      	pop	{r3, pc}
    return NULL;
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	e7fc      	b.n	8002b28 <USBD_DFU_GetUsrStringDesc+0x14>
 8002b2e:	bf00      	nop
 8002b30:	20000340 	.word	0x20000340

08002b34 <USBD_DFU_Setup>:
  uint16_t status_info = 0U;
 8002b34:	2300      	movs	r3, #0
{
 8002b36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002b3a:	780d      	ldrb	r5, [r1, #0]
 8002b3c:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002b3e:	f015 0560 	ands.w	r5, r5, #96	; 0x60
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002b42:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  uint16_t status_info = 0U;
 8002b46:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002b4a:	f000 8143 	beq.w	8002dd4 <USBD_DFU_Setup+0x2a0>
 8002b4e:	2d20      	cmp	r5, #32
 8002b50:	f040 8156 	bne.w	8002e00 <USBD_DFU_Setup+0x2cc>
      switch (req->bRequest)
 8002b54:	f891 8001 	ldrb.w	r8, [r1, #1]
 8002b58:	f1b8 0f06 	cmp.w	r8, #6
 8002b5c:	f200 8150 	bhi.w	8002e00 <USBD_DFU_Setup+0x2cc>
 8002b60:	e8df f018 	tbh	[pc, r8, lsl #1]
 8002b64:	00070111 	.word	0x00070111
 8002b68:	00980037 	.word	0x00980037
 8002b6c:	00f400de 	.word	0x00f400de
 8002b70:	00f8      	.short	0x00f8
  if (req->wLength > 0U)
 8002b72:	88ca      	ldrh	r2, [r1, #6]
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002b74:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
  if (req->wLength > 0U)
 8002b78:	b1ba      	cbz	r2, 8002baa <USBD_DFU_Setup+0x76>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d001      	beq.n	8002b82 <USBD_DFU_Setup+0x4e>
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d10f      	bne.n	8002ba2 <USBD_DFU_Setup+0x6e>
      hdfu->wblock_num = req->wValue;
 8002b82:	884b      	ldrh	r3, [r1, #2]
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002b84:	4630      	mov	r0, r6
      hdfu->wblock_num = req->wValue;
 8002b86:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002b8a:	2303      	movs	r3, #3
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002b8c:	4621      	mov	r1, r4
      hdfu->wlength = req->wLength;
 8002b8e:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002b92:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8002b96:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002b9a:	f000 fce9 	bl	8003570 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8002b9e:	2500      	movs	r5, #0
 8002ba0:	e013      	b.n	8002bca <USBD_DFU_Setup+0x96>
      USBD_CtlError(pdev, req);
 8002ba2:	4630      	mov	r0, r6
 8002ba4:	f000 fca8 	bl	80034f8 <USBD_CtlError>
 8002ba8:	e7f9      	b.n	8002b9e <USBD_DFU_Setup+0x6a>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d001      	beq.n	8002bb2 <USBD_DFU_Setup+0x7e>
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d1f7      	bne.n	8002ba2 <USBD_DFU_Setup+0x6e>
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002bb2:	f44f 7383 	mov.w	r3, #262	; 0x106
      hdfu->dev_status[1] = 0U;
 8002bb6:	2500      	movs	r5, #0
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002bb8:	f8a4 3418 	strh.w	r3, [r4, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8002bbc:	2306      	movs	r3, #6
      hdfu->dev_status[1] = 0U;
 8002bbe:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8002bc2:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
      hdfu->dev_status[4] = hdfu->dev_state;
 8002bc6:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
}
 8002bca:	4628      	mov	r0, r5
 8002bcc:	b002      	add	sp, #8
 8002bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (req->wLength > 0U)
 8002bd2:	88ca      	ldrh	r2, [r1, #6]
 8002bd4:	2a00      	cmp	r2, #0
 8002bd6:	d053      	beq.n	8002c80 <USBD_DFU_Setup+0x14c>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8002bd8:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d001      	beq.n	8002be4 <USBD_DFU_Setup+0xb0>
 8002be0:	2b09      	cmp	r3, #9
 8002be2:	d147      	bne.n	8002c74 <USBD_DFU_Setup+0x140>
      hdfu->wblock_num = req->wValue;
 8002be4:	884f      	ldrh	r7, [r1, #2]
      hdfu->wlength = req->wLength;
 8002be6:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      hdfu->wblock_num = req->wValue;
 8002bea:	f8c4 7400 	str.w	r7, [r4, #1024]	; 0x400
      if (hdfu->wblock_num == 0U)
 8002bee:	b9b7      	cbnz	r7, 8002c1e <USBD_DFU_Setup+0xea>
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8002bf0:	f44f 5304 	mov.w	r3, #8448	; 0x2100
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8002bf4:	2a03      	cmp	r2, #3
 8002bf6:	bf98      	it	ls
 8002bf8:	f04f 0809 	movls.w	r8, #9
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8002bfc:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002bfe:	2341      	movs	r3, #65	; 0x41
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8002c00:	2203      	movs	r2, #3
 8002c02:	4621      	mov	r1, r4
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8002c04:	f884 8418 	strb.w	r8, [r4, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8002c08:	f884 7411 	strb.w	r7, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8002c0c:	f8a4 7412 	strh.w	r7, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002c10:	f884 8414 	strb.w	r8, [r4, #1044]	; 0x414
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002c14:	70a3      	strb	r3, [r4, #2]
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8002c16:	4630      	mov	r0, r6
 8002c18:	f000 fc95 	bl	8003546 <USBD_CtlSendData>
 8002c1c:	e7bf      	b.n	8002b9e <USBD_DFU_Setup+0x6a>
      else if (hdfu->wblock_num > 1U)
 8002c1e:	2f01      	cmp	r7, #1
 8002c20:	f04f 0500 	mov.w	r5, #0
 8002c24:	d019      	beq.n	8002c5a <USBD_DFU_Setup+0x126>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002c26:	2309      	movs	r3, #9
        hdfu->dev_status[1] = 0U;
 8002c28:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002c2c:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[2] = 0U;
 8002c30:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002c34:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002c38:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002c3c:	f8d6 32bc 	ldr.w	r3, [r6, #700]	; 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002c40:	3f02      	subs	r7, #2
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002c42:	4621      	mov	r1, r4
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	eb00 2087 	add.w	r0, r0, r7, lsl #10
 8002c4a:	4798      	blx	r3
 8002c4c:	4601      	mov	r1, r0
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8002c4e:	f8b4 2404 	ldrh.w	r2, [r4, #1028]	; 0x404
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8002c52:	4630      	mov	r0, r6
 8002c54:	f000 fc77 	bl	8003546 <USBD_CtlSendData>
 8002c58:	e7b7      	b.n	8002bca <USBD_DFU_Setup+0x96>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002c5a:	230f      	movs	r3, #15
        hdfu->dev_status[1] = 0U;
 8002c5c:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002c60:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[2] = 0U;
 8002c64:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002c68:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
      USBD_CtlError(pdev, req);
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	f000 fc43 	bl	80034f8 <USBD_CtlError>
 8002c72:	e7aa      	b.n	8002bca <USBD_DFU_Setup+0x96>
      hdfu->wlength = 0U;
 8002c74:	2500      	movs	r5, #0
 8002c76:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8002c7a:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
 8002c7e:	e7f5      	b.n	8002c6c <USBD_DFU_Setup+0x138>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002c80:	2302      	movs	r3, #2
    hdfu->dev_status[1] = 0U;
 8002c82:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_IDLE;
 8002c86:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 8002c8a:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
    hdfu->dev_status[4] = hdfu->dev_state;
 8002c8e:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 8002c92:	e784      	b.n	8002b9e <USBD_DFU_Setup+0x6a>
  switch (hdfu->dev_state)
 8002c94:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002c98:	f504 6582 	add.w	r5, r4, #1040	; 0x410
  switch (hdfu->dev_state)
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d004      	beq.n	8002caa <USBD_DFU_Setup+0x176>
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	d026      	beq.n	8002cf2 <USBD_DFU_Setup+0x1be>
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8002ca4:	2206      	movs	r2, #6
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	e7b5      	b.n	8002c16 <USBD_DFU_Setup+0xe2>
      if (hdfu->wlength != 0U)
 8002caa:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002cae:	b1d3      	cbz	r3, 8002ce6 <USBD_DFU_Setup+0x1b2>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002cb0:	2304      	movs	r3, #4
        hdfu->dev_status[1] = 0U;
 8002cb2:	2200      	movs	r2, #0
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002cb4:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8002cb8:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8002cbc:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002cc0:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002cc4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002cc8:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002ccc:	699b      	ldr	r3, [r3, #24]
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002cce:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002cd2:	b929      	cbnz	r1, 8002ce0 <USBD_DFU_Setup+0x1ac>
 8002cd4:	7822      	ldrb	r2, [r4, #0]
 8002cd6:	2a41      	cmp	r2, #65	; 0x41
 8002cd8:	d102      	bne.n	8002ce0 <USBD_DFU_Setup+0x1ac>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002cda:	462a      	mov	r2, r5
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8002cdc:	4798      	blx	r3
 8002cde:	e7e1      	b.n	8002ca4 <USBD_DFU_Setup+0x170>
 8002ce0:	462a      	mov	r2, r5
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	e7fa      	b.n	8002cdc <USBD_DFU_Setup+0x1a8>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8002ce6:	2205      	movs	r2, #5
          hdfu->dev_state = DFU_STATE_IDLE;
 8002ce8:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8002cec:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
 8002cf0:	e009      	b.n	8002d06 <USBD_DFU_Setup+0x1d2>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8002cf2:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d10a      	bne.n	8002d10 <USBD_DFU_Setup+0x1dc>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002cfa:	2207      	movs	r2, #7
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8002cfc:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8002d00:	2300      	movs	r3, #0
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002d02:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
          hdfu->dev_status[2] = 0U;
 8002d06:	f8a4 3412 	strh.w	r3, [r4, #1042]	; 0x412
          hdfu->dev_status[4] = hdfu->dev_state;
 8002d0a:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
 8002d0e:	e7c9      	b.n	8002ca4 <USBD_DFU_Setup+0x170>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1c7      	bne.n	8002ca4 <USBD_DFU_Setup+0x170>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8002d14:	4a4c      	ldr	r2, [pc, #304]	; (8002e48 <USBD_DFU_Setup+0x314>)
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002d16:	7d12      	ldrb	r2, [r2, #20]
 8002d18:	0752      	lsls	r2, r2, #29
 8002d1a:	d5c3      	bpl.n	8002ca4 <USBD_DFU_Setup+0x170>
          hdfu->dev_state = DFU_STATE_IDLE;
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	e7e3      	b.n	8002ce8 <USBD_DFU_Setup+0x1b4>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8002d20:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002d24:	2b0a      	cmp	r3, #10
 8002d26:	d108      	bne.n	8002d3a <USBD_DFU_Setup+0x206>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d28:	2302      	movs	r3, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8002d2a:	2500      	movs	r5, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d2c:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8002d30:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8002d34:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 8002d38:	e747      	b.n	8002bca <USBD_DFU_Setup+0x96>
    hdfu->dev_state = DFU_STATE_ERROR;
 8002d3a:	230a      	movs	r3, #10
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002d3c:	220e      	movs	r2, #14
    hdfu->dev_state = DFU_STATE_ERROR;
 8002d3e:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002d42:	f8c4 2410 	str.w	r2, [r4, #1040]	; 0x410
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8002d46:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 8002d4a:	e728      	b.n	8002b9e <USBD_DFU_Setup+0x6a>
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f504 6183 	add.w	r1, r4, #1048	; 0x418
 8002d52:	e760      	b.n	8002c16 <USBD_DFU_Setup+0xe2>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002d54:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002d58:	2b09      	cmp	r3, #9
 8002d5a:	f63f af20 	bhi.w	8002b9e <USBD_DFU_Setup+0x6a>
 8002d5e:	f44f 751b 	mov.w	r5, #620	; 0x26c
 8002d62:	40dd      	lsrs	r5, r3
 8002d64:	43ed      	mvns	r5, r5
 8002d66:	f015 0501 	ands.w	r5, r5, #1
 8002d6a:	f47f af18 	bne.w	8002b9e <USBD_DFU_Setup+0x6a>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d6e:	2302      	movs	r3, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002d70:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d74:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 8002d78:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 8002d7c:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
    hdfu->wlength = 0U;
 8002d80:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
 8002d84:	e721      	b.n	8002bca <USBD_DFU_Setup+0x96>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002d86:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8002d8a:	2a09      	cmp	r2, #9
 8002d8c:	d811      	bhi.n	8002db2 <USBD_DFU_Setup+0x27e>
 8002d8e:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8002d92:	40d3      	lsrs	r3, r2
 8002d94:	43db      	mvns	r3, r3
 8002d96:	f013 0301 	ands.w	r3, r3, #1
 8002d9a:	d10a      	bne.n	8002db2 <USBD_DFU_Setup+0x27e>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d9c:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002d9e:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002da2:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 8002da6:	f8a4 2414 	strh.w	r2, [r4, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 8002daa:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    hdfu->wlength = 0U;
 8002dae:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8002db2:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <USBD_DFU_Setup+0x314>)
 8002db4:	7d5d      	ldrb	r5, [r3, #21]
 8002db6:	f015 0510 	ands.w	r5, r5, #16
 8002dba:	d007      	beq.n	8002dcc <USBD_DFU_Setup+0x298>
    USBD_Stop(pdev);
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	f000 f873 	bl	8002ea8 <USBD_Stop>
    USBD_Start(pdev);
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f000 f86b 	bl	8002e9e <USBD_Start>
  uint8_t ret = USBD_OK;
 8002dc8:	4645      	mov	r5, r8
 8002dca:	e6fe      	b.n	8002bca <USBD_DFU_Setup+0x96>
    USBD_Delay((uint32_t)req->wValue);
 8002dcc:	8848      	ldrh	r0, [r1, #2]
 8002dce:	f7fd fc7f 	bl	80006d0 <HAL_Delay>
 8002dd2:	e6fa      	b.n	8002bca <USBD_DFU_Setup+0x96>
      switch (req->bRequest)
 8002dd4:	784f      	ldrb	r7, [r1, #1]
 8002dd6:	2f0b      	cmp	r7, #11
 8002dd8:	d812      	bhi.n	8002e00 <USBD_DFU_Setup+0x2cc>
 8002dda:	e8df f007 	tbb	[pc, r7]
 8002dde:	1106      	.short	0x1106
 8002de0:	11111111 	.word	0x11111111
 8002de4:	11111116 	.word	0x11111116
 8002de8:	2b23      	.short	0x2b23
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002dea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d106      	bne.n	8002e00 <USBD_DFU_Setup+0x2cc>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002df2:	2202      	movs	r2, #2
 8002df4:	f10d 0106 	add.w	r1, sp, #6
 8002df8:	f000 fba5 	bl	8003546 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002dfc:	463d      	mov	r5, r7
 8002dfe:	e6e4      	b.n	8002bca <USBD_DFU_Setup+0x96>
            USBD_CtlError(pdev, req);
 8002e00:	4630      	mov	r0, r6
 8002e02:	f000 fb79 	bl	80034f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8002e06:	2502      	movs	r5, #2
 8002e08:	e6df      	b.n	8002bca <USBD_DFU_Setup+0x96>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8002e0a:	884b      	ldrh	r3, [r1, #2]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	2b21      	cmp	r3, #33	; 0x21
 8002e10:	d105      	bne.n	8002e1e <USBD_DFU_Setup+0x2ea>
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8002e12:	88ca      	ldrh	r2, [r1, #6]
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8002e14:	490d      	ldr	r1, [pc, #52]	; (8002e4c <USBD_DFU_Setup+0x318>)
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8002e16:	2a09      	cmp	r2, #9
 8002e18:	bf28      	it	cs
 8002e1a:	2209      	movcs	r2, #9
 8002e1c:	e719      	b.n	8002c52 <USBD_DFU_Setup+0x11e>
  uint16_t len = 0U;
 8002e1e:	2200      	movs	r2, #0
  uint8_t *pbuf = 0U;
 8002e20:	4611      	mov	r1, r2
          USBD_CtlSendData(pdev, pbuf, len);
 8002e22:	e716      	b.n	8002c52 <USBD_DFU_Setup+0x11e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e24:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d1e9      	bne.n	8002e00 <USBD_DFU_Setup+0x2cc>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8002e32:	e70e      	b.n	8002c52 <USBD_DFU_Setup+0x11e>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8002e34:	788d      	ldrb	r5, [r1, #2]
 8002e36:	2d00      	cmp	r5, #0
 8002e38:	d1e2      	bne.n	8002e00 <USBD_DFU_Setup+0x2cc>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d1de      	bne.n	8002e00 <USBD_DFU_Setup+0x2cc>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8002e42:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
 8002e46:	e6c0      	b.n	8002bca <USBD_DFU_Setup+0x96>
 8002e48:	20000050 	.word	0x20000050
 8002e4c:	20000062 	.word	0x20000062

08002e50 <USBD_DFU_DataOut>:
 8002e50:	2000      	movs	r0, #0
 8002e52:	4770      	bx	lr

08002e54 <USBD_DFU_IsoINIncomplete>:
 8002e54:	2000      	movs	r0, #0
 8002e56:	4770      	bx	lr

08002e58 <USBD_DFU_SOF>:
 8002e58:	2000      	movs	r0, #0
 8002e5a:	4770      	bx	lr

08002e5c <USBD_DFU_RegisterMedia>:
  if (fops != NULL)
 8002e5c:	b109      	cbz	r1, 8002e62 <USBD_DFU_RegisterMedia+0x6>
    pdev->pUserData = fops;
 8002e5e:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
}
 8002e62:	2000      	movs	r0, #0
 8002e64:	4770      	bx	lr

08002e66 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002e66:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002e68:	b180      	cbz	r0, 8002e8c <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002e6a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e6e:	b113      	cbz	r3, 8002e76 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002e76:	b109      	cbz	r1, 8002e7c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002e78:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002e7c:	2301      	movs	r3, #1
  pdev->id = id;
 8002e7e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002e80:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002e84:	f000 fcd2 	bl	800382c <USBD_LL_Init>

  return USBD_OK;
 8002e88:	2000      	movs	r0, #0
}
 8002e8a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	e7fc      	b.n	8002e8a <USBD_Init+0x24>

08002e90 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002e90:	b119      	cbz	r1, 8002e9a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002e92:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8002e96:	2000      	movs	r0, #0
 8002e98:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002e9a:	2002      	movs	r0, #2
  }

  return status;
}
 8002e9c:	4770      	bx	lr

08002e9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002e9e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002ea0:	f000 fcee 	bl	8003880 <USBD_LL_Start>

  return USBD_OK;
}
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	bd08      	pop	{r3, pc}

08002ea8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002eac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002eb0:	7901      	ldrb	r1, [r0, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f000 fceb 	bl	8003892 <USBD_LL_Stop>

  return USBD_OK;
}
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	bd10      	pop	{r4, pc}

08002ec0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002ec0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002ec2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002ec6:	b90b      	cbnz	r3, 8002ecc <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002ec8:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002eca:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4798      	blx	r3
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d0fa      	beq.n	8002eca <USBD_SetClassConfig+0xa>
 8002ed4:	e7f8      	b.n	8002ec8 <USBD_SetClassConfig+0x8>

08002ed6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002ed6:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002ed8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4798      	blx	r3

  return USBD_OK;
}
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	bd08      	pop	{r3, pc}

08002ee4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002ee4:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002ee6:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8002eea:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002eec:	4628      	mov	r0, r5
 8002eee:	f000 faef 	bl	80034d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002ef2:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002ef4:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8002ef8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002efc:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8002f00:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002f04:	f001 031f 	and.w	r3, r1, #31
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d008      	beq.n	8002f1e <USBD_LL_SetupStage+0x3a>
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d00b      	beq.n	8002f28 <USBD_LL_SetupStage+0x44>
 8002f10:	b97b      	cbnz	r3, 8002f32 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8002f12:	4629      	mov	r1, r5
 8002f14:	4620      	mov	r0, r4
 8002f16:	f000 f8fb 	bl	8003110 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002f1e:	4629      	mov	r1, r5
 8002f20:	4620      	mov	r0, r4
 8002f22:	f000 fa27 	bl	8003374 <USBD_StdItfReq>
      break;
 8002f26:	e7f8      	b.n	8002f1a <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8002f28:	4629      	mov	r1, r5
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f000 fa46 	bl	80033bc <USBD_StdEPReq>
      break;
 8002f30:	e7f3      	b.n	8002f1a <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002f32:	4620      	mov	r0, r4
 8002f34:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002f38:	f000 fcc0 	bl	80038bc <USBD_LL_StallEP>
      break;
 8002f3c:	e7ed      	b.n	8002f1a <USBD_LL_SetupStage+0x36>

08002f3e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f40:	4604      	mov	r4, r0
 8002f42:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002f44:	460d      	mov	r5, r1
 8002f46:	bb39      	cbnz	r1, 8002f98 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002f48:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d11c      	bne.n	8002f8a <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8002f50:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8002f54:	4296      	cmp	r6, r2
 8002f56:	d90b      	bls.n	8002f70 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8002f58:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8002f5a:	42b2      	cmp	r2, r6
 8002f5c:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8002f5e:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8002f62:	bf8c      	ite	hi
 8002f64:	b2b2      	uxthhi	r2, r6
 8002f66:	b292      	uxthls	r2, r2
 8002f68:	f000 fb0f 	bl	800358a <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002f70:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	b123      	cbz	r3, 8002f82 <USBD_LL_DataOutStage+0x44>
 8002f78:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002f7c:	2a03      	cmp	r2, #3
 8002f7e:	d100      	bne.n	8002f82 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8002f80:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002f82:	4620      	mov	r0, r4
 8002f84:	f000 fb09 	bl	800359a <USBD_CtlSendStatus>
 8002f88:	e7f0      	b.n	8002f6c <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	d1ee      	bne.n	8002f6c <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002f8e:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8002f92:	f000 fc93 	bl	80038bc <USBD_LL_StallEP>
 8002f96:	e7e9      	b.n	8002f6c <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8002f98:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	b133      	cbz	r3, 8002fae <USBD_LL_DataOutStage+0x70>
 8002fa0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002fa4:	2a03      	cmp	r2, #3
 8002fa6:	d102      	bne.n	8002fae <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8002fa8:	4798      	blx	r3
  return USBD_OK;
 8002faa:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002fac:	e7de      	b.n	8002f6c <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8002fae:	2502      	movs	r5, #2
 8002fb0:	e7dc      	b.n	8002f6c <USBD_LL_DataOutStage+0x2e>

08002fb2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002fb8:	460d      	mov	r5, r1
 8002fba:	2900      	cmp	r1, #0
 8002fbc:	d147      	bne.n	800304e <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002fbe:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d13c      	bne.n	8003040 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002fc6:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8002fca:	429e      	cmp	r6, r3
 8002fcc:	d914      	bls.n	8002ff8 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8002fce:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002fd0:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8002fd2:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	f000 fac3 	bl	8003560 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002fda:	462b      	mov	r3, r5
 8002fdc:	462a      	mov	r2, r5
 8002fde:	4629      	mov	r1, r5
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f000 fca1 	bl	8003928 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002fe6:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d102      	bne.n	8002ff4 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8002ff8:	69c2      	ldr	r2, [r0, #28]
 8002ffa:	fbb2 f6f3 	udiv	r6, r2, r3
 8002ffe:	fb03 2616 	mls	r6, r3, r6, r2
 8003002:	b95e      	cbnz	r6, 800301c <USBD_LL_DataInStage+0x6a>
 8003004:	4293      	cmp	r3, r2
 8003006:	d809      	bhi.n	800301c <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8003008:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800300c:	429a      	cmp	r2, r3
 800300e:	d205      	bcs.n	800301c <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003010:	460a      	mov	r2, r1
 8003012:	f000 faa5 	bl	8003560 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003016:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800301a:	e7de      	b.n	8002fda <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800301c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	b12b      	cbz	r3, 8003030 <USBD_LL_DataInStage+0x7e>
 8003024:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003028:	2a03      	cmp	r2, #3
 800302a:	d101      	bne.n	8003030 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 800302c:	4620      	mov	r0, r4
 800302e:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	4620      	mov	r0, r4
 8003034:	f000 fc42 	bl	80038bc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003038:	4620      	mov	r0, r4
 800303a:	f000 fab9 	bl	80035b0 <USBD_CtlReceiveStatus>
 800303e:	e7d2      	b.n	8002fe6 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003040:	f033 0304 	bics.w	r3, r3, #4
 8003044:	d1cf      	bne.n	8002fe6 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	f000 fc38 	bl	80038bc <USBD_LL_StallEP>
 800304c:	e7cb      	b.n	8002fe6 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 800304e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	b133      	cbz	r3, 8003064 <USBD_LL_DataInStage+0xb2>
 8003056:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800305a:	2a03      	cmp	r2, #3
 800305c:	d102      	bne.n	8003064 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800305e:	4798      	blx	r3
  return USBD_OK;
 8003060:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003062:	e7c7      	b.n	8002ff4 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8003064:	2502      	movs	r5, #2
 8003066:	e7c5      	b.n	8002ff4 <USBD_LL_DataInStage+0x42>

08003068 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003068:	2200      	movs	r2, #0
{
 800306a:	b570      	push	{r4, r5, r6, lr}
 800306c:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800306e:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003070:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003072:	4611      	mov	r1, r2
 8003074:	2340      	movs	r3, #64	; 0x40
 8003076:	f000 fc15 	bl	80038a4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800307a:	4633      	mov	r3, r6
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	2200      	movs	r2, #0
 8003080:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003082:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003086:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800308a:	f000 fc0b 	bl	80038a4 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800308e:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003090:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003094:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003096:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003098:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800309c:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80030a0:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80030a2:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80030a6:	b123      	cbz	r3, 80030b2 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80030a8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80030ac:	4620      	mov	r0, r4
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4798      	blx	r3
  }

  return USBD_OK;
}
 80030b2:	2000      	movs	r0, #0
 80030b4:	bd70      	pop	{r4, r5, r6, pc}

080030b6 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80030b6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80030b8:	2000      	movs	r0, #0
 80030ba:	4770      	bx	lr

080030bc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80030bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80030c0:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80030c4:	2304      	movs	r3, #4
 80030c6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80030ca:	2000      	movs	r0, #0
 80030cc:	4770      	bx	lr

080030ce <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80030ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80030d2:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80030d4:	bf04      	itt	eq
 80030d6:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80030da:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80030de:	2000      	movs	r0, #0
 80030e0:	4770      	bx	lr

080030e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80030e2:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030e4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80030e8:	2a03      	cmp	r2, #3
 80030ea:	d104      	bne.n	80030f6 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80030ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	b103      	cbz	r3, 80030f6 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80030f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80030f6:	2000      	movs	r0, #0
 80030f8:	bd08      	pop	{r3, pc}

080030fa <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80030fa:	b510      	push	{r4, lr}
 80030fc:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	f000 fbdc 	bl	80038bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003104:	4620      	mov	r0, r4
}
 8003106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800310a:	2100      	movs	r1, #0
 800310c:	f000 bbd6 	b.w	80038bc <USBD_LL_StallEP>

08003110 <USBD_StdDevReq>:
{
 8003110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003112:	780b      	ldrb	r3, [r1, #0]
 8003114:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003116:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800311a:	2b20      	cmp	r3, #32
{
 800311c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800311e:	d012      	beq.n	8003146 <USBD_StdDevReq+0x36>
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d010      	beq.n	8003146 <USBD_StdDevReq+0x36>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d151      	bne.n	80031cc <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8003128:	784b      	ldrb	r3, [r1, #1]
 800312a:	2b09      	cmp	r3, #9
 800312c:	d84e      	bhi.n	80031cc <USBD_StdDevReq+0xbc>
 800312e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003132:	00f7      	.short	0x00f7
 8003134:	004d0113 	.word	0x004d0113
 8003138:	004d010c 	.word	0x004d010c
 800313c:	00130090 	.word	0x00130090
 8003140:	00df004d 	.word	0x00df004d
 8003144:	00ac      	.short	0x00ac
      pdev->pClass->Setup(pdev, req);
 8003146:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800314a:	4629      	mov	r1, r5
 800314c:	4620      	mov	r0, r4
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4798      	blx	r3
}
 8003152:	2000      	movs	r0, #0
 8003154:	b003      	add	sp, #12
 8003156:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003158:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 800315a:	8849      	ldrh	r1, [r1, #2]
  uint16_t len = 0U;
 800315c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003160:	0a0b      	lsrs	r3, r1, #8
 8003162:	3b01      	subs	r3, #1
 8003164:	2b06      	cmp	r3, #6
 8003166:	d831      	bhi.n	80031cc <USBD_StdDevReq+0xbc>
 8003168:	e8df f003 	tbb	[pc, r3]
 800316c:	30231604 	.word	0x30231604
 8003170:	5130      	.short	0x5130
 8003172:	5b          	.byte	0x5b
 8003173:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003174:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003178:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800317a:	7c20      	ldrb	r0, [r4, #16]
 800317c:	f10d 0106 	add.w	r1, sp, #6
 8003180:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003182:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003186:	2a00      	cmp	r2, #0
 8003188:	d05f      	beq.n	800324a <USBD_StdDevReq+0x13a>
 800318a:	88eb      	ldrh	r3, [r5, #6]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d153      	bne.n	8003238 <USBD_StdDevReq+0x128>
        USBD_CtlSendStatus(pdev);
 8003190:	4620      	mov	r0, r4
 8003192:	f000 fa02 	bl	800359a <USBD_CtlSendStatus>
 8003196:	e7dc      	b.n	8003152 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003198:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800319a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800319e:	b932      	cbnz	r2, 80031ae <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80031a2:	f10d 0006 	add.w	r0, sp, #6
 80031a6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80031a8:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80031aa:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80031ac:	e7e9      	b.n	8003182 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	e7f7      	b.n	80031a2 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 80031b2:	b2c9      	uxtb	r1, r1
 80031b4:	2905      	cmp	r1, #5
 80031b6:	d821      	bhi.n	80031fc <USBD_StdDevReq+0xec>
 80031b8:	e8df f001 	tbb	[pc, r1]
 80031bc:	14100c03 	.word	0x14100c03
 80031c0:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80031c2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031c6:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1d6      	bne.n	800317a <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7ff ff94 	bl	80030fa <USBD_CtlError.constprop.0>
        break;
 80031d2:	e7be      	b.n	8003152 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80031d4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	e7f5      	b.n	80031c8 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80031dc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	e7f1      	b.n	80031c8 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80031e4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	e7ed      	b.n	80031c8 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80031ec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	e7e9      	b.n	80031c8 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80031f4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	e7e5      	b.n	80031c8 <USBD_StdDevReq+0xb8>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80031fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0e2      	beq.n	80031cc <USBD_StdDevReq+0xbc>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8003206:	f10d 0206 	add.w	r2, sp, #6
 800320a:	4798      	blx	r3
  if (err != 0U)
 800320c:	e7b9      	b.n	8003182 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800320e:	7c03      	ldrb	r3, [r0, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1db      	bne.n	80031cc <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003214:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003218:	f10d 0006 	add.w	r0, sp, #6
 800321c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321e:	4798      	blx	r3
  if (err != 0U)
 8003220:	e7af      	b.n	8003182 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003222:	7c03      	ldrb	r3, [r0, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1d1      	bne.n	80031cc <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003228:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800322c:	f10d 0006 	add.w	r0, sp, #6
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003234:	2307      	movs	r3, #7
 8003236:	e7b8      	b.n	80031aa <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8003238:	429a      	cmp	r2, r3
 800323a:	bf28      	it	cs
 800323c:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800323e:	4601      	mov	r1, r0
 8003240:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8003242:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003246:	f000 f97e 	bl	8003546 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800324a:	88eb      	ldrh	r3, [r5, #6]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d180      	bne.n	8003152 <USBD_StdDevReq+0x42>
 8003250:	e79e      	b.n	8003190 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003252:	888b      	ldrh	r3, [r1, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1b9      	bne.n	80031cc <USBD_StdDevReq+0xbc>
 8003258:	88cb      	ldrh	r3, [r1, #6]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1b6      	bne.n	80031cc <USBD_StdDevReq+0xbc>
 800325e:	884d      	ldrh	r5, [r1, #2]
 8003260:	2d7f      	cmp	r5, #127	; 0x7f
 8003262:	d8b3      	bhi.n	80031cc <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003264:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003268:	2b03      	cmp	r3, #3
 800326a:	d0af      	beq.n	80031cc <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800326c:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800326e:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003272:	f000 fb47 	bl	8003904 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003276:	4620      	mov	r0, r4
 8003278:	f000 f98f 	bl	800359a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800327c:	b11d      	cbz	r5, 8003286 <USBD_StdDevReq+0x176>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800327e:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003280:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003284:	e765      	b.n	8003152 <USBD_StdDevReq+0x42>
 8003286:	2301      	movs	r3, #1
 8003288:	e7fa      	b.n	8003280 <USBD_StdDevReq+0x170>
  cfgidx = (uint8_t)(req->wValue);
 800328a:	7889      	ldrb	r1, [r1, #2]
 800328c:	4d38      	ldr	r5, [pc, #224]	; (8003370 <USBD_StdDevReq+0x260>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800328e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003290:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003292:	d89b      	bhi.n	80031cc <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8003294:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003298:	2b02      	cmp	r3, #2
 800329a:	d008      	beq.n	80032ae <USBD_StdDevReq+0x19e>
 800329c:	2b03      	cmp	r3, #3
 800329e:	d015      	beq.n	80032cc <USBD_StdDevReq+0x1bc>
        USBD_CtlError(pdev, req);
 80032a0:	f7ff ff2b 	bl	80030fa <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 80032a4:	4620      	mov	r0, r4
 80032a6:	7829      	ldrb	r1, [r5, #0]
 80032a8:	f7ff fe15 	bl	8002ed6 <USBD_ClrClassConfig>
        break;
 80032ac:	e751      	b.n	8003152 <USBD_StdDevReq+0x42>
        if (cfgidx)
 80032ae:	2900      	cmp	r1, #0
 80032b0:	f43f af6e 	beq.w	8003190 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 80032b4:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80032b6:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80032b8:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80032ba:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80032be:	4620      	mov	r0, r4
 80032c0:	f7ff fdfe 	bl	8002ec0 <USBD_SetClassConfig>
 80032c4:	2802      	cmp	r0, #2
 80032c6:	f47f af63 	bne.w	8003190 <USBD_StdDevReq+0x80>
 80032ca:	e77f      	b.n	80031cc <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 80032cc:	b931      	cbnz	r1, 80032dc <USBD_StdDevReq+0x1cc>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80032ce:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80032d0:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80032d2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80032d6:	f7ff fdfe 	bl	8002ed6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80032da:	e759      	b.n	8003190 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80032dc:	6841      	ldr	r1, [r0, #4]
 80032de:	2901      	cmp	r1, #1
 80032e0:	f43f af56 	beq.w	8003190 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80032e4:	b2c9      	uxtb	r1, r1
 80032e6:	f7ff fdf6 	bl	8002ed6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80032ea:	7829      	ldrb	r1, [r5, #0]
 80032ec:	6061      	str	r1, [r4, #4]
 80032ee:	e7e6      	b.n	80032be <USBD_StdDevReq+0x1ae>
  if (req->wLength != 1U)
 80032f0:	88ca      	ldrh	r2, [r1, #6]
 80032f2:	2a01      	cmp	r2, #1
 80032f4:	f47f af6a 	bne.w	80031cc <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80032f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d80a      	bhi.n	8003316 <USBD_StdDevReq+0x206>
 8003300:	2b00      	cmp	r3, #0
 8003302:	f43f af63 	beq.w	80031cc <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8003306:	4601      	mov	r1, r0
 8003308:	2300      	movs	r3, #0
 800330a:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800330e:	4620      	mov	r0, r4
 8003310:	f000 f919 	bl	8003546 <USBD_CtlSendData>
      break;
 8003314:	e71d      	b.n	8003152 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8003316:	2b03      	cmp	r3, #3
 8003318:	f47f af58 	bne.w	80031cc <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800331c:	1d01      	adds	r1, r0, #4
 800331e:	e7f6      	b.n	800330e <USBD_StdDevReq+0x1fe>
  switch (pdev->dev_state)
 8003320:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003324:	3b01      	subs	r3, #1
 8003326:	2b02      	cmp	r3, #2
 8003328:	f63f af50 	bhi.w	80031cc <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 800332c:	88cb      	ldrh	r3, [r1, #6]
 800332e:	2b02      	cmp	r3, #2
 8003330:	f47f af4c 	bne.w	80031cc <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003334:	2301      	movs	r3, #1
 8003336:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003338:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800333c:	b10b      	cbz	r3, 8003342 <USBD_StdDevReq+0x232>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800333e:	2303      	movs	r3, #3
 8003340:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003342:	2202      	movs	r2, #2
 8003344:	f104 010c 	add.w	r1, r4, #12
 8003348:	e7e1      	b.n	800330e <USBD_StdDevReq+0x1fe>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800334a:	884b      	ldrh	r3, [r1, #2]
 800334c:	2b01      	cmp	r3, #1
 800334e:	f47f af00 	bne.w	8003152 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003352:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8003356:	e71b      	b.n	8003190 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8003358:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800335c:	3b01      	subs	r3, #1
 800335e:	2b02      	cmp	r3, #2
 8003360:	f63f af34 	bhi.w	80031cc <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003364:	884b      	ldrh	r3, [r1, #2]
 8003366:	2b01      	cmp	r3, #1
 8003368:	f47f aef3 	bne.w	8003152 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	e7f0      	b.n	8003352 <USBD_StdDevReq+0x242>
 8003370:	2000043f 	.word	0x2000043f

08003374 <USBD_StdItfReq>:
{
 8003374:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003376:	780b      	ldrb	r3, [r1, #0]
{
 8003378:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800337a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800337e:	2a40      	cmp	r2, #64	; 0x40
{
 8003380:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003382:	d001      	beq.n	8003388 <USBD_StdItfReq+0x14>
 8003384:	065b      	lsls	r3, r3, #25
 8003386:	d415      	bmi.n	80033b4 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8003388:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800338c:	3b01      	subs	r3, #1
 800338e:	2b02      	cmp	r3, #2
 8003390:	d810      	bhi.n	80033b4 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003392:	792b      	ldrb	r3, [r5, #4]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d80d      	bhi.n	80033b4 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003398:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800339c:	4629      	mov	r1, r5
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4620      	mov	r0, r4
 80033a2:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80033a4:	88eb      	ldrh	r3, [r5, #6]
 80033a6:	b91b      	cbnz	r3, 80033b0 <USBD_StdItfReq+0x3c>
 80033a8:	b910      	cbnz	r0, 80033b0 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 80033aa:	4620      	mov	r0, r4
 80033ac:	f000 f8f5 	bl	800359a <USBD_CtlSendStatus>
}
 80033b0:	2000      	movs	r0, #0
 80033b2:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80033b4:	4620      	mov	r0, r4
 80033b6:	f7ff fea0 	bl	80030fa <USBD_CtlError.constprop.0>
          break;
 80033ba:	e7f9      	b.n	80033b0 <USBD_StdItfReq+0x3c>

080033bc <USBD_StdEPReq>:
{
 80033bc:	b538      	push	{r3, r4, r5, lr}
 80033be:	780a      	ldrb	r2, [r1, #0]
 80033c0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80033c2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80033c6:	2a20      	cmp	r2, #32
{
 80033c8:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80033ca:	d027      	beq.n	800341c <USBD_StdEPReq+0x60>
 80033cc:	2a40      	cmp	r2, #64	; 0x40
 80033ce:	d025      	beq.n	800341c <USBD_StdEPReq+0x60>
 80033d0:	bb92      	cbnz	r2, 8003438 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 80033d2:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80033d4:	888d      	ldrh	r5, [r1, #4]
 80033d6:	2a01      	cmp	r2, #1
 80033d8:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 80033da:	d03d      	beq.n	8003458 <USBD_StdEPReq+0x9c>
 80033dc:	2a03      	cmp	r2, #3
 80033de:	d025      	beq.n	800342c <USBD_StdEPReq+0x70>
 80033e0:	bb52      	cbnz	r2, 8003438 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 80033e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d04d      	beq.n	8003486 <USBD_StdEPReq+0xca>
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d124      	bne.n	8003438 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 80033ee:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80033f0:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80033f4:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80033f8:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80033fc:	d054      	beq.n	80034a8 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	b1d3      	cbz	r3, 8003438 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003402:	2314      	movs	r3, #20
 8003404:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003408:	fb05 3303 	mla	r3, r5, r3, r3
 800340c:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800340e:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8003412:	d155      	bne.n	80034c0 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8003414:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003416:	2202      	movs	r2, #2
 8003418:	4629      	mov	r1, r5
 800341a:	e041      	b.n	80034a0 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 800341c:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8003420:	4619      	mov	r1, r3
 8003422:	4620      	mov	r0, r4
 8003424:	6892      	ldr	r2, [r2, #8]
 8003426:	4790      	blx	r2
}
 8003428:	2000      	movs	r0, #0
 800342a:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 800342c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003430:	2a02      	cmp	r2, #2
 8003432:	d01f      	beq.n	8003474 <USBD_StdEPReq+0xb8>
 8003434:	2a03      	cmp	r2, #3
 8003436:	d003      	beq.n	8003440 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8003438:	4620      	mov	r0, r4
 800343a:	f7ff fe5e 	bl	80030fa <USBD_CtlError.constprop.0>
              break;
 800343e:	e7f3      	b.n	8003428 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003440:	885a      	ldrh	r2, [r3, #2]
 8003442:	b92a      	cbnz	r2, 8003450 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8003444:	064a      	lsls	r2, r1, #25
 8003446:	d003      	beq.n	8003450 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003448:	88db      	ldrh	r3, [r3, #6]
 800344a:	b90b      	cbnz	r3, 8003450 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 800344c:	f000 fa36 	bl	80038bc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003450:	4620      	mov	r0, r4
 8003452:	f000 f8a2 	bl	800359a <USBD_CtlSendStatus>
              break;
 8003456:	e7e7      	b.n	8003428 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8003458:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800345c:	2a02      	cmp	r2, #2
 800345e:	d009      	beq.n	8003474 <USBD_StdEPReq+0xb8>
 8003460:	2a03      	cmp	r2, #3
 8003462:	d1e9      	bne.n	8003438 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003464:	885b      	ldrh	r3, [r3, #2]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1de      	bne.n	8003428 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800346a:	064d      	lsls	r5, r1, #25
 800346c:	d0f0      	beq.n	8003450 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800346e:	f000 fa2e 	bl	80038ce <USBD_LL_ClearStallEP>
 8003472:	e7ed      	b.n	8003450 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003474:	064b      	lsls	r3, r1, #25
 8003476:	d0df      	beq.n	8003438 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8003478:	f000 fa20 	bl	80038bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	4620      	mov	r0, r4
 8003480:	f000 fa1c 	bl	80038bc <USBD_LL_StallEP>
 8003484:	e7d0      	b.n	8003428 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003486:	064a      	lsls	r2, r1, #25
 8003488:	d1d6      	bne.n	8003438 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800348a:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 800348c:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003490:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003494:	bf4c      	ite	mi
 8003496:	f100 0114 	addmi.w	r1, r0, #20
 800349a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800349e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80034a0:	4620      	mov	r0, r4
 80034a2:	f000 f850 	bl	8003546 <USBD_CtlSendData>
              break;
 80034a6:	e7bf      	b.n	8003428 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80034a8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0c3      	beq.n	8003438 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80034b0:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 80034b2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80034b6:	fb03 0505 	mla	r5, r3, r5, r0
 80034ba:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80034be:	e7a6      	b.n	800340e <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80034c0:	4620      	mov	r0, r4
 80034c2:	f000 fa0d 	bl	80038e0 <USBD_LL_IsStallEP>
 80034c6:	b108      	cbz	r0, 80034cc <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e7a3      	b.n	8003414 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 80034cc:	6028      	str	r0, [r5, #0]
 80034ce:	e7a2      	b.n	8003416 <USBD_StdEPReq+0x5a>

080034d0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80034d0:	780b      	ldrb	r3, [r1, #0]
 80034d2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80034d4:	784b      	ldrb	r3, [r1, #1]
 80034d6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80034d8:	78ca      	ldrb	r2, [r1, #3]
 80034da:	788b      	ldrb	r3, [r1, #2]
 80034dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80034e0:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80034e2:	794a      	ldrb	r2, [r1, #5]
 80034e4:	790b      	ldrb	r3, [r1, #4]
 80034e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80034ea:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80034ec:	79ca      	ldrb	r2, [r1, #7]
 80034ee:	798b      	ldrb	r3, [r1, #6]
 80034f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80034f4:	80c3      	strh	r3, [r0, #6]
}
 80034f6:	4770      	bx	lr

080034f8 <USBD_CtlError>:
{
 80034f8:	b510      	push	{r4, lr}
 80034fa:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	f000 f9dd 	bl	80038bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003502:	4620      	mov	r0, r4
}
 8003504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003508:	2100      	movs	r1, #0
 800350a:	f000 b9d7 	b.w	80038bc <USBD_LL_StallEP>

0800350e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800350e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003510:	b188      	cbz	r0, 8003536 <USBD_GetString+0x28>
 8003512:	2400      	movs	r4, #0
 8003514:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003516:	4623      	mov	r3, r4
 8003518:	3401      	adds	r4, #1
 800351a:	5d05      	ldrb	r5, [r0, r4]
 800351c:	2d00      	cmp	r5, #0
 800351e:	d1fa      	bne.n	8003516 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003520:	b2db      	uxtb	r3, r3
 8003522:	3301      	adds	r3, #1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003528:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800352a:	2303      	movs	r3, #3
 800352c:	704b      	strb	r3, [r1, #1]
 800352e:	2302      	movs	r3, #2
    while (*desc != '\0')
 8003530:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003534:	b904      	cbnz	r4, 8003538 <USBD_GetString+0x2a>
}
 8003536:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	54cc      	strb	r4, [r1, r3]
 800353c:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800353e:	3302      	adds	r3, #2
 8003540:	b2db      	uxtb	r3, r3
 8003542:	548d      	strb	r5, [r1, r2]
 8003544:	e7f4      	b.n	8003530 <USBD_GetString+0x22>

08003546 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003546:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003548:	2202      	movs	r2, #2
{
 800354a:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800354c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003550:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003554:	460a      	mov	r2, r1
 8003556:	2100      	movs	r1, #0
 8003558:	f000 f9dd 	bl	8003916 <USBD_LL_Transmit>

  return USBD_OK;
}
 800355c:	2000      	movs	r0, #0
 800355e:	bd10      	pop	{r4, pc}

08003560 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003560:	b508      	push	{r3, lr}
 8003562:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003564:	460a      	mov	r2, r1
 8003566:	2100      	movs	r1, #0
 8003568:	f000 f9d5 	bl	8003916 <USBD_LL_Transmit>

  return USBD_OK;
}
 800356c:	2000      	movs	r0, #0
 800356e:	bd08      	pop	{r3, pc}

08003570 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003570:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003572:	2203      	movs	r2, #3
{
 8003574:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8003576:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800357a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800357e:	460a      	mov	r2, r1
 8003580:	2100      	movs	r1, #0
 8003582:	f000 f9d1 	bl	8003928 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003586:	2000      	movs	r0, #0
 8003588:	bd10      	pop	{r4, pc}

0800358a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800358a:	b508      	push	{r3, lr}
 800358c:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800358e:	460a      	mov	r2, r1
 8003590:	2100      	movs	r1, #0
 8003592:	f000 f9c9 	bl	8003928 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003596:	2000      	movs	r0, #0
 8003598:	bd08      	pop	{r3, pc}

0800359a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800359a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800359c:	2304      	movs	r3, #4
 800359e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80035a2:	2300      	movs	r3, #0
 80035a4:	461a      	mov	r2, r3
 80035a6:	4619      	mov	r1, r3
 80035a8:	f000 f9b5 	bl	8003916 <USBD_LL_Transmit>

  return USBD_OK;
}
 80035ac:	2000      	movs	r0, #0
 80035ae:	bd08      	pop	{r3, pc}

080035b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80035b0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80035b2:	2305      	movs	r3, #5
 80035b4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80035b8:	2300      	movs	r3, #0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	f000 f9b3 	bl	8003928 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80035c2:	2000      	movs	r0, #0
 80035c4:	bd08      	pop	{r3, pc}
	...

080035c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80035c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80035ca:	2200      	movs	r2, #0
 80035cc:	490e      	ldr	r1, [pc, #56]	; (8003608 <MX_USB_DEVICE_Init+0x40>)
 80035ce:	480f      	ldr	r0, [pc, #60]	; (800360c <MX_USB_DEVICE_Init+0x44>)
 80035d0:	f7ff fc49 	bl	8002e66 <USBD_Init>
 80035d4:	b108      	cbz	r0, 80035da <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80035d6:	f7fc fe3d 	bl	8000254 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 80035da:	490d      	ldr	r1, [pc, #52]	; (8003610 <MX_USB_DEVICE_Init+0x48>)
 80035dc:	480b      	ldr	r0, [pc, #44]	; (800360c <MX_USB_DEVICE_Init+0x44>)
 80035de:	f7ff fc57 	bl	8002e90 <USBD_RegisterClass>
 80035e2:	b108      	cbz	r0, 80035e8 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80035e4:	f7fc fe36 	bl	8000254 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 80035e8:	490a      	ldr	r1, [pc, #40]	; (8003614 <MX_USB_DEVICE_Init+0x4c>)
 80035ea:	4808      	ldr	r0, [pc, #32]	; (800360c <MX_USB_DEVICE_Init+0x44>)
 80035ec:	f7ff fc36 	bl	8002e5c <USBD_DFU_RegisterMedia>
 80035f0:	b108      	cbz	r0, 80035f6 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80035f2:	f7fc fe2f 	bl	8000254 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80035f6:	4805      	ldr	r0, [pc, #20]	; (800360c <MX_USB_DEVICE_Init+0x44>)
 80035f8:	f7ff fc51 	bl	8002e9e <USBD_Start>
 80035fc:	b118      	cbz	r0, 8003606 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80035fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003602:	f7fc be27 	b.w	8000254 <Error_Handler>
}
 8003606:	bd08      	pop	{r3, pc}
 8003608:	20000078 	.word	0x20000078
 800360c:	20000440 	.word	0x20000440
 8003610:	20000014 	.word	0x20000014
 8003614:	200000c8 	.word	0x200000c8

08003618 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003618:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800361a:	4801      	ldr	r0, [pc, #4]	; (8003620 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800361c:	800b      	strh	r3, [r1, #0]
}
 800361e:	4770      	bx	lr
 8003620:	20000094 	.word	0x20000094

08003624 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003624:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003626:	4801      	ldr	r0, [pc, #4]	; (800362c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003628:	800b      	strh	r3, [r1, #0]
}
 800362a:	4770      	bx	lr
 800362c:	200000a8 	.word	0x200000a8

08003630 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003630:	2300      	movs	r3, #0
 8003632:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003634:	461e      	mov	r6, r3
 8003636:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8003638:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800363a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800363e:	bf34      	ite	cc
 8003640:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003642:	3437      	addcs	r4, #55	; 0x37
 8003644:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003648:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800364c:	3301      	adds	r3, #1
 800364e:	b2dc      	uxtb	r4, r3
 8003650:	42a2      	cmp	r2, r4
    value = value << 4;
 8003652:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8003656:	d8ef      	bhi.n	8003638 <IntToUnicode+0x8>
  }
}
 8003658:	bd70      	pop	{r4, r5, r6, pc}
	...

0800365c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800365c:	231a      	movs	r3, #26
{
 800365e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003660:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <USBD_FS_SerialStrDescriptor+0x30>)
 8003664:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8003668:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 800366c:	1880      	adds	r0, r0, r2
 800366e:	d00a      	beq.n	8003686 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003670:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003674:	4906      	ldr	r1, [pc, #24]	; (8003690 <USBD_FS_SerialStrDescriptor+0x34>)
 8003676:	2208      	movs	r2, #8
 8003678:	f7ff ffda 	bl	8003630 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800367c:	2204      	movs	r2, #4
 800367e:	4620      	mov	r0, r4
 8003680:	3110      	adds	r1, #16
 8003682:	f7ff ffd5 	bl	8003630 <IntToUnicode>
}
 8003686:	4803      	ldr	r0, [pc, #12]	; (8003694 <USBD_FS_SerialStrDescriptor+0x38>)
 8003688:	bd10      	pop	{r4, pc}
 800368a:	bf00      	nop
 800368c:	1ffff000 	.word	0x1ffff000
 8003690:	200000ae 	.word	0x200000ae
 8003694:	200000ac 	.word	0x200000ac

08003698 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003698:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800369a:	4c04      	ldr	r4, [pc, #16]	; (80036ac <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800369c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800369e:	4804      	ldr	r0, [pc, #16]	; (80036b0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80036a0:	4621      	mov	r1, r4
 80036a2:	f7ff ff34 	bl	800350e <USBD_GetString>
}
 80036a6:	4620      	mov	r0, r4
 80036a8:	bd10      	pop	{r4, pc}
 80036aa:	bf00      	nop
 80036ac:	20000704 	.word	0x20000704
 80036b0:	080039f5 	.word	0x080039f5

080036b4 <USBD_FS_ProductStrDescriptor>:
{
 80036b4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80036b6:	4c04      	ldr	r4, [pc, #16]	; (80036c8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80036b8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80036ba:	4804      	ldr	r0, [pc, #16]	; (80036cc <USBD_FS_ProductStrDescriptor+0x18>)
 80036bc:	4621      	mov	r1, r4
 80036be:	f7ff ff26 	bl	800350e <USBD_GetString>
}
 80036c2:	4620      	mov	r0, r4
 80036c4:	bd10      	pop	{r4, pc}
 80036c6:	bf00      	nop
 80036c8:	20000704 	.word	0x20000704
 80036cc:	08003a08 	.word	0x08003a08

080036d0 <USBD_FS_ConfigStrDescriptor>:
{
 80036d0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80036d2:	4c04      	ldr	r4, [pc, #16]	; (80036e4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80036d4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80036d6:	4804      	ldr	r0, [pc, #16]	; (80036e8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80036d8:	4621      	mov	r1, r4
 80036da:	f7ff ff18 	bl	800350e <USBD_GetString>
}
 80036de:	4620      	mov	r0, r4
 80036e0:	bd10      	pop	{r4, pc}
 80036e2:	bf00      	nop
 80036e4:	20000704 	.word	0x20000704
 80036e8:	08003a27 	.word	0x08003a27

080036ec <USBD_FS_InterfaceStrDescriptor>:
{
 80036ec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80036ee:	4c04      	ldr	r4, [pc, #16]	; (8003700 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80036f0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80036f2:	4804      	ldr	r0, [pc, #16]	; (8003704 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80036f4:	4621      	mov	r1, r4
 80036f6:	f7ff ff0a 	bl	800350e <USBD_GetString>
}
 80036fa:	4620      	mov	r0, r4
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	20000704 	.word	0x20000704
 8003704:	08003a32 	.word	0x08003a32

08003708 <MEM_If_Init_FS>:
uint16_t MEM_If_Init_FS(void)
{
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
  /* USER CODE END 0 */
}
 8003708:	2000      	movs	r0, #0
 800370a:	4770      	bx	lr

0800370c <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800370c:	b510      	push	{r4, lr}
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */


  for (int i=0; i<Len; i++)
 800370e:	2300      	movs	r3, #0
{
 8003710:	4604      	mov	r4, r0
 8003712:	4608      	mov	r0, r1
  for (int i=0; i<Len; i++)
 8003714:	4293      	cmp	r3, r2
 8003716:	d100      	bne.n	800371a <MEM_If_Read_FS+0xe>
    dest[i] = src[i];
  }

  return (uint8_t*)(dest);
  /* USER CODE END 4 */
}
 8003718:	bd10      	pop	{r4, pc}
    dest[i] = src[i];
 800371a:	5ce1      	ldrb	r1, [r4, r3]
 800371c:	54c1      	strb	r1, [r0, r3]
  for (int i=0; i<Len; i++)
 800371e:	3301      	adds	r3, #1
 8003720:	e7f8      	b.n	8003714 <MEM_If_Read_FS+0x8>

08003722 <MEM_If_GetStatus_FS>:
  /* USER CODE BEGIN 5 */
  switch (Cmd)
  {
    case DFU_MEDIA_PROGRAM:
      buffer[1] = (50 >> 0);
      buffer[2] = (50 >> 8);
 8003722:	2000      	movs	r0, #0
      buffer[1] = (50 >> 0);
 8003724:	2332      	movs	r3, #50	; 0x32
      buffer[2] = (50 >> 8);
 8003726:	7090      	strb	r0, [r2, #2]
      buffer[1] = (50 >> 0);
 8003728:	7053      	strb	r3, [r2, #1]
      buffer[3] = 0;
 800372a:	70d0      	strb	r0, [r2, #3]
      buffer[3] = 0;
    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 800372c:	4770      	bx	lr

0800372e <MEM_If_Write_FS>:
{
 800372e:	b508      	push	{r3, lr}
 8003730:	460b      	mov	r3, r1
  if (flashWrite((uint32_t)dest, src, Len) != true)
 8003732:	4601      	mov	r1, r0
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc fe4b 	bl	80003d0 <flashWrite>
 800373a:	f080 0001 	eor.w	r0, r0, #1
}
 800373e:	b2c0      	uxtb	r0, r0
 8003740:	bd08      	pop	{r3, pc}

08003742 <MEM_If_Erase_FS>:
  if (flashErase(Add, 1024) != true)
 8003742:	f44f 6180 	mov.w	r1, #1024	; 0x400
{
 8003746:	b508      	push	{r3, lr}
  if (flashErase(Add, 1024) != true)
 8003748:	f7fc fdf4 	bl	8000334 <flashErase>
 800374c:	f080 0001 	eor.w	r0, r0, #1
}
 8003750:	b2c0      	uxtb	r0, r0
 8003752:	bd08      	pop	{r3, pc}

08003754 <MEM_If_DeInit_FS>:
 8003754:	2000      	movs	r0, #0
 8003756:	4770      	bx	lr

08003758 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003758:	2803      	cmp	r0, #3
 800375a:	bf9a      	itte	ls
 800375c:	4b01      	ldrls	r3, [pc, #4]	; (8003764 <USBD_Get_USB_Status+0xc>)
 800375e:	5c18      	ldrbls	r0, [r3, r0]
{
 8003760:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003762:	4770      	bx	lr
 8003764:	08003a6e 	.word	0x08003a6e

08003768 <HAL_PCD_MspInit>:
{
 8003768:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800376a:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <HAL_PCD_MspInit+0x3c>)
 800376c:	6802      	ldr	r2, [r0, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d115      	bne.n	800379e <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8003772:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003776:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003778:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800377a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800377e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003780:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003782:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003784:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800378e:	f7fc ffc3 	bl	8000718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003792:	2014      	movs	r0, #20
}
 8003794:	b003      	add	sp, #12
 8003796:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800379a:	f7fc bfef 	b.w	800077c <HAL_NVIC_EnableIRQ>
}
 800379e:	b003      	add	sp, #12
 80037a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80037a4:	40005c00 	.word	0x40005c00

080037a8 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80037a8:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80037ac:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80037b0:	f7ff bb98 	b.w	8002ee4 <USBD_LL_SetupStage>

080037b4 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80037b4:	2328      	movs	r3, #40	; 0x28
 80037b6:	fb03 0301 	mla	r3, r3, r1, r0
 80037ba:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80037be:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80037c2:	f7ff bbbc 	b.w	8002f3e <USBD_LL_DataOutStage>

080037c6 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80037c6:	2328      	movs	r3, #40	; 0x28
 80037c8:	fb03 0301 	mla	r3, r3, r1, r0
 80037cc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80037d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d2:	f7ff bbee 	b.w	8002fb2 <USBD_LL_DataInStage>

080037d6 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80037d6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80037da:	f7ff bc82 	b.w	80030e2 <USBD_LL_SOF>

080037de <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80037de:	6883      	ldr	r3, [r0, #8]
{
 80037e0:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80037e2:	2b02      	cmp	r3, #2
{
 80037e4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80037e6:	d001      	beq.n	80037ec <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80037e8:	f7fc fd34 	bl	8000254 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80037ec:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80037f0:	2101      	movs	r1, #1
 80037f2:	f7ff fc60 	bl	80030b6 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80037f6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 80037fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80037fe:	f7ff bc33 	b.w	8003068 <USBD_LL_Reset>
	...

08003804 <HAL_PCD_SuspendCallback>:
{
 8003804:	b510      	push	{r4, lr}
 8003806:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003808:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800380c:	f7ff fc56 	bl	80030bc <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8003810:	69a3      	ldr	r3, [r4, #24]
 8003812:	b123      	cbz	r3, 800381e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003814:	4a02      	ldr	r2, [pc, #8]	; (8003820 <HAL_PCD_SuspendCallback+0x1c>)
 8003816:	6913      	ldr	r3, [r2, #16]
 8003818:	f043 0306 	orr.w	r3, r3, #6
 800381c:	6113      	str	r3, [r2, #16]
}
 800381e:	bd10      	pop	{r4, pc}
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003824:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003828:	f7ff bc51 	b.w	80030ce <USBD_LL_Resume>

0800382c <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800382c:	2308      	movs	r3, #8
{
 800382e:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <USBD_LL_Init+0x4c>)
{
 8003832:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003834:	4811      	ldr	r0, [pc, #68]	; (800387c <USBD_LL_Init+0x50>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003836:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800383a:	2302      	movs	r3, #2
 800383c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800383e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003840:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8003844:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003848:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800384c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800384e:	f7fd f9c3 	bl	8000bd8 <HAL_PCD_Init>
 8003852:	b108      	cbz	r0, 8003858 <USBD_LL_Init+0x2c>
    Error_Handler( );
 8003854:	f7fc fcfe 	bl	8000254 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003858:	2200      	movs	r2, #0
 800385a:	2318      	movs	r3, #24
 800385c:	4611      	mov	r1, r2
 800385e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003862:	f7fd ff70 	bl	8001746 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003866:	2358      	movs	r3, #88	; 0x58
 8003868:	2200      	movs	r2, #0
 800386a:	2180      	movs	r1, #128	; 0x80
 800386c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003870:	f7fd ff69 	bl	8001746 <HAL_PCDEx_PMAConfig>
}
 8003874:	2000      	movs	r0, #0
 8003876:	bd10      	pop	{r4, pc}
 8003878:	40005c00 	.word	0x40005c00
 800387c:	20000904 	.word	0x20000904

08003880 <USBD_LL_Start>:
{
 8003880:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003882:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003886:	f7fd fa20 	bl	8000cca <HAL_PCD_Start>
}
 800388a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800388e:	f7ff bf63 	b.w	8003758 <USBD_Get_USB_Status>

08003892 <USBD_LL_Stop>:
{
 8003892:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8003894:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003898:	f7fd fa30 	bl	8000cfc <HAL_PCD_Stop>
}
 800389c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80038a0:	f7ff bf5a 	b.w	8003758 <USBD_Get_USB_Status>

080038a4 <USBD_LL_OpenEP>:
{
 80038a4:	b510      	push	{r4, lr}
 80038a6:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80038a8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 80038ac:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80038ae:	4623      	mov	r3, r4
 80038b0:	f7fd fe82 	bl	80015b8 <HAL_PCD_EP_Open>
}
 80038b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80038b8:	f7ff bf4e 	b.w	8003758 <USBD_Get_USB_Status>

080038bc <USBD_LL_StallEP>:
{
 80038bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80038be:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80038c2:	f7fd fedb 	bl	800167c <HAL_PCD_EP_SetStall>
}
 80038c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80038ca:	f7ff bf45 	b.w	8003758 <USBD_Get_USB_Status>

080038ce <USBD_LL_ClearStallEP>:
{
 80038ce:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80038d0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80038d4:	f7fd ff06 	bl	80016e4 <HAL_PCD_EP_ClrStall>
}
 80038d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80038dc:	f7ff bf3c 	b.w	8003758 <USBD_Get_USB_Status>

080038e0 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80038e0:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 80038e2:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80038e6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80038ea:	bf1b      	ittet	ne
 80038ec:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80038f0:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80038f4:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80038f8:	185b      	addne	r3, r3, r1
 80038fa:	bf14      	ite	ne
 80038fc:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80038fe:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8003902:	4770      	bx	lr

08003904 <USBD_LL_SetUSBAddress>:
{
 8003904:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003906:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800390a:	f7fd fa10 	bl	8000d2e <HAL_PCD_SetAddress>
}
 800390e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003912:	f7ff bf21 	b.w	8003758 <USBD_Get_USB_Status>

08003916 <USBD_LL_Transmit>:
{
 8003916:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003918:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800391c:	f7fd fe94 	bl	8001648 <HAL_PCD_EP_Transmit>
}
 8003920:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003924:	f7ff bf18 	b.w	8003758 <USBD_Get_USB_Status>

08003928 <USBD_LL_PrepareReceive>:
{
 8003928:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800392a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800392e:	f7fd fe74 	bl	800161a <HAL_PCD_EP_Receive>
}
 8003932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003936:	f7ff bf0f 	b.w	8003758 <USBD_Get_USB_Status>
	...

0800393c <USBD_static_malloc>:
}
 800393c:	4800      	ldr	r0, [pc, #0]	; (8003940 <USBD_static_malloc+0x4>)
 800393e:	4770      	bx	lr
 8003940:	20000bf0 	.word	0x20000bf0

08003944 <USBD_static_free>:
}
 8003944:	4770      	bx	lr

08003946 <HAL_PCDEx_SetConnectionState>:
}
 8003946:	4770      	bx	lr

08003948 <main>:




int main(void)
{
 8003948:	b508      	push	{r3, lr}
  hwInit();
 800394a:	f7fc fe59 	bl	8000600 <hwInit>
  apInit();
 800394e:	f7fc fbfd 	bl	800014c <apInit>

  apMain();
 8003952:	f7fc fbfc 	bl	800014e <apMain>

  return 0;
}
 8003956:	2000      	movs	r0, #0
 8003958:	bd08      	pop	{r3, pc}
	...

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	2600      	movs	r6, #0
 8003960:	4d0c      	ldr	r5, [pc, #48]	; (8003994 <__libc_init_array+0x38>)
 8003962:	4c0d      	ldr	r4, [pc, #52]	; (8003998 <__libc_init_array+0x3c>)
 8003964:	1b64      	subs	r4, r4, r5
 8003966:	10a4      	asrs	r4, r4, #2
 8003968:	42a6      	cmp	r6, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	f000 f822 	bl	80039b4 <_init>
 8003970:	2600      	movs	r6, #0
 8003972:	4d0a      	ldr	r5, [pc, #40]	; (800399c <__libc_init_array+0x40>)
 8003974:	4c0a      	ldr	r4, [pc, #40]	; (80039a0 <__libc_init_array+0x44>)
 8003976:	1b64      	subs	r4, r4, r5
 8003978:	10a4      	asrs	r4, r4, #2
 800397a:	42a6      	cmp	r6, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	f855 3b04 	ldr.w	r3, [r5], #4
 8003984:	4798      	blx	r3
 8003986:	3601      	adds	r6, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	f855 3b04 	ldr.w	r3, [r5], #4
 800398e:	4798      	blx	r3
 8003990:	3601      	adds	r6, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	08003a74 	.word	0x08003a74
 8003998:	08003a74 	.word	0x08003a74
 800399c:	08003a74 	.word	0x08003a74
 80039a0:	08003a78 	.word	0x08003a78

080039a4 <memset>:
 80039a4:	4603      	mov	r3, r0
 80039a6:	4402      	add	r2, r0
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d100      	bne.n	80039ae <memset+0xa>
 80039ac:	4770      	bx	lr
 80039ae:	f803 1b01 	strb.w	r1, [r3], #1
 80039b2:	e7f9      	b.n	80039a8 <memset+0x4>

080039b4 <_init>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	bf00      	nop
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr

080039c0 <_fini>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr
