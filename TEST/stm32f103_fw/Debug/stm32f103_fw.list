
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea8  0800510c  0800510c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008fb4  08008fb4  00008fb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009024  08009024  00010190  2**0
                  CONTENTS
  4 .ARM          00000000  08009024  08009024  00010190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009024  08009024  00010190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009024  08009024  00009024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009028  08009028  00009028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800902c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013bc  20000190  080091bc  00010190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000154c  080091bc  0001154c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015de3  00000000  00000000  000101b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f0b  00000000  00000000  00025f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000afc5  00000000  00000000  0002aea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00035e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001840  00000000  00000000  00036d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cf82  00000000  00000000  000385d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f27c  00000000  00000000  00055552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000899d1  00000000  00000000  000747ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fe19f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002558  00000000  00000000  000fe1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800510c <__do_global_dtors_aux>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4c05      	ldr	r4, [pc, #20]	; (8005124 <__do_global_dtors_aux+0x18>)
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b933      	cbnz	r3, 8005122 <__do_global_dtors_aux+0x16>
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <__do_global_dtors_aux+0x1c>)
 8005116:	b113      	cbz	r3, 800511e <__do_global_dtors_aux+0x12>
 8005118:	4804      	ldr	r0, [pc, #16]	; (800512c <__do_global_dtors_aux+0x20>)
 800511a:	f3af 8000 	nop.w
 800511e:	2301      	movs	r3, #1
 8005120:	7023      	strb	r3, [r4, #0]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	20000190 	.word	0x20000190
 8005128:	00000000 	.word	0x00000000
 800512c:	08008f9c 	.word	0x08008f9c

08005130 <frame_dummy>:
 8005130:	b508      	push	{r3, lr}
 8005132:	4b03      	ldr	r3, [pc, #12]	; (8005140 <frame_dummy+0x10>)
 8005134:	b11b      	cbz	r3, 800513e <frame_dummy+0xe>
 8005136:	4903      	ldr	r1, [pc, #12]	; (8005144 <frame_dummy+0x14>)
 8005138:	4803      	ldr	r0, [pc, #12]	; (8005148 <frame_dummy+0x18>)
 800513a:	f3af 8000 	nop.w
 800513e:	bd08      	pop	{r3, pc}
 8005140:	00000000 	.word	0x00000000
 8005144:	20000194 	.word	0x20000194
 8005148:	08008f9c 	.word	0x08008f9c

0800514c <apInit>:




void apInit(void)
{
 800514c:	b508      	push	{r3, lr}
  uartOpen(_DEF_UART1, 57600);  // USB
 800514e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005152:	2000      	movs	r0, #0
 8005154:	f000 f9ba 	bl	80054cc <uartOpen>
  uartOpen(_DEF_UART2, 57600);  // UART
}
 8005158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  uartOpen(_DEF_UART2, 57600);  // UART
 800515c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005160:	2001      	movs	r0, #1
 8005162:	f000 b9b3 	b.w	80054cc <uartOpen>

08005166 <apMain>:

void apMain(void)
{
 8005166:	b510      	push	{r4, lr}
  uint32_t pre_time;


  pre_time = millis();
 8005168:	f000 f810 	bl	800518c <millis>
 800516c:	4604      	mov	r4, r0
  while(1)
  {
    if (millis()-pre_time >= 500)
 800516e:	f000 f80d 	bl	800518c <millis>
 8005172:	1b00      	subs	r0, r0, r4
 8005174:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8005178:	d3f9      	bcc.n	800516e <apMain+0x8>
    {
      pre_time = millis();
 800517a:	f000 f807 	bl	800518c <millis>
 800517e:	4604      	mov	r4, r0
      ledToggle(_DEF_LED1);
 8005180:	2000      	movs	r0, #0
 8005182:	f000 f927 	bl	80053d4 <ledToggle>
 8005186:	e7f2      	b.n	800516e <apMain+0x8>

08005188 <delay>:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}

void delay(uint32_t ms)
{
  HAL_Delay(ms);
 8005188:	f000 baf6 	b.w	8005778 <HAL_Delay>

0800518c <millis>:
}

uint32_t millis(void)
{
  return HAL_GetTick();
 800518c:	f000 baee 	b.w	800576c <HAL_GetTick>

08005190 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8005190:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005192:	2414      	movs	r4, #20
{
 8005194:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005196:	4622      	mov	r2, r4
 8005198:	2100      	movs	r1, #0
 800519a:	a80c      	add	r0, sp, #48	; 0x30
 800519c:	f003 fef6 	bl	8008f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051a0:	4622      	mov	r2, r4
 80051a2:	eb0d 0004 	add.w	r0, sp, r4
 80051a6:	2100      	movs	r1, #0
 80051a8:	f003 fef0 	bl	8008f8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051ac:	2100      	movs	r1, #0
 80051ae:	2210      	movs	r2, #16
 80051b0:	a801      	add	r0, sp, #4
 80051b2:	f003 feeb 	bl	8008f8c <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051b6:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051bc:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051be:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80051c6:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80051c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051cc:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051ce:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80051d2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051d4:	f001 fc08 	bl	80069e8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051d8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051da:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051dc:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80051e4:	4629      	mov	r1, r5
 80051e6:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051e8:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051ec:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80051ee:	f001 fdd1 	bl	8006d94 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80051f2:	2111      	movs	r1, #17
 80051f4:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051f8:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80051fa:	e9cd 1301 	strd	r1, r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80051fe:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005200:	f001 fe84 	bl	8006f0c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8005204:	b015      	add	sp, #84	; 0x54
 8005206:	bd30      	pop	{r4, r5, pc}

08005208 <bspInit>:
{
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	b086      	sub	sp, #24
  HAL_Init();
 800520c:	f000 fa90 	bl	8005730 <HAL_Init>
  SystemClock_Config();
 8005210:	f7ff ffbe 	bl	8005190 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005214:	4b13      	ldr	r3, [pc, #76]	; (8005264 <bspInit+0x5c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005216:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800521a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521c:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800521e:	f042 0220 	orr.w	r2, r2, #32
 8005222:	619a      	str	r2, [r3, #24]
 8005224:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005226:	4c10      	ldr	r4, [pc, #64]	; (8005268 <bspInit+0x60>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005228:	f002 0220 	and.w	r2, r2, #32
 800522c:	9200      	str	r2, [sp, #0]
 800522e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005230:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005232:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005234:	f042 0204 	orr.w	r2, r2, #4
 8005238:	619a      	str	r2, [r3, #24]
 800523a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523c:	a902      	add	r1, sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005246:	2311      	movs	r3, #17
 8005248:	e9cd 5302 	strd	r5, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800524c:	2302      	movs	r3, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005250:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005252:	f000 fc87 	bl	8005b64 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8005256:	4632      	mov	r2, r6
 8005258:	4629      	mov	r1, r5
 800525a:	4620      	mov	r0, r4
 800525c:	f000 fdca 	bl	8005df4 <HAL_GPIO_WritePin>
}
 8005260:	b006      	add	sp, #24
 8005262:	bd70      	pop	{r4, r5, r6, pc}
 8005264:	40021000 	.word	0x40021000
 8005268:	40010800 	.word	0x40010800

0800526c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800526c:	4770      	bx	lr
	...

08005270 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005270:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <HAL_MspInit+0x3c>)
{
 8005272:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	619a      	str	r2, [r3, #24]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	f002 0201 	and.w	r2, r2, #1
 8005282:	9200      	str	r2, [sp, #0]
 8005284:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800528c:	61da      	str	r2, [r3, #28]
 800528e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005290:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800529a:	6853      	ldr	r3, [r2, #4]
 800529c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80052a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052a6:	b002      	add	sp, #8
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
 80052b0:	40010000 	.word	0x40010000

080052b4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80052b4:	4770      	bx	lr

080052b6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052b6:	e7fe      	b.n	80052b6 <HardFault_Handler>

080052b8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052b8:	e7fe      	b.n	80052b8 <MemManage_Handler>

080052ba <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052ba:	e7fe      	b.n	80052ba <BusFault_Handler>

080052bc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052bc:	e7fe      	b.n	80052bc <UsageFault_Handler>

080052be <SVC_Handler>:
 80052be:	4770      	bx	lr

080052c0 <DebugMon_Handler>:
 80052c0:	4770      	bx	lr

080052c2 <PendSV_Handler>:
 80052c2:	4770      	bx	lr

080052c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052c4:	f000 ba46 	b.w	8005754 <HAL_IncTick>

080052c8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80052c8:	4801      	ldr	r0, [pc, #4]	; (80052d0 <DMA1_Channel5_IRQHandler+0x8>)
 80052ca:	f000 bbb9 	b.w	8005a40 <HAL_DMA_IRQHandler>
 80052ce:	bf00      	nop
 80052d0:	200003c4 	.word	0x200003c4

080052d4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80052d4:	4801      	ldr	r0, [pc, #4]	; (80052dc <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80052d6:	f000 be41 	b.w	8005f5c <HAL_PCD_IRQHandler>
 80052da:	bf00      	nop
 80052dc:	20001040 	.word	0x20001040

080052e0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80052e0:	4801      	ldr	r0, [pc, #4]	; (80052e8 <USART1_IRQHandler+0x8>)
 80052e2:	f002 b8fd 	b.w	80074e0 <HAL_UART_IRQHandler>
 80052e6:	bf00      	nop
 80052e8:	20000408 	.word	0x20000408

080052ec <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80052ec:	4b01      	ldr	r3, [pc, #4]	; (80052f4 <SystemInit+0x8>)
 80052ee:	4a02      	ldr	r2, [pc, #8]	; (80052f8 <SystemInit+0xc>)
 80052f0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052f2:	4770      	bx	lr
 80052f4:	e000ed00 	.word	0xe000ed00
 80052f8:	08005000 	.word	0x08005000

080052fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80052fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80052fe:	e003      	b.n	8005308 <LoopCopyDataInit>

08005300 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005302:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005304:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005306:	3104      	adds	r1, #4

08005308 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005308:	480a      	ldr	r0, [pc, #40]	; (8005334 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800530c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800530e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005310:	d3f6      	bcc.n	8005300 <CopyDataInit>
  ldr r2, =_sbss
 8005312:	4a0a      	ldr	r2, [pc, #40]	; (800533c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005314:	e002      	b.n	800531c <LoopFillZerobss>

08005316 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005316:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005318:	f842 3b04 	str.w	r3, [r2], #4

0800531c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800531c:	4b08      	ldr	r3, [pc, #32]	; (8005340 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800531e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005320:	d3f9      	bcc.n	8005316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005322:	f7ff ffe3 	bl	80052ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005326:	f003 fe0d 	bl	8008f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800532a:	f003 fe01 	bl	8008f30 <main>
  bx lr
 800532e:	4770      	bx	lr
  ldr r3, =_sidata
 8005330:	0800902c 	.word	0x0800902c
  ldr r0, =_sdata
 8005334:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005338:	20000190 	.word	0x20000190
  ldr r2, =_sbss
 800533c:	20000190 	.word	0x20000190
  ldr r3, = _ebss
 8005340:	2000154c 	.word	0x2000154c

08005344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005344:	e7fe      	b.n	8005344 <ADC1_2_IRQHandler>

08005346 <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
  bool ret = true;

  p_node->in    = 0;
 8005346:	2300      	movs	r3, #0
  p_node->out   = 0;
  p_node->len   = length;
  p_node->p_buf = p_buf;
 8005348:	e9c0 2102 	strd	r2, r1, [r0, #8]
  p_node->out   = 0;
 800534c:	e9c0 3300 	strd	r3, r3, [r0]

  return ret;
}
 8005350:	2001      	movs	r0, #1
 8005352:	4770      	bx	lr

08005354 <flashInit>:

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);


bool flashInit(void)
{
 8005354:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
  {
    flash_tbl[i].addr   = 0x8000000 + i*1024;
    flash_tbl[i].length = 1024;
 8005358:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800535c:	4a05      	ldr	r2, [pc, #20]	; (8005374 <flashInit+0x20>)
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800535e:	4906      	ldr	r1, [pc, #24]	; (8005378 <flashInit+0x24>)
    flash_tbl[i].addr   = 0x8000000 + i*1024;
 8005360:	6013      	str	r3, [r2, #0]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8005362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005366:	428b      	cmp	r3, r1
    flash_tbl[i].length = 1024;
 8005368:	8090      	strh	r0, [r2, #4]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800536a:	f102 0208 	add.w	r2, r2, #8
 800536e:	d1f7      	bne.n	8005360 <flashInit+0xc>
  }

  return true;
}
 8005370:	2001      	movs	r0, #1
 8005372:	4770      	bx	lr
 8005374:	200001ac 	.word	0x200001ac
 8005378:	08010000 	.word	0x08010000

0800537c <ledOff.part.0>:

void ledOff(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800537c:	4b02      	ldr	r3, [pc, #8]	; (8005388 <ledOff.part.0+0xc>)
 800537e:	79da      	ldrb	r2, [r3, #7]
 8005380:	8899      	ldrh	r1, [r3, #4]
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	f000 bd36 	b.w	8005df4 <HAL_GPIO_WritePin>
 8005388:	20000004 	.word	0x20000004

0800538c <ledInit>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800538c:	2300      	movs	r3, #0
{
 800538e:	b510      	push	{r4, lr}
 8005390:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005392:	9304      	str	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005394:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005398:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800539c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800539e:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053a0:	f042 0208 	orr.w	r2, r2, #8
 80053a4:	619a      	str	r2, [r3, #24]
 80053a6:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80053a8:	a902      	add	r1, sp, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b2:	2302      	movs	r3, #2
 80053b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <ledInit+0x44>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053b8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80053ba:	889a      	ldrh	r2, [r3, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80053bc:	6818      	ldr	r0, [r3, #0]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80053be:	9202      	str	r2, [sp, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80053c0:	f000 fbd0 	bl	8005b64 <HAL_GPIO_Init>
  if (ch >= LED_MAX_CH) return;
 80053c4:	f7ff ffda 	bl	800537c <ledOff.part.0>
}
 80053c8:	4620      	mov	r0, r4
 80053ca:	b006      	add	sp, #24
 80053cc:	bd10      	pop	{r4, pc}
 80053ce:	bf00      	nop
 80053d0:	20000004 	.word	0x20000004

080053d4 <ledToggle>:
}

void ledToggle(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 80053d4:	b920      	cbnz	r0, 80053e0 <ledToggle+0xc>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80053d6:	4b03      	ldr	r3, [pc, #12]	; (80053e4 <ledToggle+0x10>)
 80053d8:	8899      	ldrh	r1, [r3, #4]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	f000 bd0f 	b.w	8005dfe <HAL_GPIO_TogglePin>
}
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000004 	.word	0x20000004

080053e8 <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 80053e8:	b508      	push	{r3, lr}
  bool ret = true;


  // 만약 Reset 핀이 눌렸다면
  //
  if (RCC->CSR & (1<<26))
 80053ea:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <resetInit+0x38>)
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	015b      	lsls	r3, r3, #5
 80053f0:	d50f      	bpl.n	8005412 <resetInit+0x2a>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 80053f2:	2001      	movs	r0, #1
 80053f4:	f000 f83c 	bl	8005470 <rtcBackupRegRead>
 80053f8:	1c41      	adds	r1, r0, #1
 80053fa:	2001      	movs	r0, #1
 80053fc:	f000 f83e 	bl	800547c <rtcBackupRegWrite>
    delay(500);
 8005400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005404:	f7ff fec0 	bl	8005188 <delay>
    reset_count = rtcBackupRegRead(1);
 8005408:	2001      	movs	r0, #1
 800540a:	f000 f831 	bl	8005470 <rtcBackupRegRead>
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <resetInit+0x3c>)
 8005410:	6018      	str	r0, [r3, #0]
  }

  rtcBackupRegWrite(1, 0);
 8005412:	2100      	movs	r1, #0
 8005414:	2001      	movs	r0, #1
 8005416:	f000 f831 	bl	800547c <rtcBackupRegWrite>

  return ret;
}
 800541a:	2001      	movs	r0, #1
 800541c:	bd08      	pop	{r3, pc}
 800541e:	bf00      	nop
 8005420:	40021000 	.word	0x40021000
 8005424:	200003ac 	.word	0x200003ac

08005428 <rtcInit>:
bool rtcInit(void)
{
  bool ret = true;


  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005428:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <rtcInit+0x3c>)
{
 800542a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800542c:	699a      	ldr	r2, [r3, #24]


  hrtc.Instance           = RTC;
 800542e:	480e      	ldr	r0, [pc, #56]	; (8005468 <rtcInit+0x40>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005430:	f042 0210 	orr.w	r2, r2, #16
 8005434:	619a      	str	r2, [r3, #24]
 8005436:	699b      	ldr	r3, [r3, #24]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 8005438:	4a0c      	ldr	r2, [pc, #48]	; (800546c <rtcInit+0x44>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800543a:	f003 0310 	and.w	r3, r3, #16
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	9b01      	ldr	r3, [sp, #4]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 8005442:	f04f 33ff 	mov.w	r3, #4294967295
 8005446:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 800544a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800544e:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005450:	f001 fe92 	bl	8007178 <HAL_RTC_Init>
 8005454:	b108      	cbz	r0, 800545a <rtcInit+0x32>
  {
    Error_Handler();
 8005456:	f7ff ff09 	bl	800526c <Error_Handler>
  }

  return ret;
}
 800545a:	2001      	movs	r0, #1
 800545c:	b003      	add	sp, #12
 800545e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000
 8005468:	200003b0 	.word	0x200003b0
 800546c:	40002800 	.word	0x40002800

08005470 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8005470:	4601      	mov	r1, r0
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8005472:	4801      	ldr	r0, [pc, #4]	; (8005478 <rtcBackupRegRead+0x8>)
 8005474:	f001 bed6 	b.w	8007224 <HAL_RTCEx_BKUPRead>
 8005478:	200003b0 	.word	0x200003b0

0800547c <rtcBackupRegWrite>:
}

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 800547c:	460a      	mov	r2, r1
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800547e:	4601      	mov	r1, r0
 8005480:	4801      	ldr	r0, [pc, #4]	; (8005488 <rtcBackupRegWrite+0xc>)
 8005482:	f001 bec7 	b.w	8007214 <HAL_RTCEx_BKUPWrite>
 8005486:	bf00      	nop
 8005488:	200003b0 	.word	0x200003b0

0800548c <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800548c:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 800548e:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <HAL_RTC_MspInit+0x30>)
 8005490:	6802      	ldr	r2, [r0, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d10f      	bne.n	80054b6 <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8005496:	f001 faa1 	bl	80069dc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RTC_MspInit+0x34>)
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80054a2:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80054a4:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80054b0:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <HAL_RTC_MspInit+0x38>)
 80054b2:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80054b6:	b003      	add	sp, #12
 80054b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80054bc:	40002800 	.word	0x40002800
 80054c0:	40021000 	.word	0x40021000
 80054c4:	42420000 	.word	0x42420000

080054c8 <uartInit>:
    is_open[i] = false;
  }


  return true;
}
 80054c8:	2001      	movs	r0, #1
 80054ca:	4770      	bx	lr

080054cc <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80054cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  bool ret = false;


  switch(ch)
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d040      	beq.n	8005554 <uartOpen+0x88>
 80054d2:	2801      	cmp	r0, #1
 80054d4:	d140      	bne.n	8005558 <uartOpen+0x8c>
      is_open[ch] = true;
      ret = true;
      break;

    case _DEF_UART2:
      huart1.Instance         = USART1;
 80054d6:	4d22      	ldr	r5, [pc, #136]	; (8005560 <uartOpen+0x94>)
 80054d8:	4b22      	ldr	r3, [pc, #136]	; (8005564 <uartOpen+0x98>)
      huart1.Init.BaudRate    = baud;
      huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 80054da:	2400      	movs	r4, #0
      huart1.Init.BaudRate    = baud;
 80054dc:	e9c5 3100 	strd	r3, r1, [r5]
      huart1.Init.StopBits    = UART_STOPBITS_1;
      huart1.Init.Parity      = UART_PARITY_NONE;
      huart1.Init.Mode        = UART_MODE_TX_RX;
 80054e0:	230c      	movs	r3, #12
      huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
      huart1.Init.OverSampling= UART_OVERSAMPLING_16;

      HAL_UART_DeInit(&huart1);

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80054e2:	4e21      	ldr	r6, [pc, #132]	; (8005568 <uartOpen+0x9c>)
      HAL_UART_DeInit(&huart1);
 80054e4:	4628      	mov	r0, r5
      huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 80054e6:	e9c5 3405 	strd	r3, r4, [r5, #20]
      huart1.Init.StopBits    = UART_STOPBITS_1;
 80054ea:	e9c5 4402 	strd	r4, r4, [r5, #8]
      huart1.Init.Parity      = UART_PARITY_NONE;
 80054ee:	612c      	str	r4, [r5, #16]
      huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 80054f0:	61ec      	str	r4, [r5, #28]
      HAL_UART_DeInit(&huart1);
 80054f2:	f001 ff15 	bl	8007320 <HAL_UART_DeInit>
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80054f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054fa:	491c      	ldr	r1, [pc, #112]	; (800556c <uartOpen+0xa0>)
 80054fc:	f106 0010 	add.w	r0, r6, #16
 8005500:	f7ff ff21 	bl	8005346 <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8005504:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <uartOpen+0xa4>)
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005506:	4621      	mov	r1, r4
      __HAL_RCC_DMA1_CLK_ENABLE();
 8005508:	695a      	ldr	r2, [r3, #20]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800550a:	200f      	movs	r0, #15
      __HAL_RCC_DMA1_CLK_ENABLE();
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	615a      	str	r2, [r3, #20]
 8005512:	695b      	ldr	r3, [r3, #20]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005514:	4622      	mov	r2, r4
      __HAL_RCC_DMA1_CLK_ENABLE();
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	9301      	str	r3, [sp, #4]
 800551c:	9b01      	ldr	r3, [sp, #4]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800551e:	f000 f94f 	bl	80057c0 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005522:	200f      	movs	r0, #15
 8005524:	f000 f97e 	bl	8005824 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8005528:	4628      	mov	r0, r5
 800552a:	f001 fecb 	bl	80072c4 <HAL_UART_Init>
 800552e:	b9a8      	cbnz	r0, 800555c <uartOpen+0x90>
      else
      {
        ret = true;
        is_open[ch] = true;

        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8005530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005534:	4628      	mov	r0, r5
 8005536:	490d      	ldr	r1, [pc, #52]	; (800556c <uartOpen+0xa0>)
 8005538:	f001 ff0a 	bl	8007350 <HAL_UART_Receive_DMA>
 800553c:	fab0 f080 	clz	r0, r0
        {
          ret = false;
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <uartOpen+0xa8>)
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8005542:	0940      	lsrs	r0, r0, #5
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	69b3      	ldr	r3, [r6, #24]
 800554a:	1a9b      	subs	r3, r3, r2
        qbuffer[ch].out = qbuffer[ch].in;
 800554c:	e9c6 3304 	strd	r3, r3, [r6, #16]
      }
      break;
  }

  return ret;
}
 8005550:	b002      	add	sp, #8
 8005552:	bd70      	pop	{r4, r5, r6, pc}
  switch(ch)
 8005554:	2001      	movs	r0, #1
 8005556:	e7fb      	b.n	8005550 <uartOpen+0x84>
  bool ret = false;
 8005558:	2000      	movs	r0, #0
 800555a:	e7f9      	b.n	8005550 <uartOpen+0x84>
        ret = false;
 800555c:	4620      	mov	r0, r4
 800555e:	e7f7      	b.n	8005550 <uartOpen+0x84>
 8005560:	20000408 	.word	0x20000408
 8005564:	40013800 	.word	0x40013800
 8005568:	20000448 	.word	0x20000448
 800556c:	20000468 	.word	0x20000468
 8005570:	40021000 	.word	0x40021000
 8005574:	200003c4 	.word	0x200003c4

08005578 <HAL_UART_ErrorCallback>:
 8005578:	4770      	bx	lr

0800557a <HAL_UART_RxCpltCallback>:
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 800557a:	4770      	bx	lr

0800557c <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4606      	mov	r6, r0
 8005580:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005582:	2210      	movs	r2, #16
 8005584:	2100      	movs	r1, #0
 8005586:	a802      	add	r0, sp, #8
 8005588:	f003 fd00 	bl	8008f8c <memset>
  if(uartHandle->Instance==USART1)
 800558c:	6832      	ldr	r2, [r6, #0]
 800558e:	4b25      	ldr	r3, [pc, #148]	; (8005624 <HAL_UART_MspInit+0xa8>)
 8005590:	429a      	cmp	r2, r3
 8005592:	d144      	bne.n	800561e <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005594:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005598:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800559a:	4823      	ldr	r0, [pc, #140]	; (8005628 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800559c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055a0:	619a      	str	r2, [r3, #24]
 80055a2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055a4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80055a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80055aa:	9200      	str	r2, [sp, #0]
 80055ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ae:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055b0:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055b2:	f042 0204 	orr.w	r2, r2, #4
 80055b6:	619a      	str	r2, [r3, #24]
 80055b8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ba:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c6:	2302      	movs	r3, #2
 80055c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055cc:	2303      	movs	r3, #3
 80055ce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d0:	f000 fac8 	bl	8005b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d8:	4813      	ldr	r0, [pc, #76]	; (8005628 <HAL_UART_MspInit+0xac>)
 80055da:	a902      	add	r1, sp, #8

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80055dc:	4c13      	ldr	r4, [pc, #76]	; (800562c <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055de:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e2:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055e4:	f000 fabe 	bl	8005b64 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80055e8:	4b11      	ldr	r3, [pc, #68]	; (8005630 <HAL_UART_MspInit+0xb4>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80055ea:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055ec:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055f0:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055f2:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80055f6:	2320      	movs	r3, #32
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055f8:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055fa:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055fe:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005600:	f000 f946 	bl	8005890 <HAL_DMA_Init>
 8005604:	b108      	cbz	r0, 800560a <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8005606:	f7ff fe31 	bl	800526c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800560a:	2200      	movs	r2, #0
 800560c:	2025      	movs	r0, #37	; 0x25
 800560e:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005610:	6374      	str	r4, [r6, #52]	; 0x34
 8005612:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005614:	f000 f8d4 	bl	80057c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005618:	2025      	movs	r0, #37	; 0x25
 800561a:	f000 f903 	bl	8005824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800561e:	b006      	add	sp, #24
 8005620:	bd70      	pop	{r4, r5, r6, pc}
 8005622:	bf00      	nop
 8005624:	40013800 	.word	0x40013800
 8005628:	40010800 	.word	0x40010800
 800562c:	200003c4 	.word	0x200003c4
 8005630:	40020058 	.word	0x40020058

08005634 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 8005634:	6802      	ldr	r2, [r0, #0]
 8005636:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <HAL_UART_MspDeInit+0x34>)
{
 8005638:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 800563a:	429a      	cmp	r2, r3
{
 800563c:	4604      	mov	r4, r0
  if(uartHandle->Instance==USART1)
 800563e:	d111      	bne.n	8005664 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005640:	4a0a      	ldr	r2, [pc, #40]	; (800566c <HAL_UART_MspDeInit+0x38>)

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005642:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 8005646:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005648:	4809      	ldr	r0, [pc, #36]	; (8005670 <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_USART1_CLK_DISABLE();
 800564a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800564e:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005650:	f000 fb62 	bl	8005d18 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8005654:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005656:	f000 f949 	bl	80058ec <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800565a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800565e:	2025      	movs	r0, #37	; 0x25
 8005660:	f000 b8ee 	b.w	8005840 <HAL_NVIC_DisableIRQ>
}
 8005664:	bd10      	pop	{r4, pc}
 8005666:	bf00      	nop
 8005668:	40013800 	.word	0x40013800
 800566c:	40021000 	.word	0x40021000
 8005670:	40010800 	.word	0x40010800

08005674 <usbInit>:




bool usbInit(void)
{
 8005674:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}


  GPIO_InitTypeDef GPIO_InitStruct = {0};

  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005676:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800567a:	2311      	movs	r3, #17
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800567c:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800567e:	e9cd 6300 	strd	r6, r3, [sp]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005682:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005684:	4c0e      	ldr	r4, [pc, #56]	; (80056c0 <usbInit+0x4c>)
 8005686:	4669      	mov	r1, sp
 8005688:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800568a:	9303      	str	r3, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800568c:	9502      	str	r5, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800568e:	f000 fa69 	bl	8005b64 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8005692:	462a      	mov	r2, r5
 8005694:	4631      	mov	r1, r6
 8005696:	4620      	mov	r0, r4
 8005698:	f000 fbac 	bl	8005df4 <HAL_GPIO_WritePin>
  delay(200);
 800569c:	20c8      	movs	r0, #200	; 0xc8
 800569e:	f7ff fd73 	bl	8005188 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80056a2:	2201      	movs	r2, #1
 80056a4:	4631      	mov	r1, r6
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 fba4 	bl	8005df4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ac:	4620      	mov	r0, r4
 80056ae:	4669      	mov	r1, sp
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056b0:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b2:	f000 fa57 	bl	8005b64 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 80056b6:	f003 f9d5 	bl	8008a64 <MX_USB_DEVICE_Init>

  return ret;
}
 80056ba:	2001      	movs	r0, #1
 80056bc:	b004      	add	sp, #16
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	40010800 	.word	0x40010800

080056c4 <hwInit>:




void hwInit(void)
{
 80056c4:	b508      	push	{r3, lr}
  bspInit();
 80056c6:	f7ff fd9f 	bl	8005208 <bspInit>
  rtcInit();
 80056ca:	f7ff fead 	bl	8005428 <rtcInit>

  resetInit();
 80056ce:	f7ff fe8b 	bl	80053e8 <resetInit>
  ledInit();
 80056d2:	f7ff fe5b 	bl	800538c <ledInit>
  usbInit();
 80056d6:	f7ff ffcd 	bl	8005674 <usbInit>
  uartInit();
 80056da:	f7ff fef5 	bl	80054c8 <uartInit>
  flashInit();
}
 80056de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flashInit();
 80056e2:	f7ff be37 	b.w	8005354 <flashInit>
	...

080056e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056ea:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <HAL_InitTick+0x3c>)
{
 80056ec:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056ee:	7818      	ldrb	r0, [r3, #0]
 80056f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80056f8:	4a0b      	ldr	r2, [pc, #44]	; (8005728 <HAL_InitTick+0x40>)
 80056fa:	6810      	ldr	r0, [r2, #0]
 80056fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8005700:	f000 f8b2 	bl	8005868 <HAL_SYSTICK_Config>
 8005704:	4604      	mov	r4, r0
 8005706:	b958      	cbnz	r0, 8005720 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005708:	2d0f      	cmp	r5, #15
 800570a:	d809      	bhi.n	8005720 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800570c:	4602      	mov	r2, r0
 800570e:	4629      	mov	r1, r5
 8005710:	f04f 30ff 	mov.w	r0, #4294967295
 8005714:	f000 f854 	bl	80057c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005718:	4620      	mov	r0, r4
 800571a:	4b04      	ldr	r3, [pc, #16]	; (800572c <HAL_InitTick+0x44>)
 800571c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800571e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005720:	2001      	movs	r0, #1
 8005722:	e7fc      	b.n	800571e <HAL_InitTick+0x36>
 8005724:	2000000c 	.word	0x2000000c
 8005728:	20000000 	.word	0x20000000
 800572c:	20000010 	.word	0x20000010

08005730 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005730:	4a07      	ldr	r2, [pc, #28]	; (8005750 <HAL_Init+0x20>)
{
 8005732:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005734:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005736:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005738:	f043 0310 	orr.w	r3, r3, #16
 800573c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800573e:	f000 f82d 	bl	800579c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005742:	2000      	movs	r0, #0
 8005744:	f7ff ffd0 	bl	80056e8 <HAL_InitTick>
  HAL_MspInit();
 8005748:	f7ff fd92 	bl	8005270 <HAL_MspInit>
}
 800574c:	2000      	movs	r0, #0
 800574e:	bd08      	pop	{r3, pc}
 8005750:	40022000 	.word	0x40022000

08005754 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005754:	4a03      	ldr	r2, [pc, #12]	; (8005764 <HAL_IncTick+0x10>)
 8005756:	4b04      	ldr	r3, [pc, #16]	; (8005768 <HAL_IncTick+0x14>)
 8005758:	6811      	ldr	r1, [r2, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	440b      	add	r3, r1
 800575e:	6013      	str	r3, [r2, #0]
}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000568 	.word	0x20000568
 8005768:	2000000c 	.word	0x2000000c

0800576c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800576c:	4b01      	ldr	r3, [pc, #4]	; (8005774 <HAL_GetTick+0x8>)
 800576e:	6818      	ldr	r0, [r3, #0]
}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20000568 	.word	0x20000568

08005778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800577c:	f7ff fff6 	bl	800576c <HAL_GetTick>
 8005780:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005782:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005784:	bf1e      	ittt	ne
 8005786:	4b04      	ldrne	r3, [pc, #16]	; (8005798 <HAL_Delay+0x20>)
 8005788:	781b      	ldrbne	r3, [r3, #0]
 800578a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800578c:	f7ff ffee 	bl	800576c <HAL_GetTick>
 8005790:	1b43      	subs	r3, r0, r5
 8005792:	42a3      	cmp	r3, r4
 8005794:	d3fa      	bcc.n	800578c <HAL_Delay+0x14>
  {
  }
}
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	2000000c 	.word	0x2000000c

0800579c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800579c:	4907      	ldr	r1, [pc, #28]	; (80057bc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800579e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057a0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80057a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057aa:	0412      	lsls	r2, r2, #16
 80057ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80057b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80057ba:	4770      	bx	lr
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057c0:	4b16      	ldr	r3, [pc, #88]	; (800581c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057c2:	b530      	push	{r4, r5, lr}
 80057c4:	68dc      	ldr	r4, [r3, #12]
 80057c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	bf28      	it	cs
 80057d4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057d6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057dc:	bf98      	it	ls
 80057de:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e0:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e4:	bf88      	it	hi
 80057e6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e8:	ea21 0303 	bic.w	r3, r1, r3
 80057ec:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057ee:	fa05 f404 	lsl.w	r4, r5, r4
 80057f2:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80057f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fc:	bfac      	ite	ge
 80057fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005802:	4a07      	ldrlt	r2, [pc, #28]	; (8005820 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005804:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005808:	b2db      	uxtb	r3, r3
 800580a:	bfab      	itete	ge
 800580c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005810:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005814:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005818:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800581a:	bd30      	pop	{r4, r5, pc}
 800581c:	e000ed00 	.word	0xe000ed00
 8005820:	e000ed14 	.word	0xe000ed14

08005824 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005824:	2800      	cmp	r0, #0
 8005826:	db08      	blt.n	800583a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005828:	2301      	movs	r3, #1
 800582a:	0942      	lsrs	r2, r0, #5
 800582c:	f000 001f 	and.w	r0, r0, #31
 8005830:	fa03 f000 	lsl.w	r0, r3, r0
 8005834:	4b01      	ldr	r3, [pc, #4]	; (800583c <HAL_NVIC_EnableIRQ+0x18>)
 8005836:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800583a:	4770      	bx	lr
 800583c:	e000e100 	.word	0xe000e100

08005840 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005840:	2800      	cmp	r0, #0
 8005842:	db0d      	blt.n	8005860 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005844:	2201      	movs	r2, #1
 8005846:	0943      	lsrs	r3, r0, #5
 8005848:	f000 001f 	and.w	r0, r0, #31
 800584c:	fa02 f000 	lsl.w	r0, r2, r0
 8005850:	4a04      	ldr	r2, [pc, #16]	; (8005864 <HAL_NVIC_DisableIRQ+0x24>)
 8005852:	3320      	adds	r3, #32
 8005854:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005858:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800585c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	e000e100 	.word	0xe000e100

08005868 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005868:	3801      	subs	r0, #1
 800586a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800586e:	d20b      	bcs.n	8005888 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005870:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005874:	21f0      	movs	r1, #240	; 0xf0
 8005876:	4a05      	ldr	r2, [pc, #20]	; (800588c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005878:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800587e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005880:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005882:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005884:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005886:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005888:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800588a:	4770      	bx	lr
 800588c:	e000ed00 	.word	0xe000ed00

08005890 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005890:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005892:	b320      	cbz	r0, 80058de <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005894:	2214      	movs	r2, #20
 8005896:	6801      	ldr	r1, [r0, #0]
 8005898:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <HAL_DMA_Init+0x54>)
 800589a:	440b      	add	r3, r1
 800589c:	fbb3 f3f2 	udiv	r3, r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80058a4:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058a6:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80058a8:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058aa:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80058ae:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058b0:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80058b2:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058b6:	4323      	orrs	r3, r4
 80058b8:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80058ba:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058be:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058c0:	6944      	ldr	r4, [r0, #20]
 80058c2:	4323      	orrs	r3, r4
 80058c4:	6984      	ldr	r4, [r0, #24]
 80058c6:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80058c8:	69c4      	ldr	r4, [r0, #28]
 80058ca:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80058cc:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058ce:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058d0:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058d4:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 80058d6:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058d8:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80058da:	4618      	mov	r0, r3
}
 80058dc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80058de:	2001      	movs	r0, #1
 80058e0:	e7fc      	b.n	80058dc <HAL_DMA_Init+0x4c>
 80058e2:	bf00      	nop
 80058e4:	bffdfff8 	.word	0xbffdfff8
 80058e8:	40020000 	.word	0x40020000

080058ec <HAL_DMA_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80058ec:	4603      	mov	r3, r0
{
 80058ee:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80058f0:	b1e8      	cbz	r0, 800592e <HAL_DMA_DeInit+0x42>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80058f2:	6801      	ldr	r1, [r0, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80058f4:	2000      	movs	r0, #0
  __HAL_DMA_DISABLE(hdma);
 80058f6:	680a      	ldr	r2, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
 80058f8:	4c0e      	ldr	r4, [pc, #56]	; (8005934 <HAL_DMA_DeInit+0x48>)
  __HAL_DMA_DISABLE(hdma);
 80058fa:	f022 0201 	bic.w	r2, r2, #1
 80058fe:	600a      	str	r2, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005900:	4a0d      	ldr	r2, [pc, #52]	; (8005938 <HAL_DMA_DeInit+0x4c>)
  hdma->Instance->CCR  = 0U;
 8005902:	6008      	str	r0, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005904:	440a      	add	r2, r1
  hdma->Instance->CNDTR = 0U;
 8005906:	6048      	str	r0, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8005908:	6088      	str	r0, [r1, #8]
  hdma->Instance->CMAR = 0U;
 800590a:	60c8      	str	r0, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800590c:	2114      	movs	r1, #20
 800590e:	fbb2 f2f1 	udiv	r2, r2, r1
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005912:	2101      	movs	r1, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005914:	0092      	lsls	r2, r2, #2
 8005916:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005918:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 800591c:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800591e:	6062      	str	r2, [r4, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
  hdma->XferHalfCpltCallback = NULL;
 8005920:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;
 8005924:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005928:	6398      	str	r0, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800592a:	8418      	strh	r0, [r3, #32]

  return HAL_OK;
}
 800592c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800592e:	2001      	movs	r0, #1
 8005930:	e7fc      	b.n	800592c <HAL_DMA_DeInit+0x40>
 8005932:	bf00      	nop
 8005934:	40020000 	.word	0x40020000
 8005938:	bffdfff8 	.word	0xbffdfff8

0800593c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800593c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800593e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8005942:	2c01      	cmp	r4, #1
 8005944:	d034      	beq.n	80059b0 <HAL_DMA_Start_IT+0x74>
 8005946:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005948:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800594c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005950:	42a5      	cmp	r5, r4
 8005952:	f04f 0600 	mov.w	r6, #0
 8005956:	f04f 0402 	mov.w	r4, #2
 800595a:	d127      	bne.n	80059ac <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800595c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005960:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005962:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8005964:	6826      	ldr	r6, [r4, #0]
 8005966:	f026 0601 	bic.w	r6, r6, #1
 800596a:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800596c:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8005970:	40bd      	lsls	r5, r7
 8005972:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005974:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005976:	6843      	ldr	r3, [r0, #4]
 8005978:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800597a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800597c:	bf0b      	itete	eq
 800597e:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005980:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005982:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005984:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8005986:	b14b      	cbz	r3, 800599c <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800598e:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005990:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	6023      	str	r3, [r4, #0]
}
 800599a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	f023 0304 	bic.w	r3, r3, #4
 80059a2:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	f043 030a 	orr.w	r3, r3, #10
 80059aa:	e7f0      	b.n	800598e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80059ac:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80059b0:	2002      	movs	r0, #2
 80059b2:	e7f2      	b.n	800599a <HAL_DMA_Start_IT+0x5e>

080059b4 <HAL_DMA_Abort_IT>:
{  
 80059b4:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80059b6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d003      	beq.n	80059c6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059be:	2304      	movs	r3, #4
 80059c0:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80059c2:	2001      	movs	r0, #1
}
 80059c4:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059c6:	6803      	ldr	r3, [r0, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	f022 020e 	bic.w	r2, r2, #14
 80059ce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80059d8:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <HAL_DMA_Abort_IT+0x84>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d01c      	beq.n	8005a18 <HAL_DMA_Abort_IT+0x64>
 80059de:	3214      	adds	r2, #20
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d01b      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x68>
 80059e4:	3214      	adds	r2, #20
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01a      	beq.n	8005a20 <HAL_DMA_Abort_IT+0x6c>
 80059ea:	3214      	adds	r2, #20
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d01a      	beq.n	8005a26 <HAL_DMA_Abort_IT+0x72>
 80059f0:	3214      	adds	r2, #20
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01a      	beq.n	8005a2c <HAL_DMA_Abort_IT+0x78>
 80059f6:	3214      	adds	r2, #20
 80059f8:	4293      	cmp	r3, r2
 80059fa:	bf0c      	ite	eq
 80059fc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8005a00:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8005a04:	4a0d      	ldr	r2, [pc, #52]	; (8005a3c <HAL_DMA_Abort_IT+0x88>)
 8005a06:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8005a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a0c:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8005a0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a10:	b17b      	cbz	r3, 8005a32 <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8005a12:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005a14:	2000      	movs	r0, #0
 8005a16:	e7d5      	b.n	80059c4 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e7f3      	b.n	8005a04 <HAL_DMA_Abort_IT+0x50>
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	e7f1      	b.n	8005a04 <HAL_DMA_Abort_IT+0x50>
 8005a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a24:	e7ee      	b.n	8005a04 <HAL_DMA_Abort_IT+0x50>
 8005a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a2a:	e7eb      	b.n	8005a04 <HAL_DMA_Abort_IT+0x50>
 8005a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a30:	e7e8      	b.n	8005a04 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8005a32:	4618      	mov	r0, r3
 8005a34:	e7c6      	b.n	80059c4 <HAL_DMA_Abort_IT+0x10>
 8005a36:	bf00      	nop
 8005a38:	40020008 	.word	0x40020008
 8005a3c:	40020000 	.word	0x40020000

08005a40 <HAL_DMA_IRQHandler>:
{
 8005a40:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a42:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a44:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a46:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a48:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005a4a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a4c:	4095      	lsls	r5, r2
 8005a4e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005a50:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a52:	d032      	beq.n	8005aba <HAL_DMA_IRQHandler+0x7a>
 8005a54:	074d      	lsls	r5, r1, #29
 8005a56:	d530      	bpl.n	8005aba <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a5c:	bf5e      	ittt	pl
 8005a5e:	681a      	ldrpl	r2, [r3, #0]
 8005a60:	f022 0204 	bicpl.w	r2, r2, #4
 8005a64:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a66:	4a3d      	ldr	r2, [pc, #244]	; (8005b5c <HAL_DMA_IRQHandler+0x11c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d019      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x60>
 8005a6c:	3214      	adds	r2, #20
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x64>
 8005a72:	3214      	adds	r2, #20
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d017      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x68>
 8005a78:	3214      	adds	r2, #20
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d017      	beq.n	8005aae <HAL_DMA_IRQHandler+0x6e>
 8005a7e:	3214      	adds	r2, #20
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d017      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x74>
 8005a84:	3214      	adds	r2, #20
 8005a86:	4293      	cmp	r3, r2
 8005a88:	bf0c      	ite	eq
 8005a8a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8005a8e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8005a92:	4a33      	ldr	r2, [pc, #204]	; (8005b60 <HAL_DMA_IRQHandler+0x120>)
 8005a94:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005a96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d05c      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x116>
}
 8005a9c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005a9e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	e7f6      	b.n	8005a92 <HAL_DMA_IRQHandler+0x52>
 8005aa4:	2340      	movs	r3, #64	; 0x40
 8005aa6:	e7f4      	b.n	8005a92 <HAL_DMA_IRQHandler+0x52>
 8005aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aac:	e7f1      	b.n	8005a92 <HAL_DMA_IRQHandler+0x52>
 8005aae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ab2:	e7ee      	b.n	8005a92 <HAL_DMA_IRQHandler+0x52>
 8005ab4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ab8:	e7eb      	b.n	8005a92 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005aba:	2502      	movs	r5, #2
 8005abc:	4095      	lsls	r5, r2
 8005abe:	4225      	tst	r5, r4
 8005ac0:	d035      	beq.n	8005b2e <HAL_DMA_IRQHandler+0xee>
 8005ac2:	078d      	lsls	r5, r1, #30
 8005ac4:	d533      	bpl.n	8005b2e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	0694      	lsls	r4, r2, #26
 8005aca:	d406      	bmi.n	8005ada <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	f022 020a 	bic.w	r2, r2, #10
 8005ad2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ada:	4a20      	ldr	r2, [pc, #128]	; (8005b5c <HAL_DMA_IRQHandler+0x11c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d019      	beq.n	8005b14 <HAL_DMA_IRQHandler+0xd4>
 8005ae0:	3214      	adds	r2, #20
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d018      	beq.n	8005b18 <HAL_DMA_IRQHandler+0xd8>
 8005ae6:	3214      	adds	r2, #20
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d017      	beq.n	8005b1c <HAL_DMA_IRQHandler+0xdc>
 8005aec:	3214      	adds	r2, #20
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d017      	beq.n	8005b22 <HAL_DMA_IRQHandler+0xe2>
 8005af2:	3214      	adds	r2, #20
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d017      	beq.n	8005b28 <HAL_DMA_IRQHandler+0xe8>
 8005af8:	3214      	adds	r2, #20
 8005afa:	4293      	cmp	r3, r2
 8005afc:	bf0c      	ite	eq
 8005afe:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8005b02:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8005b06:	4a16      	ldr	r2, [pc, #88]	; (8005b60 <HAL_DMA_IRQHandler+0x120>)
 8005b08:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005b10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b12:	e7c1      	b.n	8005a98 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b14:	2302      	movs	r3, #2
 8005b16:	e7f6      	b.n	8005b06 <HAL_DMA_IRQHandler+0xc6>
 8005b18:	2320      	movs	r3, #32
 8005b1a:	e7f4      	b.n	8005b06 <HAL_DMA_IRQHandler+0xc6>
 8005b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b20:	e7f1      	b.n	8005b06 <HAL_DMA_IRQHandler+0xc6>
 8005b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b26:	e7ee      	b.n	8005b06 <HAL_DMA_IRQHandler+0xc6>
 8005b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b2c:	e7eb      	b.n	8005b06 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005b2e:	2508      	movs	r5, #8
 8005b30:	4095      	lsls	r5, r2
 8005b32:	4225      	tst	r5, r4
 8005b34:	d00f      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x116>
 8005b36:	0709      	lsls	r1, r1, #28
 8005b38:	d50d      	bpl.n	8005b56 <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b3a:	6819      	ldr	r1, [r3, #0]
 8005b3c:	f021 010e 	bic.w	r1, r1, #14
 8005b40:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005b42:	2301      	movs	r3, #1
 8005b44:	fa03 f202 	lsl.w	r2, r3, r2
 8005b48:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b4a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8005b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b50:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8005b52:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005b54:	e7a0      	b.n	8005a98 <HAL_DMA_IRQHandler+0x58>
}
 8005b56:	bc70      	pop	{r4, r5, r6}
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40020008 	.word	0x40020008
 8005b60:	40020000 	.word	0x40020000

08005b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005b68:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8005b6a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b6c:	4f64      	ldr	r7, [pc, #400]	; (8005d00 <HAL_GPIO_Init+0x19c>)
 8005b6e:	4b65      	ldr	r3, [pc, #404]	; (8005d04 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8005b70:	f8df c194 	ldr.w	ip, [pc, #404]	; 8005d08 <HAL_GPIO_Init+0x1a4>
 8005b74:	f8df e194 	ldr.w	lr, [pc, #404]	; 8005d0c <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b78:	680d      	ldr	r5, [r1, #0]
 8005b7a:	fa35 f406 	lsrs.w	r4, r5, r6
 8005b7e:	d102      	bne.n	8005b86 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8005b80:	b003      	add	sp, #12
 8005b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8005b86:	f04f 0801 	mov.w	r8, #1
 8005b8a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b8e:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8005b92:	ea38 0505 	bics.w	r5, r8, r5
 8005b96:	d17b      	bne.n	8005c90 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8005b98:	684d      	ldr	r5, [r1, #4]
 8005b9a:	2d03      	cmp	r5, #3
 8005b9c:	d807      	bhi.n	8005bae <HAL_GPIO_Init+0x4a>
 8005b9e:	3d01      	subs	r5, #1
 8005ba0:	2d02      	cmp	r5, #2
 8005ba2:	f200 8088 	bhi.w	8005cb6 <HAL_GPIO_Init+0x152>
 8005ba6:	e8df f005 	tbb	[pc, r5]
 8005baa:	9b96      	.short	0x9b96
 8005bac:	a1          	.byte	0xa1
 8005bad:	00          	.byte	0x00
 8005bae:	2d12      	cmp	r5, #18
 8005bb0:	f000 8099 	beq.w	8005ce6 <HAL_GPIO_Init+0x182>
 8005bb4:	d86e      	bhi.n	8005c94 <HAL_GPIO_Init+0x130>
 8005bb6:	2d11      	cmp	r5, #17
 8005bb8:	f000 808f 	beq.w	8005cda <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005bbc:	2cff      	cmp	r4, #255	; 0xff
 8005bbe:	bf98      	it	ls
 8005bc0:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005bc2:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005bc6:	bf88      	it	hi
 8005bc8:	f100 0a04 	addhi.w	sl, r0, #4
 8005bcc:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005bd0:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005bd4:	bf88      	it	hi
 8005bd6:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005bd8:	fa09 fb05 	lsl.w	fp, r9, r5
 8005bdc:	ea28 080b 	bic.w	r8, r8, fp
 8005be0:	fa02 f505 	lsl.w	r5, r2, r5
 8005be4:	ea48 0505 	orr.w	r5, r8, r5
 8005be8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bec:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8005bf0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8005bf4:	d04c      	beq.n	8005c90 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005bf6:	69bd      	ldr	r5, [r7, #24]
 8005bf8:	f026 0803 	bic.w	r8, r6, #3
 8005bfc:	f045 0501 	orr.w	r5, r5, #1
 8005c00:	61bd      	str	r5, [r7, #24]
 8005c02:	69bd      	ldr	r5, [r7, #24]
 8005c04:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8005c08:	f005 0501 	and.w	r5, r5, #1
 8005c0c:	9501      	str	r5, [sp, #4]
 8005c0e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005c12:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005c16:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005c18:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8005c1c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005c20:	fa09 f90b 	lsl.w	r9, r9, fp
 8005c24:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c28:	4d39      	ldr	r5, [pc, #228]	; (8005d10 <HAL_GPIO_Init+0x1ac>)
 8005c2a:	42a8      	cmp	r0, r5
 8005c2c:	d062      	beq.n	8005cf4 <HAL_GPIO_Init+0x190>
 8005c2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c32:	42a8      	cmp	r0, r5
 8005c34:	d060      	beq.n	8005cf8 <HAL_GPIO_Init+0x194>
 8005c36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c3a:	42a8      	cmp	r0, r5
 8005c3c:	d05e      	beq.n	8005cfc <HAL_GPIO_Init+0x198>
 8005c3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c42:	42a8      	cmp	r0, r5
 8005c44:	bf0c      	ite	eq
 8005c46:	2503      	moveq	r5, #3
 8005c48:	2504      	movne	r5, #4
 8005c4a:	fa05 f50b 	lsl.w	r5, r5, fp
 8005c4e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8005c52:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8005c56:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c58:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8005c5c:	bf14      	ite	ne
 8005c5e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005c60:	43a5      	biceq	r5, r4
 8005c62:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8005c64:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c66:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8005c6a:	bf14      	ite	ne
 8005c6c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005c6e:	43a5      	biceq	r5, r4
 8005c70:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c72:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c74:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c78:	bf14      	ite	ne
 8005c7a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c7c:	43a5      	biceq	r5, r4
 8005c7e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c80:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c82:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c86:	bf14      	ite	ne
 8005c88:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005c8a:	ea25 0404 	biceq.w	r4, r5, r4
 8005c8e:	60dc      	str	r4, [r3, #12]
	position++;
 8005c90:	3601      	adds	r6, #1
 8005c92:	e771      	b.n	8005b78 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8005c94:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8005d14 <HAL_GPIO_Init+0x1b0>
 8005c98:	454d      	cmp	r5, r9
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_GPIO_Init+0x152>
 8005c9c:	d817      	bhi.n	8005cce <HAL_GPIO_Init+0x16a>
 8005c9e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005ca2:	454d      	cmp	r5, r9
 8005ca4:	d007      	beq.n	8005cb6 <HAL_GPIO_Init+0x152>
 8005ca6:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8005caa:	454d      	cmp	r5, r9
 8005cac:	d003      	beq.n	8005cb6 <HAL_GPIO_Init+0x152>
 8005cae:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005cb2:	454d      	cmp	r5, r9
 8005cb4:	d182      	bne.n	8005bbc <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005cb6:	688a      	ldr	r2, [r1, #8]
 8005cb8:	b1d2      	cbz	r2, 8005cf0 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005cba:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8005cbc:	bf08      	it	eq
 8005cbe:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005cc2:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8005cc6:	bf18      	it	ne
 8005cc8:	f8c0 8014 	strne.w	r8, [r0, #20]
 8005ccc:	e776      	b.n	8005bbc <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8005cce:	4565      	cmp	r5, ip
 8005cd0:	d0f1      	beq.n	8005cb6 <HAL_GPIO_Init+0x152>
 8005cd2:	4575      	cmp	r5, lr
 8005cd4:	e7ee      	b.n	8005cb4 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005cd6:	68ca      	ldr	r2, [r1, #12]
          break;
 8005cd8:	e770      	b.n	8005bbc <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005cda:	68ca      	ldr	r2, [r1, #12]
 8005cdc:	3204      	adds	r2, #4
          break;
 8005cde:	e76d      	b.n	8005bbc <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005ce0:	68ca      	ldr	r2, [r1, #12]
 8005ce2:	3208      	adds	r2, #8
          break;
 8005ce4:	e76a      	b.n	8005bbc <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ce6:	68ca      	ldr	r2, [r1, #12]
 8005ce8:	320c      	adds	r2, #12
          break;
 8005cea:	e767      	b.n	8005bbc <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8005cec:	2200      	movs	r2, #0
 8005cee:	e765      	b.n	8005bbc <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	e763      	b.n	8005bbc <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005cf4:	2500      	movs	r5, #0
 8005cf6:	e7a8      	b.n	8005c4a <HAL_GPIO_Init+0xe6>
 8005cf8:	2501      	movs	r5, #1
 8005cfa:	e7a6      	b.n	8005c4a <HAL_GPIO_Init+0xe6>
 8005cfc:	2502      	movs	r5, #2
 8005cfe:	e7a4      	b.n	8005c4a <HAL_GPIO_Init+0xe6>
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40010400 	.word	0x40010400
 8005d08:	10310000 	.word	0x10310000
 8005d0c:	10320000 	.word	0x10320000
 8005d10:	40010800 	.word	0x40010800
 8005d14:	10220000 	.word	0x10220000

08005d18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005d1c:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8005d20:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005d22:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005d26:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005d2a:	eb00 030b 	add.w	r3, r0, fp
 8005d2e:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005d30:	4b2e      	ldr	r3, [pc, #184]	; (8005dec <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8005d32:	fa31 f402 	lsrs.w	r4, r1, r2
 8005d36:	d102      	bne.n	8005d3e <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8005d38:	b003      	add	sp, #12
 8005d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005d3e:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 8005d42:	400f      	ands	r7, r1
 8005d44:	d049      	beq.n	8005dda <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 8005d46:	f022 0403 	bic.w	r4, r2, #3
 8005d4a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005d4e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005d52:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8005d56:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005d58:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005d5c:	fa08 f90c 	lsl.w	r9, r8, ip
 8005d60:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005d64:	4d22      	ldr	r5, [pc, #136]	; (8005df0 <HAL_GPIO_DeInit+0xd8>)
 8005d66:	42a8      	cmp	r0, r5
 8005d68:	d039      	beq.n	8005dde <HAL_GPIO_DeInit+0xc6>
 8005d6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d6e:	42a8      	cmp	r0, r5
 8005d70:	d037      	beq.n	8005de2 <HAL_GPIO_DeInit+0xca>
 8005d72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d76:	42a8      	cmp	r0, r5
 8005d78:	d035      	beq.n	8005de6 <HAL_GPIO_DeInit+0xce>
 8005d7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d7e:	42a8      	cmp	r0, r5
 8005d80:	bf0c      	ite	eq
 8005d82:	2503      	moveq	r5, #3
 8005d84:	2504      	movne	r5, #4
 8005d86:	fa05 f50c 	lsl.w	r5, r5, ip
 8005d8a:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005d8c:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005d90:	d10f      	bne.n	8005db2 <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005d92:	68a5      	ldr	r5, [r4, #8]
 8005d94:	ea25 0509 	bic.w	r5, r5, r9
 8005d98:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005d9a:	681c      	ldr	r4, [r3, #0]
 8005d9c:	4034      	ands	r4, r6
 8005d9e:	601c      	str	r4, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005da0:	685c      	ldr	r4, [r3, #4]
 8005da2:	4034      	ands	r4, r6
 8005da4:	605c      	str	r4, [r3, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005da6:	689c      	ldr	r4, [r3, #8]
 8005da8:	4034      	ands	r4, r6
 8005daa:	609c      	str	r4, [r3, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005dac:	68dc      	ldr	r4, [r3, #12]
 8005dae:	4034      	ands	r4, r6
 8005db0:	60dc      	str	r4, [r3, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005db2:	2fff      	cmp	r7, #255	; 0xff
 8005db4:	bf94      	ite	ls
 8005db6:	4607      	movls	r7, r0
 8005db8:	9f01      	ldrhi	r7, [sp, #4]
 8005dba:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005dbe:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005dc0:	bf88      	it	hi
 8005dc2:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005dc4:	fa08 fc04 	lsl.w	ip, r8, r4
 8005dc8:	ea25 050c 	bic.w	r5, r5, ip
 8005dcc:	fa0b f404 	lsl.w	r4, fp, r4
 8005dd0:	4325      	orrs	r5, r4
 8005dd2:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005dd4:	68c4      	ldr	r4, [r0, #12]
 8005dd6:	4026      	ands	r6, r4
 8005dd8:	60c6      	str	r6, [r0, #12]
    position++;
 8005dda:	3201      	adds	r2, #1
 8005ddc:	e7a9      	b.n	8005d32 <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005dde:	2500      	movs	r5, #0
 8005de0:	e7d1      	b.n	8005d86 <HAL_GPIO_DeInit+0x6e>
 8005de2:	2501      	movs	r5, #1
 8005de4:	e7cf      	b.n	8005d86 <HAL_GPIO_DeInit+0x6e>
 8005de6:	2502      	movs	r5, #2
 8005de8:	e7cd      	b.n	8005d86 <HAL_GPIO_DeInit+0x6e>
 8005dea:	bf00      	nop
 8005dec:	40010400 	.word	0x40010400
 8005df0:	40010800 	.word	0x40010800

08005df4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005df4:	b10a      	cbz	r2, 8005dfa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005df6:	6101      	str	r1, [r0, #16]
  }
}
 8005df8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005dfa:	0409      	lsls	r1, r1, #16
 8005dfc:	e7fb      	b.n	8005df6 <HAL_GPIO_WritePin+0x2>

08005dfe <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005dfe:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e00:	ea01 0203 	and.w	r2, r1, r3
 8005e04:	ea21 0103 	bic.w	r1, r1, r3
 8005e08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e0c:	6101      	str	r1, [r0, #16]
}
 8005e0e:	4770      	bx	lr

08005e10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e10:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e12:	4604      	mov	r4, r0
{
 8005e14:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8005e16:	b310      	cbz	r0, 8005e5e <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e18:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8005e1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e20:	b91b      	cbnz	r3, 8005e2a <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e22:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e26:	f002 ff77 	bl	8008d18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e2a:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e2c:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e2e:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e30:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8005e34:	f855 0b10 	ldr.w	r0, [r5], #16
 8005e38:	f001 fc0c 	bl	8007654 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	1d27      	adds	r7, r4, #4
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	4626      	mov	r6, r4
 8005e48:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8005e4c:	f856 0b10 	ldr.w	r0, [r6], #16
 8005e50:	f001 fbf0 	bl	8007634 <USB_CoreInit>
 8005e54:	4605      	mov	r5, r0
 8005e56:	b120      	cbz	r0, 8005e62 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8005e5e:	2501      	movs	r5, #1
 8005e60:	e04c      	b.n	8005efc <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e62:	4601      	mov	r1, r0
 8005e64:	6820      	ldr	r0, [r4, #0]
 8005e66:	f001 fbff 	bl	8007668 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e6a:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e6c:	f04f 0e01 	mov.w	lr, #1
 8005e70:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e72:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e74:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8005e78:	b2ca      	uxtb	r2, r1
 8005e7a:	4594      	cmp	ip, r2
 8005e7c:	f101 0101 	add.w	r1, r1, #1
 8005e80:	d81b      	bhi.n	8005eba <HAL_PCD_Init+0xaa>
 8005e82:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e84:	2528      	movs	r5, #40	; 0x28
 8005e86:	4619      	mov	r1, r3
 8005e88:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e8a:	4584      	cmp	ip, r0
 8005e8c:	f103 0301 	add.w	r3, r3, #1
 8005e90:	d820      	bhi.n	8005ed4 <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e92:	46ec      	mov	ip, sp
 8005e94:	4635      	mov	r5, r6
 8005e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	f8cc 3000 	str.w	r3, [ip]
 8005ea2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8005ea6:	6820      	ldr	r0, [r4, #0]
 8005ea8:	f001 fbe0 	bl	800766c <USB_DevInit>
 8005eac:	2301      	movs	r3, #1
 8005eae:	4605      	mov	r5, r0
 8005eb0:	b1e8      	cbz	r0, 8005eee <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8005eb8:	e7d1      	b.n	8005e5e <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8005eba:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ebe:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8005ec2:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8005ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005eca:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ecc:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ed0:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ed2:	e7d1      	b.n	8005e78 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8005ed4:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ed8:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8005edc:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8005ee0:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ee4:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ee8:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eec:	e7cc      	b.n	8005e88 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 8005eee:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ef2:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8005ef4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ef8:	f001 fe4a 	bl	8007b90 <USB_DevDisconnect>

  return HAL_OK;
}
 8005efc:	4628      	mov	r0, r5
 8005efe:	b007      	add	sp, #28
 8005f00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005f02:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8005f04:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8005f08:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d010      	beq.n	8005f30 <HAL_PCD_Start+0x2e>
 8005f0e:	2501      	movs	r5, #1
 8005f10:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005f14:	6800      	ldr	r0, [r0, #0]
 8005f16:	f001 fb94 	bl	8007642 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f003 f806 	bl	8008f2e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005f22:	6820      	ldr	r0, [r4, #0]
 8005f24:	f001 fe32 	bl	8007b8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005f28:	2000      	movs	r0, #0
 8005f2a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8005f30:	2002      	movs	r0, #2
 8005f32:	e7fc      	b.n	8005f2e <HAL_PCD_Start+0x2c>

08005f34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f34:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8005f36:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8005f3a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005f3c:	2a01      	cmp	r2, #1
 8005f3e:	d00b      	beq.n	8005f58 <HAL_PCD_SetAddress+0x24>
 8005f40:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8005f42:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8005f46:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f4a:	6800      	ldr	r0, [r0, #0]
 8005f4c:	f001 fe18 	bl	8007b80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f50:	2000      	movs	r0, #0
 8005f52:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8005f56:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005f58:	2002      	movs	r0, #2
 8005f5a:	e7fc      	b.n	8005f56 <HAL_PCD_SetAddress+0x22>

08005f5c <HAL_PCD_IRQHandler>:
{
 8005f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f60:	4604      	mov	r4, r0
 8005f62:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005f64:	6800      	ldr	r0, [r0, #0]
 8005f66:	f001 fe15 	bl	8007b94 <USB_ReadInterrupts>
 8005f6a:	0402      	lsls	r2, r0, #16
 8005f6c:	d509      	bpl.n	8005f82 <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005f6e:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8006284 <HAL_PCD_IRQHandler+0x328>
 8005f72:	f8df 8314 	ldr.w	r8, [pc, #788]	; 8006288 <HAL_PCD_IRQHandler+0x32c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f76:	6820      	ldr	r0, [r4, #0]
 8005f78:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005f7c:	041d      	lsls	r5, r3, #16
 8005f7e:	f100 80c1 	bmi.w	8006104 <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	f001 fe06 	bl	8007b94 <USB_ReadInterrupts>
 8005f88:	0543      	lsls	r3, r0, #21
 8005f8a:	d50f      	bpl.n	8005fac <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005f8c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8005f8e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005f90:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f98:	041b      	lsls	r3, r3, #16
 8005f9a:	0c1b      	lsrs	r3, r3, #16
 8005f9c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005fa0:	f002 fef5 	bl	8008d8e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f7ff ffc4 	bl	8005f34 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005fac:	6820      	ldr	r0, [r4, #0]
 8005fae:	f001 fdf1 	bl	8007b94 <USB_ReadInterrupts>
 8005fb2:	0441      	lsls	r1, r0, #17
 8005fb4:	d508      	bpl.n	8005fc8 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005fb6:	6822      	ldr	r2, [r4, #0]
 8005fb8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fc0:	041b      	lsls	r3, r3, #16
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005fc8:	6820      	ldr	r0, [r4, #0]
 8005fca:	f001 fde3 	bl	8007b94 <USB_ReadInterrupts>
 8005fce:	0482      	lsls	r2, r0, #18
 8005fd0:	d508      	bpl.n	8005fe4 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005fd2:	6822      	ldr	r2, [r4, #0]
 8005fd4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fdc:	041b      	lsls	r3, r3, #16
 8005fde:	0c1b      	lsrs	r3, r3, #16
 8005fe0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	f001 fdd5 	bl	8007b94 <USB_ReadInterrupts>
 8005fea:	04c3      	lsls	r3, r0, #19
 8005fec:	d51c      	bpl.n	8006028 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005fee:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8005ff0:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005ff2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005ff6:	f023 0304 	bic.w	r3, r3, #4
 8005ffa:	041b      	lsls	r3, r3, #16
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006002:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006006:	f023 0308 	bic.w	r3, r3, #8
 800600a:	041b      	lsls	r3, r3, #16
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8006012:	f002 fedf 	bl	8008dd4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800601c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006020:	041b      	lsls	r3, r3, #16
 8006022:	0c1b      	lsrs	r3, r3, #16
 8006024:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006028:	6820      	ldr	r0, [r4, #0]
 800602a:	f001 fdb3 	bl	8007b94 <USB_ReadInterrupts>
 800602e:	0507      	lsls	r7, r0, #20
 8006030:	d546      	bpl.n	80060c0 <HAL_PCD_IRQHandler+0x164>
 8006032:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	4606      	mov	r6, r0
 8006038:	4619      	mov	r1, r3
 800603a:	461a      	mov	r2, r3
 800603c:	f103 0520 	add.w	r5, r3, #32
 8006040:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8006044:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8006046:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 800604a:	d1f9      	bne.n	8006040 <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800604c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006050:	b292      	uxth	r2, r2
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800605a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	0412      	lsls	r2, r2, #16
 8006064:	0c12      	lsrs	r2, r2, #16
 8006066:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800606a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800606e:	0556      	lsls	r6, r2, #21
 8006070:	d5fb      	bpl.n	800606a <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006072:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8006076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607a:	0412      	lsls	r2, r2, #16
 800607c:	0c12      	lsrs	r2, r2, #16
 800607e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8006082:	f830 2b02 	ldrh.w	r2, [r0], #2
 8006086:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 800608a:	428d      	cmp	r5, r1
 800608c:	d1f9      	bne.n	8006082 <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800608e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8006092:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006094:	b292      	uxth	r2, r2
 8006096:	f042 0208 	orr.w	r2, r2, #8
 800609a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800609e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80060a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060a6:	0412      	lsls	r2, r2, #16
 80060a8:	0c12      	lsrs	r2, r2, #16
 80060aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80060ae:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80060b2:	b292      	uxth	r2, r2
 80060b4:	f042 0204 	orr.w	r2, r2, #4
 80060b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80060bc:	f002 fe7a 	bl	8008db4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	f001 fd67 	bl	8007b94 <USB_ReadInterrupts>
 80060c6:	0582      	lsls	r2, r0, #22
 80060c8:	d50b      	bpl.n	80060e2 <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80060ca:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80060cc:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80060ce:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80060d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d6:	041b      	lsls	r3, r3, #16
 80060d8:	0c1b      	lsrs	r3, r3, #16
 80060da:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80060de:	f002 fe52 	bl	8008d86 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80060e2:	6820      	ldr	r0, [r4, #0]
 80060e4:	f001 fd56 	bl	8007b94 <USB_ReadInterrupts>
 80060e8:	05c3      	lsls	r3, r0, #23
 80060ea:	d508      	bpl.n	80060fe <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80060f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f6:	041b      	lsls	r3, r3, #16
 80060f8:	0c1b      	lsrs	r3, r3, #16
 80060fa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80060fe:	b005      	add	sp, #20
 8006100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8006104:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8006108:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 800610a:	f016 060f 	ands.w	r6, r6, #15
 800610e:	f040 80bd 	bne.w	800628c <HAL_PCD_IRQHandler+0x330>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006112:	f011 0110 	ands.w	r1, r1, #16
 8006116:	d12d      	bne.n	8006174 <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006118:	8803      	ldrh	r3, [r0, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	ea03 0309 	and.w	r3, r3, r9
 8006120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006124:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006126:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800612a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800612e:	b29b      	uxth	r3, r3
 8006130:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006134:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006138:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800613c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800613e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006142:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8006144:	4413      	add	r3, r2
 8006146:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006148:	4620      	mov	r0, r4
 800614a:	f002 fe14 	bl	8008d76 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800614e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006152:	2b00      	cmp	r3, #0
 8006154:	f43f af0f 	beq.w	8005f76 <HAL_PCD_IRQHandler+0x1a>
 8006158:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800615a:	2a00      	cmp	r2, #0
 800615c:	f47f af0b 	bne.w	8005f76 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006160:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006164:	6821      	ldr	r1, [r4, #0]
 8006166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800616e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8006172:	e700      	b.n	8005f76 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006174:	8805      	ldrh	r5, [r0, #0]
 8006176:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006178:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 800617c:	d021      	beq.n	80061c2 <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800617e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006182:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8006186:	b29b      	uxth	r3, r3
 8006188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800618c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006190:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006194:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8006198:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800619c:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80061a0:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80061a4:	f001 ff48 	bl	8008038 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061a8:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80061aa:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061ac:	8813      	ldrh	r3, [r2, #0]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	051b      	lsls	r3, r3, #20
 80061b4:	0d1b      	lsrs	r3, r3, #20
 80061b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ba:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80061bc:	f002 fdcc 	bl	8008d58 <HAL_PCD_SetupStageCallback>
 80061c0:	e6d9      	b.n	8005f76 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80061c2:	041f      	lsls	r7, r3, #16
 80061c4:	f57f aed7 	bpl.w	8005f76 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061c8:	8803      	ldrh	r3, [r0, #0]
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	051b      	lsls	r3, r3, #20
 80061d0:	0d1b      	lsrs	r3, r3, #20
 80061d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061d8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80061dc:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80061ea:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80061ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061f2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80061f6:	b18b      	cbz	r3, 800621c <HAL_PCD_IRQHandler+0x2c0>
 80061f8:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80061fc:	b171      	cbz	r1, 800621c <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80061fe:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8006202:	f001 ff19 	bl	8008038 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8006206:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800620a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800620e:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8006210:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006212:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8006214:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006218:	f002 fda4 	bl	8008d64 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800621c:	6821      	ldr	r1, [r4, #0]
 800621e:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8006222:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8006226:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 800622a:	b29b      	uxth	r3, r3
 800622c:	b9cd      	cbnz	r5, 8006262 <HAL_PCD_IRQHandler+0x306>
 800622e:	5ac2      	ldrh	r2, [r0, r3]
 8006230:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006234:	0412      	lsls	r2, r2, #16
 8006236:	0c12      	lsrs	r2, r2, #16
 8006238:	52c2      	strh	r2, [r0, r3]
 800623a:	5ac2      	ldrh	r2, [r0, r3]
 800623c:	b292      	uxth	r2, r2
 800623e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006242:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006244:	880b      	ldrh	r3, [r1, #0]
 8006246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	041b      	lsls	r3, r3, #16
 8006250:	0c1b      	lsrs	r3, r3, #16
 8006252:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625e:	800b      	strh	r3, [r1, #0]
 8006260:	e689      	b.n	8005f76 <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006262:	2d3e      	cmp	r5, #62	; 0x3e
 8006264:	d806      	bhi.n	8006274 <HAL_PCD_IRQHandler+0x318>
 8006266:	086a      	lsrs	r2, r5, #1
 8006268:	07ee      	lsls	r6, r5, #31
 800626a:	bf48      	it	mi
 800626c:	3201      	addmi	r2, #1
 800626e:	0292      	lsls	r2, r2, #10
 8006270:	b292      	uxth	r2, r2
 8006272:	e7e6      	b.n	8006242 <HAL_PCD_IRQHandler+0x2e6>
 8006274:	096a      	lsrs	r2, r5, #5
 8006276:	06ed      	lsls	r5, r5, #27
 8006278:	bf08      	it	eq
 800627a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800627e:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8006282:	e7f5      	b.n	8006270 <HAL_PCD_IRQHandler+0x314>
 8006284:	ffff8f0f 	.word	0xffff8f0f
 8006288:	ffff8000 	.word	0xffff8000
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800628c:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006290:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006292:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006294:	f140 80ee 	bpl.w	8006474 <HAL_PCD_IRQHandler+0x518>
        if (ep->doublebuffer == 0U)
 8006298:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800629a:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800629e:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	051b      	lsls	r3, r3, #20
 80062a8:	0d1b      	lsrs	r3, r3, #20
 80062aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ae:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80062b2:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80062b6:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80062ba:	b9b3      	cbnz	r3, 80062ea <HAL_PCD_IRQHandler+0x38e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062bc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80062c0:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3306      	adds	r3, #6
 80062c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062cc:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80062d0:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	f000 80b1 	beq.w	800643c <HAL_PCD_IRQHandler+0x4e0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80062da:	462b      	mov	r3, r5
 80062dc:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80062e0:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80062e4:	f001 fea8 	bl	8008038 <USB_ReadPMA>
 80062e8:	e0a8      	b.n	800643c <HAL_PCD_IRQHandler+0x4e0>
          if (ep->type == EP_TYPE_BULK)
 80062ea:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062ee:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 80062f2:	2a02      	cmp	r2, #2
 80062f4:	f040 8081 	bne.w	80063fa <HAL_PCD_IRQHandler+0x49e>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80062f8:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80062fc:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 8006300:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006304:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006308:	b2ad      	uxth	r5, r5
 800630a:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800630e:	d03b      	beq.n	8006388 <HAL_PCD_IRQHandler+0x42c>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006310:	44ab      	add	fp, r5
 8006312:	f10b 0b02 	add.w	fp, fp, #2
 8006316:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 800631a:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 800631e:	4295      	cmp	r5, r2
 8006320:	d913      	bls.n	800634a <HAL_PCD_IRQHandler+0x3ee>
 8006322:	2200      	movs	r2, #0
 8006324:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006328:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800632c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006330:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006334:	0412      	lsls	r2, r2, #16
 8006336:	0c12      	lsrs	r2, r2, #16
 8006338:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800633c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006340:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006344:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8006348:	e004      	b.n	8006354 <HAL_PCD_IRQHandler+0x3f8>
      ep->xfer_len -= count;
 800634a:	1b52      	subs	r2, r2, r5
 800634c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8006350:	2a00      	cmp	r2, #0
 8006352:	d0e9      	beq.n	8006328 <HAL_PCD_IRQHandler+0x3cc>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006354:	f1be 0f00 	cmp.w	lr, #0
 8006358:	d00d      	beq.n	8006376 <HAL_PCD_IRQHandler+0x41a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800635a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800635e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006362:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006366:	0412      	lsls	r2, r2, #16
 8006368:	0c12      	lsrs	r2, r2, #16
 800636a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800636e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006372:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8006376:	2d00      	cmp	r5, #0
 8006378:	d060      	beq.n	800643c <HAL_PCD_IRQHandler+0x4e0>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800637a:	2128      	movs	r1, #40	; 0x28
 800637c:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006380:	462b      	mov	r3, r5
 8006382:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8006386:	e7ab      	b.n	80062e0 <HAL_PCD_IRQHandler+0x384>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006388:	445d      	add	r5, fp
 800638a:	3506      	adds	r5, #6
 800638c:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8006390:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8006394:	4295      	cmp	r5, r2
 8006396:	d912      	bls.n	80063be <HAL_PCD_IRQHandler+0x462>
 8006398:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800639c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80063a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80063a8:	0412      	lsls	r2, r2, #16
 80063aa:	0c12      	lsrs	r2, r2, #16
 80063ac:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80063b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063b8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80063bc:	e004      	b.n	80063c8 <HAL_PCD_IRQHandler+0x46c>
      ep->xfer_len -= count;
 80063be:	1b52      	subs	r2, r2, r5
 80063c0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	d0e9      	beq.n	800639c <HAL_PCD_IRQHandler+0x440>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80063c8:	f1be 0f00 	cmp.w	lr, #0
 80063cc:	d10d      	bne.n	80063ea <HAL_PCD_IRQHandler+0x48e>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80063ce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80063d2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80063d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80063da:	0412      	lsls	r2, r2, #16
 80063dc:	0c12      	lsrs	r2, r2, #16
 80063de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063e2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80063e6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80063ea:	b33d      	cbz	r5, 800643c <HAL_PCD_IRQHandler+0x4e0>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80063ec:	2128      	movs	r1, #40	; 0x28
 80063ee:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80063f2:	462b      	mov	r3, r5
 80063f4:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80063f8:	e772      	b.n	80062e0 <HAL_PCD_IRQHandler+0x384>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80063fa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80063fe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006402:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006406:	0412      	lsls	r2, r2, #16
 8006408:	0c12      	lsrs	r2, r2, #16
 800640a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800640e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006412:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006416:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 800641a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006424:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006428:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800642a:	d053      	beq.n	80064d4 <HAL_PCD_IRQHandler+0x578>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800642c:	3202      	adds	r2, #2
 800642e:	4413      	add	r3, r2
 8006430:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8006434:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8006438:	2d00      	cmp	r5, #0
 800643a:	d1a1      	bne.n	8006380 <HAL_PCD_IRQHandler+0x424>
        ep->xfer_count += count;
 800643c:	2128      	movs	r1, #40	; 0x28
 800643e:	4371      	muls	r1, r6
 8006440:	1863      	adds	r3, r4, r1
 8006442:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8006446:	442a      	add	r2, r5
 8006448:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800644c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8006450:	442a      	add	r2, r5
 8006452:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006456:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800645a:	b11a      	cbz	r2, 8006464 <HAL_PCD_IRQHandler+0x508>
 800645c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8006460:	429d      	cmp	r5, r3
 8006462:	d240      	bcs.n	80064e6 <HAL_PCD_IRQHandler+0x58a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006464:	2328      	movs	r3, #40	; 0x28
 8006466:	fb03 4306 	mla	r3, r3, r6, r4
 800646a:	4620      	mov	r0, r4
 800646c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8006470:	f002 fc78 	bl	8008d64 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006474:	063a      	lsls	r2, r7, #24
 8006476:	f57f ad7e 	bpl.w	8005f76 <HAL_PCD_IRQHandler+0x1a>
 800647a:	2528      	movs	r5, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	fb05 4506 	mla	r5, r5, r6, r4
 8006482:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8006486:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 800648a:	b29b      	uxth	r3, r3
 800648c:	ea03 0309 	and.w	r3, r3, r9
 8006490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006494:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8006498:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800649c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d101      	bne.n	80064a8 <HAL_PCD_IRQHandler+0x54c>
 80064a4:	05fb      	lsls	r3, r7, #23
 80064a6:	d436      	bmi.n	8006516 <HAL_PCD_IRQHandler+0x5ba>
          if (ep->xfer_len > TxByteNbre)
 80064a8:	2528      	movs	r5, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80064aa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 80064ae:	fb05 4306 	mla	r3, r5, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80064b2:	b292      	uxth	r2, r2
 80064b4:	3202      	adds	r2, #2
 80064b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80064ba:	f83c c012 	ldrh.w	ip, [ip, r2, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 80064be:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 80064c0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80064c4:	4567      	cmp	r7, ip
 80064c6:	d815      	bhi.n	80064f4 <HAL_PCD_IRQHandler+0x598>
 80064c8:	2200      	movs	r2, #0
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064cc:	4620      	mov	r0, r4
 80064ce:	f002 fc52 	bl	8008d76 <HAL_PCD_DataInStageCallback>
 80064d2:	e550      	b.n	8005f76 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064d4:	3206      	adds	r2, #6
 80064d6:	4413      	add	r3, r2
 80064d8:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80064dc:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	d0ab      	beq.n	800643c <HAL_PCD_IRQHandler+0x4e0>
 80064e4:	e785      	b.n	80063f2 <HAL_PCD_IRQHandler+0x496>
        ep = &hpcd->OUT_ep[epindex];
 80064e6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80064ea:	6820      	ldr	r0, [r4, #0]
 80064ec:	4421      	add	r1, r4
 80064ee:	f001 fb67 	bl	8007bc0 <USB_EPStartXfer>
 80064f2:	e7bf      	b.n	8006474 <HAL_PCD_IRQHandler+0x518>
            ep->xfer_len -= TxByteNbre;
 80064f4:	eba7 070c 	sub.w	r7, r7, ip
 80064f8:	641f      	str	r7, [r3, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80064fa:	2f00      	cmp	r7, #0
 80064fc:	d0e6      	beq.n	80064cc <HAL_PCD_IRQHandler+0x570>
        ep = &hpcd->IN_ep[epindex];
 80064fe:	fb06 5505 	mla	r5, r6, r5, r5
            ep->xfer_buff += TxByteNbre;
 8006502:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8006504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8006506:	4461      	add	r1, ip
            ep->xfer_count += TxByteNbre;
 8006508:	4462      	add	r2, ip
            ep->xfer_buff += TxByteNbre;
 800650a:	63d9      	str	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 800650c:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800650e:	1961      	adds	r1, r4, r5
 8006510:	f001 fb56 	bl	8007bc0 <USB_EPStartXfer>
 8006514:	e52f      	b.n	8005f76 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006516:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800651a:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 800651e:	b292      	uxth	r2, r2
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006520:	f017 0e40 	ands.w	lr, r7, #64	; 0x40

    if (ep->xfer_len > TxByteNbre)
 8006524:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006526:	4452      	add	r2, sl
 8006528:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800652c:	f000 80a7 	beq.w	800667e <HAL_PCD_IRQHandler+0x722>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006530:	3202      	adds	r2, #2
 8006532:	f83c c012 	ldrh.w	ip, [ip, r2, lsl #1]
 8006536:	2228      	movs	r2, #40	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8006538:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800653c:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 800653e:	bf28      	it	cs
 8006540:	2300      	movcs	r3, #0
 8006542:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 8006546:	bf38      	it	cc
 8006548:	eba3 030c 	subcc.w	r3, r3, ip
 800654c:	6413      	str	r3, [r2, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800654e:	b2bf      	uxth	r7, r7
 8006550:	b9bb      	cbnz	r3, 8006582 <HAL_PCD_IRQHandler+0x626>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006552:	4620      	mov	r0, r4
 8006554:	f002 fc0f 	bl	8008d76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006558:	2f00      	cmp	r7, #0
 800655a:	f000 80a7 	beq.w	80066ac <HAL_PCD_IRQHandler+0x750>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800655e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8006568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006570:	041b      	lsls	r3, r3, #16
 8006572:	0c1b      	lsrs	r3, r3, #16
 8006574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8006580:	e094      	b.n	80066ac <HAL_PCD_IRQHandler+0x750>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006582:	b16f      	cbz	r7, 80065a0 <HAL_PCD_IRQHandler+0x644>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006584:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	0c1b      	lsrs	r3, r3, #16
 8006594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80065a0:	2328      	movs	r3, #40	; 0x28
 80065a2:	fb03 4306 	mla	r3, r3, r6, r4
 80065a6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80065aa:	2a01      	cmp	r2, #1
 80065ac:	d17e      	bne.n	80066ac <HAL_PCD_IRQHandler+0x750>
        ep->xfer_buff += TxByteNbre;
 80065ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80065b0:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 80065b4:	eb02 070c 	add.w	r7, r2, ip
        ep->xfer_count += TxByteNbre;
 80065b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80065ba:	63df      	str	r7, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80065bc:	4462      	add	r2, ip
 80065be:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80065c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c2:	4596      	cmp	lr, r2
 80065c4:	d329      	bcc.n	800661a <HAL_PCD_IRQHandler+0x6be>
          ep->xfer_len_db -= len;
 80065c6:	ebae 0e02 	sub.w	lr, lr, r2
 80065ca:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80065ce:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 80065d2:	b293      	uxth	r3, r2
 80065d4:	f1bc 0f00 	cmp.w	ip, #0
 80065d8:	d144      	bne.n	8006664 <HAL_PCD_IRQHandler+0x708>
 80065da:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 80065de:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 80065e2:	fa1f fc8c 	uxth.w	ip, ip
 80065e6:	44f4      	add	ip, lr
 80065e8:	0109      	lsls	r1, r1, #4
 80065ea:	bb1a      	cbnz	r2, 8006634 <HAL_PCD_IRQHandler+0x6d8>
 80065ec:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80065f0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80065f4:	0412      	lsls	r2, r2, #16
 80065f6:	0c12      	lsrs	r2, r2, #16
 80065f8:	f82c 2001 	strh.w	r2, [ip, r1]
 80065fc:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8006600:	b292      	uxth	r2, r2
 8006602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006606:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800660a:	2128      	movs	r1, #40	; 0x28
 800660c:	fb01 4606 	mla	r6, r1, r6, r4
 8006610:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006612:	4639      	mov	r1, r7
 8006614:	f001 fac4 	bl	8007ba0 <USB_WritePMA>
 8006618:	e048      	b.n	80066ac <HAL_PCD_IRQHandler+0x750>
        else if (ep->xfer_len_db == 0U)
 800661a:	f1be 0f00 	cmp.w	lr, #0
 800661e:	d103      	bne.n	8006628 <HAL_PCD_IRQHandler+0x6cc>
    if (ep->xfer_len > TxByteNbre)
 8006620:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8006622:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
 8006626:	e7d2      	b.n	80065ce <HAL_PCD_IRQHandler+0x672>
          ep->xfer_fill_db = 0U;
 8006628:	2200      	movs	r2, #0
 800662a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800662e:	649a      	str	r2, [r3, #72]	; 0x48
 8006630:	4672      	mov	r2, lr
 8006632:	e7cc      	b.n	80065ce <HAL_PCD_IRQHandler+0x672>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006634:	2a3e      	cmp	r2, #62	; 0x3e
 8006636:	d80c      	bhi.n	8006652 <HAL_PCD_IRQHandler+0x6f6>
 8006638:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800663c:	07d2      	lsls	r2, r2, #31
 800663e:	bf48      	it	mi
 8006640:	f10e 0e01 	addmi.w	lr, lr, #1
 8006644:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8006648:	fa1f fe8e 	uxth.w	lr, lr
 800664c:	f82c e001 	strh.w	lr, [ip, r1]
 8006650:	e7db      	b.n	800660a <HAL_PCD_IRQHandler+0x6ae>
 8006652:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8006656:	06d2      	lsls	r2, r2, #27
 8006658:	bf08      	it	eq
 800665a:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 800665e:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8006662:	e7f1      	b.n	8006648 <HAL_PCD_IRQHandler+0x6ec>
 8006664:	f1bc 0f01 	cmp.w	ip, #1
 8006668:	d1cf      	bne.n	800660a <HAL_PCD_IRQHandler+0x6ae>
 800666a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800666e:	0109      	lsls	r1, r1, #4
 8006670:	fa1f fc82 	uxth.w	ip, r2
 8006674:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8006678:	4462      	add	r2, ip
 800667a:	5253      	strh	r3, [r2, r1]
 800667c:	e7c5      	b.n	800660a <HAL_PCD_IRQHandler+0x6ae>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800667e:	3206      	adds	r2, #6
 8006680:	f83c c012 	ldrh.w	ip, [ip, r2, lsl #1]
 8006684:	2228      	movs	r2, #40	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 8006686:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800668a:	459c      	cmp	ip, r3
      ep->xfer_len = 0U;
 800668c:	bf88      	it	hi
 800668e:	4673      	movhi	r3, lr
 8006690:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 8006694:	bf98      	it	ls
 8006696:	eba3 030c 	subls.w	r3, r3, ip
 800669a:	6413      	str	r3, [r2, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800669c:	b2bf      	uxth	r7, r7
 800669e:	b9c3      	cbnz	r3, 80066d2 <HAL_PCD_IRQHandler+0x776>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066a0:	4620      	mov	r0, r4
 80066a2:	f002 fb68 	bl	8008d76 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80066a6:	2f00      	cmp	r7, #0
 80066a8:	f43f af59 	beq.w	800655e <HAL_PCD_IRQHandler+0x602>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80066ac:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80066b0:	6822      	ldr	r2, [r4, #0]
 80066b2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80066c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066cc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80066d0:	e451      	b.n	8005f76 <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80066d2:	b96f      	cbnz	r7, 80066f0 <HAL_PCD_IRQHandler+0x794>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80066d4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80066d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	0c1b      	lsrs	r3, r3, #16
 80066e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ec:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80066f0:	2228      	movs	r2, #40	; 0x28
 80066f2:	fb02 4206 	mla	r2, r2, r6, r4
 80066f6:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d1d6      	bne.n	80066ac <HAL_PCD_IRQHandler+0x750>
        ep->xfer_count += TxByteNbre;
 80066fe:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8006700:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8006702:	4463      	add	r3, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8006704:	f8d2 e048 	ldr.w	lr, [r2, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8006708:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800670a:	6b93      	ldr	r3, [r2, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800670c:	4467      	add	r7, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 800670e:	459e      	cmp	lr, r3
        ep->xfer_buff += TxByteNbre;
 8006710:	63d7      	str	r7, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8006712:	d322      	bcc.n	800675a <HAL_PCD_IRQHandler+0x7fe>
          ep->xfer_len_db -= len;
 8006714:	ebae 0e03 	sub.w	lr, lr, r3
 8006718:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800671c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8006720:	fa1f fc83 	uxth.w	ip, r3
 8006724:	2a00      	cmp	r2, #0
 8006726:	d13d      	bne.n	80067a4 <HAL_PCD_IRQHandler+0x848>
 8006728:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800672c:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 8006730:	b292      	uxth	r2, r2
 8006732:	4472      	add	r2, lr
 8006734:	0109      	lsls	r1, r1, #4
 8006736:	b9eb      	cbnz	r3, 8006774 <HAL_PCD_IRQHandler+0x818>
 8006738:	5a53      	ldrh	r3, [r2, r1]
 800673a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800673e:	041b      	lsls	r3, r3, #16
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	5253      	strh	r3, [r2, r1]
 8006744:	5a53      	ldrh	r3, [r2, r1]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674c:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800674e:	2128      	movs	r1, #40	; 0x28
 8006750:	fb01 4606 	mla	r6, r1, r6, r4
 8006754:	4663      	mov	r3, ip
 8006756:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8006758:	e75b      	b.n	8006612 <HAL_PCD_IRQHandler+0x6b6>
        else if (ep->xfer_len_db == 0U)
 800675a:	f1be 0f00 	cmp.w	lr, #0
 800675e:	d103      	bne.n	8006768 <HAL_PCD_IRQHandler+0x80c>
    if (ep->xfer_len >= TxByteNbre)
 8006760:	4663      	mov	r3, ip
          ep->xfer_fill_db = 0U;
 8006762:	f882 e04c 	strb.w	lr, [r2, #76]	; 0x4c
 8006766:	e7d9      	b.n	800671c <HAL_PCD_IRQHandler+0x7c0>
          ep->xfer_len_db = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	6493      	str	r3, [r2, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800676c:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
 8006770:	4673      	mov	r3, lr
 8006772:	e7d3      	b.n	800671c <HAL_PCD_IRQHandler+0x7c0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006774:	2b3e      	cmp	r3, #62	; 0x3e
 8006776:	d80c      	bhi.n	8006792 <HAL_PCD_IRQHandler+0x836>
 8006778:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 800677c:	07db      	lsls	r3, r3, #31
 800677e:	bf48      	it	mi
 8006780:	f10e 0e01 	addmi.w	lr, lr, #1
 8006784:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8006788:	fa1f fe8e 	uxth.w	lr, lr
 800678c:	f822 e001 	strh.w	lr, [r2, r1]
 8006790:	e7dd      	b.n	800674e <HAL_PCD_IRQHandler+0x7f2>
 8006792:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8006796:	06db      	lsls	r3, r3, #27
 8006798:	bf08      	it	eq
 800679a:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 800679e:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 80067a2:	e7f1      	b.n	8006788 <HAL_PCD_IRQHandler+0x82c>
 80067a4:	2a01      	cmp	r2, #1
 80067a6:	d1d2      	bne.n	800674e <HAL_PCD_IRQHandler+0x7f2>
 80067a8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 80067b2:	4413      	add	r3, r2
 80067b4:	010a      	lsls	r2, r1, #4
 80067b6:	f823 c002 	strh.w	ip, [r3, r2]
 80067ba:	e7c8      	b.n	800674e <HAL_PCD_IRQHandler+0x7f2>

080067bc <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80067bc:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	4605      	mov	r5, r0
 80067c4:	f04f 0428 	mov.w	r4, #40	; 0x28
 80067c8:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 80067cc:	d01c      	beq.n	8006808 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 80067ce:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067d0:	fb00 4104 	mla	r1, r0, r4, r4
 80067d4:	4429      	add	r1, r5
    ep->is_in = 1U;
 80067d6:	704e      	strb	r6, [r1, #1]
  ep->maxpacket = ep_mps;
 80067d8:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 80067da:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067dc:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 80067de:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80067e0:	b102      	cbz	r2, 80067e4 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 80067e2:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80067e4:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80067e6:	bf04      	itt	eq
 80067e8:	2300      	moveq	r3, #0
 80067ea:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80067ec:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d012      	beq.n	800681a <HAL_PCD_EP_Open+0x5e>
 80067f4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067f6:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80067f8:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067fc:	f000 ff4a 	bl	8007694 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006800:	2000      	movs	r0, #0
 8006802:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8006806:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8006808:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800680a:	4344      	muls	r4, r0
 800680c:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8006810:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006812:	4429      	add	r1, r5
    ep->is_in = 0U;
 8006814:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8006818:	e7de      	b.n	80067d8 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 800681a:	2002      	movs	r0, #2
 800681c:	e7f3      	b.n	8006806 <HAL_PCD_EP_Open+0x4a>

0800681e <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800681e:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8006822:	b510      	push	{r4, lr}
 8006824:	f04f 0328 	mov.w	r3, #40	; 0x28
 8006828:	4604      	mov	r4, r0
 800682a:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800682e:	d013      	beq.n	8006858 <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006830:	fb02 3103 	mla	r1, r2, r3, r3
 8006834:	4401      	add	r1, r0
    ep->is_in = 1U;
 8006836:	2001      	movs	r0, #1
 8006838:	7048      	strb	r0, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800683a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800683c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006840:	2b01      	cmp	r3, #1
 8006842:	d012      	beq.n	800686a <HAL_PCD_EP_Close+0x4c>
 8006844:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006846:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006848:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800684c:	f001 f85e 	bl	800790c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006850:	2000      	movs	r0, #0
 8006852:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8006856:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006858:	4353      	muls	r3, r2
 800685a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800685e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8006860:	4403      	add	r3, r0
 8006862:	2000      	movs	r0, #0
 8006864:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8006868:	e7e7      	b.n	800683a <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 800686a:	2002      	movs	r0, #2
 800686c:	e7f3      	b.n	8006856 <HAL_PCD_EP_Close+0x38>

0800686e <HAL_PCD_EP_Receive>:
{
 800686e:	b570      	push	{r4, r5, r6, lr}
 8006870:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8006874:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 8006876:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8006878:	4369      	muls	r1, r5
 800687a:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800687c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006880:	4401      	add	r1, r0
  ep->xfer_len = len;
 8006882:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 8006886:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 800688a:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800688e:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006892:	6800      	ldr	r0, [r0, #0]
 8006894:	f001 f994 	bl	8007bc0 <USB_EPStartXfer>
}
 8006898:	4630      	mov	r0, r6
 800689a:	bd70      	pop	{r4, r5, r6, pc}

0800689c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800689c:	2328      	movs	r3, #40	; 0x28
 800689e:	f001 0107 	and.w	r1, r1, #7
 80068a2:	fb03 0001 	mla	r0, r3, r1, r0
}
 80068a6:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 80068aa:	4770      	bx	lr

080068ac <HAL_PCD_EP_Transmit>:
{
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 80068b2:	2128      	movs	r1, #40	; 0x28
 80068b4:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 80068b8:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80068ba:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80068be:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068c0:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 80068c4:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068c8:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 80068ca:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80068cc:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80068ce:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80068d2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068d6:	6800      	ldr	r0, [r0, #0]
 80068d8:	f001 f972 	bl	8007bc0 <USB_EPStartXfer>
}
 80068dc:	4630      	mov	r0, r6
 80068de:	bd70      	pop	{r4, r5, r6, pc}

080068e0 <HAL_PCD_EP_SetStall>:
{
 80068e0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80068e2:	6843      	ldr	r3, [r0, #4]
 80068e4:	f001 0507 	and.w	r5, r1, #7
 80068e8:	429d      	cmp	r5, r3
{
 80068ea:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80068ec:	d828      	bhi.n	8006940 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80068ee:	f011 0f80 	tst.w	r1, #128	; 0x80
 80068f2:	f04f 0328 	mov.w	r3, #40	; 0x28
 80068f6:	d01a      	beq.n	800692e <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 80068f8:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068fa:	fb05 3103 	mla	r1, r5, r3, r3
 80068fe:	4401      	add	r1, r0
    ep->is_in = 1U;
 8006900:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 8006902:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8006904:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8006906:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006908:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800690c:	429a      	cmp	r2, r3
 800690e:	d019      	beq.n	8006944 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006910:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006912:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006916:	f001 f8ca 	bl	8007aae <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800691a:	b925      	cbnz	r5, 8006926 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8006922:	f001 f93b 	bl	8007b9c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8006926:	2000      	movs	r0, #0
 8006928:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800692c:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 800692e:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8006930:	434b      	muls	r3, r1
 8006932:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8006936:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8006938:	4401      	add	r1, r0
    ep->is_in = 0U;
 800693a:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 800693e:	e7e0      	b.n	8006902 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8006940:	2001      	movs	r0, #1
 8006942:	e7f3      	b.n	800692c <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8006944:	2002      	movs	r0, #2
 8006946:	e7f1      	b.n	800692c <HAL_PCD_EP_SetStall+0x4c>

08006948 <HAL_PCD_EP_ClrStall>:
{
 8006948:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800694a:	6843      	ldr	r3, [r0, #4]
 800694c:	f001 020f 	and.w	r2, r1, #15
 8006950:	429a      	cmp	r2, r3
{
 8006952:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006954:	d825      	bhi.n	80069a2 <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 8006956:	f011 0f80 	tst.w	r1, #128	; 0x80
 800695a:	f04f 0328 	mov.w	r3, #40	; 0x28
 800695e:	f001 0207 	and.w	r2, r1, #7
 8006962:	d015      	beq.n	8006990 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006964:	fb02 3103 	mla	r1, r2, r3, r3
 8006968:	4401      	add	r1, r0
    ep->is_in = 1U;
 800696a:	2001      	movs	r0, #1
 800696c:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 800696e:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8006970:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8006972:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8006974:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006978:	2b01      	cmp	r3, #1
 800697a:	d014      	beq.n	80069a6 <HAL_PCD_EP_ClrStall+0x5e>
 800697c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800697e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006980:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006984:	f001 f8b3 	bl	8007aee <USB_EPClearStall>
  return HAL_OK;
 8006988:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800698a:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 800698e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006990:	4353      	muls	r3, r2
 8006992:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8006996:	4401      	add	r1, r0
    ep->is_in = 0U;
 8006998:	4403      	add	r3, r0
 800699a:	2000      	movs	r0, #0
 800699c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80069a0:	e7e5      	b.n	800696e <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80069a2:	2001      	movs	r0, #1
 80069a4:	e7f3      	b.n	800698e <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 80069a6:	2002      	movs	r0, #2
 80069a8:	e7f1      	b.n	800698e <HAL_PCD_EP_ClrStall+0x46>

080069aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80069aa:	b510      	push	{r4, lr}
 80069ac:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80069ae:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069b2:	bf1b      	ittet	ne
 80069b4:	f001 0107 	andne.w	r1, r1, #7
 80069b8:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80069bc:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069c0:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80069c2:	bf08      	it	eq
 80069c4:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80069c8:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80069ca:	b91a      	cbnz	r2, 80069d4 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80069cc:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80069ce:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80069d0:	2000      	movs	r0, #0
 80069d2:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80069d4:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80069d6:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80069d8:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80069da:	e7f9      	b.n	80069d0 <HAL_PCDEx_PMAConfig+0x26>

080069dc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80069dc:	2201      	movs	r2, #1
 80069de:	4b01      	ldr	r3, [pc, #4]	; (80069e4 <HAL_PWR_EnableBkUpAccess+0x8>)
 80069e0:	621a      	str	r2, [r3, #32]
}
 80069e2:	4770      	bx	lr
 80069e4:	420e0000 	.word	0x420e0000

080069e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069ec:	4605      	mov	r5, r0
 80069ee:	b338      	cbz	r0, 8006a40 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069f0:	6803      	ldr	r3, [r0, #0]
 80069f2:	07db      	lsls	r3, r3, #31
 80069f4:	d410      	bmi.n	8006a18 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069f6:	682b      	ldr	r3, [r5, #0]
 80069f8:	079f      	lsls	r7, r3, #30
 80069fa:	d45e      	bmi.n	8006aba <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	0719      	lsls	r1, r3, #28
 8006a00:	f100 8095 	bmi.w	8006b2e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	075a      	lsls	r2, r3, #29
 8006a08:	f100 80c1 	bmi.w	8006b8e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a0c:	69e8      	ldr	r0, [r5, #28]
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	f040 812c 	bne.w	8006c6c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8006a14:	2000      	movs	r0, #0
 8006a16:	e029      	b.n	8006a6c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a18:	4c90      	ldr	r4, [pc, #576]	; (8006c5c <HAL_RCC_OscConfig+0x274>)
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	f003 030c 	and.w	r3, r3, #12
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d007      	beq.n	8006a34 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a24:	6863      	ldr	r3, [r4, #4]
 8006a26:	f003 030c 	and.w	r3, r3, #12
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	d10a      	bne.n	8006a44 <HAL_RCC_OscConfig+0x5c>
 8006a2e:	6863      	ldr	r3, [r4, #4]
 8006a30:	03de      	lsls	r6, r3, #15
 8006a32:	d507      	bpl.n	8006a44 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	039c      	lsls	r4, r3, #14
 8006a38:	d5dd      	bpl.n	80069f6 <HAL_RCC_OscConfig+0xe>
 8006a3a:	686b      	ldr	r3, [r5, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1da      	bne.n	80069f6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8006a40:	2001      	movs	r0, #1
 8006a42:	e013      	b.n	8006a6c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a44:	686b      	ldr	r3, [r5, #4]
 8006a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4a:	d112      	bne.n	8006a72 <HAL_RCC_OscConfig+0x8a>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006a54:	f7fe fe8a 	bl	800576c <HAL_GetTick>
 8006a58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	0398      	lsls	r0, r3, #14
 8006a5e:	d4ca      	bmi.n	80069f6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a60:	f7fe fe84 	bl	800576c <HAL_GetTick>
 8006a64:	1b80      	subs	r0, r0, r6
 8006a66:	2864      	cmp	r0, #100	; 0x64
 8006a68:	d9f7      	bls.n	8006a5a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8006a6a:	2003      	movs	r0, #3
}
 8006a6c:	b002      	add	sp, #8
 8006a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a72:	b99b      	cbnz	r3, 8006a9c <HAL_RCC_OscConfig+0xb4>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a7a:	6023      	str	r3, [r4, #0]
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006a84:	f7fe fe72 	bl	800576c <HAL_GetTick>
 8006a88:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	0399      	lsls	r1, r3, #14
 8006a8e:	d5b2      	bpl.n	80069f6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a90:	f7fe fe6c 	bl	800576c <HAL_GetTick>
 8006a94:	1b80      	subs	r0, r0, r6
 8006a96:	2864      	cmp	r0, #100	; 0x64
 8006a98:	d9f7      	bls.n	8006a8a <HAL_RCC_OscConfig+0xa2>
 8006a9a:	e7e6      	b.n	8006a6a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	d103      	bne.n	8006aac <HAL_RCC_OscConfig+0xc4>
 8006aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	e7cf      	b.n	8006a4c <HAL_RCC_OscConfig+0x64>
 8006aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ab8:	e7cb      	b.n	8006a52 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006aba:	4c68      	ldr	r4, [pc, #416]	; (8006c5c <HAL_RCC_OscConfig+0x274>)
 8006abc:	6863      	ldr	r3, [r4, #4]
 8006abe:	f013 0f0c 	tst.w	r3, #12
 8006ac2:	d007      	beq.n	8006ad4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	f003 030c 	and.w	r3, r3, #12
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d110      	bne.n	8006af0 <HAL_RCC_OscConfig+0x108>
 8006ace:	6863      	ldr	r3, [r4, #4]
 8006ad0:	03da      	lsls	r2, r3, #15
 8006ad2:	d40d      	bmi.n	8006af0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	079b      	lsls	r3, r3, #30
 8006ad8:	d502      	bpl.n	8006ae0 <HAL_RCC_OscConfig+0xf8>
 8006ada:	692b      	ldr	r3, [r5, #16]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d1af      	bne.n	8006a40 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	696a      	ldr	r2, [r5, #20]
 8006ae4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006ae8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	e785      	b.n	80069fc <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006af0:	692a      	ldr	r2, [r5, #16]
 8006af2:	4b5b      	ldr	r3, [pc, #364]	; (8006c60 <HAL_RCC_OscConfig+0x278>)
 8006af4:	b16a      	cbz	r2, 8006b12 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006afa:	f7fe fe37 	bl	800576c <HAL_GetTick>
 8006afe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	079f      	lsls	r7, r3, #30
 8006b04:	d4ec      	bmi.n	8006ae0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b06:	f7fe fe31 	bl	800576c <HAL_GetTick>
 8006b0a:	1b80      	subs	r0, r0, r6
 8006b0c:	2802      	cmp	r0, #2
 8006b0e:	d9f7      	bls.n	8006b00 <HAL_RCC_OscConfig+0x118>
 8006b10:	e7ab      	b.n	8006a6a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8006b12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b14:	f7fe fe2a 	bl	800576c <HAL_GetTick>
 8006b18:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	0798      	lsls	r0, r3, #30
 8006b1e:	f57f af6d 	bpl.w	80069fc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b22:	f7fe fe23 	bl	800576c <HAL_GetTick>
 8006b26:	1b80      	subs	r0, r0, r6
 8006b28:	2802      	cmp	r0, #2
 8006b2a:	d9f6      	bls.n	8006b1a <HAL_RCC_OscConfig+0x132>
 8006b2c:	e79d      	b.n	8006a6a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b2e:	69aa      	ldr	r2, [r5, #24]
 8006b30:	4e4a      	ldr	r6, [pc, #296]	; (8006c5c <HAL_RCC_OscConfig+0x274>)
 8006b32:	4b4b      	ldr	r3, [pc, #300]	; (8006c60 <HAL_RCC_OscConfig+0x278>)
 8006b34:	b1e2      	cbz	r2, 8006b70 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8006b36:	2201      	movs	r2, #1
 8006b38:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006b3c:	f7fe fe16 	bl	800576c <HAL_GetTick>
 8006b40:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b42:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b44:	079b      	lsls	r3, r3, #30
 8006b46:	d50d      	bpl.n	8006b64 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b48:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006b4c:	4b45      	ldr	r3, [pc, #276]	; (8006c64 <HAL_RCC_OscConfig+0x27c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b54:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006b56:	bf00      	nop
  }
  while (Delay --);
 8006b58:	9b01      	ldr	r3, [sp, #4]
 8006b5a:	1e5a      	subs	r2, r3, #1
 8006b5c:	9201      	str	r2, [sp, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f9      	bne.n	8006b56 <HAL_RCC_OscConfig+0x16e>
 8006b62:	e74f      	b.n	8006a04 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b64:	f7fe fe02 	bl	800576c <HAL_GetTick>
 8006b68:	1b00      	subs	r0, r0, r4
 8006b6a:	2802      	cmp	r0, #2
 8006b6c:	d9e9      	bls.n	8006b42 <HAL_RCC_OscConfig+0x15a>
 8006b6e:	e77c      	b.n	8006a6a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8006b70:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006b74:	f7fe fdfa 	bl	800576c <HAL_GetTick>
 8006b78:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b7c:	079f      	lsls	r7, r3, #30
 8006b7e:	f57f af41 	bpl.w	8006a04 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b82:	f7fe fdf3 	bl	800576c <HAL_GetTick>
 8006b86:	1b00      	subs	r0, r0, r4
 8006b88:	2802      	cmp	r0, #2
 8006b8a:	d9f6      	bls.n	8006b7a <HAL_RCC_OscConfig+0x192>
 8006b8c:	e76d      	b.n	8006a6a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b8e:	4c33      	ldr	r4, [pc, #204]	; (8006c5c <HAL_RCC_OscConfig+0x274>)
 8006b90:	69e3      	ldr	r3, [r4, #28]
 8006b92:	00d8      	lsls	r0, r3, #3
 8006b94:	d424      	bmi.n	8006be0 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8006b96:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b98:	69e3      	ldr	r3, [r4, #28]
 8006b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b9e:	61e3      	str	r3, [r4, #28]
 8006ba0:	69e3      	ldr	r3, [r4, #28]
 8006ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006baa:	4e2f      	ldr	r6, [pc, #188]	; (8006c68 <HAL_RCC_OscConfig+0x280>)
 8006bac:	6833      	ldr	r3, [r6, #0]
 8006bae:	05d9      	lsls	r1, r3, #23
 8006bb0:	d518      	bpl.n	8006be4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb2:	68eb      	ldr	r3, [r5, #12]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d126      	bne.n	8006c06 <HAL_RCC_OscConfig+0x21e>
 8006bb8:	6a23      	ldr	r3, [r4, #32]
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006bc0:	f7fe fdd4 	bl	800576c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006bc8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bca:	6a23      	ldr	r3, [r4, #32]
 8006bcc:	079b      	lsls	r3, r3, #30
 8006bce:	d53f      	bpl.n	8006c50 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8006bd0:	2f00      	cmp	r7, #0
 8006bd2:	f43f af1b 	beq.w	8006a0c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bd6:	69e3      	ldr	r3, [r4, #28]
 8006bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bdc:	61e3      	str	r3, [r4, #28]
 8006bde:	e715      	b.n	8006a0c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8006be0:	2700      	movs	r7, #0
 8006be2:	e7e2      	b.n	8006baa <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006be4:	6833      	ldr	r3, [r6, #0]
 8006be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bea:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006bec:	f7fe fdbe 	bl	800576c <HAL_GetTick>
 8006bf0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bf2:	6833      	ldr	r3, [r6, #0]
 8006bf4:	05da      	lsls	r2, r3, #23
 8006bf6:	d4dc      	bmi.n	8006bb2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf8:	f7fe fdb8 	bl	800576c <HAL_GetTick>
 8006bfc:	eba0 0008 	sub.w	r0, r0, r8
 8006c00:	2864      	cmp	r0, #100	; 0x64
 8006c02:	d9f6      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x20a>
 8006c04:	e731      	b.n	8006a6a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c06:	b9ab      	cbnz	r3, 8006c34 <HAL_RCC_OscConfig+0x24c>
 8006c08:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c0e:	f023 0301 	bic.w	r3, r3, #1
 8006c12:	6223      	str	r3, [r4, #32]
 8006c14:	6a23      	ldr	r3, [r4, #32]
 8006c16:	f023 0304 	bic.w	r3, r3, #4
 8006c1a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006c1c:	f7fe fda6 	bl	800576c <HAL_GetTick>
 8006c20:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c22:	6a23      	ldr	r3, [r4, #32]
 8006c24:	0798      	lsls	r0, r3, #30
 8006c26:	d5d3      	bpl.n	8006bd0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c28:	f7fe fda0 	bl	800576c <HAL_GetTick>
 8006c2c:	1b80      	subs	r0, r0, r6
 8006c2e:	4540      	cmp	r0, r8
 8006c30:	d9f7      	bls.n	8006c22 <HAL_RCC_OscConfig+0x23a>
 8006c32:	e71a      	b.n	8006a6a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c34:	2b05      	cmp	r3, #5
 8006c36:	6a23      	ldr	r3, [r4, #32]
 8006c38:	d103      	bne.n	8006c42 <HAL_RCC_OscConfig+0x25a>
 8006c3a:	f043 0304 	orr.w	r3, r3, #4
 8006c3e:	6223      	str	r3, [r4, #32]
 8006c40:	e7ba      	b.n	8006bb8 <HAL_RCC_OscConfig+0x1d0>
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	6223      	str	r3, [r4, #32]
 8006c48:	6a23      	ldr	r3, [r4, #32]
 8006c4a:	f023 0304 	bic.w	r3, r3, #4
 8006c4e:	e7b6      	b.n	8006bbe <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c50:	f7fe fd8c 	bl	800576c <HAL_GetTick>
 8006c54:	1b80      	subs	r0, r0, r6
 8006c56:	4540      	cmp	r0, r8
 8006c58:	d9b7      	bls.n	8006bca <HAL_RCC_OscConfig+0x1e2>
 8006c5a:	e706      	b.n	8006a6a <HAL_RCC_OscConfig+0x82>
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	42420000 	.word	0x42420000
 8006c64:	20000000 	.word	0x20000000
 8006c68:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c6c:	4c2a      	ldr	r4, [pc, #168]	; (8006d18 <HAL_RCC_OscConfig+0x330>)
 8006c6e:	6863      	ldr	r3, [r4, #4]
 8006c70:	f003 030c 	and.w	r3, r3, #12
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d03e      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4b28      	ldr	r3, [pc, #160]	; (8006d1c <HAL_RCC_OscConfig+0x334>)
 8006c7c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006c7e:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c80:	d12c      	bne.n	8006cdc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8006c82:	f7fe fd73 	bl	800576c <HAL_GetTick>
 8006c86:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	0199      	lsls	r1, r3, #6
 8006c8c:	d420      	bmi.n	8006cd0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c8e:	6a2b      	ldr	r3, [r5, #32]
 8006c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c94:	d105      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c96:	6862      	ldr	r2, [r4, #4]
 8006c98:	68a9      	ldr	r1, [r5, #8]
 8006c9a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ca2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006ca4:	6862      	ldr	r2, [r4, #4]
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8006cac:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8006cae:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cb0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8006cb2:	4b1a      	ldr	r3, [pc, #104]	; (8006d1c <HAL_RCC_OscConfig+0x334>)
 8006cb4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006cb6:	f7fe fd59 	bl	800576c <HAL_GetTick>
 8006cba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	019a      	lsls	r2, r3, #6
 8006cc0:	f53f aea8 	bmi.w	8006a14 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc4:	f7fe fd52 	bl	800576c <HAL_GetTick>
 8006cc8:	1b40      	subs	r0, r0, r5
 8006cca:	2802      	cmp	r0, #2
 8006ccc:	d9f6      	bls.n	8006cbc <HAL_RCC_OscConfig+0x2d4>
 8006cce:	e6cc      	b.n	8006a6a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd0:	f7fe fd4c 	bl	800576c <HAL_GetTick>
 8006cd4:	1b80      	subs	r0, r0, r6
 8006cd6:	2802      	cmp	r0, #2
 8006cd8:	d9d6      	bls.n	8006c88 <HAL_RCC_OscConfig+0x2a0>
 8006cda:	e6c6      	b.n	8006a6a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8006cdc:	f7fe fd46 	bl	800576c <HAL_GetTick>
 8006ce0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	019b      	lsls	r3, r3, #6
 8006ce6:	f57f ae95 	bpl.w	8006a14 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cea:	f7fe fd3f 	bl	800576c <HAL_GetTick>
 8006cee:	1b40      	subs	r0, r0, r5
 8006cf0:	2802      	cmp	r0, #2
 8006cf2:	d9f6      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x2fa>
 8006cf4:	e6b9      	b.n	8006a6a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cf6:	2801      	cmp	r0, #1
 8006cf8:	f43f aeb8 	beq.w	8006a6c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8006cfc:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cfe:	6a2a      	ldr	r2, [r5, #32]
 8006d00:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8006d04:	4291      	cmp	r1, r2
 8006d06:	f47f ae9b 	bne.w	8006a40 <HAL_RCC_OscConfig+0x58>
 8006d0a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d10:	4293      	cmp	r3, r2
 8006d12:	f43f ae7f 	beq.w	8006a14 <HAL_RCC_OscConfig+0x2c>
 8006d16:	e693      	b.n	8006a40 <HAL_RCC_OscConfig+0x58>
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	42420000 	.word	0x42420000

08006d20 <HAL_RCC_GetSysClockFreq>:
{
 8006d20:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006d22:	4b18      	ldr	r3, [pc, #96]	; (8006d84 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8006d24:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006d26:	ac02      	add	r4, sp, #8
 8006d28:	f103 0510 	add.w	r5, r3, #16
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	6859      	ldr	r1, [r3, #4]
 8006d32:	3308      	adds	r3, #8
 8006d34:	c203      	stmia	r2!, {r0, r1}
 8006d36:	42ab      	cmp	r3, r5
 8006d38:	4614      	mov	r4, r2
 8006d3a:	d1f7      	bne.n	8006d2c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006d3c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8006d40:	4911      	ldr	r1, [pc, #68]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006d42:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8006d46:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006d48:	f003 020c 	and.w	r2, r3, #12
 8006d4c:	2a08      	cmp	r2, #8
 8006d4e:	d117      	bne.n	8006d80 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d50:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8006d54:	3218      	adds	r2, #24
 8006d56:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d58:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d5a:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d5e:	d50c      	bpl.n	8006d7a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d60:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d62:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d64:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d68:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d6a:	3318      	adds	r3, #24
 8006d6c:	446b      	add	r3, sp
 8006d6e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d72:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8006d76:	b007      	add	sp, #28
 8006d78:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d7a:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x70>)
 8006d7c:	4358      	muls	r0, r3
 8006d7e:	e7fa      	b.n	8006d76 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8006d80:	4802      	ldr	r0, [pc, #8]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8006d82:	e7f8      	b.n	8006d76 <HAL_RCC_GetSysClockFreq+0x56>
 8006d84:	08008fcc 	.word	0x08008fcc
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	007a1200 	.word	0x007a1200
 8006d90:	003d0900 	.word	0x003d0900

08006d94 <HAL_RCC_ClockConfig>:
{
 8006d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d98:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	b910      	cbnz	r0, 8006da4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006d9e:	2001      	movs	r0, #1
}
 8006da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006da4:	4a44      	ldr	r2, [pc, #272]	; (8006eb8 <HAL_RCC_ClockConfig+0x124>)
 8006da6:	6813      	ldr	r3, [r2, #0]
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	428b      	cmp	r3, r1
 8006dae:	d328      	bcc.n	8006e02 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db0:	6821      	ldr	r1, [r4, #0]
 8006db2:	078e      	lsls	r6, r1, #30
 8006db4:	d430      	bmi.n	8006e18 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006db6:	07ca      	lsls	r2, r1, #31
 8006db8:	d443      	bmi.n	8006e42 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dba:	4a3f      	ldr	r2, [pc, #252]	; (8006eb8 <HAL_RCC_ClockConfig+0x124>)
 8006dbc:	6813      	ldr	r3, [r2, #0]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	42ab      	cmp	r3, r5
 8006dc4:	d865      	bhi.n	8006e92 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc6:	6822      	ldr	r2, [r4, #0]
 8006dc8:	4d3c      	ldr	r5, [pc, #240]	; (8006ebc <HAL_RCC_ClockConfig+0x128>)
 8006dca:	f012 0f04 	tst.w	r2, #4
 8006dce:	d16c      	bne.n	8006eaa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd0:	0713      	lsls	r3, r2, #28
 8006dd2:	d506      	bpl.n	8006de2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dd4:	686b      	ldr	r3, [r5, #4]
 8006dd6:	6922      	ldr	r2, [r4, #16]
 8006dd8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006ddc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006de0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006de2:	f7ff ff9d 	bl	8006d20 <HAL_RCC_GetSysClockFreq>
 8006de6:	686b      	ldr	r3, [r5, #4]
 8006de8:	4a35      	ldr	r2, [pc, #212]	; (8006ec0 <HAL_RCC_ClockConfig+0x12c>)
 8006dea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006dee:	5cd3      	ldrb	r3, [r2, r3]
 8006df0:	40d8      	lsrs	r0, r3
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <HAL_RCC_ClockConfig+0x130>)
 8006df4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006df6:	4b34      	ldr	r3, [pc, #208]	; (8006ec8 <HAL_RCC_ClockConfig+0x134>)
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	f7fe fc75 	bl	80056e8 <HAL_InitTick>
  return HAL_OK;
 8006dfe:	2000      	movs	r0, #0
 8006e00:	e7ce      	b.n	8006da0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e02:	6813      	ldr	r3, [r2, #0]
 8006e04:	f023 0307 	bic.w	r3, r3, #7
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0c:	6813      	ldr	r3, [r2, #0]
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	428b      	cmp	r3, r1
 8006e14:	d1c3      	bne.n	8006d9e <HAL_RCC_ClockConfig+0xa>
 8006e16:	e7cb      	b.n	8006db0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e18:	4b28      	ldr	r3, [pc, #160]	; (8006ebc <HAL_RCC_ClockConfig+0x128>)
 8006e1a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e1e:	bf1e      	ittt	ne
 8006e20:	685a      	ldrne	r2, [r3, #4]
 8006e22:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8006e26:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e28:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e2a:	bf42      	ittt	mi
 8006e2c:	685a      	ldrmi	r2, [r3, #4]
 8006e2e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8006e32:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	68a0      	ldr	r0, [r4, #8]
 8006e38:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006e3c:	4302      	orrs	r2, r0
 8006e3e:	605a      	str	r2, [r3, #4]
 8006e40:	e7b9      	b.n	8006db6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e42:	6862      	ldr	r2, [r4, #4]
 8006e44:	4e1d      	ldr	r6, [pc, #116]	; (8006ebc <HAL_RCC_ClockConfig+0x128>)
 8006e46:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e48:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e4a:	d11a      	bne.n	8006e82 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e50:	d0a5      	beq.n	8006d9e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e52:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e54:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e58:	f023 0303 	bic.w	r3, r3, #3
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006e60:	f7fe fc84 	bl	800576c <HAL_GetTick>
 8006e64:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e66:	6873      	ldr	r3, [r6, #4]
 8006e68:	6862      	ldr	r2, [r4, #4]
 8006e6a:	f003 030c 	and.w	r3, r3, #12
 8006e6e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006e72:	d0a2      	beq.n	8006dba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e74:	f7fe fc7a 	bl	800576c <HAL_GetTick>
 8006e78:	1bc0      	subs	r0, r0, r7
 8006e7a:	4540      	cmp	r0, r8
 8006e7c:	d9f3      	bls.n	8006e66 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8006e7e:	2003      	movs	r0, #3
 8006e80:	e78e      	b.n	8006da0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e82:	2a02      	cmp	r2, #2
 8006e84:	d102      	bne.n	8006e8c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006e8a:	e7e1      	b.n	8006e50 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e8c:	f013 0f02 	tst.w	r3, #2
 8006e90:	e7de      	b.n	8006e50 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e92:	6813      	ldr	r3, [r2, #0]
 8006e94:	f023 0307 	bic.w	r3, r3, #7
 8006e98:	432b      	orrs	r3, r5
 8006e9a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e9c:	6813      	ldr	r3, [r2, #0]
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	42ab      	cmp	r3, r5
 8006ea4:	f47f af7b 	bne.w	8006d9e <HAL_RCC_ClockConfig+0xa>
 8006ea8:	e78d      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006eaa:	686b      	ldr	r3, [r5, #4]
 8006eac:	68e1      	ldr	r1, [r4, #12]
 8006eae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	606b      	str	r3, [r5, #4]
 8006eb6:	e78b      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x3c>
 8006eb8:	40022000 	.word	0x40022000
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	08008fb4 	.word	0x08008fb4
 8006ec4:	20000000 	.word	0x20000000
 8006ec8:	20000010 	.word	0x20000010

08006ecc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006ece:	4a05      	ldr	r2, [pc, #20]	; (8006ee4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006ed6:	5cd3      	ldrb	r3, [r2, r3]
 8006ed8:	4a03      	ldr	r2, [pc, #12]	; (8006ee8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006eda:	6810      	ldr	r0, [r2, #0]
}
 8006edc:	40d8      	lsrs	r0, r3
 8006ede:	4770      	bx	lr
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	08008fc4 	.word	0x08008fc4
 8006ee8:	20000000 	.word	0x20000000

08006eec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006eec:	4b04      	ldr	r3, [pc, #16]	; (8006f00 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006eee:	4a05      	ldr	r2, [pc, #20]	; (8006f04 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006ef6:	5cd3      	ldrb	r3, [r2, r3]
 8006ef8:	4a03      	ldr	r2, [pc, #12]	; (8006f08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006efa:	6810      	ldr	r0, [r2, #0]
}
 8006efc:	40d8      	lsrs	r0, r3
 8006efe:	4770      	bx	lr
 8006f00:	40021000 	.word	0x40021000
 8006f04:	08008fc4 	.word	0x08008fc4
 8006f08:	20000000 	.word	0x20000000

08006f0c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006f0c:	6803      	ldr	r3, [r0, #0]
{
 8006f0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006f12:	07d9      	lsls	r1, r3, #31
{
 8006f14:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006f16:	d520      	bpl.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f18:	4c36      	ldr	r4, [pc, #216]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f1a:	69e3      	ldr	r3, [r4, #28]
 8006f1c:	00da      	lsls	r2, r3, #3
 8006f1e:	d432      	bmi.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8006f20:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f22:	69e3      	ldr	r3, [r4, #28]
 8006f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f28:	61e3      	str	r3, [r4, #28]
 8006f2a:	69e3      	ldr	r3, [r4, #28]
 8006f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f34:	4f30      	ldr	r7, [pc, #192]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	05db      	lsls	r3, r3, #23
 8006f3a:	d526      	bpl.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f3c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f3e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006f42:	d136      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f44:	6a23      	ldr	r3, [r4, #32]
 8006f46:	686a      	ldr	r2, [r5, #4]
 8006f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f50:	b11e      	cbz	r6, 8006f5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f52:	69e3      	ldr	r3, [r4, #28]
 8006f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f58:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f5a:	6828      	ldr	r0, [r5, #0]
 8006f5c:	0783      	lsls	r3, r0, #30
 8006f5e:	d506      	bpl.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f60:	4924      	ldr	r1, [pc, #144]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f62:	68ab      	ldr	r3, [r5, #8]
 8006f64:	684a      	ldr	r2, [r1, #4]
 8006f66:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f6e:	f010 0010 	ands.w	r0, r0, #16
 8006f72:	d01b      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f74:	4a1f      	ldr	r2, [pc, #124]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f76:	68e9      	ldr	r1, [r5, #12]
 8006f78:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f7a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006f80:	430b      	orrs	r3, r1
 8006f82:	6053      	str	r3, [r2, #4]
 8006f84:	e012      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8006f86:	2600      	movs	r6, #0
 8006f88:	e7d4      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f90:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006f92:	f7fe fbeb 	bl	800576c <HAL_GetTick>
 8006f96:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	05d8      	lsls	r0, r3, #23
 8006f9c:	d4ce      	bmi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f9e:	f7fe fbe5 	bl	800576c <HAL_GetTick>
 8006fa2:	eba0 0008 	sub.w	r0, r0, r8
 8006fa6:	2864      	cmp	r0, #100	; 0x64
 8006fa8:	d9f6      	bls.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8006faa:	2003      	movs	r0, #3
}
 8006fac:	b002      	add	sp, #8
 8006fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fb2:	686a      	ldr	r2, [r5, #4]
 8006fb4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d0c3      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	4a0f      	ldr	r2, [pc, #60]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fc0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fc2:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fc6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fc8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fcc:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8006fd0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006fd2:	07d9      	lsls	r1, r3, #31
 8006fd4:	d5b6      	bpl.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8006fd6:	f7fe fbc9 	bl	800576c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fda:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006fde:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe0:	6a23      	ldr	r3, [r4, #32]
 8006fe2:	079a      	lsls	r2, r3, #30
 8006fe4:	d4ae      	bmi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fe6:	f7fe fbc1 	bl	800576c <HAL_GetTick>
 8006fea:	1bc0      	subs	r0, r0, r7
 8006fec:	4540      	cmp	r0, r8
 8006fee:	d9f7      	bls.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006ff0:	e7db      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006ff2:	bf00      	nop
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	40007000 	.word	0x40007000
 8006ffc:	42420000 	.word	0x42420000

08007000 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007000:	4602      	mov	r2, r0
 8007002:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007004:	4b33      	ldr	r3, [pc, #204]	; (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 8007006:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007008:	ad02      	add	r5, sp, #8
 800700a:	f103 0610 	add.w	r6, r3, #16
 800700e:	462c      	mov	r4, r5
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	6859      	ldr	r1, [r3, #4]
 8007014:	3308      	adds	r3, #8
 8007016:	c403      	stmia	r4!, {r0, r1}
 8007018:	42b3      	cmp	r3, r6
 800701a:	4625      	mov	r5, r4
 800701c:	d1f7      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800701e:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007022:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007024:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8007028:	d047      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800702a:	2a10      	cmp	r2, #16
 800702c:	d003      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 800702e:	2a01      	cmp	r2, #1
 8007030:	d024      	beq.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8007032:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8007034:	e036      	b.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 8007036:	4a28      	ldr	r2, [pc, #160]	; (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8007038:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800703a:	6810      	ldr	r0, [r2, #0]
 800703c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8007040:	d030      	beq.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007042:	f3c1 4383 	ubfx	r3, r1, #18, #4
 8007046:	3318      	adds	r3, #24
 8007048:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800704a:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800704c:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007050:	bf49      	itett	mi
 8007052:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007054:	4b21      	ldrpl	r3, [pc, #132]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007056:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 800705a:	3318      	addmi	r3, #24
 800705c:	bf41      	itttt	mi
 800705e:	446b      	addmi	r3, sp
 8007060:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007064:	4b1e      	ldrmi	r3, [pc, #120]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8007066:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800706a:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800706c:	6853      	ldr	r3, [r2, #4]
 800706e:	025b      	lsls	r3, r3, #9
 8007070:	d418      	bmi.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 8007072:	2303      	movs	r3, #3
 8007074:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007076:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800707a:	e013      	b.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800707c:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8007080:	4a15      	ldr	r2, [pc, #84]	; (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8007082:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007084:	4019      	ands	r1, r3
 8007086:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800708a:	d01f      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800708c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007094:	d108      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 8007096:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800709a:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800709c:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 80070a0:	bf18      	it	ne
 80070a2:	4618      	movne	r0, r3
}
 80070a4:	b006      	add	sp, #24
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80070a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ac:	d1c1      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 80070ae:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80070b0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80070b4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80070b8:	e7f2      	b.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80070ba:	f7ff ff17 	bl	8006eec <HAL_RCC_GetPCLK2Freq>
 80070be:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80070c6:	3301      	adds	r3, #1
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	e7d4      	b.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 80070cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80070d0:	e7e8      	b.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80070d2:	bf00      	nop
 80070d4:	08008fcc 	.word	0x08008fcc
 80070d8:	40021000 	.word	0x40021000
 80070dc:	003d0900 	.word	0x003d0900
 80070e0:	007a1200 	.word	0x007a1200

080070e4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 80070e8:	f7fe fb40 	bl	800576c <HAL_GetTick>
 80070ec:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	0692      	lsls	r2, r2, #26
 80070f4:	d505      	bpl.n	8007102 <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 80070f6:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	f042 0210 	orr.w	r2, r2, #16
 80070fe:	605a      	str	r2, [r3, #4]
}
 8007100:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007102:	f7fe fb33 	bl	800576c <HAL_GetTick>
 8007106:	1b40      	subs	r0, r0, r5
 8007108:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800710c:	d9ef      	bls.n	80070ee <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 800710e:	2003      	movs	r0, #3
 8007110:	e7f6      	b.n	8007100 <RTC_EnterInitMode+0x1c>

08007112 <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007112:	6802      	ldr	r2, [r0, #0]
{
 8007114:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007116:	6853      	ldr	r3, [r2, #4]
{
 8007118:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800711a:	f023 0310 	bic.w	r3, r3, #16
 800711e:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 8007120:	f7fe fb24 	bl	800576c <HAL_GetTick>
 8007124:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	069b      	lsls	r3, r3, #26
 800712c:	d501      	bpl.n	8007132 <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800712e:	2000      	movs	r0, #0
}
 8007130:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007132:	f7fe fb1b 	bl	800576c <HAL_GetTick>
 8007136:	1b40      	subs	r0, r0, r5
 8007138:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800713c:	d9f3      	bls.n	8007126 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 800713e:	2003      	movs	r0, #3
 8007140:	e7f6      	b.n	8007130 <RTC_ExitInitMode+0x1e>

08007142 <HAL_RTC_WaitForSynchro>:
{
 8007142:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8007144:	4604      	mov	r4, r0
 8007146:	b1a8      	cbz	r0, 8007174 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007148:	6802      	ldr	r2, [r0, #0]
 800714a:	6853      	ldr	r3, [r2, #4]
 800714c:	f023 0308 	bic.w	r3, r3, #8
 8007150:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8007152:	f7fe fb0b 	bl	800576c <HAL_GetTick>
 8007156:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	071b      	lsls	r3, r3, #28
 800715e:	d501      	bpl.n	8007164 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8007160:	2000      	movs	r0, #0
}
 8007162:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007164:	f7fe fb02 	bl	800576c <HAL_GetTick>
 8007168:	1b40      	subs	r0, r0, r5
 800716a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800716e:	d9f3      	bls.n	8007158 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8007170:	2003      	movs	r0, #3
 8007172:	e7f6      	b.n	8007162 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8007174:	2001      	movs	r0, #1
 8007176:	e7f4      	b.n	8007162 <HAL_RTC_WaitForSynchro+0x20>

08007178 <HAL_RTC_Init>:
{
 8007178:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 800717a:	4604      	mov	r4, r0
 800717c:	b170      	cbz	r0, 800719c <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800717e:	7c43      	ldrb	r3, [r0, #17]
 8007180:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007184:	b913      	cbnz	r3, 800718c <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8007186:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8007188:	f7fe f980 	bl	800548c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800718c:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800718e:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007190:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007192:	f7ff ffd6 	bl	8007142 <HAL_RTC_WaitForSynchro>
 8007196:	b118      	cbz	r0, 80071a0 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007198:	2304      	movs	r3, #4
 800719a:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 800719c:	2001      	movs	r0, #1
 800719e:	e036      	b.n	800720e <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80071a0:	4620      	mov	r0, r4
 80071a2:	f7ff ff9f 	bl	80070e4 <RTC_EnterInitMode>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d1f6      	bne.n	8007198 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80071aa:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80071ac:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80071ae:	6853      	ldr	r3, [r2, #4]
 80071b0:	f023 0307 	bic.w	r3, r3, #7
 80071b4:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80071b6:	4a16      	ldr	r2, [pc, #88]	; (8007210 <HAL_RTC_Init+0x98>)
 80071b8:	b118      	cbz	r0, 80071c2 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80071ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80071bc:	f021 0101 	bic.w	r1, r1, #1
 80071c0:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80071c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80071c4:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80071c8:	4303      	orrs	r3, r0
 80071ca:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80071cc:	6860      	ldr	r0, [r4, #4]
 80071ce:	1c43      	adds	r3, r0, #1
 80071d0:	d105      	bne.n	80071de <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80071d2:	2001      	movs	r0, #1
 80071d4:	f7ff ff14 	bl	8007000 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80071d8:	2800      	cmp	r0, #0
 80071da:	d0dd      	beq.n	8007198 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80071dc:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80071de:	6822      	ldr	r2, [r4, #0]
 80071e0:	6893      	ldr	r3, [r2, #8]
 80071e2:	f023 030f 	bic.w	r3, r3, #15
 80071e6:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80071ea:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80071ec:	68d3      	ldr	r3, [r2, #12]
 80071ee:	b280      	uxth	r0, r0
 80071f0:	0c1b      	lsrs	r3, r3, #16
 80071f2:	041b      	lsls	r3, r3, #16
 80071f4:	4318      	orrs	r0, r3
 80071f6:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7ff ff8a 	bl	8007112 <RTC_ExitInitMode>
 80071fe:	2301      	movs	r3, #1
 8007200:	b110      	cbz	r0, 8007208 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007202:	2204      	movs	r2, #4
 8007204:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8007206:	e7c9      	b.n	800719c <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007208:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800720a:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800720c:	7463      	strb	r3, [r4, #17]
}
 800720e:	bd10      	pop	{r4, pc}
 8007210:	40006c00 	.word	0x40006c00

08007214 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 8007214:	0089      	lsls	r1, r1, #2
 8007216:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800721a:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800721e:	b292      	uxth	r2, r2
 8007220:	600a      	str	r2, [r1, #0]
}
 8007222:	4770      	bx	lr

08007224 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 8007224:	0089      	lsls	r1, r1, #2
 8007226:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800722a:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800722e:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 8007230:	b280      	uxth	r0, r0
 8007232:	4770      	bx	lr

08007234 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007234:	6803      	ldr	r3, [r0, #0]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800723c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723e:	695a      	ldr	r2, [r3, #20]
 8007240:	f022 0201 	bic.w	r2, r2, #1
 8007244:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007246:	2320      	movs	r3, #32
 8007248:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800724c:	4770      	bx	lr
	...

08007250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007250:	b510      	push	{r4, lr}
 8007252:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007254:	6803      	ldr	r3, [r0, #0]
 8007256:	68c1      	ldr	r1, [r0, #12]
 8007258:	691a      	ldr	r2, [r3, #16]
 800725a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800725e:	430a      	orrs	r2, r1
 8007260:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007262:	6882      	ldr	r2, [r0, #8]
 8007264:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007266:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007268:	4302      	orrs	r2, r0
 800726a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800726c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007270:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007274:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007276:	430a      	orrs	r2, r1
 8007278:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800727a:	695a      	ldr	r2, [r3, #20]
 800727c:	69a1      	ldr	r1, [r4, #24]
 800727e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007282:	430a      	orrs	r2, r1
 8007284:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007286:	4a0e      	ldr	r2, [pc, #56]	; (80072c0 <UART_SetConfig+0x70>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d115      	bne.n	80072b8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800728c:	f7ff fe2e 	bl	8006eec <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007290:	2319      	movs	r3, #25
 8007292:	4343      	muls	r3, r0
 8007294:	6862      	ldr	r2, [r4, #4]
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	0092      	lsls	r2, r2, #2
 800729a:	fbb3 f3f2 	udiv	r3, r3, r2
 800729e:	2264      	movs	r2, #100	; 0x64
 80072a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80072a4:	fb02 3311 	mls	r3, r2, r1, r3
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	3332      	adds	r3, #50	; 0x32
 80072ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80072b0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80072b4:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80072b6:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80072b8:	f7ff fe08 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 80072bc:	e7e8      	b.n	8007290 <UART_SetConfig+0x40>
 80072be:	bf00      	nop
 80072c0:	40013800 	.word	0x40013800

080072c4 <HAL_UART_Init>:
{
 80072c4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80072c6:	4604      	mov	r4, r0
 80072c8:	b340      	cbz	r0, 800731c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80072ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80072ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072d2:	b91b      	cbnz	r3, 80072dc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80072d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80072d8:	f7fe f950 	bl	800557c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80072dc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80072de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80072e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80072e4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80072e6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80072e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072ec:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80072ee:	f7ff ffaf 	bl	8007250 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072f2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072fe:	695a      	ldr	r2, [r3, #20]
 8007300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007304:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800730c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800730e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007310:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007312:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007316:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800731a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800731c:	2001      	movs	r0, #1
 800731e:	e7fc      	b.n	800731a <HAL_UART_Init+0x56>

08007320 <HAL_UART_DeInit>:
{
 8007320:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007322:	4604      	mov	r4, r0
 8007324:	b190      	cbz	r0, 800734c <HAL_UART_DeInit+0x2c>
  huart->gState = HAL_UART_STATE_BUSY;
 8007326:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8007328:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800732a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800732e:	68d3      	ldr	r3, [r2, #12]
 8007330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007334:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8007336:	f7fe f97d 	bl	8005634 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733a:	2000      	movs	r0, #0
 800733c:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 800733e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 8007342:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8007346:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
}
 800734a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800734c:	2001      	movs	r0, #1
 800734e:	e7fc      	b.n	800734a <HAL_UART_DeInit+0x2a>

08007350 <HAL_UART_Receive_DMA>:
{
 8007350:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007352:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8007354:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8007358:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800735a:	2a20      	cmp	r2, #32
 800735c:	d138      	bne.n	80073d0 <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 800735e:	2900      	cmp	r1, #0
 8007360:	d034      	beq.n	80073cc <HAL_UART_Receive_DMA+0x7c>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d032      	beq.n	80073cc <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8007366:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800736a:	2a01      	cmp	r2, #1
 800736c:	d030      	beq.n	80073d0 <HAL_UART_Receive_DMA+0x80>
 800736e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007370:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8007372:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007376:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8007378:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800737a:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737c:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800737e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007382:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007384:	4a13      	ldr	r2, [pc, #76]	; (80073d4 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007386:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007388:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800738a:	4a13      	ldr	r2, [pc, #76]	; (80073d8 <HAL_UART_Receive_DMA+0x88>)
 800738c:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800738e:	4a13      	ldr	r2, [pc, #76]	; (80073dc <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferAbortCallback = NULL;
 8007390:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007394:	460a      	mov	r2, r1
 8007396:	1d31      	adds	r1, r6, #4
 8007398:	f7fe fad0 	bl	800593c <HAL_DMA_Start_IT>
    return HAL_OK;
 800739c:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_OREFLAG(huart);
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	9501      	str	r5, [sp, #4]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	9201      	str	r2, [sp, #4]
 80073a6:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 80073a8:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 80073ac:	9201      	str	r2, [sp, #4]
 80073ae:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073b6:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b8:	695a      	ldr	r2, [r3, #20]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073c0:	695a      	ldr	r2, [r3, #20]
 80073c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073c6:	615a      	str	r2, [r3, #20]
}
 80073c8:	b002      	add	sp, #8
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80073cc:	2001      	movs	r0, #1
 80073ce:	e7fb      	b.n	80073c8 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 80073d0:	2002      	movs	r0, #2
 80073d2:	e7f9      	b.n	80073c8 <HAL_UART_Receive_DMA+0x78>
 80073d4:	080073e3 	.word	0x080073e3
 80073d8:	0800748d 	.word	0x0800748d
 80073dc:	08007497 	.word	0x08007497

080073e0 <HAL_UART_TxCpltCallback>:
 80073e0:	4770      	bx	lr

080073e2 <UART_DMAReceiveCplt>:
{
 80073e2:	b508      	push	{r3, lr}
 80073e4:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073e6:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f013 0320 	ands.w	r3, r3, #32
 80073f0:	d110      	bne.n	8007414 <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 80073f2:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073f4:	6803      	ldr	r3, [r0, #0]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073fc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fe:	695a      	ldr	r2, [r3, #20]
 8007400:	f022 0201 	bic.w	r2, r2, #1
 8007404:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007406:	695a      	ldr	r2, [r3, #20]
 8007408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800740c:	615a      	str	r2, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800740e:	2320      	movs	r3, #32
 8007410:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8007414:	f7fe f8b1 	bl	800557a <HAL_UART_RxCpltCallback>
}
 8007418:	bd08      	pop	{r3, pc}

0800741a <UART_Receive_IT.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800741a:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800741c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8007420:	2b22      	cmp	r3, #34	; 0x22
 8007422:	d124      	bne.n	800746e <UART_Receive_IT.isra.0+0x54>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007424:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007426:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007428:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800742c:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800742e:	d11f      	bne.n	8007470 <UART_Receive_IT.isra.0+0x56>
 8007430:	6901      	ldr	r1, [r0, #16]
 8007432:	bb01      	cbnz	r1, 8007476 <UART_Receive_IT.isra.0+0x5c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007434:	6852      	ldr	r2, [r2, #4]
 8007436:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800743a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 800743e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007440:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007442:	3b01      	subs	r3, #1
 8007444:	b29b      	uxth	r3, r3
 8007446:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007448:	b98b      	cbnz	r3, 800746e <UART_Receive_IT.isra.0+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800744a:	6803      	ldr	r3, [r0, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	f022 0220 	bic.w	r2, r2, #32
 8007452:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800745a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800745c:	695a      	ldr	r2, [r3, #20]
 800745e:	f022 0201 	bic.w	r2, r2, #1
 8007462:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007464:	2320      	movs	r3, #32
 8007466:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800746a:	f7fe f886 	bl	800557a <HAL_UART_RxCpltCallback>
}
 800746e:	bd08      	pop	{r3, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007470:	b939      	cbnz	r1, 8007482 <UART_Receive_IT.isra.0+0x68>
 8007472:	6901      	ldr	r1, [r0, #16]
 8007474:	b929      	cbnz	r1, 8007482 <UART_Receive_IT.isra.0+0x68>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007476:	6852      	ldr	r2, [r2, #4]
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 800747c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800747e:	3301      	adds	r3, #1
 8007480:	e7dd      	b.n	800743e <UART_Receive_IT.isra.0+0x24>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007482:	6852      	ldr	r2, [r2, #4]
 8007484:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007488:	e7f7      	b.n	800747a <UART_Receive_IT.isra.0+0x60>

0800748a <HAL_UART_RxHalfCpltCallback>:
 800748a:	4770      	bx	lr

0800748c <UART_DMARxHalfCplt>:
{
 800748c:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800748e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007490:	f7ff fffb 	bl	800748a <HAL_UART_RxHalfCpltCallback>
}
 8007494:	bd08      	pop	{r3, pc}

08007496 <UART_DMAError>:
{
 8007496:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007498:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800749a:	6803      	ldr	r3, [r0, #0]
 800749c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800749e:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80074a2:	2921      	cmp	r1, #33	; 0x21
 80074a4:	d10a      	bne.n	80074bc <UART_DMAError+0x26>
 80074a6:	0612      	lsls	r2, r2, #24
 80074a8:	d508      	bpl.n	80074bc <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 80074aa:	2200      	movs	r2, #0
 80074ac:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80074b4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80074b6:	2220      	movs	r2, #32
 80074b8:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074bc:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074be:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 80074c2:	2a22      	cmp	r2, #34	; 0x22
 80074c4:	d105      	bne.n	80074d2 <UART_DMAError+0x3c>
 80074c6:	065b      	lsls	r3, r3, #25
 80074c8:	d503      	bpl.n	80074d2 <UART_DMAError+0x3c>
    huart->RxXferCount = 0x00U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80074ce:	f7ff feb1 	bl	8007234 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80074d4:	f043 0310 	orr.w	r3, r3, #16
 80074d8:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80074da:	f7fe f84d 	bl	8005578 <HAL_UART_ErrorCallback>
}
 80074de:	bd08      	pop	{r3, pc}

080074e0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074e0:	6803      	ldr	r3, [r0, #0]
{
 80074e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074e4:	681a      	ldr	r2, [r3, #0]
{
 80074e6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80074e8:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ea:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074ec:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80074ee:	d107      	bne.n	8007500 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074f0:	0696      	lsls	r6, r2, #26
 80074f2:	d55c      	bpl.n	80075ae <HAL_UART_IRQHandler+0xce>
 80074f4:	068d      	lsls	r5, r1, #26
 80074f6:	d55a      	bpl.n	80075ae <HAL_UART_IRQHandler+0xce>
}
 80074f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80074fc:	f7ff bf8d 	b.w	800741a <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007500:	f005 0001 	and.w	r0, r5, #1
 8007504:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8007508:	4305      	orrs	r5, r0
 800750a:	d050      	beq.n	80075ae <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800750c:	07d6      	lsls	r6, r2, #31
 800750e:	d505      	bpl.n	800751c <HAL_UART_IRQHandler+0x3c>
 8007510:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007512:	bf42      	ittt	mi
 8007514:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8007516:	f043 0301 	orrmi.w	r3, r3, #1
 800751a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800751c:	0753      	lsls	r3, r2, #29
 800751e:	d504      	bpl.n	800752a <HAL_UART_IRQHandler+0x4a>
 8007520:	b118      	cbz	r0, 800752a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007522:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007524:	f043 0302 	orr.w	r3, r3, #2
 8007528:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800752a:	0796      	lsls	r6, r2, #30
 800752c:	d504      	bpl.n	8007538 <HAL_UART_IRQHandler+0x58>
 800752e:	b118      	cbz	r0, 8007538 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007530:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007532:	f043 0304 	orr.w	r3, r3, #4
 8007536:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007538:	0715      	lsls	r5, r2, #28
 800753a:	d507      	bpl.n	800754c <HAL_UART_IRQHandler+0x6c>
 800753c:	f001 0320 	and.w	r3, r1, #32
 8007540:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007542:	bf1e      	ittt	ne
 8007544:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 8007546:	f043 0308 	orrne.w	r3, r3, #8
 800754a:	63e3      	strne	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800754c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800754e:	b34b      	cbz	r3, 80075a4 <HAL_UART_IRQHandler+0xc4>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007550:	0690      	lsls	r0, r2, #26
 8007552:	d504      	bpl.n	800755e <HAL_UART_IRQHandler+0x7e>
 8007554:	0689      	lsls	r1, r1, #26
 8007556:	d502      	bpl.n	800755e <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8007558:	4620      	mov	r0, r4
 800755a:	f7ff ff5e 	bl	800741a <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800755e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8007560:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007562:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007564:	6be5      	ldr	r5, [r4, #60]	; 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007566:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800756a:	f005 0508 	and.w	r5, r5, #8
 800756e:	431d      	orrs	r5, r3
 8007570:	d019      	beq.n	80075a6 <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8007572:	f7ff fe5f 	bl	8007234 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	695a      	ldr	r2, [r3, #20]
 800757a:	0652      	lsls	r2, r2, #25
 800757c:	d50f      	bpl.n	800759e <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800757e:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007580:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007586:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007588:	b148      	cbz	r0, 800759e <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800758a:	4b25      	ldr	r3, [pc, #148]	; (8007620 <HAL_UART_IRQHandler+0x140>)
 800758c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800758e:	f7fe fa11 	bl	80059b4 <HAL_DMA_Abort_IT>
 8007592:	b138      	cbz	r0, 80075a4 <HAL_UART_IRQHandler+0xc4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007594:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8007596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800759a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800759c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800759e:	4620      	mov	r0, r4
 80075a0:	f7fd ffea 	bl	8005578 <HAL_UART_ErrorCallback>
}
 80075a4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80075a6:	f7fd ffe7 	bl	8005578 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075aa:	63e5      	str	r5, [r4, #60]	; 0x3c
 80075ac:	e7fa      	b.n	80075a4 <HAL_UART_IRQHandler+0xc4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075ae:	0616      	lsls	r6, r2, #24
 80075b0:	d526      	bpl.n	8007600 <HAL_UART_IRQHandler+0x120>
 80075b2:	060d      	lsls	r5, r1, #24
 80075b4:	d524      	bpl.n	8007600 <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075b6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80075ba:	2a21      	cmp	r2, #33	; 0x21
 80075bc:	d1f2      	bne.n	80075a4 <HAL_UART_IRQHandler+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075be:	68a1      	ldr	r1, [r4, #8]
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80075c0:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80075c6:	d116      	bne.n	80075f6 <HAL_UART_IRQHandler+0x116>
 80075c8:	6921      	ldr	r1, [r4, #16]
 80075ca:	b9a1      	cbnz	r1, 80075f6 <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075cc:	f832 1b02 	ldrh.w	r1, [r2], #2
 80075d0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80075d4:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075d6:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80075d8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80075da:	3a01      	subs	r2, #1
 80075dc:	b292      	uxth	r2, r2
 80075de:	84e2      	strh	r2, [r4, #38]	; 0x26
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	d1df      	bne.n	80075a4 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075ea:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075f2:	60da      	str	r2, [r3, #12]
 80075f4:	e7d6      	b.n	80075a4 <HAL_UART_IRQHandler+0xc4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80075f6:	1c51      	adds	r1, r2, #1
 80075f8:	6221      	str	r1, [r4, #32]
 80075fa:	7812      	ldrb	r2, [r2, #0]
 80075fc:	605a      	str	r2, [r3, #4]
 80075fe:	e7eb      	b.n	80075d8 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007600:	0650      	lsls	r0, r2, #25
 8007602:	d5cf      	bpl.n	80075a4 <HAL_UART_IRQHandler+0xc4>
 8007604:	064a      	lsls	r2, r1, #25
 8007606:	d5cd      	bpl.n	80075a4 <HAL_UART_IRQHandler+0xc4>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007608:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800760a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800760c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007610:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007612:	2320      	movs	r3, #32
 8007614:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8007618:	f7ff fee2 	bl	80073e0 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800761c:	e7c2      	b.n	80075a4 <HAL_UART_IRQHandler+0xc4>
 800761e:	bf00      	nop
 8007620:	08007625 	.word	0x08007625

08007624 <UART_DMAAbortOnError>:
{
 8007624:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8007626:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007628:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800762a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800762c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800762e:	f7fd ffa3 	bl	8005578 <HAL_UART_ErrorCallback>
}
 8007632:	bd08      	pop	{r3, pc}

08007634 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007634:	b084      	sub	sp, #16
 8007636:	a801      	add	r0, sp, #4
 8007638:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800763c:	b004      	add	sp, #16
 800763e:	2000      	movs	r0, #0
 8007640:	4770      	bx	lr

08007642 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007642:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007644:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8007648:	2000      	movs	r0, #0
 800764a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800764e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8007652:	4770      	bx	lr

08007654 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007654:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8007658:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800765c:	045b      	lsls	r3, r3, #17
 800765e:	0c5b      	lsrs	r3, r3, #17
 8007660:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8007664:	2000      	movs	r0, #0
 8007666:	4770      	bx	lr

08007668 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8007668:	2000      	movs	r0, #0
 800766a:	4770      	bx	lr

0800766c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800766c:	b084      	sub	sp, #16
 800766e:	b510      	push	{r4, lr}
 8007670:	4604      	mov	r4, r0
 8007672:	a803      	add	r0, sp, #12
 8007674:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007678:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800767a:	2301      	movs	r3, #1
 800767c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8007680:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007684:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007688:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 800768c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007690:	b004      	add	sp, #16
 8007692:	4770      	bx	lr

08007694 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007694:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007696:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8007698:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800769a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 800769e:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80076a0:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80076a4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80076a8:	0424      	lsls	r4, r4, #16
 80076aa:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 80076ac:	2d03      	cmp	r5, #3
 80076ae:	d848      	bhi.n	8007742 <USB_ActivateEndpoint+0xae>
 80076b0:	e8df f005 	tbb	[pc, r5]
 80076b4:	40424402 	.word	0x40424402
  HAL_StatusTypeDef ret = HAL_OK;
 80076b8:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80076ba:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80076be:	f248 0680 	movw	r6, #32896	; 0x8080
 80076c2:	4334      	orrs	r4, r6
 80076c4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80076c8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80076cc:	4f8c      	ldr	r7, [pc, #560]	; (8007900 <USB_ActivateEndpoint+0x26c>)
 80076ce:	b2a4      	uxth	r4, r4
 80076d0:	403c      	ands	r4, r7
 80076d2:	4314      	orrs	r4, r2
 80076d4:	4334      	orrs	r4, r6
 80076d6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80076da:	7b0c      	ldrb	r4, [r1, #12]
 80076dc:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 80076e0:	2c00      	cmp	r4, #0
 80076e2:	d17b      	bne.n	80077dc <USB_ActivateEndpoint+0x148>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80076e4:	88ce      	ldrh	r6, [r1, #6]
    if (ep->is_in != 0U)
 80076e6:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80076e8:	0876      	lsrs	r6, r6, #1
 80076ea:	0076      	lsls	r6, r6, #1
    if (ep->is_in != 0U)
 80076ec:	b35c      	cbz	r4, 8007746 <USB_ActivateEndpoint+0xb2>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80076ee:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80076f2:	b2a4      	uxth	r4, r4
 80076f4:	4464      	add	r4, ip
 80076f6:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076fa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80076fe:	064e      	lsls	r6, r1, #25
 8007700:	d509      	bpl.n	8007716 <USB_ActivateEndpoint+0x82>
 8007702:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007706:	b289      	uxth	r1, r1
 8007708:	4039      	ands	r1, r7
 800770a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800770e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8007712:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007716:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800771a:	4c7a      	ldr	r4, [pc, #488]	; (8007904 <USB_ActivateEndpoint+0x270>)
 800771c:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 800771e:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007720:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8007724:	d001      	beq.n	800772a <USB_ActivateEndpoint+0x96>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007726:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800772a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800772e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007732:	e0a9      	b.n	8007888 <USB_ActivateEndpoint+0x1f4>
      wEpRegVal |= USB_EP_INTERRUPT;
 8007734:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8007738:	2000      	movs	r0, #0
      break;
 800773a:	e7c0      	b.n	80076be <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800773c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8007740:	e7fa      	b.n	8007738 <USB_ActivateEndpoint+0xa4>
  switch (ep->type)
 8007742:	2001      	movs	r0, #1
 8007744:	e7bb      	b.n	80076be <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007746:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800774a:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800774c:	b2a4      	uxth	r4, r4
 800774e:	4464      	add	r4, ip
 8007750:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007754:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8007758:	b2a4      	uxth	r4, r4
 800775a:	4464      	add	r4, ip
 800775c:	bb6d      	cbnz	r5, 80077ba <USB_ActivateEndpoint+0x126>
 800775e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8007762:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007766:	0409      	lsls	r1, r1, #16
 8007768:	0c09      	lsrs	r1, r1, #16
 800776a:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
 800776e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8007772:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007776:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800777a:	b289      	uxth	r1, r1
 800777c:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007780:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007784:	044f      	lsls	r7, r1, #17
 8007786:	d50d      	bpl.n	80077a4 <USB_ActivateEndpoint+0x110>
 8007788:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800778c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8007790:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007794:	0409      	lsls	r1, r1, #16
 8007796:	0c09      	lsrs	r1, r1, #16
 8007798:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800779c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80077a0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077a4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80077a8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80077ac:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80077b0:	0409      	lsls	r1, r1, #16
 80077b2:	0c09      	lsrs	r1, r1, #16
 80077b4:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80077b8:	e7b7      	b.n	800772a <USB_ActivateEndpoint+0x96>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80077ba:	2d3e      	cmp	r5, #62	; 0x3e
 80077bc:	d805      	bhi.n	80077ca <USB_ActivateEndpoint+0x136>
 80077be:	0869      	lsrs	r1, r5, #1
 80077c0:	07ed      	lsls	r5, r5, #31
 80077c2:	bf48      	it	mi
 80077c4:	3101      	addmi	r1, #1
 80077c6:	0289      	lsls	r1, r1, #10
 80077c8:	e7d7      	b.n	800777a <USB_ActivateEndpoint+0xe6>
 80077ca:	096e      	lsrs	r6, r5, #5
 80077cc:	06e9      	lsls	r1, r5, #27
 80077ce:	494e      	ldr	r1, [pc, #312]	; (8007908 <USB_ActivateEndpoint+0x274>)
 80077d0:	bf08      	it	eq
 80077d2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80077d6:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80077da:	e7ce      	b.n	800777a <USB_ActivateEndpoint+0xe6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80077dc:	f833 6022 	ldrh.w	r6, [r3, r2, lsl #2]
 80077e0:	b2b6      	uxth	r6, r6
 80077e2:	403e      	ands	r6, r7
 80077e4:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
 80077e8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 80077ec:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80077f0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80077f4:	890e      	ldrh	r6, [r1, #8]
 80077f6:	b2a4      	uxth	r4, r4
 80077f8:	0876      	lsrs	r6, r6, #1
 80077fa:	4464      	add	r4, ip
 80077fc:	0076      	lsls	r6, r6, #1
 80077fe:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 8007802:	894e      	ldrh	r6, [r1, #10]
 8007804:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8007808:	0876      	lsrs	r6, r6, #1
 800780a:	b2a4      	uxth	r4, r4
 800780c:	4464      	add	r4, ip
 800780e:	0076      	lsls	r6, r6, #1
 8007810:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 8007814:	7849      	ldrb	r1, [r1, #1]
 8007816:	bbd1      	cbnz	r1, 800788e <USB_ActivateEndpoint+0x1fa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007818:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800781c:	044e      	lsls	r6, r1, #17
 800781e:	d509      	bpl.n	8007834 <USB_ActivateEndpoint+0x1a0>
 8007820:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007824:	b289      	uxth	r1, r1
 8007826:	4039      	ands	r1, r7
 8007828:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800782c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007830:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007834:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007838:	064d      	lsls	r5, r1, #25
 800783a:	d50d      	bpl.n	8007858 <USB_ActivateEndpoint+0x1c4>
 800783c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007840:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8007844:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007848:	0409      	lsls	r1, r1, #16
 800784a:	0c09      	lsrs	r1, r1, #16
 800784c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007850:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8007854:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007858:	f248 0480 	movw	r4, #32896	; 0x8080
 800785c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007860:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8007864:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007868:	0409      	lsls	r1, r1, #16
 800786a:	0c09      	lsrs	r1, r1, #16
 800786c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8007870:	4321      	orrs	r1, r4
 8007872:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007876:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800787a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800787e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007882:	0409      	lsls	r1, r1, #16
 8007884:	0c09      	lsrs	r1, r1, #16
 8007886:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007888:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
    }
  }

  return ret;
}
 800788c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800788e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007892:	044c      	lsls	r4, r1, #17
 8007894:	d509      	bpl.n	80078aa <USB_ActivateEndpoint+0x216>
 8007896:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800789a:	b289      	uxth	r1, r1
 800789c:	4039      	ands	r1, r7
 800789e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80078a2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80078a6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078aa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80078ae:	0649      	lsls	r1, r1, #25
 80078b0:	d50d      	bpl.n	80078ce <USB_ActivateEndpoint+0x23a>
 80078b2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80078b6:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80078ba:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80078be:	0409      	lsls	r1, r1, #16
 80078c0:	0c09      	lsrs	r1, r1, #16
 80078c2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80078c6:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80078ca:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078ce:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80078d2:	4c0c      	ldr	r4, [pc, #48]	; (8007904 <USB_ActivateEndpoint+0x270>)
 80078d4:	b289      	uxth	r1, r1
 80078d6:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80078d8:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078da:	bf18      	it	ne
 80078dc:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078e0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80078e4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80078e8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078ec:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80078f0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80078f4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80078f8:	0409      	lsls	r1, r1, #16
 80078fa:	0c09      	lsrs	r1, r1, #16
 80078fc:	e715      	b.n	800772a <USB_ActivateEndpoint+0x96>
 80078fe:	bf00      	nop
 8007900:	ffff8f8f 	.word	0xffff8f8f
 8007904:	ffff8fbf 	.word	0xffff8fbf
 8007908:	ffff8000 	.word	0xffff8000

0800790c <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 800790c:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800790e:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8007910:	7b09      	ldrb	r1, [r1, #12]
 8007912:	bbd9      	cbnz	r1, 800798c <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8007914:	b30a      	cbz	r2, 800795a <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007916:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800791a:	0651      	lsls	r1, r2, #25
 800791c:	d50d      	bpl.n	800793a <USB_DeactivateEndpoint+0x2e>
 800791e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007922:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007926:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800792a:	0412      	lsls	r2, r2, #16
 800792c:	0c12      	lsrs	r2, r2, #16
 800792e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007932:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007936:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800793a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800793e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007946:	0412      	lsls	r2, r2, #16
 8007948:	0c12      	lsrs	r2, r2, #16
 800794a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800794e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007952:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }

  return HAL_OK;
}
 8007956:	2000      	movs	r0, #0
 8007958:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800795a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800795e:	0452      	lsls	r2, r2, #17
 8007960:	d50d      	bpl.n	800797e <USB_DeactivateEndpoint+0x72>
 8007962:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007966:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800796a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800796e:	0412      	lsls	r2, r2, #16
 8007970:	0c12      	lsrs	r2, r2, #16
 8007972:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007976:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800797a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800797e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007982:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007986:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800798a:	e7dc      	b.n	8007946 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800798c:	2a00      	cmp	r2, #0
 800798e:	d148      	bne.n	8007a22 <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007990:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007994:	0451      	lsls	r1, r2, #17
 8007996:	d50d      	bpl.n	80079b4 <USB_DeactivateEndpoint+0xa8>
 8007998:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800799c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80079a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80079a4:	0412      	lsls	r2, r2, #16
 80079a6:	0c12      	lsrs	r2, r2, #16
 80079a8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80079ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079b0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079b4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80079b8:	0652      	lsls	r2, r2, #25
 80079ba:	d50d      	bpl.n	80079d8 <USB_DeactivateEndpoint+0xcc>
 80079bc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80079c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80079c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80079c8:	0412      	lsls	r2, r2, #16
 80079ca:	0c12      	lsrs	r2, r2, #16
 80079cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079d0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80079d4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079d8:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 80079dc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80079e0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80079e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80079e8:	0412      	lsls	r2, r2, #16
 80079ea:	0c12      	lsrs	r2, r2, #16
 80079ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079f0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80079f4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079f8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80079fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a04:	0412      	lsls	r2, r2, #16
 8007a06:	0c12      	lsrs	r2, r2, #16
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a0e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007a12:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a1a:	0412      	lsls	r2, r2, #16
 8007a1c:	0c12      	lsrs	r2, r2, #16
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	e797      	b.n	8007952 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a22:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007a26:	0451      	lsls	r1, r2, #17
 8007a28:	d50d      	bpl.n	8007a46 <USB_DeactivateEndpoint+0x13a>
 8007a2a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007a2e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007a32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a36:	0412      	lsls	r2, r2, #16
 8007a38:	0c12      	lsrs	r2, r2, #16
 8007a3a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007a3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a42:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007a4a:	0652      	lsls	r2, r2, #25
 8007a4c:	d50d      	bpl.n	8007a6a <USB_DeactivateEndpoint+0x15e>
 8007a4e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007a52:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007a56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a5a:	0412      	lsls	r2, r2, #16
 8007a5c:	0c12      	lsrs	r2, r2, #16
 8007a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a62:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007a66:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a6a:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8007a6e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007a72:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007a76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a7a:	0412      	lsls	r2, r2, #16
 8007a7c:	0c12      	lsrs	r2, r2, #16
 8007a7e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a86:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a8a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007a8e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a96:	0412      	lsls	r2, r2, #16
 8007a98:	0c12      	lsrs	r2, r2, #16
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007aa0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007aa4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007aa8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007aac:	e7b5      	b.n	8007a1a <USB_DeactivateEndpoint+0x10e>

08007aae <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8007aae:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ab0:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8007ab2:	b18b      	cbz	r3, 8007ad8 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ab4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac0:	041b      	lsls	r3, r3, #16
 8007ac2:	0c1b      	lsrs	r3, r3, #16
 8007ac4:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ad8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007adc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae4:	041b      	lsls	r3, r3, #16
 8007ae6:	0c1b      	lsrs	r3, r3, #16
 8007ae8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007aec:	e7ec      	b.n	8007ac8 <USB_EPSetStall+0x1a>

08007aee <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8007aee:	7b0b      	ldrb	r3, [r1, #12]
 8007af0:	bb3b      	cbnz	r3, 8007b42 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8007af2:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007af4:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8007af6:	b333      	cbz	r3, 8007b46 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007af8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007afc:	065b      	lsls	r3, r3, #25
 8007afe:	d50d      	bpl.n	8007b1c <USB_EPClearStall+0x2e>
 8007b00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0c:	041b      	lsls	r3, r3, #16
 8007b0e:	0c1b      	lsrs	r3, r3, #16
 8007b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8007b1c:	78cb      	ldrb	r3, [r1, #3]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d00f      	beq.n	8007b42 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b2e:	041b      	lsls	r3, r3, #16
 8007b30:	0c1b      	lsrs	r3, r3, #16
 8007b32:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8007b42:	2000      	movs	r0, #0
 8007b44:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007b4a:	045b      	lsls	r3, r3, #17
 8007b4c:	d50d      	bpl.n	8007b6a <USB_EPClearStall+0x7c>
 8007b4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5a:	041b      	lsls	r3, r3, #16
 8007b5c:	0c1b      	lsrs	r3, r3, #16
 8007b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b76:	041b      	lsls	r3, r3, #16
 8007b78:	0c1b      	lsrs	r3, r3, #16
 8007b7a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007b7e:	e7da      	b.n	8007b36 <USB_EPClearStall+0x48>

08007b80 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8007b80:	b911      	cbnz	r1, 8007b88 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007b82:	2380      	movs	r3, #128	; 0x80
 8007b84:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8007b88:	2000      	movs	r0, #0
 8007b8a:	4770      	bx	lr

08007b8c <USB_DevConnect>:
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	4770      	bx	lr

08007b90 <USB_DevDisconnect>:
 8007b90:	2000      	movs	r0, #0
 8007b92:	4770      	bx	lr

08007b94 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007b94:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8007b98:	b280      	uxth	r0, r0
 8007b9a:	4770      	bx	lr

08007b9c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	4770      	bx	lr

08007ba0 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ba0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ba4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ba6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007baa:	085b      	lsrs	r3, r3, #1
 8007bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d100      	bne.n	8007bb6 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8007bb4:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007bb6:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8007bba:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8007bbe:	e7f7      	b.n	8007bb0 <USB_WritePMA+0x10>

08007bc0 <USB_EPStartXfer>:
{
 8007bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc2:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8007bc4:	7849      	ldrb	r1, [r1, #1]
{
 8007bc6:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8007bc8:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 8007bca:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8007bcc:	f040 813d 	bne.w	8007e4a <USB_EPStartXfer+0x28a>
    if (ep->xfer_len > ep->maxpacket)
 8007bd0:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8007bd4:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007bd6:	6961      	ldr	r1, [r4, #20]
 8007bd8:	4576      	cmp	r6, lr
 8007bda:	bf28      	it	cs
 8007bdc:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 8007bde:	bb02      	cbnz	r2, 8007c22 <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007be0:	b2b6      	uxth	r6, r6
 8007be2:	88e2      	ldrh	r2, [r4, #6]
 8007be4:	4633      	mov	r3, r6
 8007be6:	f7ff ffdb 	bl	8007ba0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007bea:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007bee:	7821      	ldrb	r1, [r4, #0]
 8007bf0:	b290      	uxth	r0, r2
 8007bf2:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8007bf6:	0109      	lsls	r1, r1, #4
 8007bf8:	4402      	add	r2, r0
 8007bfa:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007bfc:	7822      	ldrb	r2, [r4, #0]
 8007bfe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c0a:	041b      	lsls	r3, r3, #16
 8007c0c:	0c1b      	lsrs	r3, r3, #16
 8007c0e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8007c12:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c1c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8007c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8007c22:	78e3      	ldrb	r3, [r4, #3]
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007c24:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 8007c26:	2b02      	cmp	r3, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c28:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8007c2c:	f040 80d2 	bne.w	8007dd4 <USB_EPStartXfer+0x214>
        if (ep->xfer_len_db > ep->maxpacket)
 8007c30:	6a23      	ldr	r3, [r4, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007c32:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8007c36:	459e      	cmp	lr, r3
 8007c38:	f080 80b5 	bcs.w	8007da6 <USB_EPStartXfer+0x1e6>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007c3c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007c40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007c44:	0412      	lsls	r2, r2, #16
 8007c46:	0c12      	lsrs	r2, r2, #16
 8007c48:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8007c4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c50:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c54:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
          ep->xfer_len_db -= len;
 8007c58:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c5a:	f017 0740 	ands.w	r7, r7, #64	; 0x40
          ep->xfer_len_db -= len;
 8007c5e:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c60:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007c64:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c66:	d050      	beq.n	8007d0a <USB_EPStartXfer+0x14a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c68:	b297      	uxth	r7, r2
 8007c6a:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8007c6e:	443a      	add	r2, r7
 8007c70:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c74:	8962      	ldrh	r2, [r4, #10]
 8007c76:	f7ff ff93 	bl	8007ba0 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8007c7a:	6a22      	ldr	r2, [r4, #32]
 8007c7c:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8007c7e:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007c80:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8007c82:	bf8a      	itet	hi
 8007c84:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8007c86:	2300      	movls	r3, #0
 8007c88:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c8a:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8007c8c:	4431      	add	r1, r6
 8007c8e:	6223      	str	r3, [r4, #32]
 8007c90:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c92:	b293      	uxth	r3, r2
 8007c94:	bb68      	cbnz	r0, 8007cf2 <USB_EPStartXfer+0x132>
 8007c96:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8007c9a:	7826      	ldrb	r6, [r4, #0]
 8007c9c:	b280      	uxth	r0, r0
 8007c9e:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8007ca2:	0136      	lsls	r6, r6, #4
 8007ca4:	4438      	add	r0, r7
 8007ca6:	b96a      	cbnz	r2, 8007cc4 <USB_EPStartXfer+0x104>
 8007ca8:	5a32      	ldrh	r2, [r6, r0]
 8007caa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007cae:	0412      	lsls	r2, r2, #16
 8007cb0:	0c12      	lsrs	r2, r2, #16
 8007cb2:	5232      	strh	r2, [r6, r0]
 8007cb4:	5a32      	ldrh	r2, [r6, r0]
 8007cb6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007cba:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007cbe:	b292      	uxth	r2, r2
 8007cc0:	5232      	strh	r2, [r6, r0]
 8007cc2:	e008      	b.n	8007cd6 <USB_EPStartXfer+0x116>
 8007cc4:	2a3e      	cmp	r2, #62	; 0x3e
 8007cc6:	d80b      	bhi.n	8007ce0 <USB_EPStartXfer+0x120>
 8007cc8:	0857      	lsrs	r7, r2, #1
 8007cca:	07d2      	lsls	r2, r2, #31
 8007ccc:	bf48      	it	mi
 8007cce:	3701      	addmi	r7, #1
 8007cd0:	02bf      	lsls	r7, r7, #10
 8007cd2:	b2bf      	uxth	r7, r7
 8007cd4:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cd6:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cd8:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cda:	f7ff ff61 	bl	8007ba0 <USB_WritePMA>
 8007cde:	e78d      	b.n	8007bfc <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ce0:	0957      	lsrs	r7, r2, #5
 8007ce2:	06d2      	lsls	r2, r2, #27
 8007ce4:	4aa7      	ldr	r2, [pc, #668]	; (8007f84 <USB_EPStartXfer+0x3c4>)
 8007ce6:	bf08      	it	eq
 8007ce8:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007cec:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8007cf0:	e7e5      	b.n	8007cbe <USB_EPStartXfer+0xfe>
 8007cf2:	2801      	cmp	r0, #1
 8007cf4:	d1ef      	bne.n	8007cd6 <USB_EPStartXfer+0x116>
 8007cf6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007cfa:	7820      	ldrb	r0, [r4, #0]
 8007cfc:	b296      	uxth	r6, r2
 8007cfe:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8007d02:	0100      	lsls	r0, r0, #4
 8007d04:	4432      	add	r2, r6
 8007d06:	5283      	strh	r3, [r0, r2]
 8007d08:	e7e5      	b.n	8007cd6 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d0a:	fa1f fe82 	uxth.w	lr, r2
 8007d0e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8007d12:	4472      	add	r2, lr
 8007d14:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d18:	8922      	ldrh	r2, [r4, #8]
 8007d1a:	f7ff ff41 	bl	8007ba0 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8007d1e:	6a22      	ldr	r2, [r4, #32]
 8007d20:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8007d22:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007d24:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8007d26:	bf84      	itt	hi
 8007d28:	1b97      	subhi	r7, r2, r6
 8007d2a:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d2c:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8007d2e:	4431      	add	r1, r6
 8007d30:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db -= len;
 8007d32:	6227      	str	r7, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d34:	b293      	uxth	r3, r2
 8007d36:	bb50      	cbnz	r0, 8007d8e <USB_EPStartXfer+0x1ce>
 8007d38:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8007d3c:	7826      	ldrb	r6, [r4, #0]
 8007d3e:	b280      	uxth	r0, r0
 8007d40:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8007d44:	0136      	lsls	r6, r6, #4
 8007d46:	4438      	add	r0, r7
 8007d48:	b96a      	cbnz	r2, 8007d66 <USB_EPStartXfer+0x1a6>
 8007d4a:	5a32      	ldrh	r2, [r6, r0]
 8007d4c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007d50:	0412      	lsls	r2, r2, #16
 8007d52:	0c12      	lsrs	r2, r2, #16
 8007d54:	5232      	strh	r2, [r6, r0]
 8007d56:	5a32      	ldrh	r2, [r6, r0]
 8007d58:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007d5c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007d60:	b292      	uxth	r2, r2
 8007d62:	5232      	strh	r2, [r6, r0]
 8007d64:	e008      	b.n	8007d78 <USB_EPStartXfer+0x1b8>
 8007d66:	2a3e      	cmp	r2, #62	; 0x3e
 8007d68:	d808      	bhi.n	8007d7c <USB_EPStartXfer+0x1bc>
 8007d6a:	0857      	lsrs	r7, r2, #1
 8007d6c:	07d2      	lsls	r2, r2, #31
 8007d6e:	bf48      	it	mi
 8007d70:	3701      	addmi	r7, #1
 8007d72:	02bf      	lsls	r7, r7, #10
 8007d74:	b2bf      	uxth	r7, r7
 8007d76:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d78:	8962      	ldrh	r2, [r4, #10]
 8007d7a:	e7ad      	b.n	8007cd8 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d7c:	0957      	lsrs	r7, r2, #5
 8007d7e:	06d2      	lsls	r2, r2, #27
 8007d80:	4a80      	ldr	r2, [pc, #512]	; (8007f84 <USB_EPStartXfer+0x3c4>)
 8007d82:	bf08      	it	eq
 8007d84:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007d88:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8007d8c:	e7e8      	b.n	8007d60 <USB_EPStartXfer+0x1a0>
 8007d8e:	2801      	cmp	r0, #1
 8007d90:	d1f2      	bne.n	8007d78 <USB_EPStartXfer+0x1b8>
 8007d92:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007d96:	7820      	ldrb	r0, [r4, #0]
 8007d98:	b296      	uxth	r6, r2
 8007d9a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8007d9e:	0100      	lsls	r0, r0, #4
 8007da0:	4432      	add	r2, r6
 8007da2:	5283      	strh	r3, [r0, r2]
 8007da4:	e7e8      	b.n	8007d78 <USB_EPStartXfer+0x1b8>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007da6:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8007daa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007dae:	0412      	lsls	r2, r2, #16
 8007db0:	0c12      	lsrs	r2, r2, #16
 8007db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dba:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007dbe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	b296      	uxth	r6, r2
 8007dc6:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8007dca:	4432      	add	r2, r6
 8007dcc:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dd0:	8922      	ldrh	r2, [r4, #8]
 8007dd2:	e782      	b.n	8007cda <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007dd4:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007dd8:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007dda:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007dde:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007de2:	b290      	uxth	r0, r2
 8007de4:	bf15      	itete	ne
 8007de6:	f205 420c 	addwne	r2, r5, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dea:	f205 4204 	addweq	r2, r5, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007dee:	1812      	addne	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007df0:	1812      	addeq	r2, r2, r0
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007df2:	bf15      	itete	ne
 8007df4:	f822 300c 	strhne.w	r3, [r2, ip]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007df8:	f822 300c 	strheq.w	r3, [r2, ip]
          pmabuffer = ep->pmaaddr1;
 8007dfc:	8962      	ldrhne	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 8007dfe:	8922      	ldrheq	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e00:	4628      	mov	r0, r5
 8007e02:	f7ff fecd 	bl	8007ba0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007e06:	7863      	ldrb	r3, [r4, #1]
 8007e08:	7822      	ldrb	r2, [r4, #0]
 8007e0a:	b973      	cbnz	r3, 8007e2a <USB_EPStartXfer+0x26a>
 8007e0c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e18:	041b      	lsls	r3, r3, #16
 8007e1a:	0c1b      	lsrs	r3, r3, #16
 8007e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e24:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8007e28:	e6e8      	b.n	8007bfc <USB_EPStartXfer+0x3c>
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	f47f aee6 	bne.w	8007bfc <USB_EPStartXfer+0x3c>
 8007e30:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3c:	041b      	lsls	r3, r3, #16
 8007e3e:	0c1b      	lsrs	r3, r3, #16
 8007e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e48:	e7ec      	b.n	8007e24 <USB_EPStartXfer+0x264>
    if (ep->doublebuffer == 0U)
 8007e4a:	b9ea      	cbnz	r2, 8007e88 <USB_EPStartXfer+0x2c8>
      if (ep->xfer_len > ep->maxpacket)
 8007e4c:	69a3      	ldr	r3, [r4, #24]
 8007e4e:	6921      	ldr	r1, [r4, #16]
 8007e50:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8007e52:	bf88      	it	hi
 8007e54:	1a5a      	subhi	r2, r3, r1
 8007e56:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007e58:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007e5c:	bf88      	it	hi
 8007e5e:	460b      	movhi	r3, r1
 8007e60:	7821      	ldrb	r1, [r4, #0]
 8007e62:	b292      	uxth	r2, r2
 8007e64:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8007e68:	0109      	lsls	r1, r1, #4
 8007e6a:	4402      	add	r2, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 80c8 	beq.w	8008002 <USB_EPStartXfer+0x442>
 8007e72:	2b3e      	cmp	r3, #62	; 0x3e
 8007e74:	f200 80d3 	bhi.w	800801e <USB_EPStartXfer+0x45e>
 8007e78:	0858      	lsrs	r0, r3, #1
 8007e7a:	07de      	lsls	r6, r3, #31
 8007e7c:	bf48      	it	mi
 8007e7e:	3001      	addmi	r0, #1
 8007e80:	0280      	lsls	r0, r0, #10
 8007e82:	b280      	uxth	r0, r0
 8007e84:	5250      	strh	r0, [r2, r1]
 8007e86:	e048      	b.n	8007f1a <USB_EPStartXfer+0x35a>
      if (ep->type == EP_TYPE_BULK)
 8007e88:	78e3      	ldrb	r3, [r4, #3]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d17c      	bne.n	8007f88 <USB_EPStartXfer+0x3c8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007e8e:	bb51      	cbnz	r1, 8007ee6 <USB_EPStartXfer+0x326>
 8007e90:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007e94:	7821      	ldrb	r1, [r4, #0]
 8007e96:	b293      	uxth	r3, r2
 8007e98:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8007e9c:	441a      	add	r2, r3
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	0109      	lsls	r1, r1, #4
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d145      	bne.n	8007f32 <USB_EPStartXfer+0x372>
 8007ea6:	5a88      	ldrh	r0, [r1, r2]
 8007ea8:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8007eac:	0400      	lsls	r0, r0, #16
 8007eae:	0c00      	lsrs	r0, r0, #16
 8007eb0:	5288      	strh	r0, [r1, r2]
 8007eb2:	5a88      	ldrh	r0, [r1, r2]
 8007eb4:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8007eb8:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8007ebc:	b280      	uxth	r0, r0
 8007ebe:	5288      	strh	r0, [r1, r2]
 8007ec0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8007ec4:	7822      	ldrb	r2, [r4, #0]
 8007ec6:	b289      	uxth	r1, r1
 8007ec8:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8007ecc:	0112      	lsls	r2, r2, #4
 8007ece:	4401      	add	r1, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d03f      	beq.n	8007f54 <USB_EPStartXfer+0x394>
 8007ed4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ed6:	d84b      	bhi.n	8007f70 <USB_EPStartXfer+0x3b0>
 8007ed8:	0858      	lsrs	r0, r3, #1
 8007eda:	07db      	lsls	r3, r3, #31
 8007edc:	bf48      	it	mi
 8007ede:	3001      	addmi	r0, #1
 8007ee0:	0280      	lsls	r0, r0, #10
 8007ee2:	b280      	uxth	r0, r0
 8007ee4:	5250      	strh	r0, [r2, r1]
        if (ep->xfer_count != 0U)
 8007ee6:	69e3      	ldr	r3, [r4, #28]
 8007ee8:	b1bb      	cbz	r3, 8007f1a <USB_EPStartXfer+0x35a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007eea:	f244 0340 	movw	r3, #16448	; 0x4040
 8007eee:	7822      	ldrb	r2, [r4, #0]
 8007ef0:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ef4:	ea03 0001 	and.w	r0, r3, r1
 8007ef8:	438b      	bics	r3, r1
 8007efa:	d000      	beq.n	8007efe <USB_EPStartXfer+0x33e>
 8007efc:	b968      	cbnz	r0, 8007f1a <USB_EPStartXfer+0x35a>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007efe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	041b      	lsls	r3, r3, #16
 8007f0c:	0c1b      	lsrs	r3, r3, #16
 8007f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f16:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f1a:	7822      	ldrb	r2, [r4, #0]
 8007f1c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007f20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f28:	041b      	lsls	r3, r3, #16
 8007f2a:	0c1b      	lsrs	r3, r3, #16
 8007f2c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007f30:	e66f      	b.n	8007c12 <USB_EPStartXfer+0x52>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007f32:	2b3e      	cmp	r3, #62	; 0x3e
 8007f34:	d805      	bhi.n	8007f42 <USB_EPStartXfer+0x382>
 8007f36:	0858      	lsrs	r0, r3, #1
 8007f38:	07de      	lsls	r6, r3, #31
 8007f3a:	bf48      	it	mi
 8007f3c:	3001      	addmi	r0, #1
 8007f3e:	0280      	lsls	r0, r0, #10
 8007f40:	e7bc      	b.n	8007ebc <USB_EPStartXfer+0x2fc>
 8007f42:	095e      	lsrs	r6, r3, #5
 8007f44:	06d8      	lsls	r0, r3, #27
 8007f46:	480f      	ldr	r0, [pc, #60]	; (8007f84 <USB_EPStartXfer+0x3c4>)
 8007f48:	bf08      	it	eq
 8007f4a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007f4e:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8007f52:	e7b3      	b.n	8007ebc <USB_EPStartXfer+0x2fc>
 8007f54:	5a53      	ldrh	r3, [r2, r1]
 8007f56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	0c1b      	lsrs	r3, r3, #16
 8007f5e:	5253      	strh	r3, [r2, r1]
 8007f60:	5a53      	ldrh	r3, [r2, r1]
 8007f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	5253      	strh	r3, [r2, r1]
 8007f6e:	e7ba      	b.n	8007ee6 <USB_EPStartXfer+0x326>
 8007f70:	0958      	lsrs	r0, r3, #5
 8007f72:	06df      	lsls	r7, r3, #27
 8007f74:	4b03      	ldr	r3, [pc, #12]	; (8007f84 <USB_EPStartXfer+0x3c4>)
 8007f76:	bf08      	it	eq
 8007f78:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8007f7c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8007f80:	e7f3      	b.n	8007f6a <USB_EPStartXfer+0x3aa>
 8007f82:	bf00      	nop
 8007f84:	ffff8000 	.word	0xffff8000
      else if (ep->type == EP_TYPE_ISOC)
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d151      	bne.n	8008030 <USB_EPStartXfer+0x470>
        if (ep->xfer_len > ep->maxpacket)
 8007f8c:	69a3      	ldr	r3, [r4, #24]
 8007f8e:	6922      	ldr	r2, [r4, #16]
 8007f90:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8007f92:	bf94      	ite	ls
 8007f94:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8007f96:	1a98      	subhi	r0, r3, r2
 8007f98:	61a0      	str	r0, [r4, #24]
 8007f9a:	bf88      	it	hi
 8007f9c:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f9e:	2900      	cmp	r1, #0
 8007fa0:	d1bb      	bne.n	8007f1a <USB_EPStartXfer+0x35a>
 8007fa2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007fa6:	7821      	ldrb	r1, [r4, #0]
 8007fa8:	b292      	uxth	r2, r2
 8007faa:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8007fae:	0109      	lsls	r1, r1, #4
 8007fb0:	4402      	add	r2, r0
 8007fb2:	b9ab      	cbnz	r3, 8007fe0 <USB_EPStartXfer+0x420>
 8007fb4:	5a88      	ldrh	r0, [r1, r2]
 8007fb6:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8007fba:	0400      	lsls	r0, r0, #16
 8007fbc:	0c00      	lsrs	r0, r0, #16
 8007fbe:	5288      	strh	r0, [r1, r2]
 8007fc0:	5a88      	ldrh	r0, [r1, r2]
 8007fc2:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8007fc6:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8007fca:	b280      	uxth	r0, r0
 8007fcc:	5288      	strh	r0, [r1, r2]
 8007fce:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8007fd2:	7822      	ldrb	r2, [r4, #0]
 8007fd4:	b289      	uxth	r1, r1
 8007fd6:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8007fda:	0112      	lsls	r2, r2, #4
 8007fdc:	4401      	add	r1, r0
 8007fde:	e745      	b.n	8007e6c <USB_EPStartXfer+0x2ac>
 8007fe0:	2b3e      	cmp	r3, #62	; 0x3e
 8007fe2:	d805      	bhi.n	8007ff0 <USB_EPStartXfer+0x430>
 8007fe4:	0858      	lsrs	r0, r3, #1
 8007fe6:	07de      	lsls	r6, r3, #31
 8007fe8:	bf48      	it	mi
 8007fea:	3001      	addmi	r0, #1
 8007fec:	0280      	lsls	r0, r0, #10
 8007fee:	e7ec      	b.n	8007fca <USB_EPStartXfer+0x40a>
 8007ff0:	095e      	lsrs	r6, r3, #5
 8007ff2:	4810      	ldr	r0, [pc, #64]	; (8008034 <USB_EPStartXfer+0x474>)
 8007ff4:	06df      	lsls	r7, r3, #27
 8007ff6:	bf08      	it	eq
 8007ff8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007ffc:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8008000:	e7e3      	b.n	8007fca <USB_EPStartXfer+0x40a>
 8008002:	5a53      	ldrh	r3, [r2, r1]
 8008004:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008008:	041b      	lsls	r3, r3, #16
 800800a:	0c1b      	lsrs	r3, r3, #16
 800800c:	5253      	strh	r3, [r2, r1]
 800800e:	5a53      	ldrh	r3, [r2, r1]
 8008010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008018:	b29b      	uxth	r3, r3
 800801a:	5253      	strh	r3, [r2, r1]
 800801c:	e77d      	b.n	8007f1a <USB_EPStartXfer+0x35a>
 800801e:	0958      	lsrs	r0, r3, #5
 8008020:	06db      	lsls	r3, r3, #27
 8008022:	4b04      	ldr	r3, [pc, #16]	; (8008034 <USB_EPStartXfer+0x474>)
 8008024:	bf08      	it	eq
 8008026:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800802a:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800802e:	e7f3      	b.n	8008018 <USB_EPStartXfer+0x458>
        return HAL_ERROR;
 8008030:	2001      	movs	r0, #1
 8008032:	e5f5      	b.n	8007c20 <USB_EPStartXfer+0x60>
 8008034:	ffff8000 	.word	0xffff8000

08008038 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008038:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 800803c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800803e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008042:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 8008044:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008046:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8008048:	462e      	mov	r6, r5
 800804a:	3402      	adds	r4, #2
 800804c:	b936      	cbnz	r6, 800805c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800804e:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8008050:	bf44      	itt	mi
 8008052:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008056:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800805a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 800805c:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8008060:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8008062:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008064:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008068:	0a00      	lsrs	r0, r0, #8
 800806a:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 800806e:	e7ec      	b.n	800804a <USB_ReadPMA+0x12>

08008070 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008070:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8008074:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008076:	b16b      	cbz	r3, 8008094 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008078:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800807c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8008080:	28ff      	cmp	r0, #255	; 0xff
 8008082:	d007      	beq.n	8008094 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	4621      	mov	r1, r4
 8008088:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800808c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800808e:	23ff      	movs	r3, #255	; 0xff
 8008090:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8008094:	2000      	movs	r0, #0
 8008096:	bd10      	pop	{r4, pc}

08008098 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008098:	2343      	movs	r3, #67	; 0x43
 800809a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800809c:	4800      	ldr	r0, [pc, #0]	; (80080a0 <USBD_CDC_GetFSCfgDesc+0x8>)
 800809e:	4770      	bx	lr
 80080a0:	2000004c 	.word	0x2000004c

080080a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80080a4:	2343      	movs	r3, #67	; 0x43
 80080a6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80080a8:	4800      	ldr	r0, [pc, #0]	; (80080ac <USBD_CDC_GetHSCfgDesc+0x8>)
 80080aa:	4770      	bx	lr
 80080ac:	20000090 	.word	0x20000090

080080b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80080b0:	2343      	movs	r3, #67	; 0x43
 80080b2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80080b4:	4800      	ldr	r0, [pc, #0]	; (80080b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80080b6:	4770      	bx	lr
 80080b8:	200000e0 	.word	0x200000e0

080080bc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80080bc:	230a      	movs	r3, #10
 80080be:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80080c0:	4800      	ldr	r0, [pc, #0]	; (80080c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80080c2:	4770      	bx	lr
 80080c4:	200000d4 	.word	0x200000d4

080080c8 <USBD_CDC_DataOut>:
{
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080cc:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080d0:	f000 ff23 	bl	8008f1a <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80080d4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080d8:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80080dc:	b14b      	cbz	r3, 80080f2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080de:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80080e2:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80080ec:	4798      	blx	r3
    return USBD_OK;
 80080ee:	2000      	movs	r0, #0
}
 80080f0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80080f2:	2002      	movs	r0, #2
 80080f4:	e7fc      	b.n	80080f0 <USBD_CDC_DataOut+0x28>

080080f6 <USBD_CDC_DataIn>:
{
 80080f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080f8:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80080fc:	b1d6      	cbz	r6, 8008134 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80080fe:	2214      	movs	r2, #20
 8008100:	fb02 0201 	mla	r2, r2, r1, r0
 8008104:	69d4      	ldr	r4, [r2, #28]
 8008106:	b18c      	cbz	r4, 800812c <USBD_CDC_DataIn+0x36>
 8008108:	2728      	movs	r7, #40	; 0x28
 800810a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800810e:	fb07 3501 	mla	r5, r7, r1, r3
 8008112:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008114:	fbb4 f5f3 	udiv	r5, r4, r3
 8008118:	fb03 4415 	mls	r4, r3, r5, r4
 800811c:	b934      	cbnz	r4, 800812c <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 800811e:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008120:	4623      	mov	r3, r4
 8008122:	4622      	mov	r2, r4
 8008124:	f000 fee7 	bl	8008ef6 <USBD_LL_Transmit>
    return USBD_OK;
 8008128:	4620      	mov	r0, r4
}
 800812a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800812c:	2000      	movs	r0, #0
 800812e:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8008132:	e7fa      	b.n	800812a <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8008134:	2002      	movs	r0, #2
 8008136:	e7f8      	b.n	800812a <USBD_CDC_DataIn+0x34>

08008138 <USBD_CDC_Setup>:
{
 8008138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 800813c:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008140:	780a      	ldrb	r2, [r1, #0]
{
 8008142:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008144:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8008148:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800814a:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800814e:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8008152:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008156:	d028      	beq.n	80081aa <USBD_CDC_Setup+0x72>
 8008158:	2c20      	cmp	r4, #32
 800815a:	d142      	bne.n	80081e2 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 800815c:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800815e:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8008160:	b1e4      	cbz	r4, 800819c <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8008162:	0612      	lsls	r2, r2, #24
 8008164:	d511      	bpl.n	800818a <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008166:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800816a:	4639      	mov	r1, r7
 800816c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8008170:	4618      	mov	r0, r3
 8008172:	4622      	mov	r2, r4
 8008174:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008176:	4639      	mov	r1, r7
 8008178:	4628      	mov	r0, r5
 800817a:	88f2      	ldrh	r2, [r6, #6]
 800817c:	f000 fc31 	bl	80089e2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008180:	4644      	mov	r4, r8
}
 8008182:	4620      	mov	r0, r4
 8008184:	b003      	add	sp, #12
 8008186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800818a:	4622      	mov	r2, r4
 800818c:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 800818e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008192:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008196:	f000 fc39 	bl	8008a0c <USBD_CtlPrepareRx>
 800819a:	e7f1      	b.n	8008180 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800819c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80081a0:	4618      	mov	r0, r3
 80081a2:	6895      	ldr	r5, [r2, #8]
 80081a4:	4622      	mov	r2, r4
 80081a6:	47a8      	blx	r5
 80081a8:	e7eb      	b.n	8008182 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 80081aa:	784b      	ldrb	r3, [r1, #1]
 80081ac:	2b0a      	cmp	r3, #10
 80081ae:	d00c      	beq.n	80081ca <USBD_CDC_Setup+0x92>
 80081b0:	2b0b      	cmp	r3, #11
 80081b2:	d012      	beq.n	80081da <USBD_CDC_Setup+0xa2>
 80081b4:	b9ab      	cbnz	r3, 80081e2 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d111      	bne.n	80081e2 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80081be:	2202      	movs	r2, #2
 80081c0:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80081c4:	f000 fc0d 	bl	80089e2 <USBD_CtlSendData>
 80081c8:	e7db      	b.n	8008182 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d107      	bne.n	80081e2 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80081d2:	2201      	movs	r2, #1
 80081d4:	f10d 0105 	add.w	r1, sp, #5
 80081d8:	e7f4      	b.n	80081c4 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081da:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d0cf      	beq.n	8008182 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80081e2:	4631      	mov	r1, r6
 80081e4:	4628      	mov	r0, r5
 80081e6:	f000 fbd5 	bl	8008994 <USBD_CtlError>
          ret = USBD_FAIL;
 80081ea:	2402      	movs	r4, #2
          break;
 80081ec:	e7c9      	b.n	8008182 <USBD_CDC_Setup+0x4a>

080081ee <USBD_CDC_DeInit>:
{
 80081ee:	b538      	push	{r3, r4, r5, lr}
 80081f0:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80081f2:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80081f4:	2181      	movs	r1, #129	; 0x81
 80081f6:	f000 fe48 	bl	8008e8a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80081fa:	2101      	movs	r1, #1
 80081fc:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80081fe:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008200:	f000 fe43 	bl	8008e8a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008204:	2182      	movs	r1, #130	; 0x82
 8008206:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008208:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800820c:	f000 fe3d 	bl	8008e8a <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8008210:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008214:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8008216:	b14b      	cbz	r3, 800822c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008218:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008220:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8008224:	f000 fe82 	bl	8008f2c <USBD_static_free>
    pdev->pClassData = NULL;
 8008228:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800822c:	2000      	movs	r0, #0
 800822e:	bd38      	pop	{r3, r4, r5, pc}

08008230 <USBD_CDC_Init>:
{
 8008230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008234:	7c03      	ldrb	r3, [r0, #16]
{
 8008236:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008238:	bbbb      	cbnz	r3, 80082aa <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800823a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800823e:	2202      	movs	r2, #2
 8008240:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008242:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008244:	f000 fe15 	bl	8008e72 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008248:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800824c:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800824e:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008250:	4629      	mov	r1, r5
 8008252:	2202      	movs	r2, #2
 8008254:	4620      	mov	r0, r4
 8008256:	f000 fe0c 	bl	8008e72 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800825a:	2308      	movs	r3, #8
 800825c:	2203      	movs	r2, #3
 800825e:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008260:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008264:	4620      	mov	r0, r4
 8008266:	f000 fe04 	bl	8008e72 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800826a:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800826e:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008270:	f000 fe58 	bl	8008f24 <USBD_static_malloc>
 8008274:	4605      	mov	r5, r0
 8008276:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800827a:	b340      	cbz	r0, 80082ce <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 800827c:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008280:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4798      	blx	r3
    hcdc->TxState = 0U;
 8008288:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800828c:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008290:	7c26      	ldrb	r6, [r4, #16]
 8008292:	b99e      	cbnz	r6, 80082bc <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008298:	4639      	mov	r1, r7
 800829a:	4620      	mov	r0, r4
 800829c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80082a0:	f000 fe32 	bl	8008f08 <USBD_LL_PrepareReceive>
}
 80082a4:	4630      	mov	r0, r6
 80082a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082aa:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082ac:	2340      	movs	r3, #64	; 0x40
 80082ae:	2202      	movs	r2, #2
 80082b0:	2181      	movs	r1, #129	; 0x81
 80082b2:	f000 fdde 	bl	8008e72 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082b6:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082b8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082ba:	e7c8      	b.n	800824e <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	4639      	mov	r1, r7
 80082c0:	4620      	mov	r0, r4
 80082c2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80082c6:	f000 fe1f 	bl	8008f08 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80082ca:	4646      	mov	r6, r8
 80082cc:	e7ea      	b.n	80082a4 <USBD_CDC_Init+0x74>
    ret = 1U;
 80082ce:	463e      	mov	r6, r7
 80082d0:	e7e8      	b.n	80082a4 <USBD_CDC_Init+0x74>

080082d2 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80082d2:	b119      	cbz	r1, 80082dc <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80082d4:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80082d8:	2000      	movs	r0, #0
 80082da:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80082dc:	2002      	movs	r0, #2
  }

  return ret;
}
 80082de:	4770      	bx	lr

080082e0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80082e4:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80082e6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80082ee:	4770      	bx	lr

080082f0 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80082f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80082f4:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80082f6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80082fa:	4770      	bx	lr

080082fc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082fc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8008300:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008302:	b182      	cbz	r2, 8008326 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008304:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008306:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800830a:	b934      	cbnz	r4, 800831a <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800830c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008310:	2101      	movs	r1, #1
 8008312:	f000 fdf9 	bl	8008f08 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008316:	4620      	mov	r0, r4
 8008318:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800831a:	2340      	movs	r3, #64	; 0x40
 800831c:	2101      	movs	r1, #1
 800831e:	f000 fdf3 	bl	8008f08 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8008322:	2400      	movs	r4, #0
 8008324:	e7f7      	b.n	8008316 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8008326:	2402      	movs	r4, #2
 8008328:	e7f5      	b.n	8008316 <USBD_CDC_ReceivePacket+0x1a>

0800832a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800832a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800832c:	b180      	cbz	r0, 8008350 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800832e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008332:	b113      	cbz	r3, 800833a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008334:	2300      	movs	r3, #0
 8008336:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800833a:	b109      	cbz	r1, 8008340 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800833c:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008340:	2301      	movs	r3, #1
  pdev->id = id;
 8008342:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008344:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008348:	f000 fd48 	bl	8008ddc <USBD_LL_Init>

  return USBD_OK;
 800834c:	2000      	movs	r0, #0
}
 800834e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008350:	2002      	movs	r0, #2
 8008352:	e7fc      	b.n	800834e <USBD_Init+0x24>

08008354 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008354:	b119      	cbz	r1, 800835e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008356:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800835a:	2000      	movs	r0, #0
 800835c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800835e:	2002      	movs	r0, #2
  }

  return status;
}
 8008360:	4770      	bx	lr

08008362 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008362:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008364:	f000 fd7c 	bl	8008e60 <USBD_LL_Start>

  return USBD_OK;
}
 8008368:	2000      	movs	r0, #0
 800836a:	bd08      	pop	{r3, pc}

0800836c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800836c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800836e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008372:	b90b      	cbnz	r3, 8008378 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008374:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008376:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4798      	blx	r3
 800837c:	2800      	cmp	r0, #0
 800837e:	d0fa      	beq.n	8008376 <USBD_SetClassConfig+0xa>
 8008380:	e7f8      	b.n	8008374 <USBD_SetClassConfig+0x8>

08008382 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008382:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008384:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	4798      	blx	r3

  return USBD_OK;
}
 800838c:	2000      	movs	r0, #0
 800838e:	bd08      	pop	{r3, pc}

08008390 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008390:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008392:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8008396:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008398:	4628      	mov	r0, r5
 800839a:	f000 fae7 	bl	800896c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800839e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80083a0:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80083a4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80083a8:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80083ac:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80083b0:	f001 031f 	and.w	r3, r1, #31
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d008      	beq.n	80083ca <USBD_LL_SetupStage+0x3a>
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d00b      	beq.n	80083d4 <USBD_LL_SetupStage+0x44>
 80083bc:	b97b      	cbnz	r3, 80083de <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80083be:	4629      	mov	r1, r5
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 f8fb 	bl	80085bc <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80083c6:	2000      	movs	r0, #0
 80083c8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80083ca:	4629      	mov	r1, r5
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 fa1f 	bl	8008810 <USBD_StdItfReq>
      break;
 80083d2:	e7f8      	b.n	80083c6 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80083d4:	4629      	mov	r1, r5
 80083d6:	4620      	mov	r0, r4
 80083d8:	f000 fa3e 	bl	8008858 <USBD_StdEPReq>
      break;
 80083dc:	e7f3      	b.n	80083c6 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083de:	4620      	mov	r0, r4
 80083e0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80083e4:	f000 fd5a 	bl	8008e9c <USBD_LL_StallEP>
      break;
 80083e8:	e7ed      	b.n	80083c6 <USBD_LL_SetupStage+0x36>

080083ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ec:	4604      	mov	r4, r0
 80083ee:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083f0:	460d      	mov	r5, r1
 80083f2:	bb39      	cbnz	r1, 8008444 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083f4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d11c      	bne.n	8008436 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 80083fc:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8008400:	4296      	cmp	r6, r2
 8008402:	d90b      	bls.n	800841c <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8008404:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8008406:	42b2      	cmp	r2, r6
 8008408:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 800840a:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800840e:	bf8c      	ite	hi
 8008410:	b2b2      	uxthhi	r2, r6
 8008412:	b292      	uxthls	r2, r2
 8008414:	f000 fb07 	bl	8008a26 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8008418:	4628      	mov	r0, r5
 800841a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800841c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	b123      	cbz	r3, 800842e <USBD_LL_DataOutStage+0x44>
 8008424:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008428:	2a03      	cmp	r2, #3
 800842a:	d100      	bne.n	800842e <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800842c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800842e:	4620      	mov	r0, r4
 8008430:	f000 fb01 	bl	8008a36 <USBD_CtlSendStatus>
 8008434:	e7f0      	b.n	8008418 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008436:	2b05      	cmp	r3, #5
 8008438:	d1ee      	bne.n	8008418 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 800843a:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800843e:	f000 fd2d 	bl	8008e9c <USBD_LL_StallEP>
 8008442:	e7e9      	b.n	8008418 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8008444:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	b133      	cbz	r3, 800845a <USBD_LL_DataOutStage+0x70>
 800844c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008450:	2a03      	cmp	r2, #3
 8008452:	d102      	bne.n	800845a <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8008454:	4798      	blx	r3
  return USBD_OK;
 8008456:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8008458:	e7de      	b.n	8008418 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 800845a:	2502      	movs	r5, #2
 800845c:	e7dc      	b.n	8008418 <USBD_LL_DataOutStage+0x2e>

0800845e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800845e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008460:	4604      	mov	r4, r0
 8008462:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008464:	460d      	mov	r5, r1
 8008466:	2900      	cmp	r1, #0
 8008468:	d147      	bne.n	80084fa <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800846a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800846e:	2b02      	cmp	r3, #2
 8008470:	d13c      	bne.n	80084ec <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008472:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8008476:	429e      	cmp	r6, r3
 8008478:	d914      	bls.n	80084a4 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800847a:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800847c:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 800847e:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008480:	b29a      	uxth	r2, r3
 8008482:	f000 fabb 	bl	80089fc <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008486:	462b      	mov	r3, r5
 8008488:	462a      	mov	r2, r5
 800848a:	4629      	mov	r1, r5
 800848c:	4620      	mov	r0, r4
 800848e:	f000 fd3b 	bl	8008f08 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008492:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8008496:	2b01      	cmp	r3, #1
 8008498:	d102      	bne.n	80084a0 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80084a0:	4628      	mov	r0, r5
 80084a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80084a4:	69c2      	ldr	r2, [r0, #28]
 80084a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80084aa:	fb03 2616 	mls	r6, r3, r6, r2
 80084ae:	b95e      	cbnz	r6, 80084c8 <USBD_LL_DataInStage+0x6a>
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d809      	bhi.n	80084c8 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80084b4:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d205      	bcs.n	80084c8 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084bc:	460a      	mov	r2, r1
 80084be:	f000 fa9d 	bl	80089fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084c2:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80084c6:	e7de      	b.n	8008486 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084c8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	b12b      	cbz	r3, 80084dc <USBD_LL_DataInStage+0x7e>
 80084d0:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80084d4:	2a03      	cmp	r2, #3
 80084d6:	d101      	bne.n	80084dc <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80084d8:	4620      	mov	r0, r4
 80084da:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80084dc:	2180      	movs	r1, #128	; 0x80
 80084de:	4620      	mov	r0, r4
 80084e0:	f000 fcdc 	bl	8008e9c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 fab1 	bl	8008a4c <USBD_CtlReceiveStatus>
 80084ea:	e7d2      	b.n	8008492 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80084ec:	f033 0304 	bics.w	r3, r3, #4
 80084f0:	d1cf      	bne.n	8008492 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80084f2:	2180      	movs	r1, #128	; 0x80
 80084f4:	f000 fcd2 	bl	8008e9c <USBD_LL_StallEP>
 80084f8:	e7cb      	b.n	8008492 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80084fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	b133      	cbz	r3, 8008510 <USBD_LL_DataInStage+0xb2>
 8008502:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008506:	2a03      	cmp	r2, #3
 8008508:	d102      	bne.n	8008510 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800850a:	4798      	blx	r3
  return USBD_OK;
 800850c:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 800850e:	e7c7      	b.n	80084a0 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8008510:	2502      	movs	r5, #2
 8008512:	e7c5      	b.n	80084a0 <USBD_LL_DataInStage+0x42>

08008514 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008514:	2200      	movs	r2, #0
{
 8008516:	b570      	push	{r4, r5, r6, lr}
 8008518:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800851a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800851c:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800851e:	4611      	mov	r1, r2
 8008520:	2340      	movs	r3, #64	; 0x40
 8008522:	f000 fca6 	bl	8008e72 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008526:	4633      	mov	r3, r6
 8008528:	2180      	movs	r1, #128	; 0x80
 800852a:	2200      	movs	r2, #0
 800852c:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800852e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008532:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008536:	f000 fc9c 	bl	8008e72 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800853a:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800853c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008540:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008542:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008544:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008548:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800854c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800854e:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8008552:	b123      	cbz	r3, 800855e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008554:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008558:	4620      	mov	r0, r4
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800855e:	2000      	movs	r0, #0
 8008560:	bd70      	pop	{r4, r5, r6, pc}

08008562 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008562:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008564:	2000      	movs	r0, #0
 8008566:	4770      	bx	lr

08008568 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008568:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800856c:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008570:	2304      	movs	r3, #4
 8008572:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8008576:	2000      	movs	r0, #0
 8008578:	4770      	bx	lr

0800857a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800857a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800857e:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8008580:	bf04      	itt	eq
 8008582:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8008586:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800858a:	2000      	movs	r0, #0
 800858c:	4770      	bx	lr

0800858e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800858e:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008590:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008594:	2a03      	cmp	r2, #3
 8008596:	d104      	bne.n	80085a2 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8008598:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	b103      	cbz	r3, 80085a2 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80085a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80085a2:	2000      	movs	r0, #0
 80085a4:	bd08      	pop	{r3, pc}

080085a6 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80085a6:	b510      	push	{r4, lr}
 80085a8:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80085aa:	2180      	movs	r1, #128	; 0x80
 80085ac:	f000 fc76 	bl	8008e9c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80085b0:	4620      	mov	r0, r4
}
 80085b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80085b6:	2100      	movs	r1, #0
 80085b8:	f000 bc70 	b.w	8008e9c <USBD_LL_StallEP>

080085bc <USBD_StdDevReq>:
{
 80085bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085be:	780b      	ldrb	r3, [r1, #0]
 80085c0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085c6:	2b20      	cmp	r3, #32
{
 80085c8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085ca:	d012      	beq.n	80085f2 <USBD_StdDevReq+0x36>
 80085cc:	2b40      	cmp	r3, #64	; 0x40
 80085ce:	d010      	beq.n	80085f2 <USBD_StdDevReq+0x36>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d151      	bne.n	8008678 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 80085d4:	784b      	ldrb	r3, [r1, #1]
 80085d6:	2b09      	cmp	r3, #9
 80085d8:	d84e      	bhi.n	8008678 <USBD_StdDevReq+0xbc>
 80085da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80085de:	00ee      	.short	0x00ee
 80085e0:	004d010a 	.word	0x004d010a
 80085e4:	004d0103 	.word	0x004d0103
 80085e8:	00130087 	.word	0x00130087
 80085ec:	00d6004d 	.word	0x00d6004d
 80085f0:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 80085f2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80085f6:	4629      	mov	r1, r5
 80085f8:	4620      	mov	r0, r4
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	4798      	blx	r3
}
 80085fe:	2000      	movs	r0, #0
 8008600:	b003      	add	sp, #12
 8008602:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800860a:	884b      	ldrh	r3, [r1, #2]
 800860c:	0a1a      	lsrs	r2, r3, #8
 800860e:	3a01      	subs	r2, #1
 8008610:	2a06      	cmp	r2, #6
 8008612:	d831      	bhi.n	8008678 <USBD_StdDevReq+0xbc>
 8008614:	e8df f002 	tbb	[pc, r2]
 8008618:	30231604 	.word	0x30231604
 800861c:	4830      	.short	0x4830
 800861e:	52          	.byte	0x52
 800861f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008620:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008624:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008626:	7c20      	ldrb	r0, [r4, #16]
 8008628:	f10d 0106 	add.w	r1, sp, #6
 800862c:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800862e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008632:	2a00      	cmp	r2, #0
 8008634:	d056      	beq.n	80086e4 <USBD_StdDevReq+0x128>
 8008636:	88eb      	ldrh	r3, [r5, #6]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d14a      	bne.n	80086d2 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 800863c:	4620      	mov	r0, r4
 800863e:	f000 f9fa 	bl	8008a36 <USBD_CtlSendStatus>
 8008642:	e7dc      	b.n	80085fe <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008644:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8008646:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800864a:	b932      	cbnz	r2, 800865a <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800864c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800864e:	f10d 0006 	add.w	r0, sp, #6
 8008652:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008654:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008656:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008658:	e7e9      	b.n	800862e <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	e7f7      	b.n	800864e <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b05      	cmp	r3, #5
 8008662:	d809      	bhi.n	8008678 <USBD_StdDevReq+0xbc>
 8008664:	e8df f003 	tbb	[pc, r3]
 8008668:	14100c03 	.word	0x14100c03
 800866c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800866e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008672:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1d6      	bne.n	8008626 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8008678:	4620      	mov	r0, r4
 800867a:	f7ff ff94 	bl	80085a6 <USBD_CtlError.constprop.0>
        break;
 800867e:	e7be      	b.n	80085fe <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008680:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	e7f5      	b.n	8008674 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008688:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	e7f1      	b.n	8008674 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008690:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	e7ed      	b.n	8008674 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008698:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	e7e9      	b.n	8008674 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086a0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	e7e5      	b.n	8008674 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086a8:	7c03      	ldrb	r3, [r0, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e4      	bne.n	8008678 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80086b2:	f10d 0006 	add.w	r0, sp, #6
 80086b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b8:	4798      	blx	r3
  if (err != 0U)
 80086ba:	e7b8      	b.n	800862e <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086bc:	7c03      	ldrb	r3, [r0, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1da      	bne.n	8008678 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80086c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80086c6:	f10d 0006 	add.w	r0, sp, #6
 80086ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086cc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086ce:	2307      	movs	r3, #7
 80086d0:	e7c1      	b.n	8008656 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 80086d2:	429a      	cmp	r2, r3
 80086d4:	bf28      	it	cs
 80086d6:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086d8:	4601      	mov	r1, r0
 80086da:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80086dc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086e0:	f000 f97f 	bl	80089e2 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80086e4:	88eb      	ldrh	r3, [r5, #6]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d189      	bne.n	80085fe <USBD_StdDevReq+0x42>
 80086ea:	e7a7      	b.n	800863c <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086ec:	888b      	ldrh	r3, [r1, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1c2      	bne.n	8008678 <USBD_StdDevReq+0xbc>
 80086f2:	88cb      	ldrh	r3, [r1, #6]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1bf      	bne.n	8008678 <USBD_StdDevReq+0xbc>
 80086f8:	884d      	ldrh	r5, [r1, #2]
 80086fa:	2d7f      	cmp	r5, #127	; 0x7f
 80086fc:	d8bc      	bhi.n	8008678 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008702:	2b03      	cmp	r3, #3
 8008704:	d0b8      	beq.n	8008678 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008706:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8008708:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800870c:	f000 fbea 	bl	8008ee4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008710:	4620      	mov	r0, r4
 8008712:	f000 f990 	bl	8008a36 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008716:	b11d      	cbz	r5, 8008720 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008718:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800871a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800871e:	e76e      	b.n	80085fe <USBD_StdDevReq+0x42>
 8008720:	2301      	movs	r3, #1
 8008722:	e7fa      	b.n	800871a <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8008724:	7889      	ldrb	r1, [r1, #2]
 8008726:	4d39      	ldr	r5, [pc, #228]	; (800880c <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008728:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800872a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800872c:	d8a4      	bhi.n	8008678 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800872e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008732:	2b02      	cmp	r3, #2
 8008734:	d008      	beq.n	8008748 <USBD_StdDevReq+0x18c>
 8008736:	2b03      	cmp	r3, #3
 8008738:	d015      	beq.n	8008766 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800873a:	f7ff ff34 	bl	80085a6 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800873e:	4620      	mov	r0, r4
 8008740:	7829      	ldrb	r1, [r5, #0]
 8008742:	f7ff fe1e 	bl	8008382 <USBD_ClrClassConfig>
        break;
 8008746:	e75a      	b.n	80085fe <USBD_StdDevReq+0x42>
        if (cfgidx)
 8008748:	2900      	cmp	r1, #0
 800874a:	f43f af77 	beq.w	800863c <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800874e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008750:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8008752:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008754:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008758:	4620      	mov	r0, r4
 800875a:	f7ff fe07 	bl	800836c <USBD_SetClassConfig>
 800875e:	2802      	cmp	r0, #2
 8008760:	f47f af6c 	bne.w	800863c <USBD_StdDevReq+0x80>
 8008764:	e788      	b.n	8008678 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8008766:	b931      	cbnz	r1, 8008776 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008768:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800876a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800876c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8008770:	f7ff fe07 	bl	8008382 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008774:	e762      	b.n	800863c <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 8008776:	6841      	ldr	r1, [r0, #4]
 8008778:	2901      	cmp	r1, #1
 800877a:	f43f af5f 	beq.w	800863c <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800877e:	b2c9      	uxtb	r1, r1
 8008780:	f7ff fdff 	bl	8008382 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008784:	7829      	ldrb	r1, [r5, #0]
 8008786:	6061      	str	r1, [r4, #4]
 8008788:	e7e6      	b.n	8008758 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 800878a:	88ca      	ldrh	r2, [r1, #6]
 800878c:	2a01      	cmp	r2, #1
 800878e:	f47f af73 	bne.w	8008678 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8008792:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008796:	2b02      	cmp	r3, #2
 8008798:	d80a      	bhi.n	80087b0 <USBD_StdDevReq+0x1f4>
 800879a:	2b00      	cmp	r3, #0
 800879c:	f43f af6c 	beq.w	8008678 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 80087a0:	4601      	mov	r1, r0
 80087a2:	2300      	movs	r3, #0
 80087a4:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 f91a 	bl	80089e2 <USBD_CtlSendData>
      break;
 80087ae:	e726      	b.n	80085fe <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	f47f af61 	bne.w	8008678 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80087b6:	1d01      	adds	r1, r0, #4
 80087b8:	e7f6      	b.n	80087a8 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 80087ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80087be:	3b01      	subs	r3, #1
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	f63f af59 	bhi.w	8008678 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 80087c6:	88cb      	ldrh	r3, [r1, #6]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	f47f af55 	bne.w	8008678 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087ce:	2301      	movs	r3, #1
 80087d0:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80087d2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80087d6:	b10b      	cbz	r3, 80087dc <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087d8:	2303      	movs	r3, #3
 80087da:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087dc:	2202      	movs	r2, #2
 80087de:	f104 010c 	add.w	r1, r4, #12
 80087e2:	e7e1      	b.n	80087a8 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087e4:	884b      	ldrh	r3, [r1, #2]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	f47f af09 	bne.w	80085fe <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80087ec:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80087f0:	e724      	b.n	800863c <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 80087f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80087f6:	3b01      	subs	r3, #1
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	f63f af3d 	bhi.w	8008678 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087fe:	884b      	ldrh	r3, [r1, #2]
 8008800:	2b01      	cmp	r3, #1
 8008802:	f47f aefc 	bne.w	80085fe <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	e7f0      	b.n	80087ec <USBD_StdDevReq+0x230>
 800880a:	bf00      	nop
 800880c:	2000056c 	.word	0x2000056c

08008810 <USBD_StdItfReq>:
{
 8008810:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008812:	780b      	ldrb	r3, [r1, #0]
{
 8008814:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008816:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800881a:	2a40      	cmp	r2, #64	; 0x40
{
 800881c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800881e:	d001      	beq.n	8008824 <USBD_StdItfReq+0x14>
 8008820:	065b      	lsls	r3, r3, #25
 8008822:	d415      	bmi.n	8008850 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8008824:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8008828:	3b01      	subs	r3, #1
 800882a:	2b02      	cmp	r3, #2
 800882c:	d810      	bhi.n	8008850 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800882e:	792b      	ldrb	r3, [r5, #4]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d80d      	bhi.n	8008850 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008834:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008838:	4629      	mov	r1, r5
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	4620      	mov	r0, r4
 800883e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008840:	88eb      	ldrh	r3, [r5, #6]
 8008842:	b91b      	cbnz	r3, 800884c <USBD_StdItfReq+0x3c>
 8008844:	b910      	cbnz	r0, 800884c <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8008846:	4620      	mov	r0, r4
 8008848:	f000 f8f5 	bl	8008a36 <USBD_CtlSendStatus>
}
 800884c:	2000      	movs	r0, #0
 800884e:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8008850:	4620      	mov	r0, r4
 8008852:	f7ff fea8 	bl	80085a6 <USBD_CtlError.constprop.0>
          break;
 8008856:	e7f9      	b.n	800884c <USBD_StdItfReq+0x3c>

08008858 <USBD_StdEPReq>:
{
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	780a      	ldrb	r2, [r1, #0]
 800885c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800885e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8008862:	2a20      	cmp	r2, #32
{
 8008864:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008866:	d027      	beq.n	80088b8 <USBD_StdEPReq+0x60>
 8008868:	2a40      	cmp	r2, #64	; 0x40
 800886a:	d025      	beq.n	80088b8 <USBD_StdEPReq+0x60>
 800886c:	bb92      	cbnz	r2, 80088d4 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 800886e:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8008870:	888d      	ldrh	r5, [r1, #4]
 8008872:	2a01      	cmp	r2, #1
 8008874:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8008876:	d03d      	beq.n	80088f4 <USBD_StdEPReq+0x9c>
 8008878:	2a03      	cmp	r2, #3
 800887a:	d025      	beq.n	80088c8 <USBD_StdEPReq+0x70>
 800887c:	bb52      	cbnz	r2, 80088d4 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 800887e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008882:	2b02      	cmp	r3, #2
 8008884:	d04d      	beq.n	8008922 <USBD_StdEPReq+0xca>
 8008886:	2b03      	cmp	r3, #3
 8008888:	d124      	bne.n	80088d4 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 800888a:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800888c:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8008890:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008894:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8008898:	d054      	beq.n	8008944 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	b1d3      	cbz	r3, 80088d4 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800889e:	2314      	movs	r3, #20
 80088a0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80088a4:	fb05 3303 	mla	r3, r5, r3, r3
 80088a8:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088aa:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80088ae:	d155      	bne.n	800895c <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 80088b0:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088b2:	2202      	movs	r2, #2
 80088b4:	4629      	mov	r1, r5
 80088b6:	e041      	b.n	800893c <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 80088b8:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80088bc:	4619      	mov	r1, r3
 80088be:	4620      	mov	r0, r4
 80088c0:	6892      	ldr	r2, [r2, #8]
 80088c2:	4790      	blx	r2
}
 80088c4:	2000      	movs	r0, #0
 80088c6:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 80088c8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80088cc:	2a02      	cmp	r2, #2
 80088ce:	d01f      	beq.n	8008910 <USBD_StdEPReq+0xb8>
 80088d0:	2a03      	cmp	r2, #3
 80088d2:	d003      	beq.n	80088dc <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 80088d4:	4620      	mov	r0, r4
 80088d6:	f7ff fe66 	bl	80085a6 <USBD_CtlError.constprop.0>
              break;
 80088da:	e7f3      	b.n	80088c4 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088dc:	885a      	ldrh	r2, [r3, #2]
 80088de:	b92a      	cbnz	r2, 80088ec <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 80088e0:	064a      	lsls	r2, r1, #25
 80088e2:	d003      	beq.n	80088ec <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088e4:	88db      	ldrh	r3, [r3, #6]
 80088e6:	b90b      	cbnz	r3, 80088ec <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 80088e8:	f000 fad8 	bl	8008e9c <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 f8a2 	bl	8008a36 <USBD_CtlSendStatus>
              break;
 80088f2:	e7e7      	b.n	80088c4 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 80088f4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80088f8:	2a02      	cmp	r2, #2
 80088fa:	d009      	beq.n	8008910 <USBD_StdEPReq+0xb8>
 80088fc:	2a03      	cmp	r2, #3
 80088fe:	d1e9      	bne.n	80088d4 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008900:	885b      	ldrh	r3, [r3, #2]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1de      	bne.n	80088c4 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008906:	064d      	lsls	r5, r1, #25
 8008908:	d0f0      	beq.n	80088ec <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800890a:	f000 fad0 	bl	8008eae <USBD_LL_ClearStallEP>
 800890e:	e7ed      	b.n	80088ec <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008910:	064b      	lsls	r3, r1, #25
 8008912:	d0df      	beq.n	80088d4 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8008914:	f000 fac2 	bl	8008e9c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008918:	2180      	movs	r1, #128	; 0x80
 800891a:	4620      	mov	r0, r4
 800891c:	f000 fabe 	bl	8008e9c <USBD_LL_StallEP>
 8008920:	e7d0      	b.n	80088c4 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008922:	064a      	lsls	r2, r1, #25
 8008924:	d1d6      	bne.n	80088d4 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008926:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8008928:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800892c:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008930:	bf4c      	ite	mi
 8008932:	f100 0114 	addmi.w	r1, r0, #20
 8008936:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800893a:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800893c:	4620      	mov	r0, r4
 800893e:	f000 f850 	bl	80089e2 <USBD_CtlSendData>
              break;
 8008942:	e7bf      	b.n	80088c4 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008944:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0c3      	beq.n	80088d4 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800894c:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 800894e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008952:	fb03 0505 	mla	r5, r3, r5, r0
 8008956:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800895a:	e7a6      	b.n	80088aa <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800895c:	4620      	mov	r0, r4
 800895e:	f000 faaf 	bl	8008ec0 <USBD_LL_IsStallEP>
 8008962:	b108      	cbz	r0, 8008968 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8008964:	2301      	movs	r3, #1
 8008966:	e7a3      	b.n	80088b0 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8008968:	6028      	str	r0, [r5, #0]
 800896a:	e7a2      	b.n	80088b2 <USBD_StdEPReq+0x5a>

0800896c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800896c:	780b      	ldrb	r3, [r1, #0]
 800896e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008970:	784b      	ldrb	r3, [r1, #1]
 8008972:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008974:	78ca      	ldrb	r2, [r1, #3]
 8008976:	788b      	ldrb	r3, [r1, #2]
 8008978:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800897c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800897e:	794a      	ldrb	r2, [r1, #5]
 8008980:	790b      	ldrb	r3, [r1, #4]
 8008982:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008986:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008988:	79ca      	ldrb	r2, [r1, #7]
 800898a:	798b      	ldrb	r3, [r1, #6]
 800898c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008990:	80c3      	strh	r3, [r0, #6]
}
 8008992:	4770      	bx	lr

08008994 <USBD_CtlError>:
{
 8008994:	b510      	push	{r4, lr}
 8008996:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	f000 fa7f 	bl	8008e9c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800899e:	4620      	mov	r0, r4
}
 80089a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80089a4:	2100      	movs	r1, #0
 80089a6:	f000 ba79 	b.w	8008e9c <USBD_LL_StallEP>

080089aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089aa:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80089ac:	b188      	cbz	r0, 80089d2 <USBD_GetString+0x28>
 80089ae:	2400      	movs	r4, #0
 80089b0:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80089b2:	4623      	mov	r3, r4
 80089b4:	3401      	adds	r4, #1
 80089b6:	5d05      	ldrb	r5, [r0, r4]
 80089b8:	2d00      	cmp	r5, #0
 80089ba:	d1fa      	bne.n	80089b2 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	3301      	adds	r3, #1
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80089c4:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089c6:	2303      	movs	r3, #3
 80089c8:	704b      	strb	r3, [r1, #1]
 80089ca:	2302      	movs	r3, #2
    while (*desc != '\0')
 80089cc:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80089d0:	b904      	cbnz	r4, 80089d4 <USBD_GetString+0x2a>
}
 80089d2:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	54cc      	strb	r4, [r1, r3]
 80089d8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80089da:	3302      	adds	r3, #2
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	548d      	strb	r5, [r1, r2]
 80089e0:	e7f4      	b.n	80089cc <USBD_GetString+0x22>

080089e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089e2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089e4:	2202      	movs	r2, #2
{
 80089e6:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80089e8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089ec:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089f0:	460a      	mov	r2, r1
 80089f2:	2100      	movs	r1, #0
 80089f4:	f000 fa7f 	bl	8008ef6 <USBD_LL_Transmit>

  return USBD_OK;
}
 80089f8:	2000      	movs	r0, #0
 80089fa:	bd10      	pop	{r4, pc}

080089fc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089fc:	b508      	push	{r3, lr}
 80089fe:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a00:	460a      	mov	r2, r1
 8008a02:	2100      	movs	r1, #0
 8008a04:	f000 fa77 	bl	8008ef6 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008a08:	2000      	movs	r0, #0
 8008a0a:	bd08      	pop	{r3, pc}

08008a0c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008a0c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a0e:	2203      	movs	r2, #3
{
 8008a10:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8008a12:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a16:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a1a:	460a      	mov	r2, r1
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	f000 fa73 	bl	8008f08 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008a22:	2000      	movs	r0, #0
 8008a24:	bd10      	pop	{r4, pc}

08008a26 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a26:	b508      	push	{r3, lr}
 8008a28:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a2a:	460a      	mov	r2, r1
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	f000 fa6b 	bl	8008f08 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008a32:	2000      	movs	r0, #0
 8008a34:	bd08      	pop	{r3, pc}

08008a36 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a36:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a38:	2304      	movs	r3, #4
 8008a3a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a3e:	2300      	movs	r3, #0
 8008a40:	461a      	mov	r2, r3
 8008a42:	4619      	mov	r1, r3
 8008a44:	f000 fa57 	bl	8008ef6 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008a48:	2000      	movs	r0, #0
 8008a4a:	bd08      	pop	{r3, pc}

08008a4c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a4c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a4e:	2305      	movs	r3, #5
 8008a50:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a54:	2300      	movs	r3, #0
 8008a56:	461a      	mov	r2, r3
 8008a58:	4619      	mov	r1, r3
 8008a5a:	f000 fa55 	bl	8008f08 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008a5e:	2000      	movs	r0, #0
 8008a60:	bd08      	pop	{r3, pc}
	...

08008a64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a66:	2200      	movs	r2, #0
 8008a68:	490e      	ldr	r1, [pc, #56]	; (8008aa4 <MX_USB_DEVICE_Init+0x40>)
 8008a6a:	480f      	ldr	r0, [pc, #60]	; (8008aa8 <MX_USB_DEVICE_Init+0x44>)
 8008a6c:	f7ff fc5d 	bl	800832a <USBD_Init>
 8008a70:	b108      	cbz	r0, 8008a76 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8008a72:	f7fc fbfb 	bl	800526c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a76:	490d      	ldr	r1, [pc, #52]	; (8008aac <MX_USB_DEVICE_Init+0x48>)
 8008a78:	480b      	ldr	r0, [pc, #44]	; (8008aa8 <MX_USB_DEVICE_Init+0x44>)
 8008a7a:	f7ff fc6b 	bl	8008354 <USBD_RegisterClass>
 8008a7e:	b108      	cbz	r0, 8008a84 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8008a80:	f7fc fbf4 	bl	800526c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a84:	490a      	ldr	r1, [pc, #40]	; (8008ab0 <MX_USB_DEVICE_Init+0x4c>)
 8008a86:	4808      	ldr	r0, [pc, #32]	; (8008aa8 <MX_USB_DEVICE_Init+0x44>)
 8008a88:	f7ff fc23 	bl	80082d2 <USBD_CDC_RegisterInterface>
 8008a8c:	b108      	cbz	r0, 8008a92 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8008a8e:	f7fc fbed 	bl	800526c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a92:	4805      	ldr	r0, [pc, #20]	; (8008aa8 <MX_USB_DEVICE_Init+0x44>)
 8008a94:	f7ff fc65 	bl	8008362 <USBD_Start>
 8008a98:	b118      	cbz	r0, 8008aa2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008a9e:	f7fc bbe5 	b.w	800526c <Error_Handler>
}
 8008aa2:	bd08      	pop	{r3, pc}
 8008aa4:	20000140 	.word	0x20000140
 8008aa8:	20000570 	.word	0x20000570
 8008aac:	20000014 	.word	0x20000014
 8008ab0:	2000012c 	.word	0x2000012c

08008ab4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	4770      	bx	lr

08008ab8 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ab8:	2820      	cmp	r0, #32
 8008aba:	d003      	beq.n	8008ac4 <CDC_Control_FS+0xc>
 8008abc:	2821      	cmp	r0, #33	; 0x21
 8008abe:	d017      	beq.n	8008af0 <CDC_Control_FS+0x38>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	4770      	bx	lr
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 8008ac4:	780b      	ldrb	r3, [r1, #0]
 8008ac6:	4a13      	ldr	r2, [pc, #76]	; (8008b14 <CDC_Control_FS+0x5c>)
 8008ac8:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 8008aca:	7848      	ldrb	r0, [r1, #1]
 8008acc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008ad0:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 8008ad2:	7888      	ldrb	r0, [r1, #2]
 8008ad4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ad8:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 8008ada:	78c8      	ldrb	r0, [r1, #3]
 8008adc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008ae0:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 8008ae2:	790b      	ldrb	r3, [r1, #4]
 8008ae4:	7113      	strb	r3, [r2, #4]
      LineCoding.paritytype= pbuf[5];
 8008ae6:	794b      	ldrb	r3, [r1, #5]
 8008ae8:	7153      	strb	r3, [r2, #5]
      LineCoding.datatype  = pbuf[6];
 8008aea:	798b      	ldrb	r3, [r1, #6]
 8008aec:	7193      	strb	r3, [r2, #6]
    break;
 8008aee:	e7e7      	b.n	8008ac0 <CDC_Control_FS+0x8>
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008af0:	4b08      	ldr	r3, [pc, #32]	; (8008b14 <CDC_Control_FS+0x5c>)
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	700a      	strb	r2, [r1, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	0a12      	lsrs	r2, r2, #8
 8008afa:	704a      	strb	r2, [r1, #1]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8008afc:	885a      	ldrh	r2, [r3, #2]
 8008afe:	708a      	strb	r2, [r1, #2]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8008b00:	78da      	ldrb	r2, [r3, #3]
 8008b02:	70ca      	strb	r2, [r1, #3]
      pbuf[4] = LineCoding.format;
 8008b04:	791a      	ldrb	r2, [r3, #4]
 8008b06:	710a      	strb	r2, [r1, #4]
      pbuf[5] = LineCoding.paritytype;
 8008b08:	795a      	ldrb	r2, [r3, #5]
 8008b0a:	714a      	strb	r2, [r1, #5]
      pbuf[6] = LineCoding.datatype;
 8008b0c:	799b      	ldrb	r3, [r3, #6]
 8008b0e:	718b      	strb	r3, [r1, #6]
    break;
 8008b10:	e7d6      	b.n	8008ac0 <CDC_Control_FS+0x8>
 8008b12:	bf00      	nop
 8008b14:	20000124 	.word	0x20000124

08008b18 <CDC_Init_FS>:
{
 8008b18:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b1a:	4c06      	ldr	r4, [pc, #24]	; (8008b34 <CDC_Init_FS+0x1c>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	4620      	mov	r0, r4
 8008b20:	4905      	ldr	r1, [pc, #20]	; (8008b38 <CDC_Init_FS+0x20>)
 8008b22:	f7ff fbdd 	bl	80082e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b26:	4620      	mov	r0, r4
 8008b28:	4904      	ldr	r1, [pc, #16]	; (8008b3c <CDC_Init_FS+0x24>)
 8008b2a:	f7ff fbe1 	bl	80082f0 <USBD_CDC_SetRxBuffer>
}
 8008b2e:	2000      	movs	r0, #0
 8008b30:	bd10      	pop	{r4, pc}
 8008b32:	bf00      	nop
 8008b34:	20000570 	.word	0x20000570
 8008b38:	20000a34 	.word	0x20000a34
 8008b3c:	20000834 	.word	0x20000834

08008b40 <cdcAvailable>:
  ret = (rx_in - rx_out) % rx_len;
 8008b40:	4a05      	ldr	r2, [pc, #20]	; (8008b58 <cdcAvailable+0x18>)
 8008b42:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <cdcAvailable+0x1c>)
 8008b44:	6810      	ldr	r0, [r2, #0]
 8008b46:	4a06      	ldr	r2, [pc, #24]	; (8008b60 <cdcAvailable+0x20>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	1a1b      	subs	r3, r3, r0
 8008b4e:	fbb3 f0f2 	udiv	r0, r3, r2
}
 8008b52:	fb02 3010 	mls	r0, r2, r0, r3
 8008b56:	4770      	bx	lr
 8008b58:	20000e3c 	.word	0x20000e3c
 8008b5c:	20000e38 	.word	0x20000e38
 8008b60:	2000013c 	.word	0x2000013c

08008b64 <cdcDataIn>:
  rx_buf[rx_in] = rx_data;
 8008b64:	4a08      	ldr	r2, [pc, #32]	; (8008b88 <cdcDataIn+0x24>)
 8008b66:	4909      	ldr	r1, [pc, #36]	; (8008b8c <cdcDataIn+0x28>)
 8008b68:	6813      	ldr	r3, [r2, #0]
 8008b6a:	54c8      	strb	r0, [r1, r3]
  next_rx_in = (rx_in + 1) % rx_len;
 8008b6c:	4908      	ldr	r1, [pc, #32]	; (8008b90 <cdcDataIn+0x2c>)
 8008b6e:	3301      	adds	r3, #1
 8008b70:	6809      	ldr	r1, [r1, #0]
 8008b72:	fbb3 f0f1 	udiv	r0, r3, r1
 8008b76:	fb01 3310 	mls	r3, r1, r0, r3
  if (next_rx_in != rx_out)
 8008b7a:	4906      	ldr	r1, [pc, #24]	; (8008b94 <cdcDataIn+0x30>)
 8008b7c:	6809      	ldr	r1, [r1, #0]
 8008b7e:	4299      	cmp	r1, r3
    rx_in = next_rx_in;
 8008b80:	bf18      	it	ne
 8008b82:	6013      	strne	r3, [r2, #0]
}
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	20000e38 	.word	0x20000e38
 8008b8c:	20000c34 	.word	0x20000c34
 8008b90:	2000013c 	.word	0x2000013c
 8008b94:	20000e3c 	.word	0x20000e3c

08008b98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */

  for (int i=0; i<*Len; i++)
 8008b9e:	2400      	movs	r4, #0
 8008ba0:	6833      	ldr	r3, [r6, #0]
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	d810      	bhi.n	8008bc8 <CDC_Receive_FS+0x30>
  }

  uint32_t buf_len;

  // 수신 버퍼에서 비어있는 데이터 양
  buf_len = (rx_len - cdcAvailable()) - 1;
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	; (8008bdc <CDC_Receive_FS+0x44>)
 8008ba8:	681c      	ldr	r4, [r3, #0]
 8008baa:	f7ff ffc9 	bl	8008b40 <cdcAvailable>
 8008bae:	3c01      	subs	r4, #1
 8008bb0:	1a24      	subs	r4, r4, r0

  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8008bb2:	2c3f      	cmp	r4, #63	; 0x3f
 8008bb4:	d90d      	bls.n	8008bd2 <CDC_Receive_FS+0x3a>
  {
    // 다음 데이터도 보내줘.
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4809      	ldr	r0, [pc, #36]	; (8008be0 <CDC_Receive_FS+0x48>)
 8008bba:	f7ff fb99 	bl	80082f0 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bbe:	4808      	ldr	r0, [pc, #32]	; (8008be0 <CDC_Receive_FS+0x48>)
 8008bc0:	f7ff fb9c 	bl	80082fc <USBD_CDC_ReceivePacket>
    rx_full = true;
  }

  return (USBD_OK);
  /* USER CODE END 6 */
}
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
    cdcDataIn(Buf[i]);
 8008bc8:	5d28      	ldrb	r0, [r5, r4]
 8008bca:	f7ff ffcb 	bl	8008b64 <cdcDataIn>
  for (int i=0; i<*Len; i++)
 8008bce:	3401      	adds	r4, #1
 8008bd0:	e7e6      	b.n	8008ba0 <CDC_Receive_FS+0x8>
    rx_full = true;
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	4b03      	ldr	r3, [pc, #12]	; (8008be4 <CDC_Receive_FS+0x4c>)
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	e7f4      	b.n	8008bc4 <CDC_Receive_FS+0x2c>
 8008bda:	bf00      	nop
 8008bdc:	2000013c 	.word	0x2000013c
 8008be0:	20000570 	.word	0x20000570
 8008be4:	20000e34 	.word	0x20000e34

08008be8 <USBD_CDC_SOF>:
{
 8008be8:	b538      	push	{r3, r4, r5, lr}
  if (rx_full == true)
 8008bea:	4d09      	ldr	r5, [pc, #36]	; (8008c10 <USBD_CDC_SOF+0x28>)
{
 8008bec:	4604      	mov	r4, r0
  if (rx_full == true)
 8008bee:	782b      	ldrb	r3, [r5, #0]
 8008bf0:	b163      	cbz	r3, 8008c0c <USBD_CDC_SOF+0x24>
    buf_len = (rx_len - cdcAvailable()) - 1;
 8008bf2:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <USBD_CDC_SOF+0x2c>)
 8008bf4:	6819      	ldr	r1, [r3, #0]
 8008bf6:	f7ff ffa3 	bl	8008b40 <cdcAvailable>
 8008bfa:	3901      	subs	r1, #1
 8008bfc:	1a09      	subs	r1, r1, r0
    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8008bfe:	293f      	cmp	r1, #63	; 0x3f
 8008c00:	d904      	bls.n	8008c0c <USBD_CDC_SOF+0x24>
      USBD_CDC_ReceivePacket(pdev);
 8008c02:	4620      	mov	r0, r4
 8008c04:	f7ff fb7a 	bl	80082fc <USBD_CDC_ReceivePacket>
      rx_full = false;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	702b      	strb	r3, [r5, #0]
}
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}
 8008c10:	20000e34 	.word	0x20000e34
 8008c14:	2000013c 	.word	0x2000013c

08008c18 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c18:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8008c1a:	4801      	ldr	r0, [pc, #4]	; (8008c20 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c1c:	800b      	strh	r3, [r1, #0]
}
 8008c1e:	4770      	bx	lr
 8008c20:	2000015c 	.word	0x2000015c

08008c24 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c24:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8008c26:	4801      	ldr	r0, [pc, #4]	; (8008c2c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8008c28:	800b      	strh	r3, [r1, #0]
}
 8008c2a:	4770      	bx	lr
 8008c2c:	20000170 	.word	0x20000170

08008c30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c30:	2300      	movs	r3, #0
 8008c32:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8008c34:	461e      	mov	r6, r3
 8008c36:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c38:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8008c3a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c3e:	bf34      	ite	cc
 8008c40:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c42:	3437      	addcs	r4, #55	; 0x37
 8008c44:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8008c48:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	b2dc      	uxtb	r4, r3
 8008c50:	42a2      	cmp	r2, r4
    value = value << 4;
 8008c52:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8008c56:	d8ef      	bhi.n	8008c38 <IntToUnicode+0x8>
  }
}
 8008c58:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c5c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8008c5c:	231a      	movs	r3, #26
{
 8008c5e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8008c60:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c62:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <USBD_FS_SerialStrDescriptor+0x30>)
 8008c64:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8008c68:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8008c6c:	1880      	adds	r0, r0, r2
 8008c6e:	d00a      	beq.n	8008c86 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c70:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c74:	4906      	ldr	r1, [pc, #24]	; (8008c90 <USBD_FS_SerialStrDescriptor+0x34>)
 8008c76:	2208      	movs	r2, #8
 8008c78:	f7ff ffda 	bl	8008c30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c7c:	2204      	movs	r2, #4
 8008c7e:	4620      	mov	r0, r4
 8008c80:	3110      	adds	r1, #16
 8008c82:	f7ff ffd5 	bl	8008c30 <IntToUnicode>
}
 8008c86:	4803      	ldr	r0, [pc, #12]	; (8008c94 <USBD_FS_SerialStrDescriptor+0x38>)
 8008c88:	bd10      	pop	{r4, pc}
 8008c8a:	bf00      	nop
 8008c8c:	1ffff000 	.word	0x1ffff000
 8008c90:	20000176 	.word	0x20000176
 8008c94:	20000174 	.word	0x20000174

08008c98 <USBD_FS_ManufacturerStrDescriptor>:
{
 8008c98:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c9a:	4c04      	ldr	r4, [pc, #16]	; (8008cac <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8008c9c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c9e:	4804      	ldr	r0, [pc, #16]	; (8008cb0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	f7ff fe82 	bl	80089aa <USBD_GetString>
}
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	bd10      	pop	{r4, pc}
 8008caa:	bf00      	nop
 8008cac:	20000e40 	.word	0x20000e40
 8008cb0:	08008fdd 	.word	0x08008fdd

08008cb4 <USBD_FS_ProductStrDescriptor>:
{
 8008cb4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cb6:	4c04      	ldr	r4, [pc, #16]	; (8008cc8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8008cb8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cba:	4804      	ldr	r0, [pc, #16]	; (8008ccc <USBD_FS_ProductStrDescriptor+0x18>)
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	f7ff fe74 	bl	80089aa <USBD_GetString>
}
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	bd10      	pop	{r4, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20000e40 	.word	0x20000e40
 8008ccc:	08008ff0 	.word	0x08008ff0

08008cd0 <USBD_FS_ConfigStrDescriptor>:
{
 8008cd0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cd2:	4c04      	ldr	r4, [pc, #16]	; (8008ce4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8008cd4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cd6:	4804      	ldr	r0, [pc, #16]	; (8008ce8 <USBD_FS_ConfigStrDescriptor+0x18>)
 8008cd8:	4621      	mov	r1, r4
 8008cda:	f7ff fe66 	bl	80089aa <USBD_GetString>
}
 8008cde:	4620      	mov	r0, r4
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000e40 	.word	0x20000e40
 8008ce8:	08009006 	.word	0x08009006

08008cec <USBD_FS_InterfaceStrDescriptor>:
{
 8008cec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cee:	4c04      	ldr	r4, [pc, #16]	; (8008d00 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8008cf0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cf2:	4804      	ldr	r0, [pc, #16]	; (8008d04 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	f7ff fe58 	bl	80089aa <USBD_GetString>
}
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	bd10      	pop	{r4, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000e40 	.word	0x20000e40
 8008d04:	08009011 	.word	0x08009011

08008d08 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8008d08:	2803      	cmp	r0, #3
 8008d0a:	bf9a      	itte	ls
 8008d0c:	4b01      	ldrls	r3, [pc, #4]	; (8008d14 <USBD_Get_USB_Status+0xc>)
 8008d0e:	5c18      	ldrbls	r0, [r3, r0]
{
 8008d10:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8008d12:	4770      	bx	lr
 8008d14:	0800901f 	.word	0x0800901f

08008d18 <HAL_PCD_MspInit>:
{
 8008d18:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <HAL_PCD_MspInit+0x3c>)
 8008d1c:	6802      	ldr	r2, [r0, #0]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d115      	bne.n	8008d4e <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8008d22:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8008d26:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008d28:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8008d2a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008d2e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008d30:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8008d32:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008d34:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8008d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008d3e:	f7fc fd3f 	bl	80057c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008d42:	2014      	movs	r0, #20
}
 8008d44:	b003      	add	sp, #12
 8008d46:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008d4a:	f7fc bd6b 	b.w	8005824 <HAL_NVIC_EnableIRQ>
}
 8008d4e:	b003      	add	sp, #12
 8008d50:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d54:	40005c00 	.word	0x40005c00

08008d58 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d58:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8008d5c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8008d60:	f7ff bb16 	b.w	8008390 <USBD_LL_SetupStage>

08008d64 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d64:	2328      	movs	r3, #40	; 0x28
 8008d66:	fb03 0301 	mla	r3, r3, r1, r0
 8008d6a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8008d6e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8008d72:	f7ff bb3a 	b.w	80083ea <USBD_LL_DataOutStage>

08008d76 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d76:	2328      	movs	r3, #40	; 0x28
 8008d78:	fb03 0301 	mla	r3, r3, r1, r0
 8008d7c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8008d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d82:	f7ff bb6c 	b.w	800845e <USBD_LL_DataInStage>

08008d86 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d86:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8008d8a:	f7ff bc00 	b.w	800858e <USBD_LL_SOF>

08008d8e <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d8e:	6883      	ldr	r3, [r0, #8]
{
 8008d90:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d92:	2b02      	cmp	r3, #2
{
 8008d94:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d96:	d001      	beq.n	8008d9c <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8008d98:	f7fc fa68 	bl	800526c <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d9c:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8008da0:	2101      	movs	r1, #1
 8008da2:	f7ff fbde 	bl	8008562 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008da6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8008daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dae:	f7ff bbb1 	b.w	8008514 <USBD_LL_Reset>
	...

08008db4 <HAL_PCD_SuspendCallback>:
{
 8008db4:	b510      	push	{r4, lr}
 8008db6:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008db8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8008dbc:	f7ff fbd4 	bl	8008568 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8008dc0:	69a3      	ldr	r3, [r4, #24]
 8008dc2:	b123      	cbz	r3, 8008dce <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dc4:	4a02      	ldr	r2, [pc, #8]	; (8008dd0 <HAL_PCD_SuspendCallback+0x1c>)
 8008dc6:	6913      	ldr	r3, [r2, #16]
 8008dc8:	f043 0306 	orr.w	r3, r3, #6
 8008dcc:	6113      	str	r3, [r2, #16]
}
 8008dce:	bd10      	pop	{r4, pc}
 8008dd0:	e000ed00 	.word	0xe000ed00

08008dd4 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008dd4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8008dd8:	f7ff bbcf 	b.w	800857a <USBD_LL_Resume>

08008ddc <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008ddc:	2308      	movs	r3, #8
{
 8008dde:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008de0:	4a1d      	ldr	r2, [pc, #116]	; (8008e58 <USBD_LL_Init+0x7c>)
{
 8008de2:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8008de4:	481d      	ldr	r0, [pc, #116]	; (8008e5c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008de6:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008dea:	2302      	movs	r3, #2
 8008dec:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008dee:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8008df0:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008df4:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008df8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008dfc:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008dfe:	f7fd f807 	bl	8005e10 <HAL_PCD_Init>
 8008e02:	b108      	cbz	r0, 8008e08 <USBD_LL_Init+0x2c>
    Error_Handler( );
 8008e04:	f7fc fa32 	bl	800526c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e08:	2200      	movs	r2, #0
 8008e0a:	2318      	movs	r3, #24
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008e12:	f7fd fdca 	bl	80069aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008e16:	2358      	movs	r3, #88	; 0x58
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2180      	movs	r1, #128	; 0x80
 8008e1c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008e20:	f7fd fdc3 	bl	80069aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008e24:	23c0      	movs	r3, #192	; 0xc0
 8008e26:	2200      	movs	r2, #0
 8008e28:	2181      	movs	r1, #129	; 0x81
 8008e2a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008e2e:	f7fd fdbc 	bl	80069aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008e32:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008e36:	2200      	movs	r2, #0
 8008e38:	2101      	movs	r1, #1
 8008e3a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008e3e:	f7fd fdb4 	bl	80069aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e46:	2200      	movs	r2, #0
 8008e48:	2182      	movs	r1, #130	; 0x82
 8008e4a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008e4e:	f7fd fdac 	bl	80069aa <HAL_PCDEx_PMAConfig>
}
 8008e52:	2000      	movs	r0, #0
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	bf00      	nop
 8008e58:	40005c00 	.word	0x40005c00
 8008e5c:	20001040 	.word	0x20001040

08008e60 <USBD_LL_Start>:
{
 8008e60:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8008e62:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008e66:	f7fd f84c 	bl	8005f02 <HAL_PCD_Start>
}
 8008e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e6e:	f7ff bf4b 	b.w	8008d08 <USBD_Get_USB_Status>

08008e72 <USBD_LL_OpenEP>:
{
 8008e72:	b510      	push	{r4, lr}
 8008e74:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e76:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8008e7a:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	f7fd fc9d 	bl	80067bc <HAL_PCD_EP_Open>
}
 8008e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e86:	f7ff bf3f 	b.w	8008d08 <USBD_Get_USB_Status>

08008e8a <USBD_LL_CloseEP>:
{
 8008e8a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e8c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008e90:	f7fd fcc5 	bl	800681e <HAL_PCD_EP_Close>
}
 8008e94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e98:	f7ff bf36 	b.w	8008d08 <USBD_Get_USB_Status>

08008e9c <USBD_LL_StallEP>:
{
 8008e9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e9e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008ea2:	f7fd fd1d 	bl	80068e0 <HAL_PCD_EP_SetStall>
}
 8008ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eaa:	f7ff bf2d 	b.w	8008d08 <USBD_Get_USB_Status>

08008eae <USBD_LL_ClearStallEP>:
{
 8008eae:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008eb0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008eb4:	f7fd fd48 	bl	8006948 <HAL_PCD_EP_ClrStall>
}
 8008eb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ebc:	f7ff bf24 	b.w	8008d08 <USBD_Get_USB_Status>

08008ec0 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ec0:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 8008ec2:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ec6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008eca:	bf1b      	ittet	ne
 8008ecc:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8008ed0:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ed4:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ed8:	185b      	addne	r3, r3, r1
 8008eda:	bf14      	ite	ne
 8008edc:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ede:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8008ee2:	4770      	bx	lr

08008ee4 <USBD_LL_SetUSBAddress>:
{
 8008ee4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ee6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008eea:	f7fd f823 	bl	8005f34 <HAL_PCD_SetAddress>
}
 8008eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef2:	f7ff bf09 	b.w	8008d08 <USBD_Get_USB_Status>

08008ef6 <USBD_LL_Transmit>:
{
 8008ef6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ef8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008efc:	f7fd fcd6 	bl	80068ac <HAL_PCD_EP_Transmit>
}
 8008f00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f04:	f7ff bf00 	b.w	8008d08 <USBD_Get_USB_Status>

08008f08 <USBD_LL_PrepareReceive>:
{
 8008f08:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f0a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008f0e:	f7fd fcae 	bl	800686e <HAL_PCD_EP_Receive>
}
 8008f12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f16:	f7ff bef7 	b.w	8008d08 <USBD_Get_USB_Status>

08008f1a <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f1a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008f1e:	f7fd bcbd 	b.w	800689c <HAL_PCD_EP_GetRxCount>
	...

08008f24 <USBD_static_malloc>:
}
 8008f24:	4800      	ldr	r0, [pc, #0]	; (8008f28 <USBD_static_malloc+0x4>)
 8008f26:	4770      	bx	lr
 8008f28:	2000132c 	.word	0x2000132c

08008f2c <USBD_static_free>:
}
 8008f2c:	4770      	bx	lr

08008f2e <HAL_PCDEx_SetConnectionState>:
}
 8008f2e:	4770      	bx	lr

08008f30 <main>:




int main(void)
{
 8008f30:	b508      	push	{r3, lr}
  hwInit();
 8008f32:	f7fc fbc7 	bl	80056c4 <hwInit>
  apInit();
 8008f36:	f7fc f909 	bl	800514c <apInit>

  apMain();
 8008f3a:	f7fc f914 	bl	8005166 <apMain>

  return 0;
}
 8008f3e:	2000      	movs	r0, #0
 8008f40:	bd08      	pop	{r3, pc}
	...

08008f44 <__libc_init_array>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	2600      	movs	r6, #0
 8008f48:	4d0c      	ldr	r5, [pc, #48]	; (8008f7c <__libc_init_array+0x38>)
 8008f4a:	4c0d      	ldr	r4, [pc, #52]	; (8008f80 <__libc_init_array+0x3c>)
 8008f4c:	1b64      	subs	r4, r4, r5
 8008f4e:	10a4      	asrs	r4, r4, #2
 8008f50:	42a6      	cmp	r6, r4
 8008f52:	d109      	bne.n	8008f68 <__libc_init_array+0x24>
 8008f54:	f000 f822 	bl	8008f9c <_init>
 8008f58:	2600      	movs	r6, #0
 8008f5a:	4d0a      	ldr	r5, [pc, #40]	; (8008f84 <__libc_init_array+0x40>)
 8008f5c:	4c0a      	ldr	r4, [pc, #40]	; (8008f88 <__libc_init_array+0x44>)
 8008f5e:	1b64      	subs	r4, r4, r5
 8008f60:	10a4      	asrs	r4, r4, #2
 8008f62:	42a6      	cmp	r6, r4
 8008f64:	d105      	bne.n	8008f72 <__libc_init_array+0x2e>
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6c:	4798      	blx	r3
 8008f6e:	3601      	adds	r6, #1
 8008f70:	e7ee      	b.n	8008f50 <__libc_init_array+0xc>
 8008f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f76:	4798      	blx	r3
 8008f78:	3601      	adds	r6, #1
 8008f7a:	e7f2      	b.n	8008f62 <__libc_init_array+0x1e>
 8008f7c:	08009024 	.word	0x08009024
 8008f80:	08009024 	.word	0x08009024
 8008f84:	08009024 	.word	0x08009024
 8008f88:	08009028 	.word	0x08009028

08008f8c <memset>:
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	4402      	add	r2, r0
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d100      	bne.n	8008f96 <memset+0xa>
 8008f94:	4770      	bx	lr
 8008f96:	f803 1b01 	strb.w	r1, [r3], #1
 8008f9a:	e7f9      	b.n	8008f90 <memset+0x4>

08008f9c <_init>:
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9e:	bf00      	nop
 8008fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa2:	bc08      	pop	{r3}
 8008fa4:	469e      	mov	lr, r3
 8008fa6:	4770      	bx	lr

08008fa8 <_fini>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	bf00      	nop
 8008fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fae:	bc08      	pop	{r3}
 8008fb0:	469e      	mov	lr, r3
 8008fb2:	4770      	bx	lr
