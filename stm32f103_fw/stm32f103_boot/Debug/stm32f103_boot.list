
stm32f103_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003bcc  08003bcc  00013bcc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c74  08003c74  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  08003c74  08003c74  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c74  08003c74  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c78  08003c78  00013c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08003c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f28  200000f8  08003d70  000200f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001020  08003d70  00021020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013400  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a50  00000000  00000000  0003351d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009d9e  00000000  00000000  00037f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00041d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016f8  00000000  00000000  00042a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6e1  00000000  00000000  000440f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3eb  00000000  00000000  000607d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087e15  00000000  00000000  0007dbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001059d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ec4  00000000  00000000  00105a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f8 	.word	0x200000f8
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bb4 	.word	0x08003bb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000fc 	.word	0x200000fc
 8000148:	08003bb4 	.word	0x08003bb4

0800014c <apInit>:



void apInit(void)
{
}
 800014c:	4770      	bx	lr

0800014e <apMain>:



void apMain(void)
{
 800014e:	b510      	push	{r4, lr}
  uint32_t pre_time;
  uint32_t led_blink_time = 100;

  pre_time = millis();
 8000150:	f000 f80f 	bl	8000172 <millis>
 8000154:	4604      	mov	r4, r0

  while(1)
  {
    if ( millis()-pre_time >= led_blink_time)
 8000156:	f000 f80c 	bl	8000172 <millis>
 800015a:	1b00      	subs	r0, r0, r4
 800015c:	2863      	cmp	r0, #99	; 0x63
 800015e:	d9fa      	bls.n	8000156 <apMain+0x8>
    {
      pre_time = millis();
 8000160:	f000 f807 	bl	8000172 <millis>
 8000164:	4604      	mov	r4, r0
      ledToggle(_DEF_LED1);
 8000166:	2000      	movs	r0, #0
 8000168:	f000 f9a4 	bl	80004b4 <ledToggle>
 800016c:	e7f3      	b.n	8000156 <apMain+0x8>

0800016e <delay>:

}

void delay(uint32_t ms)
{
 HAL_Delay(ms);
 800016e:	f000 bad5 	b.w	800071c <HAL_Delay>

08000172 <millis>:
}
uint32_t millis(void)
{
  return HAL_GetTick();
 8000172:	f000 bacd 	b.w	8000710 <HAL_GetTick>

08000176 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8000176:	b510      	push	{r4, lr}
 8000178:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017a:	2214      	movs	r2, #20
 800017c:	2100      	movs	r1, #0
 800017e:	a80c      	add	r0, sp, #48	; 0x30
 8000180:	f003 fd10 	bl	8003ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000184:	2214      	movs	r2, #20
 8000186:	2100      	movs	r1, #0
 8000188:	eb0d 0002 	add.w	r0, sp, r2
 800018c:	f003 fd0a 	bl	8003ba4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000190:	2210      	movs	r2, #16
 8000192:	2100      	movs	r1, #0
 8000194:	a801      	add	r0, sp, #4
 8000196:	f003 fd05 	bl	8003ba4 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a0:	2105      	movs	r1, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80001a2:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a4:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a8:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b0:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b2:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f001 fbfa 	bl	80019b0 <HAL_RCC_OscConfig>
 80001bc:	b108      	cbz	r0, 80001c2 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001be:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001c0:	e7fe      	b.n	80001c0 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c4:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001cc:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ce:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d2:	4621      	mov	r1, r4
 80001d4:	a805      	add	r0, sp, #20
 80001d6:	f001 fdc1 	bl	8001d5c <HAL_RCC_ClockConfig>
 80001da:	b108      	cbz	r0, 80001e0 <SystemClock_Config+0x6a>
 80001dc:	b672      	cpsid	i
  while (1)
 80001de:	e7fe      	b.n	80001de <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80001e0:	2211      	movs	r2, #17
 80001e2:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001e6:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001e8:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80001ea:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001ee:	f001 fe61 	bl	8001eb4 <HAL_RCCEx_PeriphCLKConfig>
 80001f2:	b108      	cbz	r0, 80001f8 <SystemClock_Config+0x82>
 80001f4:	b672      	cpsid	i
  while (1)
 80001f6:	e7fe      	b.n	80001f6 <SystemClock_Config+0x80>
}
 80001f8:	b014      	add	sp, #80	; 0x50
 80001fa:	bd10      	pop	{r4, pc}

080001fc <bspInit>:
{
 80001fc:	b570      	push	{r4, r5, r6, lr}
 80001fe:	b088      	sub	sp, #32
  HAL_Init();
 8000200:	f000 fa68 	bl	80006d4 <HAL_Init>
  SystemClock_Config();
 8000204:	f7ff ffb7 	bl	8000176 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <bspInit+0x80>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800020a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800020e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000210:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000212:	f042 0220 	orr.w	r2, r2, #32
 8000216:	619a      	str	r2, [r3, #24]
 8000218:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	4c19      	ldr	r4, [pc, #100]	; (8000280 <bspInit+0x84>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800021c:	f002 0220 	and.w	r2, r2, #32
 8000220:	9200      	str	r2, [sp, #0]
 8000222:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000226:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000228:	f042 0204 	orr.w	r2, r2, #4
 800022c:	619a      	str	r2, [r3, #24]
 800022e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000232:	f002 0204 	and.w	r2, r2, #4
 8000236:	9201      	str	r2, [sp, #4]
 8000238:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023a:	699a      	ldr	r2, [r3, #24]
 800023c:	f042 0208 	orr.w	r2, r2, #8
 8000240:	619a      	str	r2, [r3, #24]
 8000242:	699a      	ldr	r2, [r3, #24]
 8000244:	f002 0208 	and.w	r2, r2, #8
 8000248:	9202      	str	r2, [sp, #8]
 800024a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024c:	699a      	ldr	r2, [r3, #24]
 800024e:	f042 0210 	orr.w	r2, r2, #16
 8000252:	619a      	str	r2, [r3, #24]
 8000254:	699b      	ldr	r3, [r3, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	9606      	str	r6, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000258:	f003 0310 	and.w	r3, r3, #16
 800025c:	9303      	str	r3, [sp, #12]
 800025e:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000260:	2311      	movs	r3, #17
 8000262:	e9cd 5304 	strd	r5, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000266:	2302      	movs	r3, #2
 8000268:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800026a:	f000 fbf3 	bl	8000a54 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800026e:	4632      	mov	r2, r6
 8000270:	4629      	mov	r1, r5
 8000272:	4620      	mov	r0, r4
 8000274:	f000 fcc8 	bl	8000c08 <HAL_GPIO_WritePin>
}
 8000278:	b008      	add	sp, #32
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	40021000 	.word	0x40021000
 8000280:	40010800 	.word	0x40010800

08000284 <Error_Handler>:
 8000284:	b672      	cpsid	i
  while (1)
 8000286:	e7fe      	b.n	8000286 <Error_Handler+0x2>

08000288 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000288:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <HAL_MspInit+0x3c>)
{
 800028a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800028c:	699a      	ldr	r2, [r3, #24]
 800028e:	f042 0201 	orr.w	r2, r2, #1
 8000292:	619a      	str	r2, [r3, #24]
 8000294:	699a      	ldr	r2, [r3, #24]
 8000296:	f002 0201 	and.w	r2, r2, #1
 800029a:	9200      	str	r2, [sp, #0]
 800029c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800029e:	69da      	ldr	r2, [r3, #28]
 80002a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002a4:	61da      	str	r2, [r3, #28]
 80002a6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002a8:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80002aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002b2:	6853      	ldr	r3, [r2, #4]
 80002b4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002be:	b002      	add	sp, #8
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010000 	.word	0x40010000

080002cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <NMI_Handler>

080002ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <HardFault_Handler>

080002d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <MemManage_Handler>

080002d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <BusFault_Handler>

080002d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <UsageFault_Handler>

080002d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002d6:	4770      	bx	lr

080002d8 <DebugMon_Handler>:
 80002d8:	4770      	bx	lr

080002da <PendSV_Handler>:
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002dc:	f000 ba0c 	b.w	80006f8 <HAL_IncTick>

080002e0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80002e0:	4801      	ldr	r0, [pc, #4]	; (80002e8 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80002e2:	f000 bd5f 	b.w	8000da4 <HAL_PCD_IRQHandler>
 80002e6:	bf00      	nop
 80002e8:	20000914 	.word	0x20000914

080002ec <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002ec:	4770      	bx	lr
	...

080002f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	; (8000324 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	; (8000328 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	; (8000334 <LoopFillZerobss+0x22>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000316:	f7ff ffe9 	bl	80002ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800031a:	f003 fc1f 	bl	8003b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f003 fc13 	bl	8003b48 <main>
  bx lr
 8000322:	4770      	bx	lr
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 800032c:	08003c7c 	.word	0x08003c7c
  ldr r2, =_sbss
 8000330:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8000334:	20001020 	.word	0x20001020

08000338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC1_2_IRQHandler>
	...

0800033c <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 800033c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
  {
    flash_tbl[i].addr   = (0x8000000 + i*1024);
    flash_tbl[i].length = 1024;
 8000340:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000344:	4a05      	ldr	r2, [pc, #20]	; (800035c <flashInit+0x20>)
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8000346:	4906      	ldr	r1, [pc, #24]	; (8000360 <flashInit+0x24>)
    flash_tbl[i].addr   = (0x8000000 + i*1024);
 8000348:	6013      	str	r3, [r2, #0]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800034a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800034e:	428b      	cmp	r3, r1
    flash_tbl[i].length = 1024;
 8000350:	8090      	strh	r0, [r2, #4]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8000352:	f102 0208 	add.w	r2, r2, #8
 8000356:	d1f7      	bne.n	8000348 <flashInit+0xc>
  }

  return true;
}
 8000358:	2001      	movs	r0, #1
 800035a:	4770      	bx	lr
 800035c:	20000114 	.word	0x20000114
 8000360:	08010000 	.word	0x08010000

08000364 <flashErase>:

  int16_t start_sector_num = -1;
  uint32_t sector_count = 0;


  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8000364:	2300      	movs	r3, #0
{
 8000366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000368:	4a24      	ldr	r2, [pc, #144]	; (80003fc <flashErase+0x98>)
  int16_t start_sector_num = -1;
 800036a:	f04f 36ff 	mov.w	r6, #4294967295
  uint32_t sector_count = 0;
 800036e:	461c      	mov	r4, r3
 8000370:	4617      	mov	r7, r2
  uint32_t flash_end;

  sector_start = flash_tbl[sector_num].addr;
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
  flash_start  = addr;
  flash_end    = addr + length - 1;
 8000372:	4431      	add	r1, r6
{
 8000374:	b087      	sub	sp, #28
  flash_end    = addr + length - 1;
 8000376:	4401      	add	r1, r0
  sector_start = flash_tbl[sector_num].addr;
 8000378:	f8d2 c000 	ldr.w	ip, [r2]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 800037c:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 8000380:	f10c 35ff 	add.w	r5, ip, #4294967295

  if (sector_start >= flash_start && sector_start <= flash_end)
 8000384:	4560      	cmp	r0, ip
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8000386:	4475      	add	r5, lr
  if (sector_start >= flash_start && sector_start <= flash_end)
 8000388:	d834      	bhi.n	80003f4 <flashErase+0x90>
 800038a:	458c      	cmp	ip, r1
 800038c:	bf8c      	ite	hi
 800038e:	f04f 0e00 	movhi.w	lr, #0
 8000392:	f04f 0e01 	movls.w	lr, #1
  {
    ret = true;
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8000396:	42a8      	cmp	r0, r5
 8000398:	d805      	bhi.n	80003a6 <flashErase+0x42>
  {
    ret = true;
 800039a:	428d      	cmp	r5, r1
 800039c:	bf98      	it	ls
 800039e:	f04f 0e01 	movls.w	lr, #1
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80003a2:	4560      	cmp	r0, ip
 80003a4:	d206      	bcs.n	80003b4 <flashErase+0x50>
  {
    ret = true;
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80003a6:	458c      	cmp	ip, r1
 80003a8:	d801      	bhi.n	80003ae <flashErase+0x4a>
 80003aa:	428d      	cmp	r5, r1
 80003ac:	d202      	bcs.n	80003b4 <flashErase+0x50>
    if(flashInSector(i, addr, length) == true)
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d003      	beq.n	80003bc <flashErase+0x58>
      if(start_sector_num < 0)
 80003b4:	1c75      	adds	r5, r6, #1
        start_sector_num = i;
 80003b6:	bf08      	it	eq
 80003b8:	b21e      	sxtheq	r6, r3
      sector_count++;
 80003ba:	3401      	adds	r4, #1
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80003bc:	3301      	adds	r3, #1
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	f102 0208 	add.w	r2, r2, #8
 80003c4:	d1d8      	bne.n	8000378 <flashErase+0x14>
  if(sector_count > 0)
 80003c6:	b194      	cbz	r4, 80003ee <flashErase+0x8a>
    HAL_FLASH_Unlock();
 80003c8:	f000 fa48 	bl	800085c <HAL_FLASH_Unlock>
    init.Banks       = FLASH_BANK_1;
 80003cc:	2200      	movs	r2, #0
 80003ce:	2301      	movs	r3, #1
 80003d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    init.PageAddress = flash_tbl[start_sector_num].addr;
 80003d4:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
    status = HAL_FLASHEx_Erase(&init, &page_error);
 80003d8:	a901      	add	r1, sp, #4
 80003da:	a802      	add	r0, sp, #8
    init.NbPages     = sector_count;
 80003dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
    status = HAL_FLASHEx_Erase(&init, &page_error);
 80003e0:	f000 fae4 	bl	80009ac <HAL_FLASHEx_Erase>
    if (status == HAL_OK)
 80003e4:	fab0 f480 	clz	r4, r0
 80003e8:	0964      	lsrs	r4, r4, #5
    HAL_FLASH_Lock();
 80003ea:	f000 fa49 	bl	8000880 <HAL_FLASH_Lock>
}
 80003ee:	4620      	mov	r0, r4
 80003f0:	b007      	add	sp, #28
 80003f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool ret = false;
 80003f4:	f04f 0e00 	mov.w	lr, #0
 80003f8:	e7cd      	b.n	8000396 <flashErase+0x32>
 80003fa:	bf00      	nop
 80003fc:	20000114 	.word	0x20000114

08000400 <flashWrite>:
{
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (addr%2 != 0)
 8000402:	f010 0501 	ands.w	r5, r0, #1
{
 8000406:	4606      	mov	r6, r0
 8000408:	460c      	mov	r4, r1
 800040a:	4617      	mov	r7, r2
  if (addr%2 != 0)
 800040c:	d119      	bne.n	8000442 <flashWrite+0x42>
  HAL_FLASH_Unlock();
 800040e:	f000 fa25 	bl	800085c <HAL_FLASH_Unlock>
  for (int i=0; i<length; i+=2)
 8000412:	3401      	adds	r4, #1
 8000414:	42af      	cmp	r7, r5
 8000416:	d804      	bhi.n	8000422 <flashWrite+0x22>
  bool ret = true;
 8000418:	2401      	movs	r4, #1
  HAL_FLASH_Lock();
 800041a:	f000 fa31 	bl	8000880 <HAL_FLASH_Lock>
}
 800041e:	4620      	mov	r0, r4
 8000420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    data |= p_data[i+1] << 8;
 8000422:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8000426:	7822      	ldrb	r2, [r4, #0]
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 8000428:	2001      	movs	r0, #1
 800042a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800042e:	1971      	adds	r1, r6, r5
 8000430:	2300      	movs	r3, #0
 8000432:	f000 fa59 	bl	80008e8 <HAL_FLASH_Program>
    if (status != HAL_OK)
 8000436:	3402      	adds	r4, #2
 8000438:	b908      	cbnz	r0, 800043e <flashWrite+0x3e>
  for (int i=0; i<length; i+=2)
 800043a:	3502      	adds	r5, #2
 800043c:	e7ea      	b.n	8000414 <flashWrite+0x14>
      ret = false;
 800043e:	2400      	movs	r4, #0
 8000440:	e7eb      	b.n	800041a <flashWrite+0x1a>
    return false;
 8000442:	2400      	movs	r4, #0
 8000444:	e7eb      	b.n	800041e <flashWrite+0x1e>
	...

08000448 <ledOff>:
}


void ledOff(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 8000448:	2802      	cmp	r0, #2
 800044a:	d808      	bhi.n	800045e <ledOff+0x16>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <ledOff+0x18>)
 800044e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8000452:	79ca      	ldrb	r2, [r1, #7]
 8000454:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8000458:	8889      	ldrh	r1, [r1, #4]
 800045a:	f000 bbd5 	b.w	8000c08 <HAL_GPIO_WritePin>
}
 800045e:	4770      	bx	lr
 8000460:	20000004 	.word	0x20000004

08000464 <ledInit>:
{
 8000464:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	2400      	movs	r4, #0
{
 8000468:	b087      	sub	sp, #28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <ledInit+0x48>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046c:	9404      	str	r4, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	699a      	ldr	r2, [r3, #24]
 8000470:	4d0f      	ldr	r5, [pc, #60]	; (80004b0 <ledInit+0x4c>)
 8000472:	f042 0208 	orr.w	r2, r2, #8
 8000476:	619a      	str	r2, [r3, #24]
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f003 0308 	and.w	r3, r3, #8
 800047e:	9301      	str	r3, [sp, #4]
 8000480:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2302      	movs	r3, #2
 8000488:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800048a:	88ab      	ldrh	r3, [r5, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800048c:	a902      	add	r1, sp, #8
 800048e:	f855 0b08 	ldr.w	r0, [r5], #8
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000492:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000494:	f000 fade 	bl	8000a54 <HAL_GPIO_Init>
    ledOff(i);
 8000498:	b2e0      	uxtb	r0, r4
  for (int i=0; i<LED_MAX_CH; i++)
 800049a:	3401      	adds	r4, #1
    ledOff(i);
 800049c:	f7ff ffd4 	bl	8000448 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 80004a0:	2c03      	cmp	r4, #3
 80004a2:	d1f2      	bne.n	800048a <ledInit+0x26>
}
 80004a4:	2001      	movs	r0, #1
 80004a6:	b007      	add	sp, #28
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000
 80004b0:	20000004 	.word	0x20000004

080004b4 <ledToggle>:


void ledToggle(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 80004b4:	2802      	cmp	r0, #2
 80004b6:	d807      	bhi.n	80004c8 <ledToggle+0x14>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <ledToggle+0x18>)
 80004ba:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80004be:	8891      	ldrh	r1, [r2, #4]
 80004c0:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80004c4:	f000 bba5 	b.w	8000c12 <HAL_GPIO_TogglePin>
}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000004 	.word	0x20000004

080004d0 <resetInit>:
{
	bool ret = true;


	//만약 Reset 핀이 눌렸다면
	if (RCC->CSR == (1<<26))
 80004d0:	4b1e      	ldr	r3, [pc, #120]	; (800054c <resetInit+0x7c>)
{
 80004d2:	b510      	push	{r4, lr}
	if (RCC->CSR == (1<<26))
 80004d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d6:	4c1e      	ldr	r4, [pc, #120]	; (8000550 <resetInit+0x80>)
 80004d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80004dc:	d10e      	bne.n	80004fc <resetInit+0x2c>
	{
	  rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f000 f860 	bl	80005a4 <rtcBackupRegRead>
 80004e4:	1c41      	adds	r1, r0, #1
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 f862 	bl	80005b0 <rtcBackupRegWrite>
	  delay(500);
 80004ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f0:	f7ff fe3d 	bl	800016e <delay>
	  reset_count = rtcBackupRegRead(1);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f000 f855 	bl	80005a4 <rtcBackupRegRead>
 80004fa:	6020      	str	r0, [r4, #0]
	}

	rtcBackupRegWrite(1, 0);
 80004fc:	2100      	movs	r1, #0
 80004fe:	2001      	movs	r0, #1
 8000500:	f000 f856 	bl	80005b0 <rtcBackupRegWrite>

	if (reset_count != 2)
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d01d      	beq.n	8000546 <resetInit+0x76>
	{
	  void (**jump_func)() = (void(**)())(0x8005000 + 4);

	  if ((uint32_t)(*jump_func) != 0xFFFFFFFF)
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <resetInit+0x84>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	3301      	adds	r3, #1
 8000510:	d019      	beq.n	8000546 <resetInit+0x76>
    {
      HAL_RCC_DeInit();
 8000512:	f001 f9e1 	bl	80018d8 <HAL_RCC_DeInit>
      HAL_DeInit();
 8000516:	f000 f8a9 	bl	800066c <HAL_DeInit>

      for(int i=0; i<8; i++)
 800051a:	2300      	movs	r3, #0
      {
        NVIC->ICER[i] = 0xFFFFFFFF;
 800051c:	f04f 30ff 	mov.w	r0, #4294967295
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <resetInit+0x88>)
 8000522:	f103 0120 	add.w	r1, r3, #32
 8000526:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800052a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800052e:	f3bf 8f6f 	isb	sy
      for(int i=0; i<8; i++)
 8000532:	3301      	adds	r3, #1
 8000534:	2b08      	cmp	r3, #8
 8000536:	d1f4      	bne.n	8000522 <resetInit+0x52>
        __DSB();
        __ISB();
      }
      SysTick->CTRL = 0;
 8000538:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]

      (*jump_func)();
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <resetInit+0x84>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	4798      	blx	r3
    }
	}

	return ret;
}
 8000546:	2001      	movs	r0, #1
 8000548:	bd10      	pop	{r4, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	20000314 	.word	0x20000314
 8000554:	08005000 	.word	0x08005000
 8000558:	e000e100 	.word	0xe000e100

0800055c <rtcInit>:

bool rtcInit(void)
{
	bool ret = true;

	__HAL_RCC_GPIOC_CLK_ENABLE();
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <rtcInit+0x3c>)
{
 800055e:	b507      	push	{r0, r1, r2, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000560:	699a      	ldr	r2, [r3, #24]

	/** Initialize RTC Only	  */
	hrtc.Instance 			= RTC;
 8000562:	480e      	ldr	r0, [pc, #56]	; (800059c <rtcInit+0x40>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000564:	f042 0210 	orr.w	r2, r2, #16
 8000568:	619a      	str	r2, [r3, #24]
 800056a:	699b      	ldr	r3, [r3, #24]
	hrtc.Init.AsynchPrediv 	= RTC_AUTO_1_SECOND;
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <rtcInit+0x44>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	f003 0310 	and.w	r3, r3, #16
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	9b01      	ldr	r3, [sp, #4]
	hrtc.Init.AsynchPrediv 	= RTC_AUTO_1_SECOND;
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	e9c0 2300 	strd	r2, r3, [r0]
	hrtc.Init.OutPut 		= RTC_OUTPUTSOURCE_ALARM;
 800057e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000582:	6083      	str	r3, [r0, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000584:	f001 fdcc 	bl	8002120 <HAL_RTC_Init>
 8000588:	b108      	cbz	r0, 800058e <rtcInit+0x32>
	{
	  Error_Handler();
 800058a:	f7ff fe7b 	bl	8000284 <Error_Handler>
	}

	return ret;
}
 800058e:	2001      	movs	r0, #1
 8000590:	b003      	add	sp, #12
 8000592:	f85d fb04 	ldr.w	pc, [sp], #4
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000
 800059c:	20000318 	.word	0x20000318
 80005a0:	40002800 	.word	0x40002800

080005a4 <rtcBackupRegRead>:


uint32_t rtcBackupRegRead(uint32_t index)
{
 80005a4:	4601      	mov	r1, r0
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 80005a6:	4801      	ldr	r0, [pc, #4]	; (80005ac <rtcBackupRegRead+0x8>)
 80005a8:	f001 be10 	b.w	80021cc <HAL_RTCEx_BKUPRead>
 80005ac:	20000318 	.word	0x20000318

080005b0 <rtcBackupRegWrite>:
}

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80005b0:	460a      	mov	r2, r1
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80005b2:	4601      	mov	r1, r0
 80005b4:	4801      	ldr	r0, [pc, #4]	; (80005bc <rtcBackupRegWrite+0xc>)
 80005b6:	f001 be01 	b.w	80021bc <HAL_RTCEx_BKUPWrite>
 80005ba:	bf00      	nop
 80005bc:	20000318 	.word	0x20000318

080005c0 <HAL_RTC_MspInit>:
}


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80005c0:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_RTC_MspInit+0x30>)
 80005c4:	6802      	ldr	r2, [r0, #0]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d10f      	bne.n	80005ea <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80005ca:	f001 f97f 	bl	80018cc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_RTC_MspInit+0x34>)
 80005d0:	69da      	ldr	r2, [r3, #28]
 80005d2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80005d6:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005d8:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <HAL_RTC_MspInit+0x38>)
 80005e6:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80005ea:	b003      	add	sp, #12
 80005ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80005f0:	40002800 	.word	0x40002800
 80005f4:	40021000 	.word	0x40021000
 80005f8:	42420000 	.word	0x42420000

080005fc <usbInit>:

#include "usb.h"
#include "usb_device.h"

bool usbInit(void)
{
 80005fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005fe:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000602:	2311      	movs	r3, #17
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	2500      	movs	r5, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000606:	e9cd 6300 	strd	r6, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	4c0e      	ldr	r4, [pc, #56]	; (8000648 <usbInit+0x4c>)
 800060e:	4669      	mov	r1, sp
 8000610:	4620      	mov	r0, r4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	9303      	str	r3, [sp, #12]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f000 fa1d 	bl	8000a54 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800061a:	462a      	mov	r2, r5
 800061c:	4631      	mov	r1, r6
 800061e:	4620      	mov	r0, r4
 8000620:	f000 faf2 	bl	8000c08 <HAL_GPIO_WritePin>
	delay(200);
 8000624:	20c8      	movs	r0, #200	; 0xc8
 8000626:	f7ff fda2 	bl	800016e <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	4631      	mov	r1, r6
 800062e:	4620      	mov	r0, r4
 8000630:	f000 faea 	bl	8000c08 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	4620      	mov	r0, r4
 8000636:	4669      	mov	r1, sp
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f000 fa0b 	bl	8000a54 <HAL_GPIO_Init>


	MX_USB_DEVICE_Init();
 800063e:	f003 f8bf 	bl	80037c0 <MX_USB_DEVICE_Init>

	return ret;

}
 8000642:	2001      	movs	r0, #1
 8000644:	b004      	add	sp, #16
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	40010800 	.word	0x40010800

0800064c <hwInit>:




void hwInit(void)
{
 800064c:	b508      	push	{r3, lr}
  bspInit();
 800064e:	f7ff fdd5 	bl	80001fc <bspInit>
  rtcInit();
 8000652:	f7ff ff83 	bl	800055c <rtcInit>

  resetInit();
 8000656:	f7ff ff3b 	bl	80004d0 <resetInit>
  ledInit();
 800065a:	f7ff ff03 	bl	8000464 <ledInit>
  usbInit();
 800065e:	f7ff ffcd 	bl	80005fc <usbInit>

  flashInit();

}
 8000662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flashInit();
 8000666:	f7ff be69 	b.w	800033c <flashInit>

0800066a <HAL_MspDeInit>:
 800066a:	4770      	bx	lr

0800066c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800066c:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800066e:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 8000672:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <HAL_DeInit+0x1c>)
 8000676:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000678:	611c      	str	r4, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800067a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800067c:	60dc      	str	r4, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800067e:	f7ff fff4 	bl	800066a <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
}
 8000682:	4620      	mov	r0, r4
 8000684:	bd10      	pop	{r4, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_InitTick+0x3c>)
{
 8000690:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000692:	7818      	ldrb	r0, [r3, #0]
 8000694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000698:	fbb3 f3f0 	udiv	r3, r3, r0
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <HAL_InitTick+0x40>)
 800069e:	6810      	ldr	r0, [r2, #0]
 80006a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80006a4:	f000 f89e 	bl	80007e4 <HAL_SYSTICK_Config>
 80006a8:	4604      	mov	r4, r0
 80006aa:	b958      	cbnz	r0, 80006c4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ac:	2d0f      	cmp	r5, #15
 80006ae:	d809      	bhi.n	80006c4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b0:	4602      	mov	r2, r0
 80006b2:	4629      	mov	r1, r5
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295
 80006b8:	f000 f854 	bl	8000764 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006bc:	4620      	mov	r0, r4
 80006be:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <HAL_InitTick+0x44>)
 80006c0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80006c4:	2001      	movs	r0, #1
 80006c6:	e7fc      	b.n	80006c2 <HAL_InitTick+0x36>
 80006c8:	2000001c 	.word	0x2000001c
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000020 	.word	0x20000020

080006d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_Init+0x20>)
{
 80006d6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006da:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006dc:	f043 0310 	orr.w	r3, r3, #16
 80006e0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e2:	f000 f82d 	bl	8000740 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e6:	200f      	movs	r0, #15
 80006e8:	f7ff ffd0 	bl	800068c <HAL_InitTick>
  HAL_MspInit();
 80006ec:	f7ff fdcc 	bl	8000288 <HAL_MspInit>
}
 80006f0:	2000      	movs	r0, #0
 80006f2:	bd08      	pop	{r3, pc}
 80006f4:	40022000 	.word	0x40022000

080006f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006f8:	4a03      	ldr	r2, [pc, #12]	; (8000708 <HAL_IncTick+0x10>)
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <HAL_IncTick+0x14>)
 80006fc:	6811      	ldr	r1, [r2, #0]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	440b      	add	r3, r1
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	2000032c 	.word	0x2000032c
 800070c:	2000001c 	.word	0x2000001c

08000710 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000710:	4b01      	ldr	r3, [pc, #4]	; (8000718 <HAL_GetTick+0x8>)
 8000712:	6818      	ldr	r0, [r3, #0]
}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	2000032c 	.word	0x2000032c

0800071c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800071c:	b538      	push	{r3, r4, r5, lr}
 800071e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000720:	f7ff fff6 	bl	8000710 <HAL_GetTick>
 8000724:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000726:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000728:	bf1e      	ittt	ne
 800072a:	4b04      	ldrne	r3, [pc, #16]	; (800073c <HAL_Delay+0x20>)
 800072c:	781b      	ldrbne	r3, [r3, #0]
 800072e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000730:	f7ff ffee 	bl	8000710 <HAL_GetTick>
 8000734:	1b43      	subs	r3, r0, r5
 8000736:	42a3      	cmp	r3, r4
 8000738:	d3fa      	bcc.n	8000730 <HAL_Delay+0x14>
  {
  }
}
 800073a:	bd38      	pop	{r3, r4, r5, pc}
 800073c:	2000001c 	.word	0x2000001c

08000740 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000740:	4907      	ldr	r1, [pc, #28]	; (8000760 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000742:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800074e:	0412      	lsls	r2, r2, #16
 8000750:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800075c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	68dc      	ldr	r4, [r3, #12]
 800076a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	2b04      	cmp	r3, #4
 8000776:	bf28      	it	cs
 8000778:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000780:	bf98      	it	ls
 8000782:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000788:	bf88      	it	hi
 800078a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	ea21 0303 	bic.w	r3, r1, r3
 8000790:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000792:	fa05 f404 	lsl.w	r4, r5, r4
 8000796:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800079a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	bfac      	ite	ge
 80007a2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	4a07      	ldrlt	r2, [pc, #28]	; (80007c4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	bfab      	itete	ge
 80007b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007be:	bd30      	pop	{r4, r5, pc}
 80007c0:	e000ed00 	.word	0xe000ed00
 80007c4:	e000ed14 	.word	0xe000ed14

080007c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007c8:	2800      	cmp	r0, #0
 80007ca:	db08      	blt.n	80007de <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007cc:	2301      	movs	r3, #1
 80007ce:	0942      	lsrs	r2, r0, #5
 80007d0:	f000 001f 	and.w	r0, r0, #31
 80007d4:	fa03 f000 	lsl.w	r0, r3, r0
 80007d8:	4b01      	ldr	r3, [pc, #4]	; (80007e0 <HAL_NVIC_EnableIRQ+0x18>)
 80007da:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007de:	4770      	bx	lr
 80007e0:	e000e100 	.word	0xe000e100

080007e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e4:	3801      	subs	r0, #1
 80007e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ea:	d20b      	bcs.n	8000804 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f0:	21f0      	movs	r1, #240	; 0xf0
 80007f2:	4a05      	ldr	r2, [pc, #20]	; (8000808 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fe:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000800:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000802:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000804:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800080c:	4a11      	ldr	r2, [pc, #68]	; (8000854 <FLASH_SetErrorCode+0x48>)
 800080e:	68d3      	ldr	r3, [r2, #12]
 8000810:	f013 0310 	ands.w	r3, r3, #16
 8000814:	d005      	beq.n	8000822 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000816:	4910      	ldr	r1, [pc, #64]	; (8000858 <FLASH_SetErrorCode+0x4c>)
 8000818:	69cb      	ldr	r3, [r1, #28]
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000820:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000822:	68d2      	ldr	r2, [r2, #12]
 8000824:	0750      	lsls	r0, r2, #29
 8000826:	d506      	bpl.n	8000836 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000828:	490b      	ldr	r1, [pc, #44]	; (8000858 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800082a:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800082e:	69ca      	ldr	r2, [r1, #28]
 8000830:	f042 0201 	orr.w	r2, r2, #1
 8000834:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000836:	4a07      	ldr	r2, [pc, #28]	; (8000854 <FLASH_SetErrorCode+0x48>)
 8000838:	69d1      	ldr	r1, [r2, #28]
 800083a:	07c9      	lsls	r1, r1, #31
 800083c:	d508      	bpl.n	8000850 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <FLASH_SetErrorCode+0x4c>)
 8000840:	69c1      	ldr	r1, [r0, #28]
 8000842:	f041 0104 	orr.w	r1, r1, #4
 8000846:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000848:	69d1      	ldr	r1, [r2, #28]
 800084a:	f021 0101 	bic.w	r1, r1, #1
 800084e:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000850:	60d3      	str	r3, [r2, #12]
}  
 8000852:	4770      	bx	lr
 8000854:	40022000 	.word	0x40022000
 8000858:	20000330 	.word	0x20000330

0800085c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_FLASH_Unlock+0x1c>)
 800085e:	6918      	ldr	r0, [r3, #16]
 8000860:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000864:	d007      	beq.n	8000876 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <HAL_FLASH_Unlock+0x20>)
 8000868:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800086a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800086e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000870:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000872:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000876:	4770      	bx	lr
 8000878:	40022000 	.word	0x40022000
 800087c:	45670123 	.word	0x45670123

08000880 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000880:	4a03      	ldr	r2, [pc, #12]	; (8000890 <HAL_FLASH_Lock+0x10>)
}
 8000882:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000884:	6913      	ldr	r3, [r2, #16]
 8000886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088a:	6113      	str	r3, [r2, #16]
}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40022000 	.word	0x40022000

08000894 <FLASH_WaitForLastOperation>:
{
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff ff3a 	bl	8000710 <HAL_GetTick>
 800089c:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800089e:	4c11      	ldr	r4, [pc, #68]	; (80008e4 <FLASH_WaitForLastOperation+0x50>)
 80008a0:	68e3      	ldr	r3, [r4, #12]
 80008a2:	07d8      	lsls	r0, r3, #31
 80008a4:	d412      	bmi.n	80008cc <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80008a6:	68e3      	ldr	r3, [r4, #12]
 80008a8:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80008aa:	bf44      	itt	mi
 80008ac:	2320      	movmi	r3, #32
 80008ae:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80008b0:	68e3      	ldr	r3, [r4, #12]
 80008b2:	06da      	lsls	r2, r3, #27
 80008b4:	d406      	bmi.n	80008c4 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80008b6:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80008b8:	07db      	lsls	r3, r3, #31
 80008ba:	d403      	bmi.n	80008c4 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80008bc:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80008be:	f010 0004 	ands.w	r0, r0, #4
 80008c2:	d007      	beq.n	80008d4 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 80008c4:	f7ff ffa2 	bl	800080c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80008c8:	2001      	movs	r0, #1
 80008ca:	e003      	b.n	80008d4 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 80008cc:	1c6b      	adds	r3, r5, #1
 80008ce:	d0e7      	beq.n	80008a0 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80008d0:	b90d      	cbnz	r5, 80008d6 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 80008d2:	2003      	movs	r0, #3
}
 80008d4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80008d6:	f7ff ff1b 	bl	8000710 <HAL_GetTick>
 80008da:	1b80      	subs	r0, r0, r6
 80008dc:	42a8      	cmp	r0, r5
 80008de:	d9df      	bls.n	80008a0 <FLASH_WaitForLastOperation+0xc>
 80008e0:	e7f7      	b.n	80008d2 <FLASH_WaitForLastOperation+0x3e>
 80008e2:	bf00      	nop
 80008e4:	40022000 	.word	0x40022000

080008e8 <HAL_FLASH_Program>:
{
 80008e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80008ec:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8000980 <HAL_FLASH_Program+0x98>
{
 80008f0:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 80008f2:	f899 3018 	ldrb.w	r3, [r9, #24]
{
 80008f6:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 80008f8:	2b01      	cmp	r3, #1
{
 80008fa:	460f      	mov	r7, r1
 80008fc:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80008fe:	d03d      	beq.n	800097c <HAL_FLASH_Program+0x94>
 8000900:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000902:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000906:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800090a:	f7ff ffc3 	bl	8000894 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800090e:	bb80      	cbnz	r0, 8000972 <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000910:	2c01      	cmp	r4, #1
 8000912:	d003      	beq.n	800091c <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 8000914:	2c02      	cmp	r4, #2
 8000916:	bf0c      	ite	eq
 8000918:	2402      	moveq	r4, #2
 800091a:	2404      	movne	r4, #4
 800091c:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800091e:	46ab      	mov	fp, r5
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000920:	f8df a060 	ldr.w	sl, [pc, #96]	; 8000984 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000924:	0128      	lsls	r0, r5, #4
 8000926:	f1c0 0220 	rsb	r2, r0, #32
 800092a:	f1a0 0320 	sub.w	r3, r0, #32
 800092e:	fa06 f202 	lsl.w	r2, r6, r2
 8000932:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000936:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800093a:	4310      	orrs	r0, r2
 800093c:	fa26 f303 	lsr.w	r3, r6, r3
 8000940:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000942:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000946:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 8000950:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000954:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000958:	f7ff ff9c 	bl	8000894 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800095c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000960:	f023 0301 	bic.w	r3, r3, #1
 8000964:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 8000968:	b918      	cbnz	r0, 8000972 <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 800096a:	3501      	adds	r5, #1
 800096c:	b2eb      	uxtb	r3, r5
 800096e:	429c      	cmp	r4, r3
 8000970:	d8d8      	bhi.n	8000924 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8000972:	2300      	movs	r3, #0
 8000974:	f889 3018 	strb.w	r3, [r9, #24]
}
 8000978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 800097c:	2002      	movs	r0, #2
 800097e:	e7fb      	b.n	8000978 <HAL_FLASH_Program+0x90>
 8000980:	20000330 	.word	0x20000330
 8000984:	40022000 	.word	0x40022000

08000988 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000988:	2200      	movs	r2, #0
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <FLASH_PageErase+0x1c>)
 800098c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <FLASH_PageErase+0x20>)
 8000990:	691a      	ldr	r2, [r3, #16]
 8000992:	f042 0202 	orr.w	r2, r2, #2
 8000996:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000998:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800099a:	691a      	ldr	r2, [r3, #16]
 800099c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009a0:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80009a2:	4770      	bx	lr
 80009a4:	20000330 	.word	0x20000330
 80009a8:	40022000 	.word	0x40022000

080009ac <HAL_FLASHEx_Erase>:
{
 80009ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80009b0:	4f26      	ldr	r7, [pc, #152]	; (8000a4c <HAL_FLASHEx_Erase+0xa0>)
{
 80009b2:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80009b4:	7e3b      	ldrb	r3, [r7, #24]
{
 80009b6:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d044      	beq.n	8000a46 <HAL_FLASHEx_Erase+0x9a>
 80009bc:	2401      	movs	r4, #1
 80009be:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80009c0:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80009c2:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d11a      	bne.n	8000a00 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80009ca:	f7ff ff63 	bl	8000894 <FLASH_WaitForLastOperation>
 80009ce:	b120      	cbz	r0, 80009da <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80009d0:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80009d2:	2300      	movs	r3, #0
 80009d4:	763b      	strb	r3, [r7, #24]
}
 80009d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80009da:	4c1d      	ldr	r4, [pc, #116]	; (8000a50 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009dc:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80009de:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009e0:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80009ea:	6923      	ldr	r3, [r4, #16]
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009f2:	f7ff ff4f 	bl	8000894 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80009f6:	6923      	ldr	r3, [r4, #16]
 80009f8:	f023 0304 	bic.w	r3, r3, #4
 80009fc:	6123      	str	r3, [r4, #16]
 80009fe:	e7e8      	b.n	80009d2 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000a00:	f7ff ff48 	bl	8000894 <FLASH_WaitForLastOperation>
 8000a04:	2800      	cmp	r0, #0
 8000a06:	d1e3      	bne.n	80009d0 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0c:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a10:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8000a12:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000a14:	4c0e      	ldr	r4, [pc, #56]	; (8000a50 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000a16:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8000a1a:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8000a1e:	42b3      	cmp	r3, r6
 8000a20:	d9d7      	bls.n	80009d2 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000a22:	4630      	mov	r0, r6
 8000a24:	f7ff ffb0 	bl	8000988 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a2c:	f7ff ff32 	bl	8000894 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000a30:	6923      	ldr	r3, [r4, #16]
 8000a32:	f023 0302 	bic.w	r3, r3, #2
 8000a36:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000a38:	b110      	cbz	r0, 8000a40 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 8000a3a:	f8c8 6000 	str.w	r6, [r8]
            break;
 8000a3e:	e7c8      	b.n	80009d2 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000a40:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a44:	e7e7      	b.n	8000a16 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8000a46:	2002      	movs	r0, #2
 8000a48:	e7c5      	b.n	80009d6 <HAL_FLASHEx_Erase+0x2a>
 8000a4a:	bf00      	nop
 8000a4c:	20000330 	.word	0x20000330
 8000a50:	40022000 	.word	0x40022000

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a58:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000a5a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5c:	4f64      	ldr	r7, [pc, #400]	; (8000bf0 <HAL_GPIO_Init+0x19c>)
 8000a5e:	4b65      	ldr	r3, [pc, #404]	; (8000bf4 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8000a60:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000bf8 <HAL_GPIO_Init+0x1a4>
 8000a64:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000bfc <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a68:	680d      	ldr	r5, [r1, #0]
 8000a6a:	fa35 f406 	lsrs.w	r4, r5, r6
 8000a6e:	d102      	bne.n	8000a76 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000a70:	b003      	add	sp, #12
 8000a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000a76:	f04f 0801 	mov.w	r8, #1
 8000a7a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7e:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000a82:	ea38 0505 	bics.w	r5, r8, r5
 8000a86:	d17b      	bne.n	8000b80 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8000a88:	684d      	ldr	r5, [r1, #4]
 8000a8a:	2d03      	cmp	r5, #3
 8000a8c:	d807      	bhi.n	8000a9e <HAL_GPIO_Init+0x4a>
 8000a8e:	3d01      	subs	r5, #1
 8000a90:	2d02      	cmp	r5, #2
 8000a92:	f200 8088 	bhi.w	8000ba6 <HAL_GPIO_Init+0x152>
 8000a96:	e8df f005 	tbb	[pc, r5]
 8000a9a:	9b96      	.short	0x9b96
 8000a9c:	a1          	.byte	0xa1
 8000a9d:	00          	.byte	0x00
 8000a9e:	2d12      	cmp	r5, #18
 8000aa0:	f000 8099 	beq.w	8000bd6 <HAL_GPIO_Init+0x182>
 8000aa4:	d86e      	bhi.n	8000b84 <HAL_GPIO_Init+0x130>
 8000aa6:	2d11      	cmp	r5, #17
 8000aa8:	f000 808f 	beq.w	8000bca <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aac:	2cff      	cmp	r4, #255	; 0xff
 8000aae:	bf98      	it	ls
 8000ab0:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab2:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab6:	bf88      	it	hi
 8000ab8:	f100 0a04 	addhi.w	sl, r0, #4
 8000abc:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ac0:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac4:	bf88      	it	hi
 8000ac6:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ac8:	fa09 fb05 	lsl.w	fp, r9, r5
 8000acc:	ea28 080b 	bic.w	r8, r8, fp
 8000ad0:	fa02 f505 	lsl.w	r5, r2, r5
 8000ad4:	ea48 0505 	orr.w	r5, r8, r5
 8000ad8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000adc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000ae0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000ae4:	d04c      	beq.n	8000b80 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae6:	69bd      	ldr	r5, [r7, #24]
 8000ae8:	f026 0803 	bic.w	r8, r6, #3
 8000aec:	f045 0501 	orr.w	r5, r5, #1
 8000af0:	61bd      	str	r5, [r7, #24]
 8000af2:	69bd      	ldr	r5, [r7, #24]
 8000af4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000af8:	f005 0501 	and.w	r5, r5, #1
 8000afc:	9501      	str	r5, [sp, #4]
 8000afe:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b02:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b06:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b08:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000b0c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b10:	fa09 f90b 	lsl.w	r9, r9, fp
 8000b14:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b18:	4d39      	ldr	r5, [pc, #228]	; (8000c00 <HAL_GPIO_Init+0x1ac>)
 8000b1a:	42a8      	cmp	r0, r5
 8000b1c:	d062      	beq.n	8000be4 <HAL_GPIO_Init+0x190>
 8000b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b22:	42a8      	cmp	r0, r5
 8000b24:	d060      	beq.n	8000be8 <HAL_GPIO_Init+0x194>
 8000b26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b2a:	42a8      	cmp	r0, r5
 8000b2c:	d05e      	beq.n	8000bec <HAL_GPIO_Init+0x198>
 8000b2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b32:	42a8      	cmp	r0, r5
 8000b34:	bf0c      	ite	eq
 8000b36:	2503      	moveq	r5, #3
 8000b38:	2504      	movne	r5, #4
 8000b3a:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b3e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000b42:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000b46:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b48:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000b4c:	bf14      	ite	ne
 8000b4e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b50:	43a5      	biceq	r5, r4
 8000b52:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000b54:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b56:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000b5a:	bf14      	ite	ne
 8000b5c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b5e:	43a5      	biceq	r5, r4
 8000b60:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b62:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b64:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b68:	bf14      	ite	ne
 8000b6a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b6c:	43a5      	biceq	r5, r4
 8000b6e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b70:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b72:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b76:	bf14      	ite	ne
 8000b78:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b7a:	ea25 0404 	biceq.w	r4, r5, r4
 8000b7e:	60dc      	str	r4, [r3, #12]
	position++;
 8000b80:	3601      	adds	r6, #1
 8000b82:	e771      	b.n	8000a68 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000b84:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000c04 <HAL_GPIO_Init+0x1b0>
 8000b88:	454d      	cmp	r5, r9
 8000b8a:	d00c      	beq.n	8000ba6 <HAL_GPIO_Init+0x152>
 8000b8c:	d817      	bhi.n	8000bbe <HAL_GPIO_Init+0x16a>
 8000b8e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000b92:	454d      	cmp	r5, r9
 8000b94:	d007      	beq.n	8000ba6 <HAL_GPIO_Init+0x152>
 8000b96:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000b9a:	454d      	cmp	r5, r9
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x152>
 8000b9e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000ba2:	454d      	cmp	r5, r9
 8000ba4:	d182      	bne.n	8000aac <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ba6:	688a      	ldr	r2, [r1, #8]
 8000ba8:	b1d2      	cbz	r2, 8000be0 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000baa:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000bac:	bf08      	it	eq
 8000bae:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb2:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000bb6:	bf18      	it	ne
 8000bb8:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000bbc:	e776      	b.n	8000aac <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000bbe:	4565      	cmp	r5, ip
 8000bc0:	d0f1      	beq.n	8000ba6 <HAL_GPIO_Init+0x152>
 8000bc2:	4575      	cmp	r5, lr
 8000bc4:	e7ee      	b.n	8000ba4 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bc6:	68ca      	ldr	r2, [r1, #12]
          break;
 8000bc8:	e770      	b.n	8000aac <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bca:	68ca      	ldr	r2, [r1, #12]
 8000bcc:	3204      	adds	r2, #4
          break;
 8000bce:	e76d      	b.n	8000aac <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bd0:	68ca      	ldr	r2, [r1, #12]
 8000bd2:	3208      	adds	r2, #8
          break;
 8000bd4:	e76a      	b.n	8000aac <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd6:	68ca      	ldr	r2, [r1, #12]
 8000bd8:	320c      	adds	r2, #12
          break;
 8000bda:	e767      	b.n	8000aac <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	e765      	b.n	8000aac <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000be0:	2204      	movs	r2, #4
 8000be2:	e763      	b.n	8000aac <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be4:	2500      	movs	r5, #0
 8000be6:	e7a8      	b.n	8000b3a <HAL_GPIO_Init+0xe6>
 8000be8:	2501      	movs	r5, #1
 8000bea:	e7a6      	b.n	8000b3a <HAL_GPIO_Init+0xe6>
 8000bec:	2502      	movs	r5, #2
 8000bee:	e7a4      	b.n	8000b3a <HAL_GPIO_Init+0xe6>
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010400 	.word	0x40010400
 8000bf8:	10310000 	.word	0x10310000
 8000bfc:	10320000 	.word	0x10320000
 8000c00:	40010800 	.word	0x40010800
 8000c04:	10220000 	.word	0x10220000

08000c08 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c08:	b10a      	cbz	r2, 8000c0e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c0a:	6101      	str	r1, [r0, #16]
  }
}
 8000c0c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c0e:	0409      	lsls	r1, r1, #16
 8000c10:	e7fb      	b.n	8000c0a <HAL_GPIO_WritePin+0x2>

08000c12 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c12:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c14:	ea01 0203 	and.w	r2, r1, r3
 8000c18:	ea21 0103 	bic.w	r1, r1, r3
 8000c1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000c20:	6101      	str	r1, [r0, #16]
}
 8000c22:	4770      	bx	lr

08000c24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c24:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c26:	4604      	mov	r4, r0
{
 8000c28:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000c2a:	b310      	cbz	r0, 8000c72 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c2c:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000c30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c34:	b91b      	cbnz	r3, 8000c3e <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c36:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c3a:	f002 fe95 	bl	8003968 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c3e:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c40:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c42:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c44:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8000c48:	f855 0b10 	ldr.w	r0, [r5], #16
 8000c4c:	f001 fad6 	bl	80021fc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c54:	682b      	ldr	r3, [r5, #0]
 8000c56:	1d27      	adds	r7, r4, #4
 8000c58:	6033      	str	r3, [r6, #0]
 8000c5a:	4626      	mov	r6, r4
 8000c5c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000c60:	f856 0b10 	ldr.w	r0, [r6], #16
 8000c64:	f001 faba 	bl	80021dc <USB_CoreInit>
 8000c68:	4605      	mov	r5, r0
 8000c6a:	b120      	cbz	r0, 8000c76 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000c72:	2501      	movs	r5, #1
 8000c74:	e04c      	b.n	8000d10 <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c76:	4601      	mov	r1, r0
 8000c78:	6820      	ldr	r0, [r4, #0]
 8000c7a:	f001 fac9 	bl	8002210 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c7e:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c80:	f04f 0e01 	mov.w	lr, #1
 8000c84:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c86:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c88:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8000c8c:	b2ca      	uxtb	r2, r1
 8000c8e:	4594      	cmp	ip, r2
 8000c90:	f101 0101 	add.w	r1, r1, #1
 8000c94:	d81b      	bhi.n	8000cce <HAL_PCD_Init+0xaa>
 8000c96:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c98:	2528      	movs	r5, #40	; 0x28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c9e:	4584      	cmp	ip, r0
 8000ca0:	f103 0301 	add.w	r3, r3, #1
 8000ca4:	d820      	bhi.n	8000ce8 <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ca6:	46ec      	mov	ip, sp
 8000ca8:	4635      	mov	r5, r6
 8000caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000cb0:	682b      	ldr	r3, [r5, #0]
 8000cb2:	f8cc 3000 	str.w	r3, [ip]
 8000cb6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000cba:	6820      	ldr	r0, [r4, #0]
 8000cbc:	f001 faaa 	bl	8002214 <USB_DevInit>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	4605      	mov	r5, r0
 8000cc4:	b1e8      	cbz	r0, 8000d02 <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000ccc:	e7d1      	b.n	8000c72 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8000cce:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cd2:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8000cd6:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cde:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ce0:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ce4:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ce6:	e7d1      	b.n	8000c8c <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8000ce8:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cec:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8000cf0:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000cf4:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cf8:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cfc:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d00:	e7cc      	b.n	8000c9c <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 8000d02:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d06:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d08:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d0c:	f001 fc43 	bl	8002596 <USB_DevDisconnect>

  return HAL_OK;
}
 8000d10:	4628      	mov	r0, r5
 8000d12:	b007      	add	sp, #28
 8000d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d16:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000d18:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8000d1c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d010      	beq.n	8000d44 <HAL_PCD_Start+0x2e>
 8000d22:	2501      	movs	r5, #1
 8000d24:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d28:	6800      	ldr	r0, [r0, #0]
 8000d2a:	f001 fa5e 	bl	80021ea <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d2e:	4629      	mov	r1, r5
 8000d30:	4620      	mov	r0, r4
 8000d32:	f002 ff08 	bl	8003b46 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000d36:	6820      	ldr	r0, [r4, #0]
 8000d38:	f001 fc2b 	bl	8002592 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000d42:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000d44:	2002      	movs	r0, #2
 8000d46:	e7fc      	b.n	8000d42 <HAL_PCD_Start+0x2c>

08000d48 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8000d48:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000d4a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8000d4e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d010      	beq.n	8000d76 <HAL_PCD_Stop+0x2e>
 8000d54:	2301      	movs	r3, #1
 8000d56:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8000d5a:	6800      	ldr	r0, [r0, #0]
 8000d5c:	f001 fa4e 	bl	80021fc <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8000d60:	2100      	movs	r1, #0
 8000d62:	4620      	mov	r0, r4
 8000d64:	f002 feef 	bl	8003b46 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 8000d68:	6820      	ldr	r0, [r4, #0]
 8000d6a:	f001 fc14 	bl	8002596 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000d74:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d76:	2002      	movs	r0, #2
 8000d78:	e7fc      	b.n	8000d74 <HAL_PCD_Stop+0x2c>

08000d7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000d7a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000d7c:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8000d80:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d82:	2a01      	cmp	r2, #1
 8000d84:	d00b      	beq.n	8000d9e <HAL_PCD_SetAddress+0x24>
 8000d86:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8000d88:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8000d8c:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000d90:	6800      	ldr	r0, [r0, #0]
 8000d92:	f001 fbf8 	bl	8002586 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000d9c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d9e:	2002      	movs	r0, #2
 8000da0:	e7fc      	b.n	8000d9c <HAL_PCD_SetAddress+0x22>
	...

08000da4 <HAL_PCD_IRQHandler>:
{
 8000da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da8:	4604      	mov	r4, r0
 8000daa:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000dac:	6800      	ldr	r0, [r0, #0]
 8000dae:	f001 fbf4 	bl	800259a <USB_ReadInterrupts>
 8000db2:	0401      	lsls	r1, r0, #16
 8000db4:	d509      	bpl.n	8000dca <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000db6:	f8df 930c 	ldr.w	r9, [pc, #780]	; 80010c4 <HAL_PCD_IRQHandler+0x320>
 8000dba:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80010c8 <HAL_PCD_IRQHandler+0x324>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000dbe:	6820      	ldr	r0, [r4, #0]
 8000dc0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000dc4:	041d      	lsls	r5, r3, #16
 8000dc6:	f100 80c1 	bmi.w	8000f4c <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000dca:	6820      	ldr	r0, [r4, #0]
 8000dcc:	f001 fbe5 	bl	800259a <USB_ReadInterrupts>
 8000dd0:	0542      	lsls	r2, r0, #21
 8000dd2:	d50f      	bpl.n	8000df4 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dd4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000dd6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dd8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ddc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000de0:	041b      	lsls	r3, r3, #16
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000de8:	f002 fdf9 	bl	80039de <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000dec:	2100      	movs	r1, #0
 8000dee:	4620      	mov	r0, r4
 8000df0:	f7ff ffc3 	bl	8000d7a <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000df4:	6820      	ldr	r0, [r4, #0]
 8000df6:	f001 fbd0 	bl	800259a <USB_ReadInterrupts>
 8000dfa:	0441      	lsls	r1, r0, #17
 8000dfc:	d508      	bpl.n	8000e10 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000dfe:	6822      	ldr	r2, [r4, #0]
 8000e00:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e08:	041b      	lsls	r3, r3, #16
 8000e0a:	0c1b      	lsrs	r3, r3, #16
 8000e0c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e10:	6820      	ldr	r0, [r4, #0]
 8000e12:	f001 fbc2 	bl	800259a <USB_ReadInterrupts>
 8000e16:	0482      	lsls	r2, r0, #18
 8000e18:	d508      	bpl.n	8000e2c <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e1a:	6822      	ldr	r2, [r4, #0]
 8000e1c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e24:	041b      	lsls	r3, r3, #16
 8000e26:	0c1b      	lsrs	r3, r3, #16
 8000e28:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e2c:	6820      	ldr	r0, [r4, #0]
 8000e2e:	f001 fbb4 	bl	800259a <USB_ReadInterrupts>
 8000e32:	04c3      	lsls	r3, r0, #19
 8000e34:	d51c      	bpl.n	8000e70 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e36:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000e38:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e3a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000e3e:	f023 0304 	bic.w	r3, r3, #4
 8000e42:	041b      	lsls	r3, r3, #16
 8000e44:	0c1b      	lsrs	r3, r3, #16
 8000e46:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e4a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000e4e:	f023 0308 	bic.w	r3, r3, #8
 8000e52:	041b      	lsls	r3, r3, #16
 8000e54:	0c1b      	lsrs	r3, r3, #16
 8000e56:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000e5a:	f002 fde3 	bl	8003a24 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e5e:	6822      	ldr	r2, [r4, #0]
 8000e60:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e68:	041b      	lsls	r3, r3, #16
 8000e6a:	0c1b      	lsrs	r3, r3, #16
 8000e6c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e70:	6820      	ldr	r0, [r4, #0]
 8000e72:	f001 fb92 	bl	800259a <USB_ReadInterrupts>
 8000e76:	0507      	lsls	r7, r0, #20
 8000e78:	d546      	bpl.n	8000f08 <HAL_PCD_IRQHandler+0x164>
 8000e7a:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	4606      	mov	r6, r0
 8000e80:	4619      	mov	r1, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	f103 0520 	add.w	r5, r3, #32
 8000e88:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8000e8c:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000e8e:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8000e92:	d1f9      	bne.n	8000e88 <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000e94:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e98:	b292      	uxth	r2, r2
 8000e9a:	f042 0201 	orr.w	r2, r2, #1
 8000e9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000ea2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000ea6:	f022 0201 	bic.w	r2, r2, #1
 8000eaa:	0412      	lsls	r2, r2, #16
 8000eac:	0c12      	lsrs	r2, r2, #16
 8000eae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000eb2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000eb6:	0556      	lsls	r6, r2, #21
 8000eb8:	d5fb      	bpl.n	8000eb2 <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000eba:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ec2:	0412      	lsls	r2, r2, #16
 8000ec4:	0c12      	lsrs	r2, r2, #16
 8000ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000eca:	f830 2b02 	ldrh.w	r2, [r0], #2
 8000ece:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8000ed2:	428d      	cmp	r5, r1
 8000ed4:	d1f9      	bne.n	8000eca <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000ed6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8000eda:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000edc:	b292      	uxth	r2, r2
 8000ede:	f042 0208 	orr.w	r2, r2, #8
 8000ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ee6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eee:	0412      	lsls	r2, r2, #16
 8000ef0:	0c12      	lsrs	r2, r2, #16
 8000ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000ef6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000efa:	b292      	uxth	r2, r2
 8000efc:	f042 0204 	orr.w	r2, r2, #4
 8000f00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8000f04:	f002 fd7e 	bl	8003a04 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f08:	6820      	ldr	r0, [r4, #0]
 8000f0a:	f001 fb46 	bl	800259a <USB_ReadInterrupts>
 8000f0e:	0582      	lsls	r2, r0, #22
 8000f10:	d50b      	bpl.n	8000f2a <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f12:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000f14:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f16:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f1e:	041b      	lsls	r3, r3, #16
 8000f20:	0c1b      	lsrs	r3, r3, #16
 8000f22:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000f26:	f002 fd56 	bl	80039d6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000f2a:	6820      	ldr	r0, [r4, #0]
 8000f2c:	f001 fb35 	bl	800259a <USB_ReadInterrupts>
 8000f30:	05c3      	lsls	r3, r0, #23
 8000f32:	d508      	bpl.n	8000f46 <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f34:	6822      	ldr	r2, [r4, #0]
 8000f36:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f3e:	041b      	lsls	r3, r3, #16
 8000f40:	0c1b      	lsrs	r3, r3, #16
 8000f42:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000f46:	b005      	add	sp, #20
 8000f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000f4c:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8000f50:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8000f52:	f016 060f 	ands.w	r6, r6, #15
 8000f56:	f040 80c1 	bne.w	80010dc <HAL_PCD_IRQHandler+0x338>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f5a:	f011 0110 	ands.w	r1, r1, #16
 8000f5e:	d12d      	bne.n	8000fbc <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f60:	8803      	ldrh	r3, [r0, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	ea03 0309 	and.w	r3, r3, r9
 8000f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f6e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f72:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f7c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000f80:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000f84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f8a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000f8c:	4413      	add	r3, r2
 8000f8e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f90:	4620      	mov	r0, r4
 8000f92:	f002 fd18 	bl	80039c6 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f96:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f43f af0f 	beq.w	8000dbe <HAL_PCD_IRQHandler+0x1a>
 8000fa0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fa2:	2a00      	cmp	r2, #0
 8000fa4:	f47f af0b 	bne.w	8000dbe <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000fa8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000fac:	6821      	ldr	r1, [r4, #0]
 8000fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000fb6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000fba:	e700      	b.n	8000dbe <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000fbc:	8805      	ldrh	r5, [r0, #0]
 8000fbe:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000fc0:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8000fc4:	d021      	beq.n	800100a <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fc6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000fca:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000fd4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000fd8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000fdc:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fe4:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000fe8:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8000fec:	f001 fd7a 	bl	8002ae4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ff0:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000ff2:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ff4:	8813      	ldrh	r3, [r2, #0]
 8000ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ffa:	051b      	lsls	r3, r3, #20
 8000ffc:	0d1b      	lsrs	r3, r3, #20
 8000ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001002:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001004:	f002 fcd0 	bl	80039a8 <HAL_PCD_SetupStageCallback>
 8001008:	e6d9      	b.n	8000dbe <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800100a:	041b      	lsls	r3, r3, #16
 800100c:	f57f aed7 	bpl.w	8000dbe <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001010:	8803      	ldrh	r3, [r0, #0]
 8001012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001016:	051b      	lsls	r3, r3, #20
 8001018:	0d1b      	lsrs	r3, r3, #20
 800101a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001020:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001024:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001028:	b29b      	uxth	r3, r3
 800102a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800102e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001032:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800103a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800103e:	b18b      	cbz	r3, 8001064 <HAL_PCD_IRQHandler+0x2c0>
 8001040:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8001044:	b171      	cbz	r1, 8001064 <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001046:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800104a:	f001 fd4b 	bl	8002ae4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800104e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001052:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001056:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001058:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800105a:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 800105c:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001060:	f002 fca8 	bl	80039b4 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001064:	6821      	ldr	r1, [r4, #0]
 8001066:	880b      	ldrh	r3, [r1, #0]
 8001068:	051f      	lsls	r7, r3, #20
 800106a:	f53f aea8 	bmi.w	8000dbe <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800106e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001072:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8001076:	b29b      	uxth	r3, r3
 8001078:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 800107c:	b9cd      	cbnz	r5, 80010b2 <HAL_PCD_IRQHandler+0x30e>
 800107e:	5ac2      	ldrh	r2, [r0, r3]
 8001080:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001084:	0412      	lsls	r2, r2, #16
 8001086:	0c12      	lsrs	r2, r2, #16
 8001088:	52c2      	strh	r2, [r0, r3]
 800108a:	5ac2      	ldrh	r2, [r0, r3]
 800108c:	b292      	uxth	r2, r2
 800108e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001092:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001094:	880b      	ldrh	r3, [r1, #0]
 8001096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800109a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	0c1b      	lsrs	r3, r3, #16
 80010a2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80010a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ae:	800b      	strh	r3, [r1, #0]
 80010b0:	e685      	b.n	8000dbe <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80010b2:	2d3e      	cmp	r5, #62	; 0x3e
 80010b4:	d80a      	bhi.n	80010cc <HAL_PCD_IRQHandler+0x328>
 80010b6:	086a      	lsrs	r2, r5, #1
 80010b8:	07ee      	lsls	r6, r5, #31
 80010ba:	bf48      	it	mi
 80010bc:	3201      	addmi	r2, #1
 80010be:	0292      	lsls	r2, r2, #10
 80010c0:	b292      	uxth	r2, r2
 80010c2:	e7e6      	b.n	8001092 <HAL_PCD_IRQHandler+0x2ee>
 80010c4:	ffff8f0f 	.word	0xffff8f0f
 80010c8:	ffff8000 	.word	0xffff8000
 80010cc:	096a      	lsrs	r2, r5, #5
 80010ce:	06ed      	lsls	r5, r5, #27
 80010d0:	bf08      	it	eq
 80010d2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80010d6:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 80010da:	e7f1      	b.n	80010c0 <HAL_PCD_IRQHandler+0x31c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80010dc:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010e0:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80010e2:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010e4:	f140 80ee 	bpl.w	80012c4 <HAL_PCD_IRQHandler+0x520>
        if (ep->doublebuffer == 0U)
 80010e8:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80010ea:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80010ee:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80010f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010f6:	051b      	lsls	r3, r3, #20
 80010f8:	0d1b      	lsrs	r3, r3, #20
 80010fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fe:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8001102:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8001106:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 800110a:	b9b3      	cbnz	r3, 800113a <HAL_PCD_IRQHandler+0x396>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800110c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001110:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8001114:	b29b      	uxth	r3, r3
 8001116:	3306      	adds	r3, #6
 8001118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800111c:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8001120:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001124:	2d00      	cmp	r5, #0
 8001126:	f000 80b1 	beq.w	800128c <HAL_PCD_IRQHandler+0x4e8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800112a:	462b      	mov	r3, r5
 800112c:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001130:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001134:	f001 fcd6 	bl	8002ae4 <USB_ReadPMA>
 8001138:	e0a8      	b.n	800128c <HAL_PCD_IRQHandler+0x4e8>
          if (ep->type == EP_TYPE_BULK)
 800113a:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800113e:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 8001142:	2a02      	cmp	r2, #2
 8001144:	f040 8081 	bne.w	800124a <HAL_PCD_IRQHandler+0x4a6>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001148:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800114c:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 8001150:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001154:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001158:	b2ad      	uxth	r5, r5
 800115a:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800115e:	d03b      	beq.n	80011d8 <HAL_PCD_IRQHandler+0x434>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001160:	44ab      	add	fp, r5
 8001162:	f10b 0b02 	add.w	fp, fp, #2
 8001166:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 800116a:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 800116e:	4295      	cmp	r5, r2
 8001170:	d913      	bls.n	800119a <HAL_PCD_IRQHandler+0x3f6>
 8001172:	2200      	movs	r2, #0
 8001174:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001178:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800117c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001180:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001184:	0412      	lsls	r2, r2, #16
 8001186:	0c12      	lsrs	r2, r2, #16
 8001188:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800118c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001194:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001198:	e004      	b.n	80011a4 <HAL_PCD_IRQHandler+0x400>
      ep->xfer_len -= count;
 800119a:	1b52      	subs	r2, r2, r5
 800119c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	d0e9      	beq.n	8001178 <HAL_PCD_IRQHandler+0x3d4>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80011a4:	f1be 0f00 	cmp.w	lr, #0
 80011a8:	d00d      	beq.n	80011c6 <HAL_PCD_IRQHandler+0x422>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80011aa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80011ae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80011b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011b6:	0412      	lsls	r2, r2, #16
 80011b8:	0c12      	lsrs	r2, r2, #16
 80011ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011be:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80011c2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80011c6:	2d00      	cmp	r5, #0
 80011c8:	d060      	beq.n	800128c <HAL_PCD_IRQHandler+0x4e8>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80011ca:	2128      	movs	r1, #40	; 0x28
 80011cc:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80011d0:	462b      	mov	r3, r5
 80011d2:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80011d6:	e7ab      	b.n	8001130 <HAL_PCD_IRQHandler+0x38c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80011d8:	445d      	add	r5, fp
 80011da:	3506      	adds	r5, #6
 80011dc:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 80011e0:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80011e4:	4295      	cmp	r5, r2
 80011e6:	d912      	bls.n	800120e <HAL_PCD_IRQHandler+0x46a>
 80011e8:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80011ec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80011f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011f8:	0412      	lsls	r2, r2, #16
 80011fa:	0c12      	lsrs	r2, r2, #16
 80011fc:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001200:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001204:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001208:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 800120c:	e004      	b.n	8001218 <HAL_PCD_IRQHandler+0x474>
      ep->xfer_len -= count;
 800120e:	1b52      	subs	r2, r2, r5
 8001210:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001214:	2a00      	cmp	r2, #0
 8001216:	d0e9      	beq.n	80011ec <HAL_PCD_IRQHandler+0x448>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001218:	f1be 0f00 	cmp.w	lr, #0
 800121c:	d10d      	bne.n	800123a <HAL_PCD_IRQHandler+0x496>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800121e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001222:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001226:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800122a:	0412      	lsls	r2, r2, #16
 800122c:	0c12      	lsrs	r2, r2, #16
 800122e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001232:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001236:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 800123a:	b33d      	cbz	r5, 800128c <HAL_PCD_IRQHandler+0x4e8>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800123c:	2128      	movs	r1, #40	; 0x28
 800123e:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001242:	462b      	mov	r3, r5
 8001244:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001248:	e772      	b.n	8001130 <HAL_PCD_IRQHandler+0x38c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800124a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800124e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001252:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001256:	0412      	lsls	r2, r2, #16
 8001258:	0c12      	lsrs	r2, r2, #16
 800125a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800125e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001262:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001266:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 800126a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001274:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001278:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800127a:	d056      	beq.n	800132a <HAL_PCD_IRQHandler+0x586>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800127c:	3202      	adds	r2, #2
 800127e:	4413      	add	r3, r2
 8001280:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8001284:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8001288:	2d00      	cmp	r5, #0
 800128a:	d1a1      	bne.n	80011d0 <HAL_PCD_IRQHandler+0x42c>
        ep->xfer_count += count;
 800128c:	2128      	movs	r1, #40	; 0x28
 800128e:	4371      	muls	r1, r6
 8001290:	1863      	adds	r3, r4, r1
 8001292:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001296:	442a      	add	r2, r5
 8001298:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800129c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80012a0:	442a      	add	r2, r5
 80012a2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80012a6:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80012aa:	b11a      	cbz	r2, 80012b4 <HAL_PCD_IRQHandler+0x510>
 80012ac:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80012b0:	429d      	cmp	r5, r3
 80012b2:	d243      	bcs.n	800133c <HAL_PCD_IRQHandler+0x598>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80012b4:	2328      	movs	r3, #40	; 0x28
 80012b6:	fb03 4306 	mla	r3, r3, r6, r4
 80012ba:	4620      	mov	r0, r4
 80012bc:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80012c0:	f002 fb78 	bl	80039b4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80012c4:	063a      	lsls	r2, r7, #24
 80012c6:	f57f ad7a 	bpl.w	8000dbe <HAL_PCD_IRQHandler+0x1a>
 80012ca:	2528      	movs	r5, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80012cc:	6820      	ldr	r0, [r4, #0]
 80012ce:	fb05 4506 	mla	r5, r5, r6, r4
 80012d2:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	ea03 0309 	and.w	r3, r3, r9
 80012dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e0:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80012e4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80012e8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d004      	beq.n	80012fa <HAL_PCD_IRQHandler+0x556>
 80012f0:	b11b      	cbz	r3, 80012fa <HAL_PCD_IRQHandler+0x556>
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d13a      	bne.n	800136c <HAL_PCD_IRQHandler+0x5c8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80012f6:	05fb      	lsls	r3, r7, #23
 80012f8:	d438      	bmi.n	800136c <HAL_PCD_IRQHandler+0x5c8>
          if (ep->xfer_len > TxByteNbre)
 80012fa:	2528      	movs	r5, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012fc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 8001300:	fb05 4206 	mla	r2, r5, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001304:	b29b      	uxth	r3, r3
 8001306:	3302      	adds	r3, #2
 8001308:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800130c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001310:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8001314:	6c17      	ldr	r7, [r2, #64]	; 0x40
 8001316:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800131a:	4567      	cmp	r7, ip
 800131c:	d815      	bhi.n	800134a <HAL_PCD_IRQHandler+0x5a6>
 800131e:	2300      	movs	r3, #0
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001322:	4620      	mov	r0, r4
 8001324:	f002 fb4f 	bl	80039c6 <HAL_PCD_DataInStageCallback>
 8001328:	e549      	b.n	8000dbe <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800132a:	3206      	adds	r2, #6
 800132c:	4413      	add	r3, r2
 800132e:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8001332:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8001336:	2d00      	cmp	r5, #0
 8001338:	d0a8      	beq.n	800128c <HAL_PCD_IRQHandler+0x4e8>
 800133a:	e782      	b.n	8001242 <HAL_PCD_IRQHandler+0x49e>
        ep = &hpcd->OUT_ep[epindex];
 800133c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001340:	6820      	ldr	r0, [r4, #0]
 8001342:	4421      	add	r1, r4
 8001344:	f001 f940 	bl	80025c8 <USB_EPStartXfer>
 8001348:	e7bc      	b.n	80012c4 <HAL_PCD_IRQHandler+0x520>
            ep->xfer_len -= TxByteNbre;
 800134a:	eba7 070c 	sub.w	r7, r7, ip
 800134e:	6417      	str	r7, [r2, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8001350:	2f00      	cmp	r7, #0
 8001352:	d0e6      	beq.n	8001322 <HAL_PCD_IRQHandler+0x57e>
        ep = &hpcd->IN_ep[epindex];
 8001354:	fb06 5505 	mla	r5, r6, r5, r5
            ep->xfer_buff += TxByteNbre;
 8001358:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 800135a:	6c53      	ldr	r3, [r2, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 800135c:	4461      	add	r1, ip
            ep->xfer_count += TxByteNbre;
 800135e:	4463      	add	r3, ip
            ep->xfer_buff += TxByteNbre;
 8001360:	63d1      	str	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001362:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001364:	1961      	adds	r1, r4, r5
 8001366:	f001 f92f 	bl	80025c8 <USB_EPStartXfer>
 800136a:	e528      	b.n	8000dbe <HAL_PCD_IRQHandler+0x1a>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);

    if (ep->xfer_len > TxByteNbre)
 800136c:	2328      	movs	r3, #40	; 0x28
 800136e:	fb03 4306 	mla	r3, r3, r6, r4
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001372:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8001376:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 800137a:	fa1f fc8c 	uxth.w	ip, ip
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800137e:	f017 0240 	ands.w	r2, r7, #64	; 0x40
    if (ep->xfer_len > TxByteNbre)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001388:	44d4      	add	ip, sl
 800138a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800138e:	f000 80e4 	beq.w	800155a <HAL_PCD_IRQHandler+0x7b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001392:	f10c 0c02 	add.w	ip, ip, #2
 8001396:	f83e c01c 	ldrh.w	ip, [lr, ip, lsl #1]
 800139a:	2228      	movs	r2, #40	; 0x28
    if (ep->xfer_len > TxByteNbre)
 800139c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80013a0:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 80013a2:	bf28      	it	cs
 80013a4:	2300      	movcs	r3, #0
 80013a6:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 80013aa:	bf38      	it	cc
 80013ac:	eba3 030c 	subcc.w	r3, r3, ip
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80013b2:	b2bf      	uxth	r7, r7
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d151      	bne.n	800145c <HAL_PCD_IRQHandler+0x6b8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013b8:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80013bc:	2a00      	cmp	r2, #0
 80013be:	d13a      	bne.n	8001436 <HAL_PCD_IRQHandler+0x692>
 80013c0:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80013c4:	010b      	lsls	r3, r1, #4
 80013c6:	b2b2      	uxth	r2, r6
 80013c8:	f200 4604 	addw	r6, r0, #1028	; 0x404
 80013cc:	4416      	add	r6, r2
 80013ce:	5af2      	ldrh	r2, [r6, r3]
 80013d0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80013d4:	0412      	lsls	r2, r2, #16
 80013d6:	0c12      	lsrs	r2, r2, #16
 80013d8:	52f2      	strh	r2, [r6, r3]
 80013da:	5af2      	ldrh	r2, [r6, r3]
 80013dc:	b292      	uxth	r2, r2
 80013de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e2:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013e4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80013e8:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80013ec:	b292      	uxth	r2, r2
 80013ee:	4410      	add	r0, r2
 80013f0:	5ac2      	ldrh	r2, [r0, r3]
 80013f2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80013f6:	0412      	lsls	r2, r2, #16
 80013f8:	0c12      	lsrs	r2, r2, #16
 80013fa:	52c2      	strh	r2, [r0, r3]
 80013fc:	5ac2      	ldrh	r2, [r0, r3]
 80013fe:	b292      	uxth	r2, r2
 8001400:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001404:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001406:	4620      	mov	r0, r4
 8001408:	f002 fadd 	bl	80039c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800140c:	2f00      	cmp	r7, #0
 800140e:	f000 80e2 	beq.w	80015d6 <HAL_PCD_IRQHandler+0x832>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001412:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8001416:	6822      	ldr	r2, [r4, #0]
 8001418:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800141c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001424:	041b      	lsls	r3, r3, #16
 8001426:	0c1b      	lsrs	r3, r3, #16
 8001428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800142c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001430:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001434:	e0cf      	b.n	80015d6 <HAL_PCD_IRQHandler+0x832>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001436:	2a01      	cmp	r2, #1
 8001438:	d1e5      	bne.n	8001406 <HAL_PCD_IRQHandler+0x662>
 800143a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800143e:	010a      	lsls	r2, r1, #4
 8001440:	fa1f fc86 	uxth.w	ip, r6
 8001444:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8001448:	4466      	add	r6, ip
 800144a:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800144c:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001450:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8001454:	b2b6      	uxth	r6, r6
 8001456:	4430      	add	r0, r6
 8001458:	5283      	strh	r3, [r0, r2]
 800145a:	e7d4      	b.n	8001406 <HAL_PCD_IRQHandler+0x662>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800145c:	b16f      	cbz	r7, 800147a <HAL_PCD_IRQHandler+0x6d6>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800145e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800146a:	041b      	lsls	r3, r3, #16
 800146c:	0c1b      	lsrs	r3, r3, #16
 800146e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001476:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800147a:	2328      	movs	r3, #40	; 0x28
 800147c:	fb03 4306 	mla	r3, r3, r6, r4
 8001480:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001484:	2a01      	cmp	r2, #1
 8001486:	f040 80a6 	bne.w	80015d6 <HAL_PCD_IRQHandler+0x832>
        ep->xfer_buff += TxByteNbre;
 800148a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800148c:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 8001490:	eb02 070c 	add.w	r7, r2, ip
        ep->xfer_count += TxByteNbre;
 8001494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8001496:	63df      	str	r7, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001498:	4462      	add	r2, ip
 800149a:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800149c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800149e:	4596      	cmp	lr, r2
 80014a0:	d329      	bcc.n	80014f6 <HAL_PCD_IRQHandler+0x752>
          ep->xfer_len_db -= len;
 80014a2:	ebae 0e02 	sub.w	lr, lr, r2
 80014a6:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80014aa:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 80014ae:	b293      	uxth	r3, r2
 80014b0:	f1bc 0f00 	cmp.w	ip, #0
 80014b4:	d144      	bne.n	8001540 <HAL_PCD_IRQHandler+0x79c>
 80014b6:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 80014ba:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 80014be:	fa1f fc8c 	uxth.w	ip, ip
 80014c2:	44f4      	add	ip, lr
 80014c4:	0109      	lsls	r1, r1, #4
 80014c6:	bb1a      	cbnz	r2, 8001510 <HAL_PCD_IRQHandler+0x76c>
 80014c8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80014cc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80014d0:	0412      	lsls	r2, r2, #16
 80014d2:	0c12      	lsrs	r2, r2, #16
 80014d4:	f82c 2001 	strh.w	r2, [ip, r1]
 80014d8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80014dc:	b292      	uxth	r2, r2
 80014de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014e2:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80014e6:	2128      	movs	r1, #40	; 0x28
 80014e8:	fb01 4606 	mla	r6, r1, r6, r4
 80014ec:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80014ee:	4639      	mov	r1, r7
 80014f0:	f001 f859 	bl	80025a6 <USB_WritePMA>
 80014f4:	e06f      	b.n	80015d6 <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 80014f6:	f1be 0f00 	cmp.w	lr, #0
 80014fa:	d103      	bne.n	8001504 <HAL_PCD_IRQHandler+0x760>
    if (ep->xfer_len > TxByteNbre)
 80014fc:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80014fe:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
 8001502:	e7d2      	b.n	80014aa <HAL_PCD_IRQHandler+0x706>
          ep->xfer_fill_db = 0U;
 8001504:	2200      	movs	r2, #0
 8001506:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800150a:	649a      	str	r2, [r3, #72]	; 0x48
 800150c:	4672      	mov	r2, lr
 800150e:	e7cc      	b.n	80014aa <HAL_PCD_IRQHandler+0x706>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001510:	2a3e      	cmp	r2, #62	; 0x3e
 8001512:	d80c      	bhi.n	800152e <HAL_PCD_IRQHandler+0x78a>
 8001514:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8001518:	07d2      	lsls	r2, r2, #31
 800151a:	bf48      	it	mi
 800151c:	f10e 0e01 	addmi.w	lr, lr, #1
 8001520:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8001524:	fa1f fe8e 	uxth.w	lr, lr
 8001528:	f82c e001 	strh.w	lr, [ip, r1]
 800152c:	e7db      	b.n	80014e6 <HAL_PCD_IRQHandler+0x742>
 800152e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8001532:	06d2      	lsls	r2, r2, #27
 8001534:	bf08      	it	eq
 8001536:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 800153a:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800153e:	e7f1      	b.n	8001524 <HAL_PCD_IRQHandler+0x780>
 8001540:	f1bc 0f01 	cmp.w	ip, #1
 8001544:	d1cf      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x742>
 8001546:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800154a:	0109      	lsls	r1, r1, #4
 800154c:	fa1f fc82 	uxth.w	ip, r2
 8001550:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8001554:	4462      	add	r2, ip
 8001556:	5253      	strh	r3, [r2, r1]
 8001558:	e7c5      	b.n	80014e6 <HAL_PCD_IRQHandler+0x742>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800155a:	f10c 0c06 	add.w	ip, ip, #6
 800155e:	f83e c01c 	ldrh.w	ip, [lr, ip, lsl #1]
 8001562:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxByteNbre)
 8001564:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001568:	459c      	cmp	ip, r3
      ep->xfer_len -= TxByteNbre;
 800156a:	bf98      	it	ls
 800156c:	eba3 020c 	subls.w	r2, r3, ip
 8001570:	2328      	movs	r3, #40	; 0x28
 8001572:	fb03 4306 	mla	r3, r3, r6, r4
 8001576:	641a      	str	r2, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001578:	2a00      	cmp	r2, #0
 800157a:	d152      	bne.n	8001622 <HAL_PCD_IRQHandler+0x87e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800157c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8001580:	2b00      	cmp	r3, #0
 8001582:	d13c      	bne.n	80015fe <HAL_PCD_IRQHandler+0x85a>
 8001584:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001588:	010b      	lsls	r3, r1, #4
 800158a:	b2b2      	uxth	r2, r6
 800158c:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8001590:	4416      	add	r6, r2
 8001592:	5af2      	ldrh	r2, [r6, r3]
 8001594:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001598:	0412      	lsls	r2, r2, #16
 800159a:	0c12      	lsrs	r2, r2, #16
 800159c:	52f2      	strh	r2, [r6, r3]
 800159e:	5af2      	ldrh	r2, [r6, r3]
 80015a0:	b292      	uxth	r2, r2
 80015a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015a6:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80015a8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80015ac:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80015b0:	b292      	uxth	r2, r2
 80015b2:	4410      	add	r0, r2
 80015b4:	5ac2      	ldrh	r2, [r0, r3]
 80015b6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80015ba:	0412      	lsls	r2, r2, #16
 80015bc:	0c12      	lsrs	r2, r2, #16
 80015be:	52c2      	strh	r2, [r0, r3]
 80015c0:	5ac2      	ldrh	r2, [r0, r3]
 80015c2:	b292      	uxth	r2, r2
 80015c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015c8:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015ca:	4620      	mov	r0, r4
 80015cc:	f002 f9fb 	bl	80039c6 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80015d0:	2f00      	cmp	r7, #0
 80015d2:	f43f af1e 	beq.w	8001412 <HAL_PCD_IRQHandler+0x66e>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80015d6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80015da:	6822      	ldr	r2, [r4, #0]
 80015dc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015ea:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80015ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80015fa:	f7ff bbe0 	b.w	8000dbe <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d1e3      	bne.n	80015ca <HAL_PCD_IRQHandler+0x826>
 8001602:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001606:	010b      	lsls	r3, r1, #4
 8001608:	fa1f fc86 	uxth.w	ip, r6
 800160c:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8001610:	4466      	add	r6, ip
 8001612:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001614:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001618:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800161c:	b2b6      	uxth	r6, r6
 800161e:	4430      	add	r0, r6
 8001620:	e7d2      	b.n	80015c8 <HAL_PCD_IRQHandler+0x824>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001622:	b96f      	cbnz	r7, 8001640 <HAL_PCD_IRQHandler+0x89c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001624:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800162c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	0c1b      	lsrs	r3, r3, #16
 8001634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800163c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001640:	2228      	movs	r2, #40	; 0x28
 8001642:	fb02 4206 	mla	r2, r2, r6, r4
 8001646:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 800164a:	2b01      	cmp	r3, #1
 800164c:	d1c3      	bne.n	80015d6 <HAL_PCD_IRQHandler+0x832>
        ep->xfer_count += TxByteNbre;
 800164e:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8001650:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001652:	4463      	add	r3, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001654:	f8d2 e048 	ldr.w	lr, [r2, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800165a:	6b93      	ldr	r3, [r2, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800165c:	4467      	add	r7, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 800165e:	459e      	cmp	lr, r3
        ep->xfer_buff += TxByteNbre;
 8001660:	63d7      	str	r7, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001662:	d322      	bcc.n	80016aa <HAL_PCD_IRQHandler+0x906>
          ep->xfer_len_db -= len;
 8001664:	ebae 0e03 	sub.w	lr, lr, r3
 8001668:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800166c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8001670:	fa1f fc83 	uxth.w	ip, r3
 8001674:	2a00      	cmp	r2, #0
 8001676:	d13d      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x950>
 8001678:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800167c:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 8001680:	b292      	uxth	r2, r2
 8001682:	4472      	add	r2, lr
 8001684:	0109      	lsls	r1, r1, #4
 8001686:	b9eb      	cbnz	r3, 80016c4 <HAL_PCD_IRQHandler+0x920>
 8001688:	5a53      	ldrh	r3, [r2, r1]
 800168a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800168e:	041b      	lsls	r3, r3, #16
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	5253      	strh	r3, [r2, r1]
 8001694:	5a53      	ldrh	r3, [r2, r1]
 8001696:	b29b      	uxth	r3, r3
 8001698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169c:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800169e:	2128      	movs	r1, #40	; 0x28
 80016a0:	fb01 4606 	mla	r6, r1, r6, r4
 80016a4:	4663      	mov	r3, ip
 80016a6:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80016a8:	e721      	b.n	80014ee <HAL_PCD_IRQHandler+0x74a>
        else if (ep->xfer_len_db == 0U)
 80016aa:	f1be 0f00 	cmp.w	lr, #0
 80016ae:	d103      	bne.n	80016b8 <HAL_PCD_IRQHandler+0x914>
    if (ep->xfer_len >= TxByteNbre)
 80016b0:	4663      	mov	r3, ip
          ep->xfer_fill_db = 0U;
 80016b2:	f882 e04c 	strb.w	lr, [r2, #76]	; 0x4c
 80016b6:	e7d9      	b.n	800166c <HAL_PCD_IRQHandler+0x8c8>
          ep->xfer_len_db = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	6493      	str	r3, [r2, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80016bc:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
 80016c0:	4673      	mov	r3, lr
 80016c2:	e7d3      	b.n	800166c <HAL_PCD_IRQHandler+0x8c8>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80016c4:	2b3e      	cmp	r3, #62	; 0x3e
 80016c6:	d80c      	bhi.n	80016e2 <HAL_PCD_IRQHandler+0x93e>
 80016c8:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 80016cc:	07db      	lsls	r3, r3, #31
 80016ce:	bf48      	it	mi
 80016d0:	f10e 0e01 	addmi.w	lr, lr, #1
 80016d4:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80016d8:	fa1f fe8e 	uxth.w	lr, lr
 80016dc:	f822 e001 	strh.w	lr, [r2, r1]
 80016e0:	e7dd      	b.n	800169e <HAL_PCD_IRQHandler+0x8fa>
 80016e2:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 80016e6:	06db      	lsls	r3, r3, #27
 80016e8:	bf08      	it	eq
 80016ea:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 80016ee:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 80016f2:	e7f1      	b.n	80016d8 <HAL_PCD_IRQHandler+0x934>
 80016f4:	2a01      	cmp	r2, #1
 80016f6:	d1d2      	bne.n	800169e <HAL_PCD_IRQHandler+0x8fa>
 80016f8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8001702:	4413      	add	r3, r2
 8001704:	010a      	lsls	r2, r1, #4
 8001706:	f823 c002 	strh.w	ip, [r3, r2]
 800170a:	e7c8      	b.n	800169e <HAL_PCD_IRQHandler+0x8fa>

0800170c <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800170c:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001710:	b570      	push	{r4, r5, r6, lr}
 8001712:	4605      	mov	r5, r0
 8001714:	f04f 0428 	mov.w	r4, #40	; 0x28
 8001718:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800171c:	d01c      	beq.n	8001758 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 800171e:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001720:	fb00 4104 	mla	r1, r0, r4, r4
 8001724:	4429      	add	r1, r5
    ep->is_in = 1U;
 8001726:	704e      	strb	r6, [r1, #1]
  ep->maxpacket = ep_mps;
 8001728:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800172a:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172c:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 800172e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001730:	b102      	cbz	r2, 8001734 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8001732:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8001734:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001736:	bf04      	itt	eq
 8001738:	2300      	moveq	r3, #0
 800173a:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800173c:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8001740:	2b01      	cmp	r3, #1
 8001742:	d012      	beq.n	800176a <HAL_PCD_EP_Open+0x5e>
 8001744:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001746:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8001748:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800174c:	f000 fd76 	bl	800223c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001750:	2000      	movs	r0, #0
 8001752:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8001756:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001758:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800175a:	4344      	muls	r4, r0
 800175c:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8001760:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001762:	4429      	add	r1, r5
    ep->is_in = 0U;
 8001764:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8001768:	e7de      	b.n	8001728 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 800176a:	2002      	movs	r0, #2
 800176c:	e7f3      	b.n	8001756 <HAL_PCD_EP_Open+0x4a>

0800176e <HAL_PCD_EP_Receive>:
{
 800176e:	b570      	push	{r4, r5, r6, lr}
 8001770:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8001774:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 8001776:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8001778:	4369      	muls	r1, r5
 800177a:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800177c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001780:	4401      	add	r1, r0
  ep->xfer_len = len;
 8001782:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 8001786:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 800178a:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800178e:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001792:	6800      	ldr	r0, [r0, #0]
 8001794:	f000 ff18 	bl	80025c8 <USB_EPStartXfer>
}
 8001798:	4630      	mov	r0, r6
 800179a:	bd70      	pop	{r4, r5, r6, pc}

0800179c <HAL_PCD_EP_Transmit>:
{
 800179c:	b570      	push	{r4, r5, r6, lr}
 800179e:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 80017a2:	2128      	movs	r1, #40	; 0x28
 80017a4:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 80017a8:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80017aa:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80017ae:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b0:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 80017b4:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017b8:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 80017ba:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80017bc:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80017be:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80017c2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017c6:	6800      	ldr	r0, [r0, #0]
 80017c8:	f000 fefe 	bl	80025c8 <USB_EPStartXfer>
}
 80017cc:	4630      	mov	r0, r6
 80017ce:	bd70      	pop	{r4, r5, r6, pc}

080017d0 <HAL_PCD_EP_SetStall>:
{
 80017d0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017d2:	6843      	ldr	r3, [r0, #4]
 80017d4:	f001 0507 	and.w	r5, r1, #7
 80017d8:	429d      	cmp	r5, r3
{
 80017da:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017dc:	d828      	bhi.n	8001830 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80017de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80017e2:	f04f 0328 	mov.w	r3, #40	; 0x28
 80017e6:	d01a      	beq.n	800181e <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 80017e8:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ea:	fb05 3103 	mla	r1, r5, r3, r3
 80017ee:	4401      	add	r1, r0
    ep->is_in = 1U;
 80017f0:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 80017f2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80017f4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80017f6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80017f8:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d019      	beq.n	8001834 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001800:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001802:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001806:	f000 fe55 	bl	80024b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800180a:	b925      	cbnz	r5, 8001816 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800180c:	6820      	ldr	r0, [r4, #0]
 800180e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001812:	f000 fec6 	bl	80025a2 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001816:	2000      	movs	r0, #0
 8001818:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800181c:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 800181e:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001820:	434b      	muls	r3, r1
 8001822:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8001826:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8001828:	4401      	add	r1, r0
    ep->is_in = 0U;
 800182a:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 800182e:	e7e0      	b.n	80017f2 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8001830:	2001      	movs	r0, #1
 8001832:	e7f3      	b.n	800181c <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8001834:	2002      	movs	r0, #2
 8001836:	e7f1      	b.n	800181c <HAL_PCD_EP_SetStall+0x4c>

08001838 <HAL_PCD_EP_ClrStall>:
{
 8001838:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800183a:	6843      	ldr	r3, [r0, #4]
 800183c:	f001 020f 	and.w	r2, r1, #15
 8001840:	429a      	cmp	r2, r3
{
 8001842:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001844:	d825      	bhi.n	8001892 <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 8001846:	f011 0f80 	tst.w	r1, #128	; 0x80
 800184a:	f04f 0328 	mov.w	r3, #40	; 0x28
 800184e:	f001 0207 	and.w	r2, r1, #7
 8001852:	d015      	beq.n	8001880 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001854:	fb02 3103 	mla	r1, r2, r3, r3
 8001858:	4401      	add	r1, r0
    ep->is_in = 1U;
 800185a:	2001      	movs	r0, #1
 800185c:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 800185e:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001860:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8001862:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8001864:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001868:	2b01      	cmp	r3, #1
 800186a:	d014      	beq.n	8001896 <HAL_PCD_EP_ClrStall+0x5e>
 800186c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800186e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001870:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001874:	f000 fe3e 	bl	80024f4 <USB_EPClearStall>
  return HAL_OK;
 8001878:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800187a:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 800187e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001880:	4353      	muls	r3, r2
 8001882:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8001886:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001888:	4403      	add	r3, r0
 800188a:	2000      	movs	r0, #0
 800188c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8001890:	e7e5      	b.n	800185e <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8001892:	2001      	movs	r0, #1
 8001894:	e7f3      	b.n	800187e <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8001896:	2002      	movs	r0, #2
 8001898:	e7f1      	b.n	800187e <HAL_PCD_EP_ClrStall+0x46>

0800189a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800189a:	b510      	push	{r4, lr}
 800189c:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800189e:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a2:	bf1b      	ittet	ne
 80018a4:	f001 0107 	andne.w	r1, r1, #7
 80018a8:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018ac:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b0:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80018b2:	bf08      	it	eq
 80018b4:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80018b8:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80018ba:	b91a      	cbnz	r2, 80018c4 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80018bc:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80018be:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80018c0:	2000      	movs	r0, #0
 80018c2:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80018c4:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80018c6:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80018c8:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80018ca:	e7f9      	b.n	80018c0 <HAL_PCDEx_PMAConfig+0x26>

080018cc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80018cc:	2201      	movs	r2, #1
 80018ce:	4b01      	ldr	r3, [pc, #4]	; (80018d4 <HAL_PWR_EnableBkUpAccess+0x8>)
 80018d0:	621a      	str	r2, [r3, #32]
}
 80018d2:	4770      	bx	lr
 80018d4:	420e0000 	.word	0x420e0000

080018d8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80018d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80018da:	f7fe ff19 	bl	8000710 <HAL_GetTick>
 80018de:	4605      	mov	r5, r0

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80018e0:	4c2f      	ldr	r4, [pc, #188]	; (80019a0 <HAL_RCC_DeInit+0xc8>)
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	079b      	lsls	r3, r3, #30
 80018ee:	d53b      	bpl.n	8001968 <HAL_RCC_DeInit+0x90>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80018f0:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f2:	f241 3688 	movw	r6, #5000	; 0x1388
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80018f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fe:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001900:	f7fe ff06 	bl	8000710 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 8001904:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 8001906:	4605      	mov	r5, r0
  CLEAR_REG(RCC->CFGR);
 8001908:	6063      	str	r3, [r4, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800190a:	6863      	ldr	r3, [r4, #4]
 800190c:	f013 0f0c 	tst.w	r3, #12
 8001910:	d132      	bne.n	8001978 <HAL_RCC_DeInit+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001912:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_DeInit+0xcc>)
 8001914:	4a24      	ldr	r2, [pc, #144]	; (80019a8 <HAL_RCC_DeInit+0xd0>)
 8001916:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_RCC_DeInit+0xd4>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	f7fe feb6 	bl	800068c <HAL_InitTick>
 8001920:	4605      	mov	r5, r0
 8001922:	2800      	cmp	r0, #0
 8001924:	d13a      	bne.n	800199c <HAL_RCC_DeInit+0xc4>
  {
    return HAL_ERROR;
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001926:	f7fe fef3 	bl	8000710 <HAL_GetTick>
 800192a:	4606      	mov	r6, r0

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001932:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800193a:	d123      	bne.n	8001984 <HAL_RCC_DeInit+0xac>
      return HAL_TIMEOUT;
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 800193c:	6063      	str	r3, [r4, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800193e:	f7fe fee7 	bl	8000710 <HAL_GetTick>
 8001942:	4606      	mov	r6, r0

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800194a:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8001952:	d11d      	bne.n	8001990 <HAL_RCC_DeInit+0xb8>
      return HAL_TIMEOUT;
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001954:	6822      	ldr	r2, [r4, #0]
 8001956:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800195a:	6022      	str	r2, [r4, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800195c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800195e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001962:	6262      	str	r2, [r4, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001964:	60a3      	str	r3, [r4, #8]

  return HAL_OK;
 8001966:	e005      	b.n	8001974 <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001968:	f7fe fed2 	bl	8000710 <HAL_GetTick>
 800196c:	1b40      	subs	r0, r0, r5
 800196e:	2802      	cmp	r0, #2
 8001970:	d9bb      	bls.n	80018ea <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8001972:	2503      	movs	r5, #3
}
 8001974:	4628      	mov	r0, r5
 8001976:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001978:	f7fe feca 	bl	8000710 <HAL_GetTick>
 800197c:	1b40      	subs	r0, r0, r5
 800197e:	42b0      	cmp	r0, r6
 8001980:	d9c3      	bls.n	800190a <HAL_RCC_DeInit+0x32>
 8001982:	e7f6      	b.n	8001972 <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001984:	f7fe fec4 	bl	8000710 <HAL_GetTick>
 8001988:	1b80      	subs	r0, r0, r6
 800198a:	2802      	cmp	r0, #2
 800198c:	d9d2      	bls.n	8001934 <HAL_RCC_DeInit+0x5c>
 800198e:	e7f0      	b.n	8001972 <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7fe febe 	bl	8000710 <HAL_GetTick>
 8001994:	1b80      	subs	r0, r0, r6
 8001996:	2864      	cmp	r0, #100	; 0x64
 8001998:	d9d8      	bls.n	800194c <HAL_RCC_DeInit+0x74>
 800199a:	e7ea      	b.n	8001972 <HAL_RCC_DeInit+0x9a>
    return HAL_ERROR;
 800199c:	2501      	movs	r5, #1
 800199e:	e7e9      	b.n	8001974 <HAL_RCC_DeInit+0x9c>
 80019a0:	40021000 	.word	0x40021000
 80019a4:	20000000 	.word	0x20000000
 80019a8:	007a1200 	.word	0x007a1200
 80019ac:	20000020 	.word	0x20000020

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b4:	4605      	mov	r5, r0
 80019b6:	b338      	cbz	r0, 8001a08 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b8:	6803      	ldr	r3, [r0, #0]
 80019ba:	07db      	lsls	r3, r3, #31
 80019bc:	d410      	bmi.n	80019e0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	682b      	ldr	r3, [r5, #0]
 80019c0:	079f      	lsls	r7, r3, #30
 80019c2:	d45e      	bmi.n	8001a82 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	0719      	lsls	r1, r3, #28
 80019c8:	f100 8095 	bmi.w	8001af6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019cc:	682b      	ldr	r3, [r5, #0]
 80019ce:	075a      	lsls	r2, r3, #29
 80019d0:	f100 80c1 	bmi.w	8001b56 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d4:	69e8      	ldr	r0, [r5, #28]
 80019d6:	2800      	cmp	r0, #0
 80019d8:	f040 812c 	bne.w	8001c34 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80019dc:	2000      	movs	r0, #0
 80019de:	e029      	b.n	8001a34 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e0:	4c90      	ldr	r4, [pc, #576]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 80019e2:	6863      	ldr	r3, [r4, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d007      	beq.n	80019fc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ec:	6863      	ldr	r3, [r4, #4]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d10a      	bne.n	8001a0c <HAL_RCC_OscConfig+0x5c>
 80019f6:	6863      	ldr	r3, [r4, #4]
 80019f8:	03de      	lsls	r6, r3, #15
 80019fa:	d507      	bpl.n	8001a0c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	039c      	lsls	r4, r3, #14
 8001a00:	d5dd      	bpl.n	80019be <HAL_RCC_OscConfig+0xe>
 8001a02:	686b      	ldr	r3, [r5, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1da      	bne.n	80019be <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
 8001a0a:	e013      	b.n	8001a34 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0c:	686b      	ldr	r3, [r5, #4]
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d112      	bne.n	8001a3a <HAL_RCC_OscConfig+0x8a>
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a1c:	f7fe fe78 	bl	8000710 <HAL_GetTick>
 8001a20:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	0398      	lsls	r0, r3, #14
 8001a26:	d4ca      	bmi.n	80019be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7fe fe72 	bl	8000710 <HAL_GetTick>
 8001a2c:	1b80      	subs	r0, r0, r6
 8001a2e:	2864      	cmp	r0, #100	; 0x64
 8001a30:	d9f7      	bls.n	8001a22 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001a32:	2003      	movs	r0, #3
}
 8001a34:	b002      	add	sp, #8
 8001a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3a:	b99b      	cbnz	r3, 8001a64 <HAL_RCC_OscConfig+0xb4>
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a42:	6023      	str	r3, [r4, #0]
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a4c:	f7fe fe60 	bl	8000710 <HAL_GetTick>
 8001a50:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	0399      	lsls	r1, r3, #14
 8001a56:	d5b2      	bpl.n	80019be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7fe fe5a 	bl	8000710 <HAL_GetTick>
 8001a5c:	1b80      	subs	r0, r0, r6
 8001a5e:	2864      	cmp	r0, #100	; 0x64
 8001a60:	d9f7      	bls.n	8001a52 <HAL_RCC_OscConfig+0xa2>
 8001a62:	e7e6      	b.n	8001a32 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	d103      	bne.n	8001a74 <HAL_RCC_OscConfig+0xc4>
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a70:	6023      	str	r3, [r4, #0]
 8001a72:	e7cf      	b.n	8001a14 <HAL_RCC_OscConfig+0x64>
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a78:	6023      	str	r3, [r4, #0]
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a80:	e7cb      	b.n	8001a1a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a82:	4c68      	ldr	r4, [pc, #416]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001a84:	6863      	ldr	r3, [r4, #4]
 8001a86:	f013 0f0c 	tst.w	r3, #12
 8001a8a:	d007      	beq.n	8001a9c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a8c:	6863      	ldr	r3, [r4, #4]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d110      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x108>
 8001a96:	6863      	ldr	r3, [r4, #4]
 8001a98:	03da      	lsls	r2, r3, #15
 8001a9a:	d40d      	bmi.n	8001ab8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	079b      	lsls	r3, r3, #30
 8001aa0:	d502      	bpl.n	8001aa8 <HAL_RCC_OscConfig+0xf8>
 8001aa2:	692b      	ldr	r3, [r5, #16]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d1af      	bne.n	8001a08 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	696a      	ldr	r2, [r5, #20]
 8001aac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ab0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ab4:	6023      	str	r3, [r4, #0]
 8001ab6:	e785      	b.n	80019c4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab8:	692a      	ldr	r2, [r5, #16]
 8001aba:	4b5b      	ldr	r3, [pc, #364]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001abc:	b16a      	cbz	r2, 8001ada <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ac2:	f7fe fe25 	bl	8000710 <HAL_GetTick>
 8001ac6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	079f      	lsls	r7, r3, #30
 8001acc:	d4ec      	bmi.n	8001aa8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ace:	f7fe fe1f 	bl	8000710 <HAL_GetTick>
 8001ad2:	1b80      	subs	r0, r0, r6
 8001ad4:	2802      	cmp	r0, #2
 8001ad6:	d9f7      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x118>
 8001ad8:	e7ab      	b.n	8001a32 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001ada:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001adc:	f7fe fe18 	bl	8000710 <HAL_GetTick>
 8001ae0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	0798      	lsls	r0, r3, #30
 8001ae6:	f57f af6d 	bpl.w	80019c4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aea:	f7fe fe11 	bl	8000710 <HAL_GetTick>
 8001aee:	1b80      	subs	r0, r0, r6
 8001af0:	2802      	cmp	r0, #2
 8001af2:	d9f6      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x132>
 8001af4:	e79d      	b.n	8001a32 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af6:	69aa      	ldr	r2, [r5, #24]
 8001af8:	4e4a      	ldr	r6, [pc, #296]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001afa:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001afc:	b1e2      	cbz	r2, 8001b38 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001afe:	2201      	movs	r2, #1
 8001b00:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001b04:	f7fe fe04 	bl	8000710 <HAL_GetTick>
 8001b08:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b0c:	079b      	lsls	r3, r3, #30
 8001b0e:	d50d      	bpl.n	8001b2c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b10:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b14:	4b45      	ldr	r3, [pc, #276]	; (8001c2c <HAL_RCC_OscConfig+0x27c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b1c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001b1e:	bf00      	nop
  }
  while (Delay --);
 8001b20:	9b01      	ldr	r3, [sp, #4]
 8001b22:	1e5a      	subs	r2, r3, #1
 8001b24:	9201      	str	r2, [sp, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f9      	bne.n	8001b1e <HAL_RCC_OscConfig+0x16e>
 8001b2a:	e74f      	b.n	80019cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7fe fdf0 	bl	8000710 <HAL_GetTick>
 8001b30:	1b00      	subs	r0, r0, r4
 8001b32:	2802      	cmp	r0, #2
 8001b34:	d9e9      	bls.n	8001b0a <HAL_RCC_OscConfig+0x15a>
 8001b36:	e77c      	b.n	8001a32 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001b38:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001b3c:	f7fe fde8 	bl	8000710 <HAL_GetTick>
 8001b40:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b42:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b44:	079f      	lsls	r7, r3, #30
 8001b46:	f57f af41 	bpl.w	80019cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4a:	f7fe fde1 	bl	8000710 <HAL_GetTick>
 8001b4e:	1b00      	subs	r0, r0, r4
 8001b50:	2802      	cmp	r0, #2
 8001b52:	d9f6      	bls.n	8001b42 <HAL_RCC_OscConfig+0x192>
 8001b54:	e76d      	b.n	8001a32 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b56:	4c33      	ldr	r4, [pc, #204]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001b58:	69e3      	ldr	r3, [r4, #28]
 8001b5a:	00d8      	lsls	r0, r3, #3
 8001b5c:	d424      	bmi.n	8001ba8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001b5e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b60:	69e3      	ldr	r3, [r4, #28]
 8001b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b66:	61e3      	str	r3, [r4, #28]
 8001b68:	69e3      	ldr	r3, [r4, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4e2f      	ldr	r6, [pc, #188]	; (8001c30 <HAL_RCC_OscConfig+0x280>)
 8001b74:	6833      	ldr	r3, [r6, #0]
 8001b76:	05d9      	lsls	r1, r3, #23
 8001b78:	d518      	bpl.n	8001bac <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7a:	68eb      	ldr	r3, [r5, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d126      	bne.n	8001bce <HAL_RCC_OscConfig+0x21e>
 8001b80:	6a23      	ldr	r3, [r4, #32]
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b88:	f7fe fdc2 	bl	8000710 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b90:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b92:	6a23      	ldr	r3, [r4, #32]
 8001b94:	079b      	lsls	r3, r3, #30
 8001b96:	d53f      	bpl.n	8001c18 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001b98:	2f00      	cmp	r7, #0
 8001b9a:	f43f af1b 	beq.w	80019d4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	69e3      	ldr	r3, [r4, #28]
 8001ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	61e3      	str	r3, [r4, #28]
 8001ba6:	e715      	b.n	80019d4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001ba8:	2700      	movs	r7, #0
 8001baa:	e7e2      	b.n	8001b72 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bac:	6833      	ldr	r3, [r6, #0]
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001bb4:	f7fe fdac 	bl	8000710 <HAL_GetTick>
 8001bb8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	6833      	ldr	r3, [r6, #0]
 8001bbc:	05da      	lsls	r2, r3, #23
 8001bbe:	d4dc      	bmi.n	8001b7a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc0:	f7fe fda6 	bl	8000710 <HAL_GetTick>
 8001bc4:	eba0 0008 	sub.w	r0, r0, r8
 8001bc8:	2864      	cmp	r0, #100	; 0x64
 8001bca:	d9f6      	bls.n	8001bba <HAL_RCC_OscConfig+0x20a>
 8001bcc:	e731      	b.n	8001a32 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bce:	b9ab      	cbnz	r3, 8001bfc <HAL_RCC_OscConfig+0x24c>
 8001bd0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	6223      	str	r3, [r4, #32]
 8001bdc:	6a23      	ldr	r3, [r4, #32]
 8001bde:	f023 0304 	bic.w	r3, r3, #4
 8001be2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001be4:	f7fe fd94 	bl	8000710 <HAL_GetTick>
 8001be8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bea:	6a23      	ldr	r3, [r4, #32]
 8001bec:	0798      	lsls	r0, r3, #30
 8001bee:	d5d3      	bpl.n	8001b98 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7fe fd8e 	bl	8000710 <HAL_GetTick>
 8001bf4:	1b80      	subs	r0, r0, r6
 8001bf6:	4540      	cmp	r0, r8
 8001bf8:	d9f7      	bls.n	8001bea <HAL_RCC_OscConfig+0x23a>
 8001bfa:	e71a      	b.n	8001a32 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	6a23      	ldr	r3, [r4, #32]
 8001c00:	d103      	bne.n	8001c0a <HAL_RCC_OscConfig+0x25a>
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	6223      	str	r3, [r4, #32]
 8001c08:	e7ba      	b.n	8001b80 <HAL_RCC_OscConfig+0x1d0>
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6223      	str	r3, [r4, #32]
 8001c10:	6a23      	ldr	r3, [r4, #32]
 8001c12:	f023 0304 	bic.w	r3, r3, #4
 8001c16:	e7b6      	b.n	8001b86 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7fe fd7a 	bl	8000710 <HAL_GetTick>
 8001c1c:	1b80      	subs	r0, r0, r6
 8001c1e:	4540      	cmp	r0, r8
 8001c20:	d9b7      	bls.n	8001b92 <HAL_RCC_OscConfig+0x1e2>
 8001c22:	e706      	b.n	8001a32 <HAL_RCC_OscConfig+0x82>
 8001c24:	40021000 	.word	0x40021000
 8001c28:	42420000 	.word	0x42420000
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c34:	4c2a      	ldr	r4, [pc, #168]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001c36:	6863      	ldr	r3, [r4, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d03e      	beq.n	8001cbe <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c40:	2200      	movs	r2, #0
 8001c42:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <HAL_RCC_OscConfig+0x334>)
 8001c44:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001c46:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c48:	d12c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001c4a:	f7fe fd61 	bl	8000710 <HAL_GetTick>
 8001c4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	0199      	lsls	r1, r3, #6
 8001c54:	d420      	bmi.n	8001c98 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c56:	6a2b      	ldr	r3, [r5, #32]
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c5e:	6862      	ldr	r2, [r4, #4]
 8001c60:	68a9      	ldr	r1, [r5, #8]
 8001c62:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c66:	430a      	orrs	r2, r1
 8001c68:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001c6c:	6862      	ldr	r2, [r4, #4]
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001c74:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001c76:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c78:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_RCC_OscConfig+0x334>)
 8001c7c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001c7e:	f7fe fd47 	bl	8000710 <HAL_GetTick>
 8001c82:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	019a      	lsls	r2, r3, #6
 8001c88:	f53f aea8 	bmi.w	80019dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe fd40 	bl	8000710 <HAL_GetTick>
 8001c90:	1b40      	subs	r0, r0, r5
 8001c92:	2802      	cmp	r0, #2
 8001c94:	d9f6      	bls.n	8001c84 <HAL_RCC_OscConfig+0x2d4>
 8001c96:	e6cc      	b.n	8001a32 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7fe fd3a 	bl	8000710 <HAL_GetTick>
 8001c9c:	1b80      	subs	r0, r0, r6
 8001c9e:	2802      	cmp	r0, #2
 8001ca0:	d9d6      	bls.n	8001c50 <HAL_RCC_OscConfig+0x2a0>
 8001ca2:	e6c6      	b.n	8001a32 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001ca4:	f7fe fd34 	bl	8000710 <HAL_GetTick>
 8001ca8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	019b      	lsls	r3, r3, #6
 8001cae:	f57f ae95 	bpl.w	80019dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7fe fd2d 	bl	8000710 <HAL_GetTick>
 8001cb6:	1b40      	subs	r0, r0, r5
 8001cb8:	2802      	cmp	r0, #2
 8001cba:	d9f6      	bls.n	8001caa <HAL_RCC_OscConfig+0x2fa>
 8001cbc:	e6b9      	b.n	8001a32 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbe:	2801      	cmp	r0, #1
 8001cc0:	f43f aeb8 	beq.w	8001a34 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001cc4:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	6a2a      	ldr	r2, [r5, #32]
 8001cc8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001ccc:	4291      	cmp	r1, r2
 8001cce:	f47f ae9b 	bne.w	8001a08 <HAL_RCC_OscConfig+0x58>
 8001cd2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	f43f ae7f 	beq.w	80019dc <HAL_RCC_OscConfig+0x2c>
 8001cde:	e693      	b.n	8001a08 <HAL_RCC_OscConfig+0x58>
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	42420000 	.word	0x42420000

08001ce8 <HAL_RCC_GetSysClockFreq>:
{
 8001ce8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001cec:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cee:	ac02      	add	r4, sp, #8
 8001cf0:	f103 0510 	add.w	r5, r3, #16
 8001cf4:	4622      	mov	r2, r4
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	3308      	adds	r3, #8
 8001cfc:	c203      	stmia	r2!, {r0, r1}
 8001cfe:	42ab      	cmp	r3, r5
 8001d00:	4614      	mov	r4, r2
 8001d02:	d1f7      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d04:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001d08:	4911      	ldr	r1, [pc, #68]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d0a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001d0e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d10:	f003 020c 	and.w	r2, r3, #12
 8001d14:	2a08      	cmp	r2, #8
 8001d16:	d117      	bne.n	8001d48 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d18:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001d1c:	3218      	adds	r2, #24
 8001d1e:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d20:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d22:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d26:	d50c      	bpl.n	8001d42 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d28:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d2c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d30:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d32:	3318      	adds	r3, #24
 8001d34:	446b      	add	r3, sp
 8001d36:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d3a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d3e:	b007      	add	sp, #28
 8001d40:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x70>)
 8001d44:	4358      	muls	r0, r3
 8001d46:	e7fa      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001d4a:	e7f8      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x56>
 8001d4c:	08003be4 	.word	0x08003be4
 8001d50:	40021000 	.word	0x40021000
 8001d54:	007a1200 	.word	0x007a1200
 8001d58:	003d0900 	.word	0x003d0900

08001d5c <HAL_RCC_ClockConfig>:
{
 8001d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d60:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001d62:	4604      	mov	r4, r0
 8001d64:	b910      	cbnz	r0, 8001d6c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d66:	2001      	movs	r0, #1
}
 8001d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4a44      	ldr	r2, [pc, #272]	; (8001e80 <HAL_RCC_ClockConfig+0x124>)
 8001d6e:	6813      	ldr	r3, [r2, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	428b      	cmp	r3, r1
 8001d76:	d328      	bcc.n	8001dca <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	6821      	ldr	r1, [r4, #0]
 8001d7a:	078e      	lsls	r6, r1, #30
 8001d7c:	d430      	bmi.n	8001de0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7e:	07ca      	lsls	r2, r1, #31
 8001d80:	d443      	bmi.n	8001e0a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d82:	4a3f      	ldr	r2, [pc, #252]	; (8001e80 <HAL_RCC_ClockConfig+0x124>)
 8001d84:	6813      	ldr	r3, [r2, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	42ab      	cmp	r3, r5
 8001d8c:	d865      	bhi.n	8001e5a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8e:	6822      	ldr	r2, [r4, #0]
 8001d90:	4d3c      	ldr	r5, [pc, #240]	; (8001e84 <HAL_RCC_ClockConfig+0x128>)
 8001d92:	f012 0f04 	tst.w	r2, #4
 8001d96:	d16c      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d98:	0713      	lsls	r3, r2, #28
 8001d9a:	d506      	bpl.n	8001daa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d9c:	686b      	ldr	r3, [r5, #4]
 8001d9e:	6922      	ldr	r2, [r4, #16]
 8001da0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001da4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001da8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001daa:	f7ff ff9d 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001dae:	686b      	ldr	r3, [r5, #4]
 8001db0:	4a35      	ldr	r2, [pc, #212]	; (8001e88 <HAL_RCC_ClockConfig+0x12c>)
 8001db2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	40d8      	lsrs	r0, r3
 8001dba:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_RCC_ClockConfig+0x130>)
 8001dbc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001dbe:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <HAL_RCC_ClockConfig+0x134>)
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	f7fe fc63 	bl	800068c <HAL_InitTick>
  return HAL_OK;
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	e7ce      	b.n	8001d68 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	6813      	ldr	r3, [r2, #0]
 8001dcc:	f023 0307 	bic.w	r3, r3, #7
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd4:	6813      	ldr	r3, [r2, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	428b      	cmp	r3, r1
 8001ddc:	d1c3      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xa>
 8001dde:	e7cb      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <HAL_RCC_ClockConfig+0x128>)
 8001de2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de6:	bf1e      	ittt	ne
 8001de8:	685a      	ldrne	r2, [r3, #4]
 8001dea:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001dee:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df2:	bf42      	ittt	mi
 8001df4:	685a      	ldrmi	r2, [r3, #4]
 8001df6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001dfa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	68a0      	ldr	r0, [r4, #8]
 8001e00:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e04:	4302      	orrs	r2, r0
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	e7b9      	b.n	8001d7e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0a:	6862      	ldr	r2, [r4, #4]
 8001e0c:	4e1d      	ldr	r6, [pc, #116]	; (8001e84 <HAL_RCC_ClockConfig+0x128>)
 8001e0e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e10:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	d11a      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	d0a5      	beq.n	8001d66 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e20:	f023 0303 	bic.w	r3, r3, #3
 8001e24:	4313      	orrs	r3, r2
 8001e26:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001e28:	f7fe fc72 	bl	8000710 <HAL_GetTick>
 8001e2c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	6873      	ldr	r3, [r6, #4]
 8001e30:	6862      	ldr	r2, [r4, #4]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e3a:	d0a2      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7fe fc68 	bl	8000710 <HAL_GetTick>
 8001e40:	1bc0      	subs	r0, r0, r7
 8001e42:	4540      	cmp	r0, r8
 8001e44:	d9f3      	bls.n	8001e2e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001e46:	2003      	movs	r0, #3
 8001e48:	e78e      	b.n	8001d68 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4a:	2a02      	cmp	r2, #2
 8001e4c:	d102      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e52:	e7e1      	b.n	8001e18 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	f013 0f02 	tst.w	r3, #2
 8001e58:	e7de      	b.n	8001e18 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	f023 0307 	bic.w	r3, r3, #7
 8001e60:	432b      	orrs	r3, r5
 8001e62:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e64:	6813      	ldr	r3, [r2, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	42ab      	cmp	r3, r5
 8001e6c:	f47f af7b 	bne.w	8001d66 <HAL_RCC_ClockConfig+0xa>
 8001e70:	e78d      	b.n	8001d8e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e72:	686b      	ldr	r3, [r5, #4]
 8001e74:	68e1      	ldr	r1, [r4, #12]
 8001e76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e7a:	430b      	orrs	r3, r1
 8001e7c:	606b      	str	r3, [r5, #4]
 8001e7e:	e78b      	b.n	8001d98 <HAL_RCC_ClockConfig+0x3c>
 8001e80:	40022000 	.word	0x40022000
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08003bcc 	.word	0x08003bcc
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000020 	.word	0x20000020

08001e94 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ea2:	6810      	ldr	r0, [r2, #0]
}
 8001ea4:	40d8      	lsrs	r0, r3
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08003bdc 	.word	0x08003bdc
 8001eb0:	20000000 	.word	0x20000000

08001eb4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eb4:	6803      	ldr	r3, [r0, #0]
{
 8001eb6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eba:	07d9      	lsls	r1, r3, #31
{
 8001ebc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ebe:	d520      	bpl.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec0:	4c36      	ldr	r4, [pc, #216]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001ec2:	69e3      	ldr	r3, [r4, #28]
 8001ec4:	00da      	lsls	r2, r3, #3
 8001ec6:	d432      	bmi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001ec8:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	69e3      	ldr	r3, [r4, #28]
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	61e3      	str	r3, [r4, #28]
 8001ed2:	69e3      	ldr	r3, [r4, #28]
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	4f30      	ldr	r7, [pc, #192]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	05db      	lsls	r3, r3, #23
 8001ee2:	d526      	bpl.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ee4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001eea:	d136      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eec:	6a23      	ldr	r3, [r4, #32]
 8001eee:	686a      	ldr	r2, [r5, #4]
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ef8:	b11e      	cbz	r6, 8001f02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efa:	69e3      	ldr	r3, [r4, #28]
 8001efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f00:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f02:	6828      	ldr	r0, [r5, #0]
 8001f04:	0783      	lsls	r3, r0, #30
 8001f06:	d506      	bpl.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f08:	4924      	ldr	r1, [pc, #144]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f0a:	68ab      	ldr	r3, [r5, #8]
 8001f0c:	684a      	ldr	r2, [r1, #4]
 8001f0e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001f12:	431a      	orrs	r2, r3
 8001f14:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f16:	f010 0010 	ands.w	r0, r0, #16
 8001f1a:	d01b      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f1c:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f1e:	68e9      	ldr	r1, [r5, #12]
 8001f20:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f22:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6053      	str	r3, [r2, #4]
 8001f2c:	e012      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8001f2e:	2600      	movs	r6, #0
 8001f30:	e7d4      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fbe9 	bl	8000710 <HAL_GetTick>
 8001f3e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	05d8      	lsls	r0, r3, #23
 8001f44:	d4ce      	bmi.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7fe fbe3 	bl	8000710 <HAL_GetTick>
 8001f4a:	eba0 0008 	sub.w	r0, r0, r8
 8001f4e:	2864      	cmp	r0, #100	; 0x64
 8001f50:	d9f6      	bls.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001f52:	2003      	movs	r0, #3
}
 8001f54:	b002      	add	sp, #8
 8001f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f5a:	686a      	ldr	r2, [r5, #4]
 8001f5c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d0c3      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f64:	2001      	movs	r0, #1
 8001f66:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f68:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f6a:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f6e:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f74:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8001f78:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f7a:	07d9      	lsls	r1, r3, #31
 8001f7c:	d5b6      	bpl.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001f7e:	f7fe fbc7 	bl	8000710 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f86:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	6a23      	ldr	r3, [r4, #32]
 8001f8a:	079a      	lsls	r2, r3, #30
 8001f8c:	d4ae      	bmi.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fbbf 	bl	8000710 <HAL_GetTick>
 8001f92:	1bc0      	subs	r0, r0, r7
 8001f94:	4540      	cmp	r0, r8
 8001f96:	d9f7      	bls.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f98:	e7db      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	42420000 	.word	0x42420000

08001fa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001fa8:	4602      	mov	r2, r0
 8001faa:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 8001fae:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fb0:	ad02      	add	r5, sp, #8
 8001fb2:	f103 0610 	add.w	r6, r3, #16
 8001fb6:	462c      	mov	r4, r5
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	3308      	adds	r3, #8
 8001fbe:	c403      	stmia	r4!, {r0, r1}
 8001fc0:	42b3      	cmp	r3, r6
 8001fc2:	4625      	mov	r5, r4
 8001fc4:	d1f7      	bne.n	8001fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fc6:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001fca:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fcc:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8001fd0:	d047      	beq.n	8002062 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8001fd2:	2a10      	cmp	r2, #16
 8001fd4:	d003      	beq.n	8001fde <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8001fd6:	2a01      	cmp	r2, #1
 8001fd8:	d024      	beq.n	8002024 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8001fda:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8001fdc:	e036      	b.n	800204c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 8001fde:	4a28      	ldr	r2, [pc, #160]	; (8002080 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8001fe0:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001fe2:	6810      	ldr	r0, [r2, #0]
 8001fe4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001fe8:	d030      	beq.n	800204c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fea:	f3c1 4383 	ubfx	r3, r1, #18, #4
 8001fee:	3318      	adds	r3, #24
 8001ff0:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ff2:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ff4:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff8:	bf49      	itett	mi
 8001ffa:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ffc:	4b21      	ldrpl	r3, [pc, #132]	; (8002084 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ffe:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 8002002:	3318      	addmi	r3, #24
 8002004:	bf41      	itttt	mi
 8002006:	446b      	addmi	r3, sp
 8002008:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800200c:	4b1e      	ldrmi	r3, [pc, #120]	; (8002088 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800200e:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002012:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002014:	6853      	ldr	r3, [r2, #4]
 8002016:	025b      	lsls	r3, r3, #9
 8002018:	d418      	bmi.n	800204c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 800201a:	2303      	movs	r3, #3
 800201c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800201e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002022:	e013      	b.n	800204c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002024:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8002028:	4a15      	ldr	r2, [pc, #84]	; (8002080 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 800202a:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800202c:	4019      	ands	r1, r3
 800202e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8002032:	d01f      	beq.n	8002074 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203c:	d108      	bne.n	8002050 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 800203e:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002042:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8002044:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8002048:	bf18      	it	ne
 800204a:	4618      	movne	r0, r3
}
 800204c:	b006      	add	sp, #24
 800204e:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002054:	d1c1      	bne.n	8001fda <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 8002056:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8002058:	f24f 4324 	movw	r3, #62500	; 0xf424
 800205c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8002060:	e7f2      	b.n	8002048 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002062:	f7ff ff17 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800206e:	3301      	adds	r3, #1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	e7d4      	b.n	800201e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 8002074:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002078:	e7e8      	b.n	800204c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800207a:	bf00      	nop
 800207c:	08003be4 	.word	0x08003be4
 8002080:	40021000 	.word	0x40021000
 8002084:	003d0900 	.word	0x003d0900
 8002088:	007a1200 	.word	0x007a1200

0800208c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800208c:	b538      	push	{r3, r4, r5, lr}
 800208e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8002090:	f7fe fb3e 	bl	8000710 <HAL_GetTick>
 8002094:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	0692      	lsls	r2, r2, #26
 800209c:	d505      	bpl.n	80020aa <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 800209e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	f042 0210 	orr.w	r2, r2, #16
 80020a6:	605a      	str	r2, [r3, #4]
}
 80020a8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020aa:	f7fe fb31 	bl	8000710 <HAL_GetTick>
 80020ae:	1b40      	subs	r0, r0, r5
 80020b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020b4:	d9ef      	bls.n	8002096 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80020b6:	2003      	movs	r0, #3
 80020b8:	e7f6      	b.n	80020a8 <RTC_EnterInitMode+0x1c>

080020ba <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ba:	6802      	ldr	r2, [r0, #0]
{
 80020bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020be:	6853      	ldr	r3, [r2, #4]
{
 80020c0:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020c2:	f023 0310 	bic.w	r3, r3, #16
 80020c6:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 80020c8:	f7fe fb22 	bl	8000710 <HAL_GetTick>
 80020cc:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	069b      	lsls	r3, r3, #26
 80020d4:	d501      	bpl.n	80020da <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80020d6:	2000      	movs	r0, #0
}
 80020d8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020da:	f7fe fb19 	bl	8000710 <HAL_GetTick>
 80020de:	1b40      	subs	r0, r0, r5
 80020e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020e4:	d9f3      	bls.n	80020ce <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80020e6:	2003      	movs	r0, #3
 80020e8:	e7f6      	b.n	80020d8 <RTC_ExitInitMode+0x1e>

080020ea <HAL_RTC_WaitForSynchro>:
{
 80020ea:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80020ec:	4604      	mov	r4, r0
 80020ee:	b1a8      	cbz	r0, 800211c <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80020f0:	6802      	ldr	r2, [r0, #0]
 80020f2:	6853      	ldr	r3, [r2, #4]
 80020f4:	f023 0308 	bic.w	r3, r3, #8
 80020f8:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80020fa:	f7fe fb09 	bl	8000710 <HAL_GetTick>
 80020fe:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	071b      	lsls	r3, r3, #28
 8002106:	d501      	bpl.n	800210c <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8002108:	2000      	movs	r0, #0
}
 800210a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800210c:	f7fe fb00 	bl	8000710 <HAL_GetTick>
 8002110:	1b40      	subs	r0, r0, r5
 8002112:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002116:	d9f3      	bls.n	8002100 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8002118:	2003      	movs	r0, #3
 800211a:	e7f6      	b.n	800210a <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 800211c:	2001      	movs	r0, #1
 800211e:	e7f4      	b.n	800210a <HAL_RTC_WaitForSynchro+0x20>

08002120 <HAL_RTC_Init>:
{
 8002120:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8002122:	4604      	mov	r4, r0
 8002124:	b170      	cbz	r0, 8002144 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002126:	7c43      	ldrb	r3, [r0, #17]
 8002128:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800212c:	b913      	cbnz	r3, 8002134 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800212e:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8002130:	f7fe fa46 	bl	80005c0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002134:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002136:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002138:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800213a:	f7ff ffd6 	bl	80020ea <HAL_RTC_WaitForSynchro>
 800213e:	b118      	cbz	r0, 8002148 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002140:	2304      	movs	r3, #4
 8002142:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002144:	2001      	movs	r0, #1
 8002146:	e036      	b.n	80021b6 <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002148:	4620      	mov	r0, r4
 800214a:	f7ff ff9f 	bl	800208c <RTC_EnterInitMode>
 800214e:	2800      	cmp	r0, #0
 8002150:	d1f6      	bne.n	8002140 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002152:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002154:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002156:	6853      	ldr	r3, [r2, #4]
 8002158:	f023 0307 	bic.w	r3, r3, #7
 800215c:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800215e:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <HAL_RTC_Init+0x98>)
 8002160:	b118      	cbz	r0, 800216a <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002162:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002164:	f021 0101 	bic.w	r1, r1, #1
 8002168:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800216a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800216c:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8002170:	4303      	orrs	r3, r0
 8002172:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002174:	6860      	ldr	r0, [r4, #4]
 8002176:	1c43      	adds	r3, r0, #1
 8002178:	d105      	bne.n	8002186 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800217a:	2001      	movs	r0, #1
 800217c:	f7ff ff14 	bl	8001fa8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002180:	2800      	cmp	r0, #0
 8002182:	d0dd      	beq.n	8002140 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8002184:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	6893      	ldr	r3, [r2, #8]
 800218a:	f023 030f 	bic.w	r3, r3, #15
 800218e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002192:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002194:	68d3      	ldr	r3, [r2, #12]
 8002196:	b280      	uxth	r0, r0
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	041b      	lsls	r3, r3, #16
 800219c:	4318      	orrs	r0, r3
 800219e:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80021a0:	4620      	mov	r0, r4
 80021a2:	f7ff ff8a 	bl	80020ba <RTC_ExitInitMode>
 80021a6:	2301      	movs	r3, #1
 80021a8:	b110      	cbz	r0, 80021b0 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80021aa:	2204      	movs	r2, #4
 80021ac:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 80021ae:	e7c9      	b.n	8002144 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80021b0:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80021b2:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80021b4:	7463      	strb	r3, [r4, #17]
}
 80021b6:	bd10      	pop	{r4, pc}
 80021b8:	40006c00 	.word	0x40006c00

080021bc <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 80021bc:	0089      	lsls	r1, r1, #2
 80021be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80021c2:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80021c6:	b292      	uxth	r2, r2
 80021c8:	600a      	str	r2, [r1, #0]
}
 80021ca:	4770      	bx	lr

080021cc <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 80021cc:	0089      	lsls	r1, r1, #2
 80021ce:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80021d2:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80021d6:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 80021d8:	b280      	uxth	r0, r0
 80021da:	4770      	bx	lr

080021dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021dc:	b084      	sub	sp, #16
 80021de:	a801      	add	r0, sp, #4
 80021e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80021e4:	b004      	add	sp, #16
 80021e6:	2000      	movs	r0, #0
 80021e8:	4770      	bx	lr

080021ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80021ea:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80021ec:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 80021f0:	2000      	movs	r0, #0
 80021f2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80021f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80021fa:	4770      	bx	lr

080021fc <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80021fc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002200:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002204:	045b      	lsls	r3, r3, #17
 8002206:	0c5b      	lsrs	r3, r3, #17
 8002208:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800220c:	2000      	movs	r0, #0
 800220e:	4770      	bx	lr

08002210 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002210:	2000      	movs	r0, #0
 8002212:	4770      	bx	lr

08002214 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002214:	b084      	sub	sp, #16
 8002216:	b510      	push	{r4, lr}
 8002218:	4604      	mov	r4, r0
 800221a:	a803      	add	r0, sp, #12
 800221c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002220:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002222:	2301      	movs	r3, #1
 8002224:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8002228:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800222c:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002230:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8002234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002238:	b004      	add	sp, #16
 800223a:	4770      	bx	lr

0800223c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800223c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800223e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002240:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002242:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8002246:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002248:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 800224c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002250:	0424      	lsls	r4, r4, #16
 8002252:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8002254:	2d03      	cmp	r5, #3
 8002256:	d848      	bhi.n	80022ea <USB_ActivateEndpoint+0xae>
 8002258:	e8df f005 	tbb	[pc, r5]
 800225c:	40424402 	.word	0x40424402
  HAL_StatusTypeDef ret = HAL_OK;
 8002260:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002262:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002266:	f248 0680 	movw	r6, #32896	; 0x8080
 800226a:	4334      	orrs	r4, r6
 800226c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002270:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002274:	4f8c      	ldr	r7, [pc, #560]	; (80024a8 <USB_ActivateEndpoint+0x26c>)
 8002276:	b2a4      	uxth	r4, r4
 8002278:	403c      	ands	r4, r7
 800227a:	4314      	orrs	r4, r2
 800227c:	4334      	orrs	r4, r6
 800227e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8002282:	7b0c      	ldrb	r4, [r1, #12]
 8002284:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8002288:	2c00      	cmp	r4, #0
 800228a:	d17b      	bne.n	8002384 <USB_ActivateEndpoint+0x148>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800228c:	88ce      	ldrh	r6, [r1, #6]
    if (ep->is_in != 0U)
 800228e:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002290:	0876      	lsrs	r6, r6, #1
 8002292:	0076      	lsls	r6, r6, #1
    if (ep->is_in != 0U)
 8002294:	b35c      	cbz	r4, 80022ee <USB_ActivateEndpoint+0xb2>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002296:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800229a:	b2a4      	uxth	r4, r4
 800229c:	4464      	add	r4, ip
 800229e:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80022a2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80022a6:	064e      	lsls	r6, r1, #25
 80022a8:	d509      	bpl.n	80022be <USB_ActivateEndpoint+0x82>
 80022aa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80022ae:	b289      	uxth	r1, r1
 80022b0:	4039      	ands	r1, r7
 80022b2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80022b6:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80022ba:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80022be:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80022c2:	4c7a      	ldr	r4, [pc, #488]	; (80024ac <USB_ActivateEndpoint+0x270>)
 80022c4:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 80022c6:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80022c8:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80022cc:	d001      	beq.n	80022d2 <USB_ActivateEndpoint+0x96>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80022ce:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022d2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80022d6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80022da:	e0a9      	b.n	8002430 <USB_ActivateEndpoint+0x1f4>
      wEpRegVal |= USB_EP_INTERRUPT;
 80022dc:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80022e0:	2000      	movs	r0, #0
      break;
 80022e2:	e7c0      	b.n	8002266 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80022e4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 80022e8:	e7fa      	b.n	80022e0 <USB_ActivateEndpoint+0xa4>
  switch (ep->type)
 80022ea:	2001      	movs	r0, #1
 80022ec:	e7bb      	b.n	8002266 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022ee:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022f2:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022f4:	b2a4      	uxth	r4, r4
 80022f6:	4464      	add	r4, ip
 80022f8:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022fc:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002300:	b2a4      	uxth	r4, r4
 8002302:	4464      	add	r4, ip
 8002304:	bb6d      	cbnz	r5, 8002362 <USB_ActivateEndpoint+0x126>
 8002306:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 800230a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800230e:	0409      	lsls	r1, r1, #16
 8002310:	0c09      	lsrs	r1, r1, #16
 8002312:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
 8002316:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 800231a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800231e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002322:	b289      	uxth	r1, r1
 8002324:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002328:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800232c:	044f      	lsls	r7, r1, #17
 800232e:	d50d      	bpl.n	800234c <USB_ActivateEndpoint+0x110>
 8002330:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002334:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002338:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800233c:	0409      	lsls	r1, r1, #16
 800233e:	0c09      	lsrs	r1, r1, #16
 8002340:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8002344:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002348:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800234c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002350:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8002354:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002358:	0409      	lsls	r1, r1, #16
 800235a:	0c09      	lsrs	r1, r1, #16
 800235c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8002360:	e7b7      	b.n	80022d2 <USB_ActivateEndpoint+0x96>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002362:	2d3e      	cmp	r5, #62	; 0x3e
 8002364:	d805      	bhi.n	8002372 <USB_ActivateEndpoint+0x136>
 8002366:	0869      	lsrs	r1, r5, #1
 8002368:	07ed      	lsls	r5, r5, #31
 800236a:	bf48      	it	mi
 800236c:	3101      	addmi	r1, #1
 800236e:	0289      	lsls	r1, r1, #10
 8002370:	e7d7      	b.n	8002322 <USB_ActivateEndpoint+0xe6>
 8002372:	096e      	lsrs	r6, r5, #5
 8002374:	06e9      	lsls	r1, r5, #27
 8002376:	494e      	ldr	r1, [pc, #312]	; (80024b0 <USB_ActivateEndpoint+0x274>)
 8002378:	bf08      	it	eq
 800237a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800237e:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002382:	e7ce      	b.n	8002322 <USB_ActivateEndpoint+0xe6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002384:	f833 6022 	ldrh.w	r6, [r3, r2, lsl #2]
 8002388:	b2b6      	uxth	r6, r6
 800238a:	403e      	ands	r6, r7
 800238c:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
 8002390:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8002394:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002398:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800239c:	890e      	ldrh	r6, [r1, #8]
 800239e:	b2a4      	uxth	r4, r4
 80023a0:	0876      	lsrs	r6, r6, #1
 80023a2:	4464      	add	r4, ip
 80023a4:	0076      	lsls	r6, r6, #1
 80023a6:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 80023aa:	894e      	ldrh	r6, [r1, #10]
 80023ac:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80023b0:	0876      	lsrs	r6, r6, #1
 80023b2:	b2a4      	uxth	r4, r4
 80023b4:	4464      	add	r4, ip
 80023b6:	0076      	lsls	r6, r6, #1
 80023b8:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 80023bc:	7849      	ldrb	r1, [r1, #1]
 80023be:	bbd1      	cbnz	r1, 8002436 <USB_ActivateEndpoint+0x1fa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023c0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023c4:	044e      	lsls	r6, r1, #17
 80023c6:	d509      	bpl.n	80023dc <USB_ActivateEndpoint+0x1a0>
 80023c8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023cc:	b289      	uxth	r1, r1
 80023ce:	4039      	ands	r1, r7
 80023d0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80023d4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80023d8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023dc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023e0:	064d      	lsls	r5, r1, #25
 80023e2:	d50d      	bpl.n	8002400 <USB_ActivateEndpoint+0x1c4>
 80023e4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023e8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80023ec:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80023f0:	0409      	lsls	r1, r1, #16
 80023f2:	0c09      	lsrs	r1, r1, #16
 80023f4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80023f8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80023fc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002400:	f248 0480 	movw	r4, #32896	; 0x8080
 8002404:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002408:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800240c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002410:	0409      	lsls	r1, r1, #16
 8002412:	0c09      	lsrs	r1, r1, #16
 8002414:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8002418:	4321      	orrs	r1, r4
 800241a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800241e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002422:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002426:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800242a:	0409      	lsls	r1, r1, #16
 800242c:	0c09      	lsrs	r1, r1, #16
 800242e:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002430:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
    }
  }

  return ret;
}
 8002434:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002436:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800243a:	044c      	lsls	r4, r1, #17
 800243c:	d509      	bpl.n	8002452 <USB_ActivateEndpoint+0x216>
 800243e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002442:	b289      	uxth	r1, r1
 8002444:	4039      	ands	r1, r7
 8002446:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800244a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800244e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002452:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002456:	0649      	lsls	r1, r1, #25
 8002458:	d50d      	bpl.n	8002476 <USB_ActivateEndpoint+0x23a>
 800245a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800245e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002462:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002466:	0409      	lsls	r1, r1, #16
 8002468:	0c09      	lsrs	r1, r1, #16
 800246a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800246e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8002472:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002476:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800247a:	4c0c      	ldr	r4, [pc, #48]	; (80024ac <USB_ActivateEndpoint+0x270>)
 800247c:	b289      	uxth	r1, r1
 800247e:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8002480:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002482:	bf18      	it	ne
 8002484:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002488:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800248c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002490:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002494:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002498:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800249c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80024a0:	0409      	lsls	r1, r1, #16
 80024a2:	0c09      	lsrs	r1, r1, #16
 80024a4:	e715      	b.n	80022d2 <USB_ActivateEndpoint+0x96>
 80024a6:	bf00      	nop
 80024a8:	ffff8f8f 	.word	0xffff8f8f
 80024ac:	ffff8fbf 	.word	0xffff8fbf
 80024b0:	ffff8000 	.word	0xffff8000

080024b4 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80024b4:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80024b6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80024b8:	b18b      	cbz	r3, 80024de <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80024ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80024ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80024da:	2000      	movs	r0, #0
 80024dc:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80024de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ea:	041b      	lsls	r3, r3, #16
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024f2:	e7ec      	b.n	80024ce <USB_EPSetStall+0x1a>

080024f4 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80024f4:	7b0b      	ldrb	r3, [r1, #12]
 80024f6:	bb3b      	cbnz	r3, 8002548 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 80024f8:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024fa:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80024fc:	b333      	cbz	r3, 800254c <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002502:	065b      	lsls	r3, r3, #25
 8002504:	d50d      	bpl.n	8002522 <USB_EPClearStall+0x2e>
 8002506:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800250a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800250e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002512:	041b      	lsls	r3, r3, #16
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800251e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002522:	78cb      	ldrb	r3, [r1, #3]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d00f      	beq.n	8002548 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002528:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800252c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800253c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002544:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002548:	2000      	movs	r0, #0
 800254a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800254c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002550:	045b      	lsls	r3, r3, #17
 8002552:	d50d      	bpl.n	8002570 <USB_EPClearStall+0x7c>
 8002554:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	0c1b      	lsrs	r3, r3, #16
 8002564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002570:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	0c1b      	lsrs	r3, r3, #16
 8002580:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002584:	e7da      	b.n	800253c <USB_EPClearStall+0x48>

08002586 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002586:	b911      	cbnz	r1, 800258e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800258e:	2000      	movs	r0, #0
 8002590:	4770      	bx	lr

08002592 <USB_DevConnect>:
 8002592:	2000      	movs	r0, #0
 8002594:	4770      	bx	lr

08002596 <USB_DevDisconnect>:
 8002596:	2000      	movs	r0, #0
 8002598:	4770      	bx	lr

0800259a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800259a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800259e:	b280      	uxth	r0, r0
 80025a0:	4770      	bx	lr

080025a2 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80025a2:	2000      	movs	r0, #0
 80025a4:	4770      	bx	lr

080025a6 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80025a6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80025aa:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80025ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d100      	bne.n	80025bc <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80025ba:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80025bc:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80025c0:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 80025c4:	e7f7      	b.n	80025b6 <USB_WritePMA+0x10>
	...

080025c8 <USB_EPStartXfer>:
{
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80025cc:	7849      	ldrb	r1, [r1, #1]
{
 80025ce:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 80025d0:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 80025d2:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 80025d4:	f040 818e 	bne.w	80028f4 <USB_EPStartXfer+0x32c>
    if (ep->xfer_len > ep->maxpacket)
 80025d8:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80025dc:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80025de:	6961      	ldr	r1, [r4, #20]
 80025e0:	4576      	cmp	r6, lr
 80025e2:	bf28      	it	cs
 80025e4:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 80025e6:	bb02      	cbnz	r2, 800262a <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80025e8:	b2b6      	uxth	r6, r6
 80025ea:	88e2      	ldrh	r2, [r4, #6]
 80025ec:	4633      	mov	r3, r6
 80025ee:	f7ff ffda 	bl	80025a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80025f2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80025f6:	7821      	ldrb	r1, [r4, #0]
 80025f8:	b290      	uxth	r0, r2
 80025fa:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80025fe:	0109      	lsls	r1, r1, #4
 8002600:	4402      	add	r2, r0
 8002602:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002604:	7822      	ldrb	r2, [r4, #0]
 8002606:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800260a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800260e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 800261a:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800261c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8002628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 800262a:	78e2      	ldrb	r2, [r4, #3]
          PCD_SET_EP_DBUF(USBx, ep->num);
 800262c:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 800262e:	2a02      	cmp	r2, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8002630:	6a23      	ldr	r3, [r4, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002632:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002636:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 800263a:	f040 80bb 	bne.w	80027b4 <USB_EPStartXfer+0x1ec>
        if (ep->xfer_len_db > ep->maxpacket)
 800263e:	459e      	cmp	lr, r3
 8002640:	f080 809f 	bcs.w	8002782 <USB_EPStartXfer+0x1ba>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002644:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002648:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800264c:	0412      	lsls	r2, r2, #16
 800264e:	0c12      	lsrs	r2, r2, #16
 8002650:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002654:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002658:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800265c:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
          ep->xfer_len_db -= len;
 8002660:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002662:	f017 0740 	ands.w	r7, r7, #64	; 0x40
          ep->xfer_len_db -= len;
 8002666:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002668:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800266c:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800266e:	d044      	beq.n	80026fa <USB_EPStartXfer+0x132>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002670:	b297      	uxth	r7, r2
 8002672:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002676:	443a      	add	r2, r7
 8002678:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800267c:	8962      	ldrh	r2, [r4, #10]
 800267e:	f7ff ff92 	bl	80025a6 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002682:	6a22      	ldr	r2, [r4, #32]
 8002684:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002686:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002688:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800268a:	bf8a      	itet	hi
 800268c:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800268e:	2300      	movls	r3, #0
 8002690:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002692:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8002694:	4431      	add	r1, r6
 8002696:	6223      	str	r3, [r4, #32]
 8002698:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800269a:	b293      	uxth	r3, r2
 800269c:	2800      	cmp	r0, #0
 800269e:	f040 80d7 	bne.w	8002850 <USB_EPStartXfer+0x288>
 80026a2:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80026a6:	7826      	ldrb	r6, [r4, #0]
 80026a8:	b280      	uxth	r0, r0
 80026aa:	f205 4704 	addw	r7, r5, #1028	; 0x404
 80026ae:	0136      	lsls	r6, r6, #4
 80026b0:	4438      	add	r0, r7
 80026b2:	b96a      	cbnz	r2, 80026d0 <USB_EPStartXfer+0x108>
 80026b4:	5a32      	ldrh	r2, [r6, r0]
 80026b6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80026ba:	0412      	lsls	r2, r2, #16
 80026bc:	0c12      	lsrs	r2, r2, #16
 80026be:	5232      	strh	r2, [r6, r0]
 80026c0:	5a32      	ldrh	r2, [r6, r0]
 80026c2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80026c6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80026ca:	b292      	uxth	r2, r2
 80026cc:	5232      	strh	r2, [r6, r0]
 80026ce:	e008      	b.n	80026e2 <USB_EPStartXfer+0x11a>
 80026d0:	2a3e      	cmp	r2, #62	; 0x3e
 80026d2:	d809      	bhi.n	80026e8 <USB_EPStartXfer+0x120>
 80026d4:	0857      	lsrs	r7, r2, #1
 80026d6:	07d2      	lsls	r2, r2, #31
 80026d8:	bf48      	it	mi
 80026da:	3701      	addmi	r7, #1
 80026dc:	02bf      	lsls	r7, r7, #10
 80026de:	b2bf      	uxth	r7, r7
 80026e0:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026e2:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026e4:	4628      	mov	r0, r5
 80026e6:	e062      	b.n	80027ae <USB_EPStartXfer+0x1e6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026e8:	0957      	lsrs	r7, r2, #5
 80026ea:	06d2      	lsls	r2, r2, #27
 80026ec:	4a91      	ldr	r2, [pc, #580]	; (8002934 <USB_EPStartXfer+0x36c>)
 80026ee:	bf08      	it	eq
 80026f0:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80026f4:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80026f8:	e7e7      	b.n	80026ca <USB_EPStartXfer+0x102>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026fa:	fa1f fe82 	uxth.w	lr, r2
 80026fe:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002702:	4472      	add	r2, lr
 8002704:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002708:	8922      	ldrh	r2, [r4, #8]
 800270a:	f7ff ff4c 	bl	80025a6 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800270e:	6a22      	ldr	r2, [r4, #32]
 8002710:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002712:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002714:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8002716:	bf84      	itt	hi
 8002718:	1b97      	subhi	r7, r2, r6
 800271a:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800271c:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 800271e:	4431      	add	r1, r6
 8002720:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db -= len;
 8002722:	6227      	str	r7, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002724:	b293      	uxth	r3, r2
 8002726:	2800      	cmp	r0, #0
 8002728:	f040 80d7 	bne.w	80028da <USB_EPStartXfer+0x312>
 800272c:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002730:	7826      	ldrb	r6, [r4, #0]
 8002732:	b280      	uxth	r0, r0
 8002734:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8002738:	0136      	lsls	r6, r6, #4
 800273a:	4438      	add	r0, r7
 800273c:	b96a      	cbnz	r2, 800275a <USB_EPStartXfer+0x192>
 800273e:	5a32      	ldrh	r2, [r6, r0]
 8002740:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002744:	0412      	lsls	r2, r2, #16
 8002746:	0c12      	lsrs	r2, r2, #16
 8002748:	5232      	strh	r2, [r6, r0]
 800274a:	5a32      	ldrh	r2, [r6, r0]
 800274c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002750:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002754:	b292      	uxth	r2, r2
 8002756:	5232      	strh	r2, [r6, r0]
 8002758:	e008      	b.n	800276c <USB_EPStartXfer+0x1a4>
 800275a:	2a3e      	cmp	r2, #62	; 0x3e
 800275c:	d808      	bhi.n	8002770 <USB_EPStartXfer+0x1a8>
 800275e:	0857      	lsrs	r7, r2, #1
 8002760:	07d2      	lsls	r2, r2, #31
 8002762:	bf48      	it	mi
 8002764:	3701      	addmi	r7, #1
 8002766:	02bf      	lsls	r7, r7, #10
 8002768:	b2bf      	uxth	r7, r7
 800276a:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800276c:	8962      	ldrh	r2, [r4, #10]
 800276e:	e7b9      	b.n	80026e4 <USB_EPStartXfer+0x11c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002770:	0957      	lsrs	r7, r2, #5
 8002772:	06d2      	lsls	r2, r2, #27
 8002774:	4a6f      	ldr	r2, [pc, #444]	; (8002934 <USB_EPStartXfer+0x36c>)
 8002776:	bf08      	it	eq
 8002778:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800277c:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002780:	e7e8      	b.n	8002754 <USB_EPStartXfer+0x18c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002782:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8002786:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800278a:	0412      	lsls	r2, r2, #16
 800278c:	0c12      	lsrs	r2, r2, #16
 800278e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002792:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002796:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800279a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800279e:	b29b      	uxth	r3, r3
 80027a0:	b296      	uxth	r6, r2
 80027a2:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80027a6:	4432      	add	r2, r6
 80027a8:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80027ac:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80027ae:	f7ff fefa 	bl	80025a6 <USB_WritePMA>
 80027b2:	e727      	b.n	8002604 <USB_EPStartXfer+0x3c>
        PCD_SET_EP_DBUF(USBx, ep->num);
 80027b4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80027b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027bc:	0412      	lsls	r2, r2, #16
 80027be:	0c12      	lsrs	r2, r2, #16
 80027c0:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80027c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027c8:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80027cc:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 80027d0:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80027d2:	f017 0740 	ands.w	r7, r7, #64	; 0x40
        ep->xfer_len_db -= len;
 80027d6:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80027dc:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80027de:	d044      	beq.n	800286a <USB_EPStartXfer+0x2a2>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027e0:	b297      	uxth	r7, r2
 80027e2:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80027e6:	443a      	add	r2, r7
 80027e8:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80027ec:	8962      	ldrh	r2, [r4, #10]
 80027ee:	f7ff feda 	bl	80025a6 <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 80027f2:	6a22      	ldr	r2, [r4, #32]
 80027f4:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 80027f6:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 80027f8:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 80027fa:	bf8a      	itet	hi
 80027fc:	1b93      	subhi	r3, r2, r6
            ep->xfer_len_db = 0U;
 80027fe:	2300      	movls	r3, #0
 8002800:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 8002802:	4431      	add	r1, r6
 8002804:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 8002806:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8002808:	2a00      	cmp	r2, #0
 800280a:	f43f aefb 	beq.w	8002604 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800280e:	7860      	ldrb	r0, [r4, #1]
 8002810:	b293      	uxth	r3, r2
 8002812:	b9e8      	cbnz	r0, 8002850 <USB_EPStartXfer+0x288>
 8002814:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8002818:	7827      	ldrb	r7, [r4, #0]
 800281a:	b2b0      	uxth	r0, r6
 800281c:	2a3e      	cmp	r2, #62	; 0x3e
 800281e:	f205 4604 	addw	r6, r5, #1028	; 0x404
 8002822:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8002826:	4406      	add	r6, r0
 8002828:	d807      	bhi.n	800283a <USB_EPStartXfer+0x272>
 800282a:	0850      	lsrs	r0, r2, #1
 800282c:	07d2      	lsls	r2, r2, #31
 800282e:	bf48      	it	mi
 8002830:	3001      	addmi	r0, #1
 8002832:	0280      	lsls	r0, r0, #10
 8002834:	b280      	uxth	r0, r0
 8002836:	53b8      	strh	r0, [r7, r6]
 8002838:	e753      	b.n	80026e2 <USB_EPStartXfer+0x11a>
 800283a:	0950      	lsrs	r0, r2, #5
 800283c:	06d2      	lsls	r2, r2, #27
 800283e:	4a3d      	ldr	r2, [pc, #244]	; (8002934 <USB_EPStartXfer+0x36c>)
 8002840:	bf08      	it	eq
 8002842:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002846:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800284a:	b292      	uxth	r2, r2
 800284c:	53ba      	strh	r2, [r7, r6]
 800284e:	e748      	b.n	80026e2 <USB_EPStartXfer+0x11a>
 8002850:	2801      	cmp	r0, #1
 8002852:	f47f af46 	bne.w	80026e2 <USB_EPStartXfer+0x11a>
 8002856:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800285a:	7820      	ldrb	r0, [r4, #0]
 800285c:	b296      	uxth	r6, r2
 800285e:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8002862:	0100      	lsls	r0, r0, #4
 8002864:	4432      	add	r2, r6
 8002866:	5283      	strh	r3, [r0, r2]
 8002868:	e73b      	b.n	80026e2 <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800286a:	fa1f fe82 	uxth.w	lr, r2
 800286e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002872:	4472      	add	r2, lr
 8002874:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002878:	8922      	ldrh	r2, [r4, #8]
 800287a:	f7ff fe94 	bl	80025a6 <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 800287e:	6a22      	ldr	r2, [r4, #32]
 8002880:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 8002882:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8002884:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 8002886:	bf84      	itt	hi
 8002888:	1b97      	subhi	r7, r2, r6
 800288a:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 800288c:	4431      	add	r1, r6
 800288e:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 8002890:	6227      	str	r7, [r4, #32]
          if (len > 0U)
 8002892:	2a00      	cmp	r2, #0
 8002894:	f43f aeb6 	beq.w	8002604 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002898:	7860      	ldrb	r0, [r4, #1]
 800289a:	b293      	uxth	r3, r2
 800289c:	b9e8      	cbnz	r0, 80028da <USB_EPStartXfer+0x312>
 800289e:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 80028a2:	7827      	ldrb	r7, [r4, #0]
 80028a4:	b2b0      	uxth	r0, r6
 80028a6:	2a3e      	cmp	r2, #62	; 0x3e
 80028a8:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 80028ac:	ea4f 1707 	mov.w	r7, r7, lsl #4
 80028b0:	4406      	add	r6, r0
 80028b2:	d807      	bhi.n	80028c4 <USB_EPStartXfer+0x2fc>
 80028b4:	0850      	lsrs	r0, r2, #1
 80028b6:	07d2      	lsls	r2, r2, #31
 80028b8:	bf48      	it	mi
 80028ba:	3001      	addmi	r0, #1
 80028bc:	0280      	lsls	r0, r0, #10
 80028be:	b280      	uxth	r0, r0
 80028c0:	53b8      	strh	r0, [r7, r6]
 80028c2:	e753      	b.n	800276c <USB_EPStartXfer+0x1a4>
 80028c4:	0950      	lsrs	r0, r2, #5
 80028c6:	06d2      	lsls	r2, r2, #27
 80028c8:	4a1a      	ldr	r2, [pc, #104]	; (8002934 <USB_EPStartXfer+0x36c>)
 80028ca:	bf08      	it	eq
 80028cc:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80028d0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80028d4:	b292      	uxth	r2, r2
 80028d6:	53ba      	strh	r2, [r7, r6]
 80028d8:	e748      	b.n	800276c <USB_EPStartXfer+0x1a4>
 80028da:	2801      	cmp	r0, #1
 80028dc:	f47f af46 	bne.w	800276c <USB_EPStartXfer+0x1a4>
 80028e0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80028e4:	7820      	ldrb	r0, [r4, #0]
 80028e6:	b296      	uxth	r6, r2
 80028e8:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80028ec:	0100      	lsls	r0, r0, #4
 80028ee:	4432      	add	r2, r6
 80028f0:	5283      	strh	r3, [r0, r2]
 80028f2:	e73b      	b.n	800276c <USB_EPStartXfer+0x1a4>
    if (ep->doublebuffer == 0U)
 80028f4:	bb02      	cbnz	r2, 8002938 <USB_EPStartXfer+0x370>
      if (ep->xfer_len > ep->maxpacket)
 80028f6:	69a3      	ldr	r3, [r4, #24]
 80028f8:	6921      	ldr	r1, [r4, #16]
 80028fa:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 80028fc:	bf88      	it	hi
 80028fe:	1a5a      	subhi	r2, r3, r1
 8002900:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002902:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002906:	bf88      	it	hi
 8002908:	460b      	movhi	r3, r1
 800290a:	7821      	ldrb	r1, [r4, #0]
 800290c:	b292      	uxth	r2, r2
 800290e:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002912:	0109      	lsls	r1, r1, #4
 8002914:	4402      	add	r2, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80c8 	beq.w	8002aac <USB_EPStartXfer+0x4e4>
 800291c:	2b3e      	cmp	r3, #62	; 0x3e
 800291e:	f200 80d3 	bhi.w	8002ac8 <USB_EPStartXfer+0x500>
 8002922:	0858      	lsrs	r0, r3, #1
 8002924:	07de      	lsls	r6, r3, #31
 8002926:	bf48      	it	mi
 8002928:	3001      	addmi	r0, #1
 800292a:	0280      	lsls	r0, r0, #10
 800292c:	b280      	uxth	r0, r0
 800292e:	5250      	strh	r0, [r2, r1]
 8002930:	e04b      	b.n	80029ca <USB_EPStartXfer+0x402>
 8002932:	bf00      	nop
 8002934:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8002938:	78e3      	ldrb	r3, [r4, #3]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d179      	bne.n	8002a32 <USB_EPStartXfer+0x46a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800293e:	bb51      	cbnz	r1, 8002996 <USB_EPStartXfer+0x3ce>
 8002940:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002944:	7821      	ldrb	r1, [r4, #0]
 8002946:	b293      	uxth	r3, r2
 8002948:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800294c:	441a      	add	r2, r3
 800294e:	6923      	ldr	r3, [r4, #16]
 8002950:	0109      	lsls	r1, r1, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d145      	bne.n	80029e2 <USB_EPStartXfer+0x41a>
 8002956:	5a88      	ldrh	r0, [r1, r2]
 8002958:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800295c:	0400      	lsls	r0, r0, #16
 800295e:	0c00      	lsrs	r0, r0, #16
 8002960:	5288      	strh	r0, [r1, r2]
 8002962:	5a88      	ldrh	r0, [r1, r2]
 8002964:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002968:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800296c:	b280      	uxth	r0, r0
 800296e:	5288      	strh	r0, [r1, r2]
 8002970:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002974:	7822      	ldrb	r2, [r4, #0]
 8002976:	b289      	uxth	r1, r1
 8002978:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	4401      	add	r1, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d03f      	beq.n	8002a04 <USB_EPStartXfer+0x43c>
 8002984:	2b3e      	cmp	r3, #62	; 0x3e
 8002986:	d84b      	bhi.n	8002a20 <USB_EPStartXfer+0x458>
 8002988:	0858      	lsrs	r0, r3, #1
 800298a:	07db      	lsls	r3, r3, #31
 800298c:	bf48      	it	mi
 800298e:	3001      	addmi	r0, #1
 8002990:	0280      	lsls	r0, r0, #10
 8002992:	b280      	uxth	r0, r0
 8002994:	5250      	strh	r0, [r2, r1]
        if (ep->xfer_count != 0U)
 8002996:	69e3      	ldr	r3, [r4, #28]
 8002998:	b1bb      	cbz	r3, 80029ca <USB_EPStartXfer+0x402>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800299a:	f244 0340 	movw	r3, #16448	; 0x4040
 800299e:	7822      	ldrb	r2, [r4, #0]
 80029a0:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80029a4:	ea03 0001 	and.w	r0, r3, r1
 80029a8:	438b      	bics	r3, r1
 80029aa:	d000      	beq.n	80029ae <USB_EPStartXfer+0x3e6>
 80029ac:	b968      	cbnz	r0, 80029ca <USB_EPStartXfer+0x402>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80029ae:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80029b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	041b      	lsls	r3, r3, #16
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029c6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029ca:	7822      	ldrb	r2, [r4, #0]
 80029cc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80029d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	0c1b      	lsrs	r3, r3, #16
 80029dc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80029e0:	e61b      	b.n	800261a <USB_EPStartXfer+0x52>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80029e2:	2b3e      	cmp	r3, #62	; 0x3e
 80029e4:	d805      	bhi.n	80029f2 <USB_EPStartXfer+0x42a>
 80029e6:	0858      	lsrs	r0, r3, #1
 80029e8:	07de      	lsls	r6, r3, #31
 80029ea:	bf48      	it	mi
 80029ec:	3001      	addmi	r0, #1
 80029ee:	0280      	lsls	r0, r0, #10
 80029f0:	e7bc      	b.n	800296c <USB_EPStartXfer+0x3a4>
 80029f2:	095e      	lsrs	r6, r3, #5
 80029f4:	06d8      	lsls	r0, r3, #27
 80029f6:	483a      	ldr	r0, [pc, #232]	; (8002ae0 <USB_EPStartXfer+0x518>)
 80029f8:	bf08      	it	eq
 80029fa:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80029fe:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8002a02:	e7b3      	b.n	800296c <USB_EPStartXfer+0x3a4>
 8002a04:	5a53      	ldrh	r3, [r2, r1]
 8002a06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	0c1b      	lsrs	r3, r3, #16
 8002a0e:	5253      	strh	r3, [r2, r1]
 8002a10:	5a53      	ldrh	r3, [r2, r1]
 8002a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	5253      	strh	r3, [r2, r1]
 8002a1e:	e7ba      	b.n	8002996 <USB_EPStartXfer+0x3ce>
 8002a20:	0958      	lsrs	r0, r3, #5
 8002a22:	06df      	lsls	r7, r3, #27
 8002a24:	4b2e      	ldr	r3, [pc, #184]	; (8002ae0 <USB_EPStartXfer+0x518>)
 8002a26:	bf08      	it	eq
 8002a28:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002a2c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002a30:	e7f3      	b.n	8002a1a <USB_EPStartXfer+0x452>
      else if (ep->type == EP_TYPE_ISOC)
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d151      	bne.n	8002ada <USB_EPStartXfer+0x512>
        if (ep->xfer_len > ep->maxpacket)
 8002a36:	69a3      	ldr	r3, [r4, #24]
 8002a38:	6922      	ldr	r2, [r4, #16]
 8002a3a:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8002a3c:	bf94      	ite	ls
 8002a3e:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8002a40:	1a98      	subhi	r0, r3, r2
 8002a42:	61a0      	str	r0, [r4, #24]
 8002a44:	bf88      	it	hi
 8002a46:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	d1be      	bne.n	80029ca <USB_EPStartXfer+0x402>
 8002a4c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002a50:	7821      	ldrb	r1, [r4, #0]
 8002a52:	b292      	uxth	r2, r2
 8002a54:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8002a58:	0109      	lsls	r1, r1, #4
 8002a5a:	4402      	add	r2, r0
 8002a5c:	b9ab      	cbnz	r3, 8002a8a <USB_EPStartXfer+0x4c2>
 8002a5e:	5a88      	ldrh	r0, [r1, r2]
 8002a60:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002a64:	0400      	lsls	r0, r0, #16
 8002a66:	0c00      	lsrs	r0, r0, #16
 8002a68:	5288      	strh	r0, [r1, r2]
 8002a6a:	5a88      	ldrh	r0, [r1, r2]
 8002a6c:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002a70:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002a74:	b280      	uxth	r0, r0
 8002a76:	5288      	strh	r0, [r1, r2]
 8002a78:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002a7c:	7822      	ldrb	r2, [r4, #0]
 8002a7e:	b289      	uxth	r1, r1
 8002a80:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	4401      	add	r1, r0
 8002a88:	e745      	b.n	8002916 <USB_EPStartXfer+0x34e>
 8002a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8002a8c:	d805      	bhi.n	8002a9a <USB_EPStartXfer+0x4d2>
 8002a8e:	0858      	lsrs	r0, r3, #1
 8002a90:	07de      	lsls	r6, r3, #31
 8002a92:	bf48      	it	mi
 8002a94:	3001      	addmi	r0, #1
 8002a96:	0280      	lsls	r0, r0, #10
 8002a98:	e7ec      	b.n	8002a74 <USB_EPStartXfer+0x4ac>
 8002a9a:	095e      	lsrs	r6, r3, #5
 8002a9c:	4810      	ldr	r0, [pc, #64]	; (8002ae0 <USB_EPStartXfer+0x518>)
 8002a9e:	06df      	lsls	r7, r3, #27
 8002aa0:	bf08      	it	eq
 8002aa2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002aa6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8002aaa:	e7e3      	b.n	8002a74 <USB_EPStartXfer+0x4ac>
 8002aac:	5a53      	ldrh	r3, [r2, r1]
 8002aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	5253      	strh	r3, [r2, r1]
 8002ab8:	5a53      	ldrh	r3, [r2, r1]
 8002aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	5253      	strh	r3, [r2, r1]
 8002ac6:	e780      	b.n	80029ca <USB_EPStartXfer+0x402>
 8002ac8:	0958      	lsrs	r0, r3, #5
 8002aca:	06db      	lsls	r3, r3, #27
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <USB_EPStartXfer+0x518>)
 8002ace:	bf08      	it	eq
 8002ad0:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002ad4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002ad8:	e7f3      	b.n	8002ac2 <USB_EPStartXfer+0x4fa>
        return HAL_ERROR;
 8002ada:	2001      	movs	r0, #1
 8002adc:	e5a4      	b.n	8002628 <USB_EPStartXfer+0x60>
 8002ade:	bf00      	nop
 8002ae0:	ffff8000 	.word	0xffff8000

08002ae4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002ae4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8002ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002aea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002aee:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 8002af0:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002af2:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8002af4:	462e      	mov	r6, r5
 8002af6:	3402      	adds	r4, #2
 8002af8:	b936      	cbnz	r6, 8002b08 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002afa:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8002afc:	bf44      	itt	mi
 8002afe:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002b02:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8002b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002b08:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8002b0c:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8002b0e:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002b10:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002b14:	0a00      	lsrs	r0, r0, #8
 8002b16:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 8002b1a:	e7ec      	b.n	8002af6 <USB_ReadPMA+0x12>

08002b1c <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_CfgDesc);
 8002b1c:	231b      	movs	r3, #27
 8002b1e:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_CfgDesc;
}
 8002b20:	4800      	ldr	r0, [pc, #0]	; (8002b24 <USBD_DFU_GetCfgDesc+0x8>)
 8002b22:	4770      	bx	lr
 8002b24:	20000060 	.word	0x20000060

08002b28 <USBD_DFU_DataIn>:
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{

  return USBD_OK;
}
 8002b28:	2000      	movs	r0, #0
 8002b2a:	4770      	bx	lr

08002b2c <USBD_DFU_EP0_RxReady>:
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	4770      	bx	lr

08002b30 <USBD_DFU_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8002b30:	230a      	movs	r3, #10
 8002b32:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_DeviceQualifierDesc;
}
 8002b34:	4800      	ldr	r0, [pc, #0]	; (8002b38 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8002b36:	4770      	bx	lr
 8002b38:	2000007c 	.word	0x2000007c

08002b3c <USBD_DFU_EP0_TxReady>:
{
 8002b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002b3e:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
{
 8002b42:	4605      	mov	r5, r0
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8002b44:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d164      	bne.n	8002c16 <USBD_DFU_EP0_TxReady+0xda>
    if (hdfu->wblock_num == 0U)
 8002b4c:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
 8002b50:	2900      	cmp	r1, #0
 8002b52:	d151      	bne.n	8002bf8 <USBD_DFU_EP0_TxReady+0xbc>
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8002b54:	7823      	ldrb	r3, [r4, #0]
 8002b56:	b99b      	cbnz	r3, 8002b80 <USBD_DFU_EP0_TxReady+0x44>
 8002b58:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d13c      	bne.n	8002bda <USBD_DFU_EP0_TxReady+0x9e>
    hdfu->wlength = 0U;
 8002b60:	2000      	movs	r0, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002b62:	2303      	movs	r3, #3
    hdfu->wlength = 0U;
 8002b64:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8002b68:	f8c4 0400 	str.w	r0, [r4, #1024]	; 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002b6c:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8002b70:	f884 0411 	strb.w	r0, [r4, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8002b74:	f8a4 0412 	strh.w	r0, [r4, #1042]	; 0x412
    hdfu->dev_status[4] = hdfu->dev_state;
 8002b78:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
}
 8002b7c:	b003      	add	sp, #12
 8002b7e:	bd30      	pop	{r4, r5, pc}
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8002b80:	2b21      	cmp	r3, #33	; 0x21
 8002b82:	d110      	bne.n	8002ba6 <USBD_DFU_EP0_TxReady+0x6a>
 8002b84:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d126      	bne.n	8002bda <USBD_DFU_EP0_TxReady+0x9e>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002b8c:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8002b8e:	78a2      	ldrb	r2, [r4, #2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8002b96:	7862      	ldrb	r2, [r4, #1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002b98:	4413      	add	r3, r2
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002b9a:	7922      	ldrb	r2, [r4, #4]
 8002b9c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8002ba0:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
 8002ba4:	e7dc      	b.n	8002b60 <USBD_DFU_EP0_TxReady+0x24>
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 8002ba6:	2b41      	cmp	r3, #65	; 0x41
 8002ba8:	d117      	bne.n	8002bda <USBD_DFU_EP0_TxReady+0x9e>
 8002baa:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d113      	bne.n	8002bda <USBD_DFU_EP0_TxReady+0x9e>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002bb2:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8002bb4:	78a0      	ldrb	r0, [r4, #2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002bb6:	041b      	lsls	r3, r3, #16
 8002bb8:	eb03 2300 	add.w	r3, r3, r0, lsl #8
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8002bbc:	7860      	ldrb	r0, [r4, #1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002bbe:	4403      	add	r3, r0
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002bc0:	7920      	ldrb	r0, [r4, #4]
 8002bc2:	eb03 6000 	add.w	r0, r3, r0, lsl #24
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8002bc6:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002bca:	f8c4 0408 	str.w	r0, [r4, #1032]	; 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4798      	blx	r3
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d0c4      	beq.n	8002b60 <USBD_DFU_EP0_TxReady+0x24>
          return USBD_FAIL;
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	e7d0      	b.n	8002b7c <USBD_DFU_EP0_TxReady+0x40>
        hdfu->wlength = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8002be0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
        req.bmRequest = 0U;
 8002be4:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 8002be8:	2301      	movs	r3, #1
        USBD_CtlError(pdev, &req);
 8002bea:	4669      	mov	r1, sp
 8002bec:	4628      	mov	r0, r5
        req.wLength = 1U;
 8002bee:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 8002bf2:	f000 fd7d 	bl	80036f0 <USBD_CtlError>
 8002bf6:	e7b3      	b.n	8002b60 <USBD_DFU_EP0_TxReady+0x24>
      if (hdfu->wblock_num > 1U)
 8002bf8:	2901      	cmp	r1, #1
 8002bfa:	d0b1      	beq.n	8002b60 <USBD_DFU_EP0_TxReady+0x24>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002bfc:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002c00:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002c04:	3902      	subs	r1, #2
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002c06:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
 8002c12:	4798      	blx	r3
 8002c14:	e7dd      	b.n	8002bd2 <USBD_DFU_EP0_TxReady+0x96>
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8002c16:	2b07      	cmp	r3, #7
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <USBD_DFU_EP0_TxReady+0x102>

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002c1e:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <USBD_DFU_EP0_TxReady+0x140>)
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002c20:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002c24:	7d12      	ldrb	r2, [r2, #20]
 8002c26:	f012 0204 	ands.w	r2, r2, #4
 8002c2a:	d00a      	beq.n	8002c42 <USBD_DFU_EP0_TxReady+0x106>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002c2c:	2206      	movs	r2, #6

    hdfu->dev_status[1] = 0U;
 8002c2e:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002c32:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 8002c36:	f8a4 3412 	strh.w	r3, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 8002c3a:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
  return USBD_OK;
 8002c3e:	4618      	mov	r0, r3
 8002c40:	e79c      	b.n	8002b7c <USBD_DFU_EP0_TxReady+0x40>
    return;
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002c42:	2308      	movs	r3, #8

    hdfu->dev_status[1] = 0U;
 8002c44:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002c48:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 8002c4c:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 8002c50:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8002c54:	f000 fa24 	bl	80030a0 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002c58:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002c60:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c64:	4906      	ldr	r1, [pc, #24]	; (8002c80 <USBD_DFU_EP0_TxReady+0x144>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <USBD_DFU_EP0_TxReady+0x148>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c68:	68ca      	ldr	r2, [r1, #12]
 8002c6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60cb      	str	r3, [r1, #12]
 8002c72:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002c76:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002c78:	e7fd      	b.n	8002c76 <USBD_DFU_EP0_TxReady+0x13a>
 8002c7a:	bf00      	nop
 8002c7c:	20000060 	.word	0x20000060
 8002c80:	e000ed00 	.word	0xe000ed00
 8002c84:	05fa0004 	.word	0x05fa0004

08002c88 <USBD_DFU_DeInit>:
{
 8002c88:	b538      	push	{r3, r4, r5, lr}
  hdfu->dev_state = DFU_STATE_IDLE;
 8002c8a:	2202      	movs	r2, #2
  hdfu->wblock_num = 0U;
 8002c8c:	2500      	movs	r5, #0
{
 8002c8e:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002c90:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  hdfu->dev_state = DFU_STATE_IDLE;
 8002c94:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002c98:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002c9c:	f883 5410 	strb.w	r5, [r3, #1040]	; 0x410
  hdfu->wblock_num = 0U;
 8002ca0:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8002ca4:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002ca8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002cb0:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8002cb4:	f000 ff46 	bl	8003b44 <USBD_static_free>
}
 8002cb8:	4628      	mov	r0, r5
    pdev->pClassData = NULL;
 8002cba:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8002cbe:	bd38      	pop	{r3, r4, r5, pc}

08002cc0 <USBD_DFU_Init>:
{
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	4604      	mov	r4, r0
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8002cc4:	f240 401c 	movw	r0, #1052	; 0x41c
 8002cc8:	f000 ff38 	bl	8003b3c <USBD_static_malloc>
 8002ccc:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8002cd0:	b1a8      	cbz	r0, 8002cfe <USBD_DFU_Init+0x3e>
    hdfu->wblock_num = 0U;
 8002cd2:	2300      	movs	r3, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8002cd4:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002cd6:	f8c0 3410 	str.w	r3, [r0, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002cda:	f8a0 2418 	strh.w	r2, [r0, #1048]	; 0x418
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002cde:	f8a0 2414 	strh.w	r2, [r0, #1044]	; 0x414
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002ce2:	4908      	ldr	r1, [pc, #32]	; (8002d04 <USBD_DFU_Init+0x44>)
    hdfu->wblock_num = 0U;
 8002ce4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
    hdfu->wlength = 0U;
 8002ce8:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
    hdfu->alt_setting = 0U;
 8002cec:	f8c0 340c 	str.w	r3, [r0, #1036]	; 0x40c
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8002cf0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002cf4:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4798      	blx	r3
 8002cfc:	b100      	cbz	r0, 8002d00 <USBD_DFU_Init+0x40>
      return USBD_FAIL;
 8002cfe:	2002      	movs	r0, #2
}
 8002d00:	bd10      	pop	{r4, pc}
 8002d02:	bf00      	nop
 8002d04:	08005000 	.word	0x08005000

08002d08 <USBD_DFU_IsoOutIncomplete>:
 8002d08:	2000      	movs	r0, #0
 8002d0a:	4770      	bx	lr

08002d0c <USBD_DFU_GetUsrStringDesc>:
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002d0c:	2906      	cmp	r1, #6
{
 8002d0e:	b508      	push	{r3, lr}
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002d10:	d807      	bhi.n	8002d22 <USBD_DFU_GetUsrStringDesc+0x16>
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8002d12:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002d16:	4904      	ldr	r1, [pc, #16]	; (8002d28 <USBD_DFU_GetUsrStringDesc+0x1c>)
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	f000 fcf4 	bl	8003706 <USBD_GetString>
 8002d1e:	4802      	ldr	r0, [pc, #8]	; (8002d28 <USBD_DFU_GetUsrStringDesc+0x1c>)
}
 8002d20:	bd08      	pop	{r3, pc}
    return NULL;
 8002d22:	2000      	movs	r0, #0
 8002d24:	e7fc      	b.n	8002d20 <USBD_DFU_GetUsrStringDesc+0x14>
 8002d26:	bf00      	nop
 8002d28:	20000350 	.word	0x20000350

08002d2c <USBD_DFU_Setup>:
  uint16_t status_info = 0U;
 8002d2c:	2300      	movs	r3, #0
{
 8002d2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002d32:	780d      	ldrb	r5, [r1, #0]
 8002d34:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d36:	f015 0560 	ands.w	r5, r5, #96	; 0x60
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002d3a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  uint16_t status_info = 0U;
 8002d3e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d42:	f000 8143 	beq.w	8002fcc <USBD_DFU_Setup+0x2a0>
 8002d46:	2d20      	cmp	r5, #32
 8002d48:	f040 8156 	bne.w	8002ff8 <USBD_DFU_Setup+0x2cc>
      switch (req->bRequest)
 8002d4c:	f891 8001 	ldrb.w	r8, [r1, #1]
 8002d50:	f1b8 0f06 	cmp.w	r8, #6
 8002d54:	f200 8150 	bhi.w	8002ff8 <USBD_DFU_Setup+0x2cc>
 8002d58:	e8df f018 	tbh	[pc, r8, lsl #1]
 8002d5c:	00070111 	.word	0x00070111
 8002d60:	00980037 	.word	0x00980037
 8002d64:	00f400de 	.word	0x00f400de
 8002d68:	00f8      	.short	0x00f8
  if (req->wLength > 0U)
 8002d6a:	88ca      	ldrh	r2, [r1, #6]
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002d6c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
  if (req->wLength > 0U)
 8002d70:	b1ba      	cbz	r2, 8002da2 <USBD_DFU_Setup+0x76>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d001      	beq.n	8002d7a <USBD_DFU_Setup+0x4e>
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d10f      	bne.n	8002d9a <USBD_DFU_Setup+0x6e>
      hdfu->wblock_num = req->wValue;
 8002d7a:	884b      	ldrh	r3, [r1, #2]
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002d7c:	4630      	mov	r0, r6
      hdfu->wblock_num = req->wValue;
 8002d7e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002d82:	2303      	movs	r3, #3
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002d84:	4621      	mov	r1, r4
      hdfu->wlength = req->wLength;
 8002d86:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002d8a:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8002d8e:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002d92:	f000 fce9 	bl	8003768 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8002d96:	2500      	movs	r5, #0
 8002d98:	e013      	b.n	8002dc2 <USBD_DFU_Setup+0x96>
      USBD_CtlError(pdev, req);
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	f000 fca8 	bl	80036f0 <USBD_CtlError>
 8002da0:	e7f9      	b.n	8002d96 <USBD_DFU_Setup+0x6a>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d001      	beq.n	8002daa <USBD_DFU_Setup+0x7e>
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d1f7      	bne.n	8002d9a <USBD_DFU_Setup+0x6e>
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002daa:	f44f 7383 	mov.w	r3, #262	; 0x106
      hdfu->dev_status[1] = 0U;
 8002dae:	2500      	movs	r5, #0
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002db0:	f8a4 3418 	strh.w	r3, [r4, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8002db4:	2306      	movs	r3, #6
      hdfu->dev_status[1] = 0U;
 8002db6:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8002dba:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
      hdfu->dev_status[4] = hdfu->dev_state;
 8002dbe:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
}
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	b002      	add	sp, #8
 8002dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (req->wLength > 0U)
 8002dca:	88ca      	ldrh	r2, [r1, #6]
 8002dcc:	2a00      	cmp	r2, #0
 8002dce:	d053      	beq.n	8002e78 <USBD_DFU_Setup+0x14c>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8002dd0:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d001      	beq.n	8002ddc <USBD_DFU_Setup+0xb0>
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	d147      	bne.n	8002e6c <USBD_DFU_Setup+0x140>
      hdfu->wblock_num = req->wValue;
 8002ddc:	884f      	ldrh	r7, [r1, #2]
      hdfu->wlength = req->wLength;
 8002dde:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      hdfu->wblock_num = req->wValue;
 8002de2:	f8c4 7400 	str.w	r7, [r4, #1024]	; 0x400
      if (hdfu->wblock_num == 0U)
 8002de6:	b9b7      	cbnz	r7, 8002e16 <USBD_DFU_Setup+0xea>
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8002de8:	f44f 5304 	mov.w	r3, #8448	; 0x2100
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8002dec:	2a03      	cmp	r2, #3
 8002dee:	bf98      	it	ls
 8002df0:	f04f 0809 	movls.w	r8, #9
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8002df4:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002df6:	2341      	movs	r3, #65	; 0x41
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4621      	mov	r1, r4
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8002dfc:	f884 8418 	strb.w	r8, [r4, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8002e00:	f884 7411 	strb.w	r7, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8002e04:	f8a4 7412 	strh.w	r7, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002e08:	f884 8414 	strb.w	r8, [r4, #1044]	; 0x414
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002e0c:	70a3      	strb	r3, [r4, #2]
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8002e0e:	4630      	mov	r0, r6
 8002e10:	f000 fc95 	bl	800373e <USBD_CtlSendData>
 8002e14:	e7bf      	b.n	8002d96 <USBD_DFU_Setup+0x6a>
      else if (hdfu->wblock_num > 1U)
 8002e16:	2f01      	cmp	r7, #1
 8002e18:	f04f 0500 	mov.w	r5, #0
 8002e1c:	d019      	beq.n	8002e52 <USBD_DFU_Setup+0x126>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002e1e:	2309      	movs	r3, #9
        hdfu->dev_status[1] = 0U;
 8002e20:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002e24:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[2] = 0U;
 8002e28:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002e2c:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002e30:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002e34:	f8d6 32bc 	ldr.w	r3, [r6, #700]	; 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002e38:	3f02      	subs	r7, #2
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	eb00 2087 	add.w	r0, r0, r7, lsl #10
 8002e42:	4798      	blx	r3
 8002e44:	4601      	mov	r1, r0
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8002e46:	f8b4 2404 	ldrh.w	r2, [r4, #1028]	; 0x404
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f000 fc77 	bl	800373e <USBD_CtlSendData>
 8002e50:	e7b7      	b.n	8002dc2 <USBD_DFU_Setup+0x96>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002e52:	230f      	movs	r3, #15
        hdfu->dev_status[1] = 0U;
 8002e54:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002e58:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[2] = 0U;
 8002e5c:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002e60:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
      USBD_CtlError(pdev, req);
 8002e64:	4630      	mov	r0, r6
 8002e66:	f000 fc43 	bl	80036f0 <USBD_CtlError>
 8002e6a:	e7aa      	b.n	8002dc2 <USBD_DFU_Setup+0x96>
      hdfu->wlength = 0U;
 8002e6c:	2500      	movs	r5, #0
 8002e6e:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8002e72:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
 8002e76:	e7f5      	b.n	8002e64 <USBD_DFU_Setup+0x138>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002e78:	2302      	movs	r3, #2
    hdfu->dev_status[1] = 0U;
 8002e7a:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_IDLE;
 8002e7e:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 8002e82:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
    hdfu->dev_status[4] = hdfu->dev_state;
 8002e86:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 8002e8a:	e784      	b.n	8002d96 <USBD_DFU_Setup+0x6a>
  switch (hdfu->dev_state)
 8002e8c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002e90:	f504 6582 	add.w	r5, r4, #1040	; 0x410
  switch (hdfu->dev_state)
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d004      	beq.n	8002ea2 <USBD_DFU_Setup+0x176>
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	d026      	beq.n	8002eea <USBD_DFU_Setup+0x1be>
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8002e9c:	2206      	movs	r2, #6
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	e7b5      	b.n	8002e0e <USBD_DFU_Setup+0xe2>
      if (hdfu->wlength != 0U)
 8002ea2:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002ea6:	b1d3      	cbz	r3, 8002ede <USBD_DFU_Setup+0x1b2>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002ea8:	2304      	movs	r3, #4
        hdfu->dev_status[1] = 0U;
 8002eaa:	2200      	movs	r2, #0
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002eac:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8002eb0:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8002eb4:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002eb8:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002ebc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002ec0:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002ec4:	699b      	ldr	r3, [r3, #24]
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002ec6:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002eca:	b929      	cbnz	r1, 8002ed8 <USBD_DFU_Setup+0x1ac>
 8002ecc:	7822      	ldrb	r2, [r4, #0]
 8002ece:	2a41      	cmp	r2, #65	; 0x41
 8002ed0:	d102      	bne.n	8002ed8 <USBD_DFU_Setup+0x1ac>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002ed2:	462a      	mov	r2, r5
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8002ed4:	4798      	blx	r3
 8002ed6:	e7e1      	b.n	8002e9c <USBD_DFU_Setup+0x170>
 8002ed8:	462a      	mov	r2, r5
 8002eda:	2101      	movs	r1, #1
 8002edc:	e7fa      	b.n	8002ed4 <USBD_DFU_Setup+0x1a8>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8002ede:	2205      	movs	r2, #5
          hdfu->dev_state = DFU_STATE_IDLE;
 8002ee0:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8002ee4:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
 8002ee8:	e009      	b.n	8002efe <USBD_DFU_Setup+0x1d2>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8002eea:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d10a      	bne.n	8002f08 <USBD_DFU_Setup+0x1dc>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002ef2:	2207      	movs	r2, #7
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8002ef4:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8002ef8:	2300      	movs	r3, #0
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002efa:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
          hdfu->dev_status[2] = 0U;
 8002efe:	f8a4 3412 	strh.w	r3, [r4, #1042]	; 0x412
          hdfu->dev_status[4] = hdfu->dev_state;
 8002f02:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
 8002f06:	e7c9      	b.n	8002e9c <USBD_DFU_Setup+0x170>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1c7      	bne.n	8002e9c <USBD_DFU_Setup+0x170>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8002f0c:	4a4c      	ldr	r2, [pc, #304]	; (8003040 <USBD_DFU_Setup+0x314>)
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002f0e:	7d12      	ldrb	r2, [r2, #20]
 8002f10:	0752      	lsls	r2, r2, #29
 8002f12:	d5c3      	bpl.n	8002e9c <USBD_DFU_Setup+0x170>
          hdfu->dev_state = DFU_STATE_IDLE;
 8002f14:	2202      	movs	r2, #2
 8002f16:	e7e3      	b.n	8002ee0 <USBD_DFU_Setup+0x1b4>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8002f18:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002f1c:	2b0a      	cmp	r3, #10
 8002f1e:	d108      	bne.n	8002f32 <USBD_DFU_Setup+0x206>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002f20:	2302      	movs	r3, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8002f22:	2500      	movs	r5, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8002f24:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8002f28:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8002f2c:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 8002f30:	e747      	b.n	8002dc2 <USBD_DFU_Setup+0x96>
    hdfu->dev_state = DFU_STATE_ERROR;
 8002f32:	230a      	movs	r3, #10
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002f34:	220e      	movs	r2, #14
    hdfu->dev_state = DFU_STATE_ERROR;
 8002f36:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002f3a:	f8c4 2410 	str.w	r2, [r4, #1040]	; 0x410
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8002f3e:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 8002f42:	e728      	b.n	8002d96 <USBD_DFU_Setup+0x6a>
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8002f44:	2201      	movs	r2, #1
 8002f46:	f504 6183 	add.w	r1, r4, #1048	; 0x418
 8002f4a:	e760      	b.n	8002e0e <USBD_DFU_Setup+0xe2>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002f4c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002f50:	2b09      	cmp	r3, #9
 8002f52:	f63f af20 	bhi.w	8002d96 <USBD_DFU_Setup+0x6a>
 8002f56:	f44f 751b 	mov.w	r5, #620	; 0x26c
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	43ed      	mvns	r5, r5
 8002f5e:	f015 0501 	ands.w	r5, r5, #1
 8002f62:	f47f af18 	bne.w	8002d96 <USBD_DFU_Setup+0x6a>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002f66:	2302      	movs	r3, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002f68:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002f6c:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 8002f70:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 8002f74:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
    hdfu->wlength = 0U;
 8002f78:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
 8002f7c:	e721      	b.n	8002dc2 <USBD_DFU_Setup+0x96>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002f7e:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8002f82:	2a09      	cmp	r2, #9
 8002f84:	d811      	bhi.n	8002faa <USBD_DFU_Setup+0x27e>
 8002f86:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8002f8a:	40d3      	lsrs	r3, r2
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	f013 0301 	ands.w	r3, r3, #1
 8002f92:	d10a      	bne.n	8002faa <USBD_DFU_Setup+0x27e>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002f94:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002f96:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002f9a:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 8002f9e:	f8a4 2414 	strh.w	r2, [r4, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 8002fa2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    hdfu->wlength = 0U;
 8002fa6:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <USBD_DFU_Setup+0x314>)
 8002fac:	7d5d      	ldrb	r5, [r3, #21]
 8002fae:	f015 0510 	ands.w	r5, r5, #16
 8002fb2:	d007      	beq.n	8002fc4 <USBD_DFU_Setup+0x298>
    USBD_Stop(pdev);
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f000 f873 	bl	80030a0 <USBD_Stop>
    USBD_Start(pdev);
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f000 f86b 	bl	8003096 <USBD_Start>
  uint8_t ret = USBD_OK;
 8002fc0:	4645      	mov	r5, r8
 8002fc2:	e6fe      	b.n	8002dc2 <USBD_DFU_Setup+0x96>
    USBD_Delay((uint32_t)req->wValue);
 8002fc4:	8848      	ldrh	r0, [r1, #2]
 8002fc6:	f7fd fba9 	bl	800071c <HAL_Delay>
 8002fca:	e6fa      	b.n	8002dc2 <USBD_DFU_Setup+0x96>
      switch (req->bRequest)
 8002fcc:	784f      	ldrb	r7, [r1, #1]
 8002fce:	2f0b      	cmp	r7, #11
 8002fd0:	d812      	bhi.n	8002ff8 <USBD_DFU_Setup+0x2cc>
 8002fd2:	e8df f007 	tbb	[pc, r7]
 8002fd6:	1106      	.short	0x1106
 8002fd8:	11111111 	.word	0x11111111
 8002fdc:	11111116 	.word	0x11111116
 8002fe0:	2b23      	.short	0x2b23
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002fe2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d106      	bne.n	8002ff8 <USBD_DFU_Setup+0x2cc>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002fea:	2202      	movs	r2, #2
 8002fec:	f10d 0106 	add.w	r1, sp, #6
 8002ff0:	f000 fba5 	bl	800373e <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002ff4:	463d      	mov	r5, r7
 8002ff6:	e6e4      	b.n	8002dc2 <USBD_DFU_Setup+0x96>
            USBD_CtlError(pdev, req);
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	f000 fb79 	bl	80036f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8002ffe:	2502      	movs	r5, #2
 8003000:	e6df      	b.n	8002dc2 <USBD_DFU_Setup+0x96>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8003002:	884b      	ldrh	r3, [r1, #2]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	2b21      	cmp	r3, #33	; 0x21
 8003008:	d105      	bne.n	8003016 <USBD_DFU_Setup+0x2ea>
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800300a:	88ca      	ldrh	r2, [r1, #6]
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800300c:	490d      	ldr	r1, [pc, #52]	; (8003044 <USBD_DFU_Setup+0x318>)
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800300e:	2a09      	cmp	r2, #9
 8003010:	bf28      	it	cs
 8003012:	2209      	movcs	r2, #9
 8003014:	e719      	b.n	8002e4a <USBD_DFU_Setup+0x11e>
  uint16_t len = 0U;
 8003016:	2200      	movs	r2, #0
  uint8_t *pbuf = 0U;
 8003018:	4611      	mov	r1, r2
          USBD_CtlSendData(pdev, pbuf, len);
 800301a:	e716      	b.n	8002e4a <USBD_DFU_Setup+0x11e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800301c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003020:	2b03      	cmp	r3, #3
 8003022:	d1e9      	bne.n	8002ff8 <USBD_DFU_Setup+0x2cc>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8003024:	2201      	movs	r2, #1
 8003026:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 800302a:	e70e      	b.n	8002e4a <USBD_DFU_Setup+0x11e>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800302c:	788d      	ldrb	r5, [r1, #2]
 800302e:	2d00      	cmp	r5, #0
 8003030:	d1e2      	bne.n	8002ff8 <USBD_DFU_Setup+0x2cc>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003032:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003036:	2b03      	cmp	r3, #3
 8003038:	d1de      	bne.n	8002ff8 <USBD_DFU_Setup+0x2cc>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800303a:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
 800303e:	e6c0      	b.n	8002dc2 <USBD_DFU_Setup+0x96>
 8003040:	20000060 	.word	0x20000060
 8003044:	20000072 	.word	0x20000072

08003048 <USBD_DFU_DataOut>:
 8003048:	2000      	movs	r0, #0
 800304a:	4770      	bx	lr

0800304c <USBD_DFU_IsoINIncomplete>:
 800304c:	2000      	movs	r0, #0
 800304e:	4770      	bx	lr

08003050 <USBD_DFU_SOF>:
 8003050:	2000      	movs	r0, #0
 8003052:	4770      	bx	lr

08003054 <USBD_DFU_RegisterMedia>:
  if (fops != NULL)
 8003054:	b109      	cbz	r1, 800305a <USBD_DFU_RegisterMedia+0x6>
    pdev->pUserData = fops;
 8003056:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
}
 800305a:	2000      	movs	r0, #0
 800305c:	4770      	bx	lr

0800305e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800305e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003060:	b180      	cbz	r0, 8003084 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003062:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003066:	b113      	cbz	r3, 800306e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003068:	2300      	movs	r3, #0
 800306a:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800306e:	b109      	cbz	r1, 8003074 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003070:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003074:	2301      	movs	r3, #1
  pdev->id = id;
 8003076:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003078:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800307c:	f000 fcd6 	bl	8003a2c <USBD_LL_Init>

  return USBD_OK;
 8003080:	2000      	movs	r0, #0
}
 8003082:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003084:	2002      	movs	r0, #2
 8003086:	e7fc      	b.n	8003082 <USBD_Init+0x24>

08003088 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003088:	b119      	cbz	r1, 8003092 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800308a:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800308e:	2000      	movs	r0, #0
 8003090:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003092:	2002      	movs	r0, #2
  }

  return status;
}
 8003094:	4770      	bx	lr

08003096 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003096:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003098:	f000 fcf2 	bl	8003a80 <USBD_LL_Start>

  return USBD_OK;
}
 800309c:	2000      	movs	r0, #0
 800309e:	bd08      	pop	{r3, pc}

080030a0 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80030a0:	b510      	push	{r4, lr}
 80030a2:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80030a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80030a8:	7901      	ldrb	r1, [r0, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 80030ae:	4620      	mov	r0, r4
 80030b0:	f000 fcef 	bl	8003a92 <USBD_LL_Stop>

  return USBD_OK;
}
 80030b4:	2000      	movs	r0, #0
 80030b6:	bd10      	pop	{r4, pc}

080030b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80030b8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80030ba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80030be:	b90b      	cbnz	r3, 80030c4 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80030c0:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80030c2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4798      	blx	r3
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d0fa      	beq.n	80030c2 <USBD_SetClassConfig+0xa>
 80030cc:	e7f8      	b.n	80030c0 <USBD_SetClassConfig+0x8>

080030ce <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80030ce:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80030d0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4798      	blx	r3

  return USBD_OK;
}
 80030d8:	2000      	movs	r0, #0
 80030da:	bd08      	pop	{r3, pc}

080030dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80030dc:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80030de:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80030e2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80030e4:	4628      	mov	r0, r5
 80030e6:	f000 faef 	bl	80036c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80030ea:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80030ec:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80030f0:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80030f4:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80030f8:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80030fc:	f001 031f 	and.w	r3, r1, #31
 8003100:	2b01      	cmp	r3, #1
 8003102:	d008      	beq.n	8003116 <USBD_LL_SetupStage+0x3a>
 8003104:	2b02      	cmp	r3, #2
 8003106:	d00b      	beq.n	8003120 <USBD_LL_SetupStage+0x44>
 8003108:	b97b      	cbnz	r3, 800312a <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800310a:	4629      	mov	r1, r5
 800310c:	4620      	mov	r0, r4
 800310e:	f000 f8fb 	bl	8003308 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8003112:	2000      	movs	r0, #0
 8003114:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003116:	4629      	mov	r1, r5
 8003118:	4620      	mov	r0, r4
 800311a:	f000 fa27 	bl	800356c <USBD_StdItfReq>
      break;
 800311e:	e7f8      	b.n	8003112 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8003120:	4629      	mov	r1, r5
 8003122:	4620      	mov	r0, r4
 8003124:	f000 fa46 	bl	80035b4 <USBD_StdEPReq>
      break;
 8003128:	e7f3      	b.n	8003112 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800312a:	4620      	mov	r0, r4
 800312c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003130:	f000 fcc4 	bl	8003abc <USBD_LL_StallEP>
      break;
 8003134:	e7ed      	b.n	8003112 <USBD_LL_SetupStage+0x36>

08003136 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003138:	4604      	mov	r4, r0
 800313a:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800313c:	460d      	mov	r5, r1
 800313e:	bb39      	cbnz	r1, 8003190 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003140:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003144:	2b03      	cmp	r3, #3
 8003146:	d11c      	bne.n	8003182 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8003148:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 800314c:	4296      	cmp	r6, r2
 800314e:	d90b      	bls.n	8003168 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8003150:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003152:	42b2      	cmp	r2, r6
 8003154:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8003156:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800315a:	bf8c      	ite	hi
 800315c:	b2b2      	uxthhi	r2, r6
 800315e:	b292      	uxthls	r2, r2
 8003160:	f000 fb0f 	bl	8003782 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003164:	4628      	mov	r0, r5
 8003166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003168:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	b123      	cbz	r3, 800317a <USBD_LL_DataOutStage+0x44>
 8003170:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003174:	2a03      	cmp	r2, #3
 8003176:	d100      	bne.n	800317a <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8003178:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800317a:	4620      	mov	r0, r4
 800317c:	f000 fb09 	bl	8003792 <USBD_CtlSendStatus>
 8003180:	e7f0      	b.n	8003164 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003182:	2b05      	cmp	r3, #5
 8003184:	d1ee      	bne.n	8003164 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003186:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800318a:	f000 fc97 	bl	8003abc <USBD_LL_StallEP>
 800318e:	e7e9      	b.n	8003164 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003190:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	b133      	cbz	r3, 80031a6 <USBD_LL_DataOutStage+0x70>
 8003198:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800319c:	2a03      	cmp	r2, #3
 800319e:	d102      	bne.n	80031a6 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80031a0:	4798      	blx	r3
  return USBD_OK;
 80031a2:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 80031a4:	e7de      	b.n	8003164 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 80031a6:	2502      	movs	r5, #2
 80031a8:	e7dc      	b.n	8003164 <USBD_LL_DataOutStage+0x2e>

080031aa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80031aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ac:	4604      	mov	r4, r0
 80031ae:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80031b0:	460d      	mov	r5, r1
 80031b2:	2900      	cmp	r1, #0
 80031b4:	d147      	bne.n	8003246 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80031b6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d13c      	bne.n	8003238 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 80031be:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 80031c2:	429e      	cmp	r6, r3
 80031c4:	d914      	bls.n	80031f0 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80031c6:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80031c8:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 80031ca:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	f000 fac3 	bl	8003758 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80031d2:	462b      	mov	r3, r5
 80031d4:	462a      	mov	r2, r5
 80031d6:	4629      	mov	r1, r5
 80031d8:	4620      	mov	r0, r4
 80031da:	f000 fca5 	bl	8003b28 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80031de:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d102      	bne.n	80031ec <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80031ec:	4628      	mov	r0, r5
 80031ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80031f0:	69c2      	ldr	r2, [r0, #28]
 80031f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80031f6:	fb03 2616 	mls	r6, r3, r6, r2
 80031fa:	b95e      	cbnz	r6, 8003214 <USBD_LL_DataInStage+0x6a>
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d809      	bhi.n	8003214 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8003200:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8003204:	429a      	cmp	r2, r3
 8003206:	d205      	bcs.n	8003214 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003208:	460a      	mov	r2, r1
 800320a:	f000 faa5 	bl	8003758 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800320e:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8003212:	e7de      	b.n	80031d2 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003214:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	b12b      	cbz	r3, 8003228 <USBD_LL_DataInStage+0x7e>
 800321c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003220:	2a03      	cmp	r2, #3
 8003222:	d101      	bne.n	8003228 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8003224:	4620      	mov	r0, r4
 8003226:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	4620      	mov	r0, r4
 800322c:	f000 fc46 	bl	8003abc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003230:	4620      	mov	r0, r4
 8003232:	f000 fab9 	bl	80037a8 <USBD_CtlReceiveStatus>
 8003236:	e7d2      	b.n	80031de <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003238:	f033 0304 	bics.w	r3, r3, #4
 800323c:	d1cf      	bne.n	80031de <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800323e:	2180      	movs	r1, #128	; 0x80
 8003240:	f000 fc3c 	bl	8003abc <USBD_LL_StallEP>
 8003244:	e7cb      	b.n	80031de <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003246:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	b133      	cbz	r3, 800325c <USBD_LL_DataInStage+0xb2>
 800324e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003252:	2a03      	cmp	r2, #3
 8003254:	d102      	bne.n	800325c <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8003256:	4798      	blx	r3
  return USBD_OK;
 8003258:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 800325a:	e7c7      	b.n	80031ec <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 800325c:	2502      	movs	r5, #2
 800325e:	e7c5      	b.n	80031ec <USBD_LL_DataInStage+0x42>

08003260 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003260:	2200      	movs	r2, #0
{
 8003262:	b570      	push	{r4, r5, r6, lr}
 8003264:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003266:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003268:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800326a:	4611      	mov	r1, r2
 800326c:	2340      	movs	r3, #64	; 0x40
 800326e:	f000 fc19 	bl	8003aa4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003272:	4633      	mov	r3, r6
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	2200      	movs	r2, #0
 8003278:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800327a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800327e:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003282:	f000 fc0f 	bl	8003aa4 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8003286:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003288:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800328c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800328e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003290:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003294:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003298:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800329a:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800329e:	b123      	cbz	r3, 80032aa <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80032a0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80032a4:	4620      	mov	r0, r4
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4798      	blx	r3
  }

  return USBD_OK;
}
 80032aa:	2000      	movs	r0, #0
 80032ac:	bd70      	pop	{r4, r5, r6, pc}

080032ae <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80032ae:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80032b0:	2000      	movs	r0, #0
 80032b2:	4770      	bx	lr

080032b4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80032b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80032b8:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80032bc:	2304      	movs	r3, #4
 80032be:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80032c2:	2000      	movs	r0, #0
 80032c4:	4770      	bx	lr

080032c6 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80032c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80032ca:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80032cc:	bf04      	itt	eq
 80032ce:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80032d2:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80032d6:	2000      	movs	r0, #0
 80032d8:	4770      	bx	lr

080032da <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80032da:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80032dc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80032e0:	2a03      	cmp	r2, #3
 80032e2:	d104      	bne.n	80032ee <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80032e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	b103      	cbz	r3, 80032ee <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80032ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80032ee:	2000      	movs	r0, #0
 80032f0:	bd08      	pop	{r3, pc}

080032f2 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80032f2:	b510      	push	{r4, lr}
 80032f4:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80032f6:	2180      	movs	r1, #128	; 0x80
 80032f8:	f000 fbe0 	bl	8003abc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80032fc:	4620      	mov	r0, r4
}
 80032fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003302:	2100      	movs	r1, #0
 8003304:	f000 bbda 	b.w	8003abc <USBD_LL_StallEP>

08003308 <USBD_StdDevReq>:
{
 8003308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800330a:	780b      	ldrb	r3, [r1, #0]
 800330c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800330e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003312:	2b20      	cmp	r3, #32
{
 8003314:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003316:	d012      	beq.n	800333e <USBD_StdDevReq+0x36>
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d010      	beq.n	800333e <USBD_StdDevReq+0x36>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d151      	bne.n	80033c4 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8003320:	784b      	ldrb	r3, [r1, #1]
 8003322:	2b09      	cmp	r3, #9
 8003324:	d84e      	bhi.n	80033c4 <USBD_StdDevReq+0xbc>
 8003326:	e8df f013 	tbh	[pc, r3, lsl #1]
 800332a:	00f7      	.short	0x00f7
 800332c:	004d0113 	.word	0x004d0113
 8003330:	004d010c 	.word	0x004d010c
 8003334:	00130090 	.word	0x00130090
 8003338:	00df004d 	.word	0x00df004d
 800333c:	00ac      	.short	0x00ac
      pdev->pClass->Setup(pdev, req);
 800333e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003342:	4629      	mov	r1, r5
 8003344:	4620      	mov	r0, r4
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4798      	blx	r3
}
 800334a:	2000      	movs	r0, #0
 800334c:	b003      	add	sp, #12
 800334e:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003350:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8003352:	8849      	ldrh	r1, [r1, #2]
  uint16_t len = 0U;
 8003354:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003358:	0a0b      	lsrs	r3, r1, #8
 800335a:	3b01      	subs	r3, #1
 800335c:	2b06      	cmp	r3, #6
 800335e:	d831      	bhi.n	80033c4 <USBD_StdDevReq+0xbc>
 8003360:	e8df f003 	tbb	[pc, r3]
 8003364:	30231604 	.word	0x30231604
 8003368:	5130      	.short	0x5130
 800336a:	5b          	.byte	0x5b
 800336b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800336c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003370:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003372:	7c20      	ldrb	r0, [r4, #16]
 8003374:	f10d 0106 	add.w	r1, sp, #6
 8003378:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800337a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800337e:	2a00      	cmp	r2, #0
 8003380:	d05f      	beq.n	8003442 <USBD_StdDevReq+0x13a>
 8003382:	88eb      	ldrh	r3, [r5, #6]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d153      	bne.n	8003430 <USBD_StdDevReq+0x128>
        USBD_CtlSendStatus(pdev);
 8003388:	4620      	mov	r0, r4
 800338a:	f000 fa02 	bl	8003792 <USBD_CtlSendStatus>
 800338e:	e7dc      	b.n	800334a <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003390:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8003392:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003396:	b932      	cbnz	r2, 80033a6 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800339a:	f10d 0006 	add.w	r0, sp, #6
 800339e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80033a0:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80033a2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80033a4:	e7e9      	b.n	800337a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	e7f7      	b.n	800339a <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 80033aa:	b2c9      	uxtb	r1, r1
 80033ac:	2905      	cmp	r1, #5
 80033ae:	d821      	bhi.n	80033f4 <USBD_StdDevReq+0xec>
 80033b0:	e8df f001 	tbb	[pc, r1]
 80033b4:	14100c03 	.word	0x14100c03
 80033b8:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80033ba:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80033be:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1d6      	bne.n	8003372 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80033c4:	4620      	mov	r0, r4
 80033c6:	f7ff ff94 	bl	80032f2 <USBD_CtlError.constprop.0>
        break;
 80033ca:	e7be      	b.n	800334a <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80033cc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	e7f5      	b.n	80033c0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80033d4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	e7f1      	b.n	80033c0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80033dc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	e7ed      	b.n	80033c0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80033e4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	e7e9      	b.n	80033c0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80033ec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	e7e5      	b.n	80033c0 <USBD_StdDevReq+0xb8>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80033f4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0e2      	beq.n	80033c4 <USBD_StdDevReq+0xbc>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80033fe:	f10d 0206 	add.w	r2, sp, #6
 8003402:	4798      	blx	r3
  if (err != 0U)
 8003404:	e7b9      	b.n	800337a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003406:	7c03      	ldrb	r3, [r0, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1db      	bne.n	80033c4 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800340c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003410:	f10d 0006 	add.w	r0, sp, #6
 8003414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003416:	4798      	blx	r3
  if (err != 0U)
 8003418:	e7af      	b.n	800337a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800341a:	7c03      	ldrb	r3, [r0, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1d1      	bne.n	80033c4 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003420:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003424:	f10d 0006 	add.w	r0, sp, #6
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800342c:	2307      	movs	r3, #7
 800342e:	e7b8      	b.n	80033a2 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8003430:	429a      	cmp	r2, r3
 8003432:	bf28      	it	cs
 8003434:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003436:	4601      	mov	r1, r0
 8003438:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800343a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800343e:	f000 f97e 	bl	800373e <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003442:	88eb      	ldrh	r3, [r5, #6]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d180      	bne.n	800334a <USBD_StdDevReq+0x42>
 8003448:	e79e      	b.n	8003388 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800344a:	888b      	ldrh	r3, [r1, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1b9      	bne.n	80033c4 <USBD_StdDevReq+0xbc>
 8003450:	88cb      	ldrh	r3, [r1, #6]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1b6      	bne.n	80033c4 <USBD_StdDevReq+0xbc>
 8003456:	884d      	ldrh	r5, [r1, #2]
 8003458:	2d7f      	cmp	r5, #127	; 0x7f
 800345a:	d8b3      	bhi.n	80033c4 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800345c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003460:	2b03      	cmp	r3, #3
 8003462:	d0af      	beq.n	80033c4 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003464:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8003466:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800346a:	f000 fb4b 	bl	8003b04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800346e:	4620      	mov	r0, r4
 8003470:	f000 f98f 	bl	8003792 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003474:	b11d      	cbz	r5, 800347e <USBD_StdDevReq+0x176>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003476:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003478:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800347c:	e765      	b.n	800334a <USBD_StdDevReq+0x42>
 800347e:	2301      	movs	r3, #1
 8003480:	e7fa      	b.n	8003478 <USBD_StdDevReq+0x170>
  cfgidx = (uint8_t)(req->wValue);
 8003482:	7889      	ldrb	r1, [r1, #2]
 8003484:	4d38      	ldr	r5, [pc, #224]	; (8003568 <USBD_StdDevReq+0x260>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003486:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003488:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800348a:	d89b      	bhi.n	80033c4 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800348c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003490:	2b02      	cmp	r3, #2
 8003492:	d008      	beq.n	80034a6 <USBD_StdDevReq+0x19e>
 8003494:	2b03      	cmp	r3, #3
 8003496:	d015      	beq.n	80034c4 <USBD_StdDevReq+0x1bc>
        USBD_CtlError(pdev, req);
 8003498:	f7ff ff2b 	bl	80032f2 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800349c:	4620      	mov	r0, r4
 800349e:	7829      	ldrb	r1, [r5, #0]
 80034a0:	f7ff fe15 	bl	80030ce <USBD_ClrClassConfig>
        break;
 80034a4:	e751      	b.n	800334a <USBD_StdDevReq+0x42>
        if (cfgidx)
 80034a6:	2900      	cmp	r1, #0
 80034a8:	f43f af6e 	beq.w	8003388 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 80034ac:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80034ae:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80034b0:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80034b2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80034b6:	4620      	mov	r0, r4
 80034b8:	f7ff fdfe 	bl	80030b8 <USBD_SetClassConfig>
 80034bc:	2802      	cmp	r0, #2
 80034be:	f47f af63 	bne.w	8003388 <USBD_StdDevReq+0x80>
 80034c2:	e77f      	b.n	80033c4 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 80034c4:	b931      	cbnz	r1, 80034d4 <USBD_StdDevReq+0x1cc>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80034c6:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80034c8:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80034ca:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80034ce:	f7ff fdfe 	bl	80030ce <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80034d2:	e759      	b.n	8003388 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80034d4:	6841      	ldr	r1, [r0, #4]
 80034d6:	2901      	cmp	r1, #1
 80034d8:	f43f af56 	beq.w	8003388 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80034dc:	b2c9      	uxtb	r1, r1
 80034de:	f7ff fdf6 	bl	80030ce <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80034e2:	7829      	ldrb	r1, [r5, #0]
 80034e4:	6061      	str	r1, [r4, #4]
 80034e6:	e7e6      	b.n	80034b6 <USBD_StdDevReq+0x1ae>
  if (req->wLength != 1U)
 80034e8:	88ca      	ldrh	r2, [r1, #6]
 80034ea:	2a01      	cmp	r2, #1
 80034ec:	f47f af6a 	bne.w	80033c4 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80034f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d80a      	bhi.n	800350e <USBD_StdDevReq+0x206>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f43f af63 	beq.w	80033c4 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 80034fe:	4601      	mov	r1, r0
 8003500:	2300      	movs	r3, #0
 8003502:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003506:	4620      	mov	r0, r4
 8003508:	f000 f919 	bl	800373e <USBD_CtlSendData>
      break;
 800350c:	e71d      	b.n	800334a <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 800350e:	2b03      	cmp	r3, #3
 8003510:	f47f af58 	bne.w	80033c4 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003514:	1d01      	adds	r1, r0, #4
 8003516:	e7f6      	b.n	8003506 <USBD_StdDevReq+0x1fe>
  switch (pdev->dev_state)
 8003518:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800351c:	3b01      	subs	r3, #1
 800351e:	2b02      	cmp	r3, #2
 8003520:	f63f af50 	bhi.w	80033c4 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8003524:	88cb      	ldrh	r3, [r1, #6]
 8003526:	2b02      	cmp	r3, #2
 8003528:	f47f af4c 	bne.w	80033c4 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800352c:	2301      	movs	r3, #1
 800352e:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003530:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003534:	b10b      	cbz	r3, 800353a <USBD_StdDevReq+0x232>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003536:	2303      	movs	r3, #3
 8003538:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800353a:	2202      	movs	r2, #2
 800353c:	f104 010c 	add.w	r1, r4, #12
 8003540:	e7e1      	b.n	8003506 <USBD_StdDevReq+0x1fe>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003542:	884b      	ldrh	r3, [r1, #2]
 8003544:	2b01      	cmp	r3, #1
 8003546:	f47f af00 	bne.w	800334a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800354a:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800354e:	e71b      	b.n	8003388 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8003550:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003554:	3b01      	subs	r3, #1
 8003556:	2b02      	cmp	r3, #2
 8003558:	f63f af34 	bhi.w	80033c4 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800355c:	884b      	ldrh	r3, [r1, #2]
 800355e:	2b01      	cmp	r3, #1
 8003560:	f47f aef3 	bne.w	800334a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	e7f0      	b.n	800354a <USBD_StdDevReq+0x242>
 8003568:	2000044f 	.word	0x2000044f

0800356c <USBD_StdItfReq>:
{
 800356c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800356e:	780b      	ldrb	r3, [r1, #0]
{
 8003570:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003572:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003576:	2a40      	cmp	r2, #64	; 0x40
{
 8003578:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800357a:	d001      	beq.n	8003580 <USBD_StdItfReq+0x14>
 800357c:	065b      	lsls	r3, r3, #25
 800357e:	d415      	bmi.n	80035ac <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8003580:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003584:	3b01      	subs	r3, #1
 8003586:	2b02      	cmp	r3, #2
 8003588:	d810      	bhi.n	80035ac <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800358a:	792b      	ldrb	r3, [r5, #4]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d80d      	bhi.n	80035ac <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003590:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003594:	4629      	mov	r1, r5
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4620      	mov	r0, r4
 800359a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800359c:	88eb      	ldrh	r3, [r5, #6]
 800359e:	b91b      	cbnz	r3, 80035a8 <USBD_StdItfReq+0x3c>
 80035a0:	b910      	cbnz	r0, 80035a8 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 80035a2:	4620      	mov	r0, r4
 80035a4:	f000 f8f5 	bl	8003792 <USBD_CtlSendStatus>
}
 80035a8:	2000      	movs	r0, #0
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80035ac:	4620      	mov	r0, r4
 80035ae:	f7ff fea0 	bl	80032f2 <USBD_CtlError.constprop.0>
          break;
 80035b2:	e7f9      	b.n	80035a8 <USBD_StdItfReq+0x3c>

080035b4 <USBD_StdEPReq>:
{
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	780a      	ldrb	r2, [r1, #0]
 80035b8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035ba:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80035be:	2a20      	cmp	r2, #32
{
 80035c0:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035c2:	d027      	beq.n	8003614 <USBD_StdEPReq+0x60>
 80035c4:	2a40      	cmp	r2, #64	; 0x40
 80035c6:	d025      	beq.n	8003614 <USBD_StdEPReq+0x60>
 80035c8:	bb92      	cbnz	r2, 8003630 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 80035ca:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80035cc:	888d      	ldrh	r5, [r1, #4]
 80035ce:	2a01      	cmp	r2, #1
 80035d0:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 80035d2:	d03d      	beq.n	8003650 <USBD_StdEPReq+0x9c>
 80035d4:	2a03      	cmp	r2, #3
 80035d6:	d025      	beq.n	8003624 <USBD_StdEPReq+0x70>
 80035d8:	bb52      	cbnz	r2, 8003630 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 80035da:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d04d      	beq.n	800367e <USBD_StdEPReq+0xca>
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d124      	bne.n	8003630 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 80035e6:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80035e8:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80035ec:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80035f0:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80035f4:	d054      	beq.n	80036a0 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	b1d3      	cbz	r3, 8003630 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80035fa:	2314      	movs	r3, #20
 80035fc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003600:	fb05 3303 	mla	r3, r5, r3, r3
 8003604:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003606:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800360a:	d155      	bne.n	80036b8 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 800360c:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800360e:	2202      	movs	r2, #2
 8003610:	4629      	mov	r1, r5
 8003612:	e041      	b.n	8003698 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8003614:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8003618:	4619      	mov	r1, r3
 800361a:	4620      	mov	r0, r4
 800361c:	6892      	ldr	r2, [r2, #8]
 800361e:	4790      	blx	r2
}
 8003620:	2000      	movs	r0, #0
 8003622:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8003624:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003628:	2a02      	cmp	r2, #2
 800362a:	d01f      	beq.n	800366c <USBD_StdEPReq+0xb8>
 800362c:	2a03      	cmp	r2, #3
 800362e:	d003      	beq.n	8003638 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8003630:	4620      	mov	r0, r4
 8003632:	f7ff fe5e 	bl	80032f2 <USBD_CtlError.constprop.0>
              break;
 8003636:	e7f3      	b.n	8003620 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003638:	885a      	ldrh	r2, [r3, #2]
 800363a:	b92a      	cbnz	r2, 8003648 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 800363c:	064a      	lsls	r2, r1, #25
 800363e:	d003      	beq.n	8003648 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003640:	88db      	ldrh	r3, [r3, #6]
 8003642:	b90b      	cbnz	r3, 8003648 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003644:	f000 fa3a 	bl	8003abc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003648:	4620      	mov	r0, r4
 800364a:	f000 f8a2 	bl	8003792 <USBD_CtlSendStatus>
              break;
 800364e:	e7e7      	b.n	8003620 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8003650:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003654:	2a02      	cmp	r2, #2
 8003656:	d009      	beq.n	800366c <USBD_StdEPReq+0xb8>
 8003658:	2a03      	cmp	r2, #3
 800365a:	d1e9      	bne.n	8003630 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800365c:	885b      	ldrh	r3, [r3, #2]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1de      	bne.n	8003620 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003662:	064d      	lsls	r5, r1, #25
 8003664:	d0f0      	beq.n	8003648 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003666:	f000 fa32 	bl	8003ace <USBD_LL_ClearStallEP>
 800366a:	e7ed      	b.n	8003648 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800366c:	064b      	lsls	r3, r1, #25
 800366e:	d0df      	beq.n	8003630 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8003670:	f000 fa24 	bl	8003abc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	4620      	mov	r0, r4
 8003678:	f000 fa20 	bl	8003abc <USBD_LL_StallEP>
 800367c:	e7d0      	b.n	8003620 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800367e:	064a      	lsls	r2, r1, #25
 8003680:	d1d6      	bne.n	8003630 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003682:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8003684:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003688:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800368c:	bf4c      	ite	mi
 800368e:	f100 0114 	addmi.w	r1, r0, #20
 8003692:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8003696:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003698:	4620      	mov	r0, r4
 800369a:	f000 f850 	bl	800373e <USBD_CtlSendData>
              break;
 800369e:	e7bf      	b.n	8003620 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80036a0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0c3      	beq.n	8003630 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80036a8:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 80036aa:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80036ae:	fb03 0505 	mla	r5, r3, r5, r0
 80036b2:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80036b6:	e7a6      	b.n	8003606 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80036b8:	4620      	mov	r0, r4
 80036ba:	f000 fa11 	bl	8003ae0 <USBD_LL_IsStallEP>
 80036be:	b108      	cbz	r0, 80036c4 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e7a3      	b.n	800360c <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 80036c4:	6028      	str	r0, [r5, #0]
 80036c6:	e7a2      	b.n	800360e <USBD_StdEPReq+0x5a>

080036c8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80036c8:	780b      	ldrb	r3, [r1, #0]
 80036ca:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80036cc:	784b      	ldrb	r3, [r1, #1]
 80036ce:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80036d0:	78ca      	ldrb	r2, [r1, #3]
 80036d2:	788b      	ldrb	r3, [r1, #2]
 80036d4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80036d8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80036da:	794a      	ldrb	r2, [r1, #5]
 80036dc:	790b      	ldrb	r3, [r1, #4]
 80036de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80036e2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80036e4:	79ca      	ldrb	r2, [r1, #7]
 80036e6:	798b      	ldrb	r3, [r1, #6]
 80036e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80036ec:	80c3      	strh	r3, [r0, #6]
}
 80036ee:	4770      	bx	lr

080036f0 <USBD_CtlError>:
{
 80036f0:	b510      	push	{r4, lr}
 80036f2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80036f4:	2180      	movs	r1, #128	; 0x80
 80036f6:	f000 f9e1 	bl	8003abc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80036fa:	4620      	mov	r0, r4
}
 80036fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003700:	2100      	movs	r1, #0
 8003702:	f000 b9db 	b.w	8003abc <USBD_LL_StallEP>

08003706 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003706:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003708:	b188      	cbz	r0, 800372e <USBD_GetString+0x28>
 800370a:	2400      	movs	r4, #0
 800370c:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800370e:	4623      	mov	r3, r4
 8003710:	3401      	adds	r4, #1
 8003712:	5d05      	ldrb	r5, [r0, r4]
 8003714:	2d00      	cmp	r5, #0
 8003716:	d1fa      	bne.n	800370e <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003718:	b2db      	uxtb	r3, r3
 800371a:	3301      	adds	r3, #1
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003720:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003722:	2303      	movs	r3, #3
 8003724:	704b      	strb	r3, [r1, #1]
 8003726:	2302      	movs	r3, #2
    while (*desc != '\0')
 8003728:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800372c:	b904      	cbnz	r4, 8003730 <USBD_GetString+0x2a>
}
 800372e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	54cc      	strb	r4, [r1, r3]
 8003734:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8003736:	3302      	adds	r3, #2
 8003738:	b2db      	uxtb	r3, r3
 800373a:	548d      	strb	r5, [r1, r2]
 800373c:	e7f4      	b.n	8003728 <USBD_GetString+0x22>

0800373e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800373e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003740:	2202      	movs	r2, #2
{
 8003742:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8003744:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003748:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800374c:	460a      	mov	r2, r1
 800374e:	2100      	movs	r1, #0
 8003750:	f000 f9e1 	bl	8003b16 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003754:	2000      	movs	r0, #0
 8003756:	bd10      	pop	{r4, pc}

08003758 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003758:	b508      	push	{r3, lr}
 800375a:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800375c:	460a      	mov	r2, r1
 800375e:	2100      	movs	r1, #0
 8003760:	f000 f9d9 	bl	8003b16 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003764:	2000      	movs	r0, #0
 8003766:	bd08      	pop	{r3, pc}

08003768 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003768:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800376a:	2203      	movs	r2, #3
{
 800376c:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800376e:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003772:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003776:	460a      	mov	r2, r1
 8003778:	2100      	movs	r1, #0
 800377a:	f000 f9d5 	bl	8003b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800377e:	2000      	movs	r0, #0
 8003780:	bd10      	pop	{r4, pc}

08003782 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003782:	b508      	push	{r3, lr}
 8003784:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003786:	460a      	mov	r2, r1
 8003788:	2100      	movs	r1, #0
 800378a:	f000 f9cd 	bl	8003b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800378e:	2000      	movs	r0, #0
 8003790:	bd08      	pop	{r3, pc}

08003792 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003792:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003794:	2304      	movs	r3, #4
 8003796:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800379a:	2300      	movs	r3, #0
 800379c:	461a      	mov	r2, r3
 800379e:	4619      	mov	r1, r3
 80037a0:	f000 f9b9 	bl	8003b16 <USBD_LL_Transmit>

  return USBD_OK;
}
 80037a4:	2000      	movs	r0, #0
 80037a6:	bd08      	pop	{r3, pc}

080037a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80037a8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80037aa:	2305      	movs	r3, #5
 80037ac:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80037b0:	2300      	movs	r3, #0
 80037b2:	461a      	mov	r2, r3
 80037b4:	4619      	mov	r1, r3
 80037b6:	f000 f9b7 	bl	8003b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80037ba:	2000      	movs	r0, #0
 80037bc:	bd08      	pop	{r3, pc}
	...

080037c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80037c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80037c2:	2200      	movs	r2, #0
 80037c4:	490e      	ldr	r1, [pc, #56]	; (8003800 <MX_USB_DEVICE_Init+0x40>)
 80037c6:	480f      	ldr	r0, [pc, #60]	; (8003804 <MX_USB_DEVICE_Init+0x44>)
 80037c8:	f7ff fc49 	bl	800305e <USBD_Init>
 80037cc:	b108      	cbz	r0, 80037d2 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80037ce:	f7fc fd59 	bl	8000284 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 80037d2:	490d      	ldr	r1, [pc, #52]	; (8003808 <MX_USB_DEVICE_Init+0x48>)
 80037d4:	480b      	ldr	r0, [pc, #44]	; (8003804 <MX_USB_DEVICE_Init+0x44>)
 80037d6:	f7ff fc57 	bl	8003088 <USBD_RegisterClass>
 80037da:	b108      	cbz	r0, 80037e0 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80037dc:	f7fc fd52 	bl	8000284 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 80037e0:	490a      	ldr	r1, [pc, #40]	; (800380c <MX_USB_DEVICE_Init+0x4c>)
 80037e2:	4808      	ldr	r0, [pc, #32]	; (8003804 <MX_USB_DEVICE_Init+0x44>)
 80037e4:	f7ff fc36 	bl	8003054 <USBD_DFU_RegisterMedia>
 80037e8:	b108      	cbz	r0, 80037ee <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80037ea:	f7fc fd4b 	bl	8000284 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80037ee:	4805      	ldr	r0, [pc, #20]	; (8003804 <MX_USB_DEVICE_Init+0x44>)
 80037f0:	f7ff fc51 	bl	8003096 <USBD_Start>
 80037f4:	b118      	cbz	r0, 80037fe <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80037f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80037fa:	f7fc bd43 	b.w	8000284 <Error_Handler>
}
 80037fe:	bd08      	pop	{r3, pc}
 8003800:	20000088 	.word	0x20000088
 8003804:	20000450 	.word	0x20000450
 8003808:	20000024 	.word	0x20000024
 800380c:	200000d8 	.word	0x200000d8

08003810 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003810:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003812:	4801      	ldr	r0, [pc, #4]	; (8003818 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003814:	800b      	strh	r3, [r1, #0]
}
 8003816:	4770      	bx	lr
 8003818:	200000a4 	.word	0x200000a4

0800381c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800381c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800381e:	4801      	ldr	r0, [pc, #4]	; (8003824 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003820:	800b      	strh	r3, [r1, #0]
}
 8003822:	4770      	bx	lr
 8003824:	200000b8 	.word	0x200000b8

08003828 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003828:	2300      	movs	r3, #0
 800382a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800382c:	461e      	mov	r6, r3
 800382e:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8003830:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8003832:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8003836:	bf34      	ite	cc
 8003838:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800383a:	3437      	addcs	r4, #55	; 0x37
 800383c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003840:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8003844:	3301      	adds	r3, #1
 8003846:	b2dc      	uxtb	r4, r3
 8003848:	42a2      	cmp	r2, r4
    value = value << 4;
 800384a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800384e:	d8ef      	bhi.n	8003830 <IntToUnicode+0x8>
  }
}
 8003850:	bd70      	pop	{r4, r5, r6, pc}
	...

08003854 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003854:	231a      	movs	r3, #26
{
 8003856:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003858:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <USBD_FS_SerialStrDescriptor+0x30>)
 800385c:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8003860:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8003864:	1880      	adds	r0, r0, r2
 8003866:	d00a      	beq.n	800387e <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003868:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800386c:	4906      	ldr	r1, [pc, #24]	; (8003888 <USBD_FS_SerialStrDescriptor+0x34>)
 800386e:	2208      	movs	r2, #8
 8003870:	f7ff ffda 	bl	8003828 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003874:	2204      	movs	r2, #4
 8003876:	4620      	mov	r0, r4
 8003878:	3110      	adds	r1, #16
 800387a:	f7ff ffd5 	bl	8003828 <IntToUnicode>
}
 800387e:	4803      	ldr	r0, [pc, #12]	; (800388c <USBD_FS_SerialStrDescriptor+0x38>)
 8003880:	bd10      	pop	{r4, pc}
 8003882:	bf00      	nop
 8003884:	1ffff000 	.word	0x1ffff000
 8003888:	200000be 	.word	0x200000be
 800388c:	200000bc 	.word	0x200000bc

08003890 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003890:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003892:	4c04      	ldr	r4, [pc, #16]	; (80038a4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8003894:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003896:	4804      	ldr	r0, [pc, #16]	; (80038a8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003898:	4621      	mov	r1, r4
 800389a:	f7ff ff34 	bl	8003706 <USBD_GetString>
}
 800389e:	4620      	mov	r0, r4
 80038a0:	bd10      	pop	{r4, pc}
 80038a2:	bf00      	nop
 80038a4:	20000714 	.word	0x20000714
 80038a8:	08003bf5 	.word	0x08003bf5

080038ac <USBD_FS_ProductStrDescriptor>:
{
 80038ac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80038ae:	4c04      	ldr	r4, [pc, #16]	; (80038c0 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80038b0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80038b2:	4804      	ldr	r0, [pc, #16]	; (80038c4 <USBD_FS_ProductStrDescriptor+0x18>)
 80038b4:	4621      	mov	r1, r4
 80038b6:	f7ff ff26 	bl	8003706 <USBD_GetString>
}
 80038ba:	4620      	mov	r0, r4
 80038bc:	bd10      	pop	{r4, pc}
 80038be:	bf00      	nop
 80038c0:	20000714 	.word	0x20000714
 80038c4:	08003c08 	.word	0x08003c08

080038c8 <USBD_FS_ConfigStrDescriptor>:
{
 80038c8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80038ca:	4c04      	ldr	r4, [pc, #16]	; (80038dc <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80038cc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80038ce:	4804      	ldr	r0, [pc, #16]	; (80038e0 <USBD_FS_ConfigStrDescriptor+0x18>)
 80038d0:	4621      	mov	r1, r4
 80038d2:	f7ff ff18 	bl	8003706 <USBD_GetString>
}
 80038d6:	4620      	mov	r0, r4
 80038d8:	bd10      	pop	{r4, pc}
 80038da:	bf00      	nop
 80038dc:	20000714 	.word	0x20000714
 80038e0:	08003c27 	.word	0x08003c27

080038e4 <USBD_FS_InterfaceStrDescriptor>:
{
 80038e4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80038e6:	4c04      	ldr	r4, [pc, #16]	; (80038f8 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80038e8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80038ea:	4804      	ldr	r0, [pc, #16]	; (80038fc <USBD_FS_InterfaceStrDescriptor+0x18>)
 80038ec:	4621      	mov	r1, r4
 80038ee:	f7ff ff0a 	bl	8003706 <USBD_GetString>
}
 80038f2:	4620      	mov	r0, r4
 80038f4:	bd10      	pop	{r4, pc}
 80038f6:	bf00      	nop
 80038f8:	20000714 	.word	0x20000714
 80038fc:	08003c32 	.word	0x08003c32

08003900 <MEM_If_Init_FS>:
uint16_t MEM_If_Init_FS(void)
{
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
  /* USER CODE END 0 */
}
 8003900:	2000      	movs	r0, #0
 8003902:	4770      	bx	lr

08003904 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8003904:	b510      	push	{r4, lr}
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */

  for (int i=0; i<Len; i++)
 8003906:	2300      	movs	r3, #0
{
 8003908:	4604      	mov	r4, r0
 800390a:	4608      	mov	r0, r1
  for (int i=0; i<Len; i++)
 800390c:	4293      	cmp	r3, r2
 800390e:	d100      	bne.n	8003912 <MEM_If_Read_FS+0xe>
    dest[i] = src[i];
  }

  return (uint8_t*)(dest);
  /* USER CODE END 4 */
}
 8003910:	bd10      	pop	{r4, pc}
    dest[i] = src[i];
 8003912:	5ce1      	ldrb	r1, [r4, r3]
 8003914:	54c1      	strb	r1, [r0, r3]
  for (int i=0; i<Len; i++)
 8003916:	3301      	adds	r3, #1
 8003918:	e7f8      	b.n	800390c <MEM_If_Read_FS+0x8>

0800391a <MEM_If_GetStatus_FS>:
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800391a:	2901      	cmp	r1, #1
 800391c:	d804      	bhi.n	8003928 <MEM_If_GetStatus_FS+0xe>
  {
    case DFU_MEDIA_PROGRAM:
      buffer[1] = (50 >> 0);
 800391e:	2332      	movs	r3, #50	; 0x32
 8003920:	7053      	strb	r3, [r2, #1]
      buffer[2] = (50 >> 8);
 8003922:	2300      	movs	r3, #0
 8003924:	7093      	strb	r3, [r2, #2]
      buffer[3] = 0;
 8003926:	70d3      	strb	r3, [r2, #3]

    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003928:	2000      	movs	r0, #0
 800392a:	4770      	bx	lr

0800392c <MEM_If_Write_FS>:
{
 800392c:	b508      	push	{r3, lr}
 800392e:	460b      	mov	r3, r1
  if (flashWrite((uint32_t)dest, src, Len) != true)
 8003930:	4601      	mov	r1, r0
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc fd64 	bl	8000400 <flashWrite>
 8003938:	f080 0001 	eor.w	r0, r0, #1
}
 800393c:	b2c0      	uxtb	r0, r0
 800393e:	bd08      	pop	{r3, pc}

08003940 <MEM_If_Erase_FS>:
  if (flashErase(Add, 1024) != true)
 8003940:	f44f 6180 	mov.w	r1, #1024	; 0x400
{
 8003944:	b508      	push	{r3, lr}
  if (flashErase(Add, 1024) != true)
 8003946:	f7fc fd0d 	bl	8000364 <flashErase>
 800394a:	f080 0001 	eor.w	r0, r0, #1
}
 800394e:	b2c0      	uxtb	r0, r0
 8003950:	bd08      	pop	{r3, pc}

08003952 <MEM_If_DeInit_FS>:
 8003952:	2000      	movs	r0, #0
 8003954:	4770      	bx	lr
	...

08003958 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003958:	2803      	cmp	r0, #3
 800395a:	bf9a      	itte	ls
 800395c:	4b01      	ldrls	r3, [pc, #4]	; (8003964 <USBD_Get_USB_Status+0xc>)
 800395e:	5c18      	ldrbls	r0, [r3, r0]
{
 8003960:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003962:	4770      	bx	lr
 8003964:	08003c6e 	.word	0x08003c6e

08003968 <HAL_PCD_MspInit>:
{
 8003968:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <HAL_PCD_MspInit+0x3c>)
 800396c:	6802      	ldr	r2, [r0, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d115      	bne.n	800399e <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8003972:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003976:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003978:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800397a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800397e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003980:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003982:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003984:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800398e:	f7fc fee9 	bl	8000764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003992:	2014      	movs	r0, #20
}
 8003994:	b003      	add	sp, #12
 8003996:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800399a:	f7fc bf15 	b.w	80007c8 <HAL_NVIC_EnableIRQ>
}
 800399e:	b003      	add	sp, #12
 80039a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80039a4:	40005c00 	.word	0x40005c00

080039a8 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80039a8:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80039ac:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80039b0:	f7ff bb94 	b.w	80030dc <USBD_LL_SetupStage>

080039b4 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80039b4:	2328      	movs	r3, #40	; 0x28
 80039b6:	fb03 0301 	mla	r3, r3, r1, r0
 80039ba:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80039be:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80039c2:	f7ff bbb8 	b.w	8003136 <USBD_LL_DataOutStage>

080039c6 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80039c6:	2328      	movs	r3, #40	; 0x28
 80039c8:	fb03 0301 	mla	r3, r3, r1, r0
 80039cc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80039d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d2:	f7ff bbea 	b.w	80031aa <USBD_LL_DataInStage>

080039d6 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80039d6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80039da:	f7ff bc7e 	b.w	80032da <USBD_LL_SOF>

080039de <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80039de:	6883      	ldr	r3, [r0, #8]
{
 80039e0:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80039e2:	2b02      	cmp	r3, #2
{
 80039e4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80039e6:	d001      	beq.n	80039ec <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80039e8:	f7fc fc4c 	bl	8000284 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80039ec:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80039f0:	2101      	movs	r1, #1
 80039f2:	f7ff fc5c 	bl	80032ae <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80039f6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 80039fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80039fe:	f7ff bc2f 	b.w	8003260 <USBD_LL_Reset>
	...

08003a04 <HAL_PCD_SuspendCallback>:
{
 8003a04:	b510      	push	{r4, lr}
 8003a06:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003a08:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003a0c:	f7ff fc52 	bl	80032b4 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8003a10:	69a3      	ldr	r3, [r4, #24]
 8003a12:	b123      	cbz	r3, 8003a1e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003a14:	4a02      	ldr	r2, [pc, #8]	; (8003a20 <HAL_PCD_SuspendCallback+0x1c>)
 8003a16:	6913      	ldr	r3, [r2, #16]
 8003a18:	f043 0306 	orr.w	r3, r3, #6
 8003a1c:	6113      	str	r3, [r2, #16]
}
 8003a1e:	bd10      	pop	{r4, pc}
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003a24:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003a28:	f7ff bc4d 	b.w	80032c6 <USBD_LL_Resume>

08003a2c <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003a2c:	2308      	movs	r3, #8
{
 8003a2e:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003a30:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <USBD_LL_Init+0x4c>)
{
 8003a32:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003a34:	4811      	ldr	r0, [pc, #68]	; (8003a7c <USBD_LL_Init+0x50>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003a36:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003a3e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003a40:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8003a44:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003a48:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003a4c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003a4e:	f7fd f8e9 	bl	8000c24 <HAL_PCD_Init>
 8003a52:	b108      	cbz	r0, 8003a58 <USBD_LL_Init+0x2c>
    Error_Handler( );
 8003a54:	f7fc fc16 	bl	8000284 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2318      	movs	r3, #24
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003a62:	f7fd ff1a 	bl	800189a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003a66:	2358      	movs	r3, #88	; 0x58
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003a70:	f7fd ff13 	bl	800189a <HAL_PCDEx_PMAConfig>
}
 8003a74:	2000      	movs	r0, #0
 8003a76:	bd10      	pop	{r4, pc}
 8003a78:	40005c00 	.word	0x40005c00
 8003a7c:	20000914 	.word	0x20000914

08003a80 <USBD_LL_Start>:
{
 8003a80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003a82:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003a86:	f7fd f946 	bl	8000d16 <HAL_PCD_Start>
}
 8003a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a8e:	f7ff bf63 	b.w	8003958 <USBD_Get_USB_Status>

08003a92 <USBD_LL_Stop>:
{
 8003a92:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8003a94:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003a98:	f7fd f956 	bl	8000d48 <HAL_PCD_Stop>
}
 8003a9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003aa0:	f7ff bf5a 	b.w	8003958 <USBD_Get_USB_Status>

08003aa4 <USBD_LL_OpenEP>:
{
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003aa8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8003aac:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003aae:	4623      	mov	r3, r4
 8003ab0:	f7fd fe2c 	bl	800170c <HAL_PCD_EP_Open>
}
 8003ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003ab8:	f7ff bf4e 	b.w	8003958 <USBD_Get_USB_Status>

08003abc <USBD_LL_StallEP>:
{
 8003abc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003abe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003ac2:	f7fd fe85 	bl	80017d0 <HAL_PCD_EP_SetStall>
}
 8003ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003aca:	f7ff bf45 	b.w	8003958 <USBD_Get_USB_Status>

08003ace <USBD_LL_ClearStallEP>:
{
 8003ace:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003ad0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003ad4:	f7fd feb0 	bl	8001838 <HAL_PCD_EP_ClrStall>
}
 8003ad8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003adc:	f7ff bf3c 	b.w	8003958 <USBD_Get_USB_Status>

08003ae0 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003ae0:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 8003ae2:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003ae6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003aea:	bf1b      	ittet	ne
 8003aec:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003af0:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003af4:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003af8:	185b      	addne	r3, r3, r1
 8003afa:	bf14      	ite	ne
 8003afc:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003afe:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8003b02:	4770      	bx	lr

08003b04 <USBD_LL_SetUSBAddress>:
{
 8003b04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003b06:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003b0a:	f7fd f936 	bl	8000d7a <HAL_PCD_SetAddress>
}
 8003b0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003b12:	f7ff bf21 	b.w	8003958 <USBD_Get_USB_Status>

08003b16 <USBD_LL_Transmit>:
{
 8003b16:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003b18:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003b1c:	f7fd fe3e 	bl	800179c <HAL_PCD_EP_Transmit>
}
 8003b20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003b24:	f7ff bf18 	b.w	8003958 <USBD_Get_USB_Status>

08003b28 <USBD_LL_PrepareReceive>:
{
 8003b28:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003b2a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003b2e:	f7fd fe1e 	bl	800176e <HAL_PCD_EP_Receive>
}
 8003b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003b36:	f7ff bf0f 	b.w	8003958 <USBD_Get_USB_Status>
	...

08003b3c <USBD_static_malloc>:
}
 8003b3c:	4800      	ldr	r0, [pc, #0]	; (8003b40 <USBD_static_malloc+0x4>)
 8003b3e:	4770      	bx	lr
 8003b40:	20000c00 	.word	0x20000c00

08003b44 <USBD_static_free>:
}
 8003b44:	4770      	bx	lr

08003b46 <HAL_PCDEx_SetConnectionState>:
}
 8003b46:	4770      	bx	lr

08003b48 <main>:




int main(void)
{
 8003b48:	b508      	push	{r3, lr}
  hwInit();
 8003b4a:	f7fc fd7f 	bl	800064c <hwInit>
  apInit();
 8003b4e:	f7fc fafd 	bl	800014c <apInit>

  apMain();
 8003b52:	f7fc fafc 	bl	800014e <apMain>
  /*test*/

  return 0;
}
 8003b56:	2000      	movs	r0, #0
 8003b58:	bd08      	pop	{r3, pc}
	...

08003b5c <__libc_init_array>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	2600      	movs	r6, #0
 8003b60:	4d0c      	ldr	r5, [pc, #48]	; (8003b94 <__libc_init_array+0x38>)
 8003b62:	4c0d      	ldr	r4, [pc, #52]	; (8003b98 <__libc_init_array+0x3c>)
 8003b64:	1b64      	subs	r4, r4, r5
 8003b66:	10a4      	asrs	r4, r4, #2
 8003b68:	42a6      	cmp	r6, r4
 8003b6a:	d109      	bne.n	8003b80 <__libc_init_array+0x24>
 8003b6c:	f000 f822 	bl	8003bb4 <_init>
 8003b70:	2600      	movs	r6, #0
 8003b72:	4d0a      	ldr	r5, [pc, #40]	; (8003b9c <__libc_init_array+0x40>)
 8003b74:	4c0a      	ldr	r4, [pc, #40]	; (8003ba0 <__libc_init_array+0x44>)
 8003b76:	1b64      	subs	r4, r4, r5
 8003b78:	10a4      	asrs	r4, r4, #2
 8003b7a:	42a6      	cmp	r6, r4
 8003b7c:	d105      	bne.n	8003b8a <__libc_init_array+0x2e>
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b84:	4798      	blx	r3
 8003b86:	3601      	adds	r6, #1
 8003b88:	e7ee      	b.n	8003b68 <__libc_init_array+0xc>
 8003b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8e:	4798      	blx	r3
 8003b90:	3601      	adds	r6, #1
 8003b92:	e7f2      	b.n	8003b7a <__libc_init_array+0x1e>
 8003b94:	08003c74 	.word	0x08003c74
 8003b98:	08003c74 	.word	0x08003c74
 8003b9c:	08003c74 	.word	0x08003c74
 8003ba0:	08003c78 	.word	0x08003c78

08003ba4 <memset>:
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4402      	add	r2, r0
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d100      	bne.n	8003bae <memset+0xa>
 8003bac:	4770      	bx	lr
 8003bae:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb2:	e7f9      	b.n	8003ba8 <memset+0x4>

08003bb4 <_init>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	bf00      	nop
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr

08003bc0 <_fini>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	bf00      	nop
 8003bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc6:	bc08      	pop	{r3}
 8003bc8:	469e      	mov	lr, r3
 8003bca:	4770      	bx	lr
