
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf0  08005110  08005110  00005110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800de00  0800de00  0000de00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3f4  0800e3f4  00010374  2**0
                  CONTENTS
  4 .ARM          00000000  0800e3f4  0800e3f4  00010374  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e3f4  0800e3f4  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3f4  0800e3f4  0000e3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3f8  0800e3f8  0000e3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000374  20000000  0800e3fc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001778  20000374  0800e770  00010374  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aec  0800e770  00011aec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010374  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b9c  00000000  00000000  0001039d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005893  00000000  00000000  00028f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c9db  00000000  00000000  0002e7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  0003b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001be0  00000000  00000000  0003c268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e76f  00000000  00000000  0003de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022af9  00000000  00000000  0005c5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bb51  00000000  00000000  0007f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ac01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f38  00000000  00000000  0010ac54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005110 <__do_global_dtors_aux>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4c05      	ldr	r4, [pc, #20]	; (8005128 <__do_global_dtors_aux+0x18>)
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	b933      	cbnz	r3, 8005126 <__do_global_dtors_aux+0x16>
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <__do_global_dtors_aux+0x1c>)
 800511a:	b113      	cbz	r3, 8005122 <__do_global_dtors_aux+0x12>
 800511c:	4804      	ldr	r0, [pc, #16]	; (8005130 <__do_global_dtors_aux+0x20>)
 800511e:	f3af 8000 	nop.w
 8005122:	2301      	movs	r3, #1
 8005124:	7023      	strb	r3, [r4, #0]
 8005126:	bd10      	pop	{r4, pc}
 8005128:	20000374 	.word	0x20000374
 800512c:	00000000 	.word	0x00000000
 8005130:	0800dde8 	.word	0x0800dde8

08005134 <frame_dummy>:
 8005134:	b508      	push	{r3, lr}
 8005136:	4b03      	ldr	r3, [pc, #12]	; (8005144 <frame_dummy+0x10>)
 8005138:	b11b      	cbz	r3, 8005142 <frame_dummy+0xe>
 800513a:	4903      	ldr	r1, [pc, #12]	; (8005148 <frame_dummy+0x14>)
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <frame_dummy+0x18>)
 800513e:	f3af 8000 	nop.w
 8005142:	bd08      	pop	{r3, pc}
 8005144:	00000000 	.word	0x00000000
 8005148:	20000378 	.word	0x20000378
 800514c:	0800dde8 	.word	0x0800dde8

08005150 <strcmp>:
 8005150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005158:	2a01      	cmp	r2, #1
 800515a:	bf28      	it	cs
 800515c:	429a      	cmpcs	r2, r3
 800515e:	d0f7      	beq.n	8005150 <strcmp>
 8005160:	1ad0      	subs	r0, r2, r3
 8005162:	4770      	bx	lr

08005164 <strlen>:
 8005164:	4603      	mov	r3, r0
 8005166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800516a:	2a00      	cmp	r2, #0
 800516c:	d1fb      	bne.n	8005166 <strlen+0x2>
 800516e:	1a18      	subs	r0, r3, r0
 8005170:	3801      	subs	r0, #1
 8005172:	4770      	bx	lr

08005174 <__aeabi_drsub>:
 8005174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005178:	e002      	b.n	8005180 <__adddf3>
 800517a:	bf00      	nop

0800517c <__aeabi_dsub>:
 800517c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005180 <__adddf3>:
 8005180:	b530      	push	{r4, r5, lr}
 8005182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800518a:	ea94 0f05 	teq	r4, r5
 800518e:	bf08      	it	eq
 8005190:	ea90 0f02 	teqeq	r0, r2
 8005194:	bf1f      	itttt	ne
 8005196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800519a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800519e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80051a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80051a6:	f000 80e2 	beq.w	800536e <__adddf3+0x1ee>
 80051aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80051ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80051b2:	bfb8      	it	lt
 80051b4:	426d      	neglt	r5, r5
 80051b6:	dd0c      	ble.n	80051d2 <__adddf3+0x52>
 80051b8:	442c      	add	r4, r5
 80051ba:	ea80 0202 	eor.w	r2, r0, r2
 80051be:	ea81 0303 	eor.w	r3, r1, r3
 80051c2:	ea82 0000 	eor.w	r0, r2, r0
 80051c6:	ea83 0101 	eor.w	r1, r3, r1
 80051ca:	ea80 0202 	eor.w	r2, r0, r2
 80051ce:	ea81 0303 	eor.w	r3, r1, r3
 80051d2:	2d36      	cmp	r5, #54	; 0x36
 80051d4:	bf88      	it	hi
 80051d6:	bd30      	pophi	{r4, r5, pc}
 80051d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80051dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80051e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80051e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80051e8:	d002      	beq.n	80051f0 <__adddf3+0x70>
 80051ea:	4240      	negs	r0, r0
 80051ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80051f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80051f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80051f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80051fc:	d002      	beq.n	8005204 <__adddf3+0x84>
 80051fe:	4252      	negs	r2, r2
 8005200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005204:	ea94 0f05 	teq	r4, r5
 8005208:	f000 80a7 	beq.w	800535a <__adddf3+0x1da>
 800520c:	f1a4 0401 	sub.w	r4, r4, #1
 8005210:	f1d5 0e20 	rsbs	lr, r5, #32
 8005214:	db0d      	blt.n	8005232 <__adddf3+0xb2>
 8005216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800521a:	fa22 f205 	lsr.w	r2, r2, r5
 800521e:	1880      	adds	r0, r0, r2
 8005220:	f141 0100 	adc.w	r1, r1, #0
 8005224:	fa03 f20e 	lsl.w	r2, r3, lr
 8005228:	1880      	adds	r0, r0, r2
 800522a:	fa43 f305 	asr.w	r3, r3, r5
 800522e:	4159      	adcs	r1, r3
 8005230:	e00e      	b.n	8005250 <__adddf3+0xd0>
 8005232:	f1a5 0520 	sub.w	r5, r5, #32
 8005236:	f10e 0e20 	add.w	lr, lr, #32
 800523a:	2a01      	cmp	r2, #1
 800523c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005240:	bf28      	it	cs
 8005242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005246:	fa43 f305 	asr.w	r3, r3, r5
 800524a:	18c0      	adds	r0, r0, r3
 800524c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005254:	d507      	bpl.n	8005266 <__adddf3+0xe6>
 8005256:	f04f 0e00 	mov.w	lr, #0
 800525a:	f1dc 0c00 	rsbs	ip, ip, #0
 800525e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005262:	eb6e 0101 	sbc.w	r1, lr, r1
 8005266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800526a:	d31b      	bcc.n	80052a4 <__adddf3+0x124>
 800526c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005270:	d30c      	bcc.n	800528c <__adddf3+0x10c>
 8005272:	0849      	lsrs	r1, r1, #1
 8005274:	ea5f 0030 	movs.w	r0, r0, rrx
 8005278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800527c:	f104 0401 	add.w	r4, r4, #1
 8005280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005288:	f080 809a 	bcs.w	80053c0 <__adddf3+0x240>
 800528c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005290:	bf08      	it	eq
 8005292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005296:	f150 0000 	adcs.w	r0, r0, #0
 800529a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800529e:	ea41 0105 	orr.w	r1, r1, r5
 80052a2:	bd30      	pop	{r4, r5, pc}
 80052a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80052a8:	4140      	adcs	r0, r0
 80052aa:	eb41 0101 	adc.w	r1, r1, r1
 80052ae:	3c01      	subs	r4, #1
 80052b0:	bf28      	it	cs
 80052b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80052b6:	d2e9      	bcs.n	800528c <__adddf3+0x10c>
 80052b8:	f091 0f00 	teq	r1, #0
 80052bc:	bf04      	itt	eq
 80052be:	4601      	moveq	r1, r0
 80052c0:	2000      	moveq	r0, #0
 80052c2:	fab1 f381 	clz	r3, r1
 80052c6:	bf08      	it	eq
 80052c8:	3320      	addeq	r3, #32
 80052ca:	f1a3 030b 	sub.w	r3, r3, #11
 80052ce:	f1b3 0220 	subs.w	r2, r3, #32
 80052d2:	da0c      	bge.n	80052ee <__adddf3+0x16e>
 80052d4:	320c      	adds	r2, #12
 80052d6:	dd08      	ble.n	80052ea <__adddf3+0x16a>
 80052d8:	f102 0c14 	add.w	ip, r2, #20
 80052dc:	f1c2 020c 	rsb	r2, r2, #12
 80052e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80052e4:	fa21 f102 	lsr.w	r1, r1, r2
 80052e8:	e00c      	b.n	8005304 <__adddf3+0x184>
 80052ea:	f102 0214 	add.w	r2, r2, #20
 80052ee:	bfd8      	it	le
 80052f0:	f1c2 0c20 	rsble	ip, r2, #32
 80052f4:	fa01 f102 	lsl.w	r1, r1, r2
 80052f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80052fc:	bfdc      	itt	le
 80052fe:	ea41 010c 	orrle.w	r1, r1, ip
 8005302:	4090      	lslle	r0, r2
 8005304:	1ae4      	subs	r4, r4, r3
 8005306:	bfa2      	ittt	ge
 8005308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800530c:	4329      	orrge	r1, r5
 800530e:	bd30      	popge	{r4, r5, pc}
 8005310:	ea6f 0404 	mvn.w	r4, r4
 8005314:	3c1f      	subs	r4, #31
 8005316:	da1c      	bge.n	8005352 <__adddf3+0x1d2>
 8005318:	340c      	adds	r4, #12
 800531a:	dc0e      	bgt.n	800533a <__adddf3+0x1ba>
 800531c:	f104 0414 	add.w	r4, r4, #20
 8005320:	f1c4 0220 	rsb	r2, r4, #32
 8005324:	fa20 f004 	lsr.w	r0, r0, r4
 8005328:	fa01 f302 	lsl.w	r3, r1, r2
 800532c:	ea40 0003 	orr.w	r0, r0, r3
 8005330:	fa21 f304 	lsr.w	r3, r1, r4
 8005334:	ea45 0103 	orr.w	r1, r5, r3
 8005338:	bd30      	pop	{r4, r5, pc}
 800533a:	f1c4 040c 	rsb	r4, r4, #12
 800533e:	f1c4 0220 	rsb	r2, r4, #32
 8005342:	fa20 f002 	lsr.w	r0, r0, r2
 8005346:	fa01 f304 	lsl.w	r3, r1, r4
 800534a:	ea40 0003 	orr.w	r0, r0, r3
 800534e:	4629      	mov	r1, r5
 8005350:	bd30      	pop	{r4, r5, pc}
 8005352:	fa21 f004 	lsr.w	r0, r1, r4
 8005356:	4629      	mov	r1, r5
 8005358:	bd30      	pop	{r4, r5, pc}
 800535a:	f094 0f00 	teq	r4, #0
 800535e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005362:	bf06      	itte	eq
 8005364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005368:	3401      	addeq	r4, #1
 800536a:	3d01      	subne	r5, #1
 800536c:	e74e      	b.n	800520c <__adddf3+0x8c>
 800536e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005372:	bf18      	it	ne
 8005374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005378:	d029      	beq.n	80053ce <__adddf3+0x24e>
 800537a:	ea94 0f05 	teq	r4, r5
 800537e:	bf08      	it	eq
 8005380:	ea90 0f02 	teqeq	r0, r2
 8005384:	d005      	beq.n	8005392 <__adddf3+0x212>
 8005386:	ea54 0c00 	orrs.w	ip, r4, r0
 800538a:	bf04      	itt	eq
 800538c:	4619      	moveq	r1, r3
 800538e:	4610      	moveq	r0, r2
 8005390:	bd30      	pop	{r4, r5, pc}
 8005392:	ea91 0f03 	teq	r1, r3
 8005396:	bf1e      	ittt	ne
 8005398:	2100      	movne	r1, #0
 800539a:	2000      	movne	r0, #0
 800539c:	bd30      	popne	{r4, r5, pc}
 800539e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80053a2:	d105      	bne.n	80053b0 <__adddf3+0x230>
 80053a4:	0040      	lsls	r0, r0, #1
 80053a6:	4149      	adcs	r1, r1
 80053a8:	bf28      	it	cs
 80053aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80053ae:	bd30      	pop	{r4, r5, pc}
 80053b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80053b4:	bf3c      	itt	cc
 80053b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80053ba:	bd30      	popcc	{r4, r5, pc}
 80053bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80053c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80053c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053c8:	f04f 0000 	mov.w	r0, #0
 80053cc:	bd30      	pop	{r4, r5, pc}
 80053ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80053d2:	bf1a      	itte	ne
 80053d4:	4619      	movne	r1, r3
 80053d6:	4610      	movne	r0, r2
 80053d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80053dc:	bf1c      	itt	ne
 80053de:	460b      	movne	r3, r1
 80053e0:	4602      	movne	r2, r0
 80053e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80053e6:	bf06      	itte	eq
 80053e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80053ec:	ea91 0f03 	teqeq	r1, r3
 80053f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80053f4:	bd30      	pop	{r4, r5, pc}
 80053f6:	bf00      	nop

080053f8 <__aeabi_ui2d>:
 80053f8:	f090 0f00 	teq	r0, #0
 80053fc:	bf04      	itt	eq
 80053fe:	2100      	moveq	r1, #0
 8005400:	4770      	bxeq	lr
 8005402:	b530      	push	{r4, r5, lr}
 8005404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800540c:	f04f 0500 	mov.w	r5, #0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	e750      	b.n	80052b8 <__adddf3+0x138>
 8005416:	bf00      	nop

08005418 <__aeabi_i2d>:
 8005418:	f090 0f00 	teq	r0, #0
 800541c:	bf04      	itt	eq
 800541e:	2100      	moveq	r1, #0
 8005420:	4770      	bxeq	lr
 8005422:	b530      	push	{r4, r5, lr}
 8005424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800542c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005430:	bf48      	it	mi
 8005432:	4240      	negmi	r0, r0
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	e73e      	b.n	80052b8 <__adddf3+0x138>
 800543a:	bf00      	nop

0800543c <__aeabi_f2d>:
 800543c:	0042      	lsls	r2, r0, #1
 800543e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005442:	ea4f 0131 	mov.w	r1, r1, rrx
 8005446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800544a:	bf1f      	itttt	ne
 800544c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005458:	4770      	bxne	lr
 800545a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800545e:	bf08      	it	eq
 8005460:	4770      	bxeq	lr
 8005462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005466:	bf04      	itt	eq
 8005468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800546c:	4770      	bxeq	lr
 800546e:	b530      	push	{r4, r5, lr}
 8005470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800547c:	e71c      	b.n	80052b8 <__adddf3+0x138>
 800547e:	bf00      	nop

08005480 <__aeabi_ul2d>:
 8005480:	ea50 0201 	orrs.w	r2, r0, r1
 8005484:	bf08      	it	eq
 8005486:	4770      	bxeq	lr
 8005488:	b530      	push	{r4, r5, lr}
 800548a:	f04f 0500 	mov.w	r5, #0
 800548e:	e00a      	b.n	80054a6 <__aeabi_l2d+0x16>

08005490 <__aeabi_l2d>:
 8005490:	ea50 0201 	orrs.w	r2, r0, r1
 8005494:	bf08      	it	eq
 8005496:	4770      	bxeq	lr
 8005498:	b530      	push	{r4, r5, lr}
 800549a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800549e:	d502      	bpl.n	80054a6 <__aeabi_l2d+0x16>
 80054a0:	4240      	negs	r0, r0
 80054a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80054a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80054aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80054ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80054b2:	f43f aed8 	beq.w	8005266 <__adddf3+0xe6>
 80054b6:	f04f 0203 	mov.w	r2, #3
 80054ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054be:	bf18      	it	ne
 80054c0:	3203      	addne	r2, #3
 80054c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054c6:	bf18      	it	ne
 80054c8:	3203      	addne	r2, #3
 80054ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80054ce:	f1c2 0320 	rsb	r3, r2, #32
 80054d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80054d6:	fa20 f002 	lsr.w	r0, r0, r2
 80054da:	fa01 fe03 	lsl.w	lr, r1, r3
 80054de:	ea40 000e 	orr.w	r0, r0, lr
 80054e2:	fa21 f102 	lsr.w	r1, r1, r2
 80054e6:	4414      	add	r4, r2
 80054e8:	e6bd      	b.n	8005266 <__adddf3+0xe6>
 80054ea:	bf00      	nop

080054ec <__aeabi_dmul>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80054f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80054f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80054fa:	bf1d      	ittte	ne
 80054fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005500:	ea94 0f0c 	teqne	r4, ip
 8005504:	ea95 0f0c 	teqne	r5, ip
 8005508:	f000 f8de 	bleq	80056c8 <__aeabi_dmul+0x1dc>
 800550c:	442c      	add	r4, r5
 800550e:	ea81 0603 	eor.w	r6, r1, r3
 8005512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800551a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800551e:	bf18      	it	ne
 8005520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800552c:	d038      	beq.n	80055a0 <__aeabi_dmul+0xb4>
 800552e:	fba0 ce02 	umull	ip, lr, r0, r2
 8005532:	f04f 0500 	mov.w	r5, #0
 8005536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800553a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800553e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005542:	f04f 0600 	mov.w	r6, #0
 8005546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800554a:	f09c 0f00 	teq	ip, #0
 800554e:	bf18      	it	ne
 8005550:	f04e 0e01 	orrne.w	lr, lr, #1
 8005554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800555c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005560:	d204      	bcs.n	800556c <__aeabi_dmul+0x80>
 8005562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005566:	416d      	adcs	r5, r5
 8005568:	eb46 0606 	adc.w	r6, r6, r6
 800556c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800557c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005584:	bf88      	it	hi
 8005586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800558a:	d81e      	bhi.n	80055ca <__aeabi_dmul+0xde>
 800558c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005590:	bf08      	it	eq
 8005592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005596:	f150 0000 	adcs.w	r0, r0, #0
 800559a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80055a4:	ea46 0101 	orr.w	r1, r6, r1
 80055a8:	ea40 0002 	orr.w	r0, r0, r2
 80055ac:	ea81 0103 	eor.w	r1, r1, r3
 80055b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80055b4:	bfc2      	ittt	gt
 80055b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80055ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80055be:	bd70      	popgt	{r4, r5, r6, pc}
 80055c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80055c4:	f04f 0e00 	mov.w	lr, #0
 80055c8:	3c01      	subs	r4, #1
 80055ca:	f300 80ab 	bgt.w	8005724 <__aeabi_dmul+0x238>
 80055ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80055d2:	bfde      	ittt	le
 80055d4:	2000      	movle	r0, #0
 80055d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80055da:	bd70      	pople	{r4, r5, r6, pc}
 80055dc:	f1c4 0400 	rsb	r4, r4, #0
 80055e0:	3c20      	subs	r4, #32
 80055e2:	da35      	bge.n	8005650 <__aeabi_dmul+0x164>
 80055e4:	340c      	adds	r4, #12
 80055e6:	dc1b      	bgt.n	8005620 <__aeabi_dmul+0x134>
 80055e8:	f104 0414 	add.w	r4, r4, #20
 80055ec:	f1c4 0520 	rsb	r5, r4, #32
 80055f0:	fa00 f305 	lsl.w	r3, r0, r5
 80055f4:	fa20 f004 	lsr.w	r0, r0, r4
 80055f8:	fa01 f205 	lsl.w	r2, r1, r5
 80055fc:	ea40 0002 	orr.w	r0, r0, r2
 8005600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800560c:	fa21 f604 	lsr.w	r6, r1, r4
 8005610:	eb42 0106 	adc.w	r1, r2, r6
 8005614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005618:	bf08      	it	eq
 800561a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f1c4 040c 	rsb	r4, r4, #12
 8005624:	f1c4 0520 	rsb	r5, r4, #32
 8005628:	fa00 f304 	lsl.w	r3, r0, r4
 800562c:	fa20 f005 	lsr.w	r0, r0, r5
 8005630:	fa01 f204 	lsl.w	r2, r1, r4
 8005634:	ea40 0002 	orr.w	r0, r0, r2
 8005638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800563c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005640:	f141 0100 	adc.w	r1, r1, #0
 8005644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005648:	bf08      	it	eq
 800564a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f1c4 0520 	rsb	r5, r4, #32
 8005654:	fa00 f205 	lsl.w	r2, r0, r5
 8005658:	ea4e 0e02 	orr.w	lr, lr, r2
 800565c:	fa20 f304 	lsr.w	r3, r0, r4
 8005660:	fa01 f205 	lsl.w	r2, r1, r5
 8005664:	ea43 0302 	orr.w	r3, r3, r2
 8005668:	fa21 f004 	lsr.w	r0, r1, r4
 800566c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005670:	fa21 f204 	lsr.w	r2, r1, r4
 8005674:	ea20 0002 	bic.w	r0, r0, r2
 8005678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800567c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005680:	bf08      	it	eq
 8005682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	f094 0f00 	teq	r4, #0
 800568c:	d10f      	bne.n	80056ae <__aeabi_dmul+0x1c2>
 800568e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005692:	0040      	lsls	r0, r0, #1
 8005694:	eb41 0101 	adc.w	r1, r1, r1
 8005698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800569c:	bf08      	it	eq
 800569e:	3c01      	subeq	r4, #1
 80056a0:	d0f7      	beq.n	8005692 <__aeabi_dmul+0x1a6>
 80056a2:	ea41 0106 	orr.w	r1, r1, r6
 80056a6:	f095 0f00 	teq	r5, #0
 80056aa:	bf18      	it	ne
 80056ac:	4770      	bxne	lr
 80056ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80056b2:	0052      	lsls	r2, r2, #1
 80056b4:	eb43 0303 	adc.w	r3, r3, r3
 80056b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80056bc:	bf08      	it	eq
 80056be:	3d01      	subeq	r5, #1
 80056c0:	d0f7      	beq.n	80056b2 <__aeabi_dmul+0x1c6>
 80056c2:	ea43 0306 	orr.w	r3, r3, r6
 80056c6:	4770      	bx	lr
 80056c8:	ea94 0f0c 	teq	r4, ip
 80056cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80056d0:	bf18      	it	ne
 80056d2:	ea95 0f0c 	teqne	r5, ip
 80056d6:	d00c      	beq.n	80056f2 <__aeabi_dmul+0x206>
 80056d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056dc:	bf18      	it	ne
 80056de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056e2:	d1d1      	bne.n	8005688 <__aeabi_dmul+0x19c>
 80056e4:	ea81 0103 	eor.w	r1, r1, r3
 80056e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80056ec:	f04f 0000 	mov.w	r0, #0
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
 80056f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056f6:	bf06      	itte	eq
 80056f8:	4610      	moveq	r0, r2
 80056fa:	4619      	moveq	r1, r3
 80056fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005700:	d019      	beq.n	8005736 <__aeabi_dmul+0x24a>
 8005702:	ea94 0f0c 	teq	r4, ip
 8005706:	d102      	bne.n	800570e <__aeabi_dmul+0x222>
 8005708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800570c:	d113      	bne.n	8005736 <__aeabi_dmul+0x24a>
 800570e:	ea95 0f0c 	teq	r5, ip
 8005712:	d105      	bne.n	8005720 <__aeabi_dmul+0x234>
 8005714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005718:	bf1c      	itt	ne
 800571a:	4610      	movne	r0, r2
 800571c:	4619      	movne	r1, r3
 800571e:	d10a      	bne.n	8005736 <__aeabi_dmul+0x24a>
 8005720:	ea81 0103 	eor.w	r1, r1, r3
 8005724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800572c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005730:	f04f 0000 	mov.w	r0, #0
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800573a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800573e:	bd70      	pop	{r4, r5, r6, pc}

08005740 <__aeabi_ddiv>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800574a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800574e:	bf1d      	ittte	ne
 8005750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005754:	ea94 0f0c 	teqne	r4, ip
 8005758:	ea95 0f0c 	teqne	r5, ip
 800575c:	f000 f8a7 	bleq	80058ae <__aeabi_ddiv+0x16e>
 8005760:	eba4 0405 	sub.w	r4, r4, r5
 8005764:	ea81 0e03 	eor.w	lr, r1, r3
 8005768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800576c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005770:	f000 8088 	beq.w	8005884 <__aeabi_ddiv+0x144>
 8005774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800577c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800578c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005798:	429d      	cmp	r5, r3
 800579a:	bf08      	it	eq
 800579c:	4296      	cmpeq	r6, r2
 800579e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80057a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80057a6:	d202      	bcs.n	80057ae <__aeabi_ddiv+0x6e>
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ae:	1ab6      	subs	r6, r6, r2
 80057b0:	eb65 0503 	sbc.w	r5, r5, r3
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80057be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80057c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80057c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057ca:	bf22      	ittt	cs
 80057cc:	1ab6      	subcs	r6, r6, r2
 80057ce:	4675      	movcs	r5, lr
 80057d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80057da:	ebb6 0e02 	subs.w	lr, r6, r2
 80057de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057e2:	bf22      	ittt	cs
 80057e4:	1ab6      	subcs	r6, r6, r2
 80057e6:	4675      	movcs	r5, lr
 80057e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80057f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80057f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057fa:	bf22      	ittt	cs
 80057fc:	1ab6      	subcs	r6, r6, r2
 80057fe:	4675      	movcs	r5, lr
 8005800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	ea4f 0232 	mov.w	r2, r2, rrx
 800580a:	ebb6 0e02 	subs.w	lr, r6, r2
 800580e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005812:	bf22      	ittt	cs
 8005814:	1ab6      	subcs	r6, r6, r2
 8005816:	4675      	movcs	r5, lr
 8005818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800581c:	ea55 0e06 	orrs.w	lr, r5, r6
 8005820:	d018      	beq.n	8005854 <__aeabi_ddiv+0x114>
 8005822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800582a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800582e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800583a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800583e:	d1c0      	bne.n	80057c2 <__aeabi_ddiv+0x82>
 8005840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005844:	d10b      	bne.n	800585e <__aeabi_ddiv+0x11e>
 8005846:	ea41 0100 	orr.w	r1, r1, r0
 800584a:	f04f 0000 	mov.w	r0, #0
 800584e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005852:	e7b6      	b.n	80057c2 <__aeabi_ddiv+0x82>
 8005854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005858:	bf04      	itt	eq
 800585a:	4301      	orreq	r1, r0
 800585c:	2000      	moveq	r0, #0
 800585e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005862:	bf88      	it	hi
 8005864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005868:	f63f aeaf 	bhi.w	80055ca <__aeabi_dmul+0xde>
 800586c:	ebb5 0c03 	subs.w	ip, r5, r3
 8005870:	bf04      	itt	eq
 8005872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800587a:	f150 0000 	adcs.w	r0, r0, #0
 800587e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800588c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005890:	bfc2      	ittt	gt
 8005892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800589a:	bd70      	popgt	{r4, r5, r6, pc}
 800589c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80058a0:	f04f 0e00 	mov.w	lr, #0
 80058a4:	3c01      	subs	r4, #1
 80058a6:	e690      	b.n	80055ca <__aeabi_dmul+0xde>
 80058a8:	ea45 0e06 	orr.w	lr, r5, r6
 80058ac:	e68d      	b.n	80055ca <__aeabi_dmul+0xde>
 80058ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80058b2:	ea94 0f0c 	teq	r4, ip
 80058b6:	bf08      	it	eq
 80058b8:	ea95 0f0c 	teqeq	r5, ip
 80058bc:	f43f af3b 	beq.w	8005736 <__aeabi_dmul+0x24a>
 80058c0:	ea94 0f0c 	teq	r4, ip
 80058c4:	d10a      	bne.n	80058dc <__aeabi_ddiv+0x19c>
 80058c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80058ca:	f47f af34 	bne.w	8005736 <__aeabi_dmul+0x24a>
 80058ce:	ea95 0f0c 	teq	r5, ip
 80058d2:	f47f af25 	bne.w	8005720 <__aeabi_dmul+0x234>
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	e72c      	b.n	8005736 <__aeabi_dmul+0x24a>
 80058dc:	ea95 0f0c 	teq	r5, ip
 80058e0:	d106      	bne.n	80058f0 <__aeabi_ddiv+0x1b0>
 80058e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80058e6:	f43f aefd 	beq.w	80056e4 <__aeabi_dmul+0x1f8>
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	e722      	b.n	8005736 <__aeabi_dmul+0x24a>
 80058f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80058f4:	bf18      	it	ne
 80058f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80058fa:	f47f aec5 	bne.w	8005688 <__aeabi_dmul+0x19c>
 80058fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005902:	f47f af0d 	bne.w	8005720 <__aeabi_dmul+0x234>
 8005906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800590a:	f47f aeeb 	bne.w	80056e4 <__aeabi_dmul+0x1f8>
 800590e:	e712      	b.n	8005736 <__aeabi_dmul+0x24a>

08005910 <__gedf2>:
 8005910:	f04f 3cff 	mov.w	ip, #4294967295
 8005914:	e006      	b.n	8005924 <__cmpdf2+0x4>
 8005916:	bf00      	nop

08005918 <__ledf2>:
 8005918:	f04f 0c01 	mov.w	ip, #1
 800591c:	e002      	b.n	8005924 <__cmpdf2+0x4>
 800591e:	bf00      	nop

08005920 <__cmpdf2>:
 8005920:	f04f 0c01 	mov.w	ip, #1
 8005924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800592c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005934:	bf18      	it	ne
 8005936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800593a:	d01b      	beq.n	8005974 <__cmpdf2+0x54>
 800593c:	b001      	add	sp, #4
 800593e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005942:	bf0c      	ite	eq
 8005944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005948:	ea91 0f03 	teqne	r1, r3
 800594c:	bf02      	ittt	eq
 800594e:	ea90 0f02 	teqeq	r0, r2
 8005952:	2000      	moveq	r0, #0
 8005954:	4770      	bxeq	lr
 8005956:	f110 0f00 	cmn.w	r0, #0
 800595a:	ea91 0f03 	teq	r1, r3
 800595e:	bf58      	it	pl
 8005960:	4299      	cmppl	r1, r3
 8005962:	bf08      	it	eq
 8005964:	4290      	cmpeq	r0, r2
 8005966:	bf2c      	ite	cs
 8005968:	17d8      	asrcs	r0, r3, #31
 800596a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800596e:	f040 0001 	orr.w	r0, r0, #1
 8005972:	4770      	bx	lr
 8005974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800597c:	d102      	bne.n	8005984 <__cmpdf2+0x64>
 800597e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005982:	d107      	bne.n	8005994 <__cmpdf2+0x74>
 8005984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800598c:	d1d6      	bne.n	800593c <__cmpdf2+0x1c>
 800598e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005992:	d0d3      	beq.n	800593c <__cmpdf2+0x1c>
 8005994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop

0800599c <__aeabi_cdrcmple>:
 800599c:	4684      	mov	ip, r0
 800599e:	4610      	mov	r0, r2
 80059a0:	4662      	mov	r2, ip
 80059a2:	468c      	mov	ip, r1
 80059a4:	4619      	mov	r1, r3
 80059a6:	4663      	mov	r3, ip
 80059a8:	e000      	b.n	80059ac <__aeabi_cdcmpeq>
 80059aa:	bf00      	nop

080059ac <__aeabi_cdcmpeq>:
 80059ac:	b501      	push	{r0, lr}
 80059ae:	f7ff ffb7 	bl	8005920 <__cmpdf2>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	bf48      	it	mi
 80059b6:	f110 0f00 	cmnmi.w	r0, #0
 80059ba:	bd01      	pop	{r0, pc}

080059bc <__aeabi_dcmpeq>:
 80059bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059c0:	f7ff fff4 	bl	80059ac <__aeabi_cdcmpeq>
 80059c4:	bf0c      	ite	eq
 80059c6:	2001      	moveq	r0, #1
 80059c8:	2000      	movne	r0, #0
 80059ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80059ce:	bf00      	nop

080059d0 <__aeabi_dcmplt>:
 80059d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059d4:	f7ff ffea 	bl	80059ac <__aeabi_cdcmpeq>
 80059d8:	bf34      	ite	cc
 80059da:	2001      	movcc	r0, #1
 80059dc:	2000      	movcs	r0, #0
 80059de:	f85d fb08 	ldr.w	pc, [sp], #8
 80059e2:	bf00      	nop

080059e4 <__aeabi_dcmple>:
 80059e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059e8:	f7ff ffe0 	bl	80059ac <__aeabi_cdcmpeq>
 80059ec:	bf94      	ite	ls
 80059ee:	2001      	movls	r0, #1
 80059f0:	2000      	movhi	r0, #0
 80059f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80059f6:	bf00      	nop

080059f8 <__aeabi_dcmpge>:
 80059f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059fc:	f7ff ffce 	bl	800599c <__aeabi_cdrcmple>
 8005a00:	bf94      	ite	ls
 8005a02:	2001      	movls	r0, #1
 8005a04:	2000      	movhi	r0, #0
 8005a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a0a:	bf00      	nop

08005a0c <__aeabi_dcmpgt>:
 8005a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005a10:	f7ff ffc4 	bl	800599c <__aeabi_cdrcmple>
 8005a14:	bf34      	ite	cc
 8005a16:	2001      	movcc	r0, #1
 8005a18:	2000      	movcs	r0, #0
 8005a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a1e:	bf00      	nop

08005a20 <__aeabi_dcmpun>:
 8005a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a28:	d102      	bne.n	8005a30 <__aeabi_dcmpun+0x10>
 8005a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005a2e:	d10a      	bne.n	8005a46 <__aeabi_dcmpun+0x26>
 8005a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a38:	d102      	bne.n	8005a40 <__aeabi_dcmpun+0x20>
 8005a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005a3e:	d102      	bne.n	8005a46 <__aeabi_dcmpun+0x26>
 8005a40:	f04f 0000 	mov.w	r0, #0
 8005a44:	4770      	bx	lr
 8005a46:	f04f 0001 	mov.w	r0, #1
 8005a4a:	4770      	bx	lr

08005a4c <__aeabi_d2uiz>:
 8005a4c:	004a      	lsls	r2, r1, #1
 8005a4e:	d211      	bcs.n	8005a74 <__aeabi_d2uiz+0x28>
 8005a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005a54:	d211      	bcs.n	8005a7a <__aeabi_d2uiz+0x2e>
 8005a56:	d50d      	bpl.n	8005a74 <__aeabi_d2uiz+0x28>
 8005a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005a60:	d40e      	bmi.n	8005a80 <__aeabi_d2uiz+0x34>
 8005a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8005a72:	4770      	bx	lr
 8005a74:	f04f 0000 	mov.w	r0, #0
 8005a78:	4770      	bx	lr
 8005a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005a7e:	d102      	bne.n	8005a86 <__aeabi_d2uiz+0x3a>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	4770      	bx	lr
 8005a86:	f04f 0000 	mov.w	r0, #0
 8005a8a:	4770      	bx	lr

08005a8c <__aeabi_d2f>:
 8005a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005a94:	bf24      	itt	cs
 8005a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005a9e:	d90d      	bls.n	8005abc <__aeabi_d2f+0x30>
 8005aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005ab4:	bf08      	it	eq
 8005ab6:	f020 0001 	biceq.w	r0, r0, #1
 8005aba:	4770      	bx	lr
 8005abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005ac0:	d121      	bne.n	8005b06 <__aeabi_d2f+0x7a>
 8005ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005ac6:	bfbc      	itt	lt
 8005ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005acc:	4770      	bxlt	lr
 8005ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005ad6:	f1c2 0218 	rsb	r2, r2, #24
 8005ada:	f1c2 0c20 	rsb	ip, r2, #32
 8005ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8005ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8005ae6:	bf18      	it	ne
 8005ae8:	f040 0001 	orrne.w	r0, r0, #1
 8005aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005af8:	ea40 000c 	orr.w	r0, r0, ip
 8005afc:	fa23 f302 	lsr.w	r3, r3, r2
 8005b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b04:	e7cc      	b.n	8005aa0 <__aeabi_d2f+0x14>
 8005b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005b0a:	d107      	bne.n	8005b1c <__aeabi_d2f+0x90>
 8005b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005b10:	bf1e      	ittt	ne
 8005b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005b1a:	4770      	bxne	lr
 8005b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop

08005b2c <__gesf2>:
 8005b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8005b30:	e006      	b.n	8005b40 <__cmpsf2+0x4>
 8005b32:	bf00      	nop

08005b34 <__lesf2>:
 8005b34:	f04f 0c01 	mov.w	ip, #1
 8005b38:	e002      	b.n	8005b40 <__cmpsf2+0x4>
 8005b3a:	bf00      	nop

08005b3c <__cmpsf2>:
 8005b3c:	f04f 0c01 	mov.w	ip, #1
 8005b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005b44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005b48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005b4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b50:	bf18      	it	ne
 8005b52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005b56:	d011      	beq.n	8005b7c <__cmpsf2+0x40>
 8005b58:	b001      	add	sp, #4
 8005b5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005b5e:	bf18      	it	ne
 8005b60:	ea90 0f01 	teqne	r0, r1
 8005b64:	bf58      	it	pl
 8005b66:	ebb2 0003 	subspl.w	r0, r2, r3
 8005b6a:	bf88      	it	hi
 8005b6c:	17c8      	asrhi	r0, r1, #31
 8005b6e:	bf38      	it	cc
 8005b70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005b74:	bf18      	it	ne
 8005b76:	f040 0001 	orrne.w	r0, r0, #1
 8005b7a:	4770      	bx	lr
 8005b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b80:	d102      	bne.n	8005b88 <__cmpsf2+0x4c>
 8005b82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005b86:	d105      	bne.n	8005b94 <__cmpsf2+0x58>
 8005b88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005b8c:	d1e4      	bne.n	8005b58 <__cmpsf2+0x1c>
 8005b8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005b92:	d0e1      	beq.n	8005b58 <__cmpsf2+0x1c>
 8005b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop

08005b9c <__aeabi_cfrcmple>:
 8005b9c:	4684      	mov	ip, r0
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	4661      	mov	r1, ip
 8005ba2:	e7ff      	b.n	8005ba4 <__aeabi_cfcmpeq>

08005ba4 <__aeabi_cfcmpeq>:
 8005ba4:	b50f      	push	{r0, r1, r2, r3, lr}
 8005ba6:	f7ff ffc9 	bl	8005b3c <__cmpsf2>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	bf48      	it	mi
 8005bae:	f110 0f00 	cmnmi.w	r0, #0
 8005bb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005bb4 <__aeabi_fcmpeq>:
 8005bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bb8:	f7ff fff4 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2001      	moveq	r0, #1
 8005bc0:	2000      	movne	r0, #0
 8005bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bc6:	bf00      	nop

08005bc8 <__aeabi_fcmplt>:
 8005bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bcc:	f7ff ffea 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005bd0:	bf34      	ite	cc
 8005bd2:	2001      	movcc	r0, #1
 8005bd4:	2000      	movcs	r0, #0
 8005bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bda:	bf00      	nop

08005bdc <__aeabi_fcmple>:
 8005bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005be0:	f7ff ffe0 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005be4:	bf94      	ite	ls
 8005be6:	2001      	movls	r0, #1
 8005be8:	2000      	movhi	r0, #0
 8005bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bee:	bf00      	nop

08005bf0 <__aeabi_fcmpge>:
 8005bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bf4:	f7ff ffd2 	bl	8005b9c <__aeabi_cfrcmple>
 8005bf8:	bf94      	ite	ls
 8005bfa:	2001      	movls	r0, #1
 8005bfc:	2000      	movhi	r0, #0
 8005bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c02:	bf00      	nop

08005c04 <__aeabi_fcmpgt>:
 8005c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005c08:	f7ff ffc8 	bl	8005b9c <__aeabi_cfrcmple>
 8005c0c:	bf34      	ite	cc
 8005c0e:	2001      	movcc	r0, #1
 8005c10:	2000      	movcs	r0, #0
 8005c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c16:	bf00      	nop

08005c18 <__aeabi_fcmpun>:
 8005c18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005c24:	d102      	bne.n	8005c2c <__aeabi_fcmpun+0x14>
 8005c26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005c2a:	d108      	bne.n	8005c3e <__aeabi_fcmpun+0x26>
 8005c2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005c30:	d102      	bne.n	8005c38 <__aeabi_fcmpun+0x20>
 8005c32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005c36:	d102      	bne.n	8005c3e <__aeabi_fcmpun+0x26>
 8005c38:	f04f 0000 	mov.w	r0, #0
 8005c3c:	4770      	bx	lr
 8005c3e:	f04f 0001 	mov.w	r0, #1
 8005c42:	4770      	bx	lr

08005c44 <__aeabi_d2lz>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4605      	mov	r5, r0
 8005c48:	460c      	mov	r4, r1
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4628      	mov	r0, r5
 8005c50:	4621      	mov	r1, r4
 8005c52:	f7ff febd 	bl	80059d0 <__aeabi_dcmplt>
 8005c56:	b928      	cbnz	r0, 8005c64 <__aeabi_d2lz+0x20>
 8005c58:	4628      	mov	r0, r5
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c60:	f000 b80a 	b.w	8005c78 <__aeabi_d2ulz>
 8005c64:	4628      	mov	r0, r5
 8005c66:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8005c6a:	f000 f805 	bl	8005c78 <__aeabi_d2ulz>
 8005c6e:	4240      	negs	r0, r0
 8005c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005c74:	bd38      	pop	{r3, r4, r5, pc}
 8005c76:	bf00      	nop

08005c78 <__aeabi_d2ulz>:
 8005c78:	b5d0      	push	{r4, r6, r7, lr}
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <__aeabi_d2ulz+0x34>)
 8005c7e:	4606      	mov	r6, r0
 8005c80:	460f      	mov	r7, r1
 8005c82:	f7ff fc33 	bl	80054ec <__aeabi_dmul>
 8005c86:	f7ff fee1 	bl	8005a4c <__aeabi_d2uiz>
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	f7ff fbb4 	bl	80053f8 <__aeabi_ui2d>
 8005c90:	2200      	movs	r2, #0
 8005c92:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <__aeabi_d2ulz+0x38>)
 8005c94:	f7ff fc2a 	bl	80054ec <__aeabi_dmul>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7ff fa6c 	bl	800517c <__aeabi_dsub>
 8005ca4:	f7ff fed2 	bl	8005a4c <__aeabi_d2uiz>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	bdd0      	pop	{r4, r6, r7, pc}
 8005cac:	3df00000 	.word	0x3df00000
 8005cb0:	41f00000 	.word	0x41f00000

08005cb4 <apInit>:




void apInit(void)
{
 8005cb4:	b508      	push	{r3, lr}
  uartOpen(_DEF_UART1, 57600);  //USB
 8005cb6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005cba:	2000      	movs	r0, #0
 8005cbc:	f000 fedc 	bl	8006a78 <uartOpen>
  uartOpen(_DEF_UART2, 57600);  //UART
 8005cc0:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	f000 fed7 	bl	8006a78 <uartOpen>

  cliOpen(_DEF_UART1, 57600);     //cli 용도
 8005cca:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005cce:	2000      	movs	r0, #0
 8005cd0:	f000 fa5c 	bl	800618c <cliOpen>
  cliOpenLog(_DEF_UART2, 57600);  //cli 로그용도
}
 8005cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  cliOpenLog(_DEF_UART2, 57600);  //cli 로그용도
 8005cd8:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005cdc:	2001      	movs	r0, #1
 8005cde:	f000 ba5f 	b.w	80061a0 <cliOpenLog>
	...

08005ce4 <apMain>:



void apMain(void)
{
 8005ce4:	b538      	push	{r3, r4, r5, lr}
  uint32_t pre_time;
  uint32_t led_blink_time = 500;

  pre_time = millis();
 8005ce6:	f000 f821 	bl	8005d2c <millis>
 8005cea:	4604      	mov	r4, r0
    if (uartAvailable(_DEF_UART2) > 0)
    {
      uint8_t rx_data;
      rx_data = uartRead(_DEF_UART2);

      uartPrintf(_DEF_UART2, "Rx : 0x%X\n", rx_data);
 8005cec:	4d0d      	ldr	r5, [pc, #52]	; (8005d24 <apMain+0x40>)
    if ( millis()-pre_time >= led_blink_time)
 8005cee:	f000 f81d 	bl	8005d2c <millis>
 8005cf2:	1b00      	subs	r0, r0, r4
 8005cf4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8005cf8:	d305      	bcc.n	8005d06 <apMain+0x22>
      pre_time = millis();
 8005cfa:	f000 f817 	bl	8005d2c <millis>
 8005cfe:	4604      	mov	r4, r0
      ledToggle(_DEF_LED1);
 8005d00:	2000      	movs	r0, #0
 8005d02:	f000 fe07 	bl	8006914 <ledToggle>
    if (uartAvailable(_DEF_UART2) > 0)
 8005d06:	2001      	movs	r0, #1
 8005d08:	f000 ff0c 	bl	8006b24 <uartAvailable>
 8005d0c:	b138      	cbz	r0, 8005d1e <apMain+0x3a>
      rx_data = uartRead(_DEF_UART2);
 8005d0e:	2001      	movs	r0, #1
 8005d10:	f000 ff1e 	bl	8006b50 <uartRead>
      uartPrintf(_DEF_UART2, "Rx : 0x%X\n", rx_data);
 8005d14:	4629      	mov	r1, r5
      rx_data = uartRead(_DEF_UART2);
 8005d16:	4602      	mov	r2, r0
      uartPrintf(_DEF_UART2, "Rx : 0x%X\n", rx_data);
 8005d18:	2001      	movs	r0, #1
 8005d1a:	f000 ff4d 	bl	8006bb8 <uartPrintf>
    }

    cliMain();
 8005d1e:	f000 fb57 	bl	80063d0 <cliMain>
    if ( millis()-pre_time >= led_blink_time)
 8005d22:	e7e4      	b.n	8005cee <apMain+0xa>
 8005d24:	0800de00 	.word	0x0800de00

08005d28 <delay>:

}

void delay(uint32_t ms)
{
 HAL_Delay(ms);
 8005d28:	f001 b860 	b.w	8006dec <HAL_Delay>

08005d2c <millis>:
}
uint32_t millis(void)
{
  return HAL_GetTick();
 8005d2c:	f001 b858 	b.w	8006de0 <HAL_GetTick>

08005d30 <__io_putchar>:
}

int __io_putchar(int ch)
{
 8005d30:	b507      	push	{r0, r1, r2, lr}
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8005d32:	2201      	movs	r2, #1
{
 8005d34:	9001      	str	r0, [sp, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8005d36:	a901      	add	r1, sp, #4
 8005d38:	2000      	movs	r0, #0
 8005d3a:	f000 ff23 	bl	8006b84 <uartWrite>
  return 1;
}
 8005d3e:	2001      	movs	r0, #1
 8005d40:	b003      	add	sp, #12
 8005d42:	f85d fb04 	ldr.w	pc, [sp], #4

08005d46 <SystemClock_Config>:



void SystemClock_Config(void)
{
 8005d46:	b510      	push	{r4, lr}
 8005d48:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d4a:	2214      	movs	r2, #20
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	a80c      	add	r0, sp, #48	; 0x30
 8005d50:	f004 feea 	bl	800ab28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d54:	2214      	movs	r2, #20
 8005d56:	2100      	movs	r1, #0
 8005d58:	eb0d 0002 	add.w	r0, sp, r2
 8005d5c:	f004 fee4 	bl	800ab28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d60:	2210      	movs	r2, #16
 8005d62:	2100      	movs	r1, #0
 8005d64:	a801      	add	r0, sp, #4
 8005d66:	f004 fedf 	bl	800ab28 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d6a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d70:	2105      	movs	r1, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005d72:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d74:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d78:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005d7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d80:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005d82:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005d86:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d88:	f002 fa0a 	bl	80081a0 <HAL_RCC_OscConfig>
 8005d8c:	b108      	cbz	r0, 8005d92 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d8e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d90:	e7fe      	b.n	8005d90 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d92:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d94:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d9c:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005d9e:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005da2:	4621      	mov	r1, r4
 8005da4:	a805      	add	r0, sp, #20
 8005da6:	f002 fbd1 	bl	800854c <HAL_RCC_ClockConfig>
 8005daa:	b108      	cbz	r0, 8005db0 <SystemClock_Config+0x6a>
 8005dac:	b672      	cpsid	i
  while (1)
 8005dae:	e7fe      	b.n	8005dae <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005db0:	2211      	movs	r2, #17
 8005db2:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005db6:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005db8:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005dba:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005dbe:	f002 fc81 	bl	80086c4 <HAL_RCCEx_PeriphCLKConfig>
 8005dc2:	b108      	cbz	r0, 8005dc8 <SystemClock_Config+0x82>
 8005dc4:	b672      	cpsid	i
  while (1)
 8005dc6:	e7fe      	b.n	8005dc6 <SystemClock_Config+0x80>
}
 8005dc8:	b014      	add	sp, #80	; 0x50
 8005dca:	bd10      	pop	{r4, pc}

08005dcc <bspInit>:
{
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	b088      	sub	sp, #32
  HAL_Init();
 8005dd0:	f000 ffe8 	bl	8006da4 <HAL_Init>
  SystemClock_Config();
 8005dd4:	f7ff ffb7 	bl	8005d46 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dd8:	4b1c      	ldr	r3, [pc, #112]	; (8005e4c <bspInit+0x80>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005dda:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dde:	699a      	ldr	r2, [r3, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005de0:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005de2:	f042 0220 	orr.w	r2, r2, #32
 8005de6:	619a      	str	r2, [r3, #24]
 8005de8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dea:	4c19      	ldr	r4, [pc, #100]	; (8005e50 <bspInit+0x84>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dec:	f002 0220 	and.w	r2, r2, #32
 8005df0:	9200      	str	r2, [sp, #0]
 8005df2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005df4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df6:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005df8:	f042 0204 	orr.w	r2, r2, #4
 8005dfc:	619a      	str	r2, [r3, #24]
 8005dfe:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e00:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e02:	f002 0204 	and.w	r2, r2, #4
 8005e06:	9201      	str	r2, [sp, #4]
 8005e08:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	f042 0208 	orr.w	r2, r2, #8
 8005e10:	619a      	str	r2, [r3, #24]
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	f002 0208 	and.w	r2, r2, #8
 8005e18:	9202      	str	r2, [sp, #8]
 8005e1a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	f042 0210 	orr.w	r2, r2, #16
 8005e22:	619a      	str	r2, [r3, #24]
 8005e24:	699b      	ldr	r3, [r3, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e26:	9606      	str	r6, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	9303      	str	r3, [sp, #12]
 8005e2e:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005e30:	2311      	movs	r3, #17
 8005e32:	e9cd 5304 	strd	r5, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e36:	2302      	movs	r3, #2
 8005e38:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e3a:	f001 f9eb 	bl	8007214 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8005e3e:	4632      	mov	r2, r6
 8005e40:	4629      	mov	r1, r5
 8005e42:	4620      	mov	r0, r4
 8005e44:	f001 fb2e 	bl	80074a4 <HAL_GPIO_WritePin>
}
 8005e48:	b008      	add	sp, #32
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	40010800 	.word	0x40010800

08005e54 <Error_Handler>:
 8005e54:	b672      	cpsid	i
  while (1)
 8005e56:	e7fe      	b.n	8005e56 <Error_Handler+0x2>

08005e58 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <HAL_MspInit+0x3c>)
{
 8005e5a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	f042 0201 	orr.w	r2, r2, #1
 8005e62:	619a      	str	r2, [r3, #24]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	f002 0201 	and.w	r2, r2, #1
 8005e6a:	9200      	str	r2, [sp, #0]
 8005e6c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e74:	61da      	str	r2, [r3, #28]
 8005e76:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e78:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e82:	6853      	ldr	r3, [r2, #4]
 8005e84:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005e88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e8e:	b002      	add	sp, #8
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40010000 	.word	0x40010000

08005e9c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005e9c:	e7fe      	b.n	8005e9c <NMI_Handler>

08005e9e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e9e:	e7fe      	b.n	8005e9e <HardFault_Handler>

08005ea0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ea0:	e7fe      	b.n	8005ea0 <MemManage_Handler>

08005ea2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ea2:	e7fe      	b.n	8005ea2 <BusFault_Handler>

08005ea4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ea4:	e7fe      	b.n	8005ea4 <UsageFault_Handler>

08005ea6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ea6:	4770      	bx	lr

08005ea8 <DebugMon_Handler>:
 8005ea8:	4770      	bx	lr

08005eaa <PendSV_Handler>:
 8005eaa:	4770      	bx	lr

08005eac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005eac:	f000 bf8c 	b.w	8006dc8 <HAL_IncTick>

08005eb0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005eb0:	4801      	ldr	r0, [pc, #4]	; (8005eb8 <DMA1_Channel5_IRQHandler+0x8>)
 8005eb2:	f001 b91d 	b.w	80070f0 <HAL_DMA_IRQHandler>
 8005eb6:	bf00      	nop
 8005eb8:	20000950 	.word	0x20000950

08005ebc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005ebc:	4801      	ldr	r0, [pc, #4]	; (8005ec4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8005ebe:	f001 bba5 	b.w	800760c <HAL_PCD_IRQHandler>
 8005ec2:	bf00      	nop
 8005ec4:	200015d0 	.word	0x200015d0

08005ec8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ec8:	4801      	ldr	r0, [pc, #4]	; (8005ed0 <USART1_IRQHandler+0x8>)
 8005eca:	f002 bf57 	b.w	8008d7c <HAL_UART_IRQHandler>
 8005ece:	bf00      	nop
 8005ed0:	20000994 	.word	0x20000994

08005ed4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	4770      	bx	lr

08005ed8 <_kill>:

int _kill(int pid, int sig)
{
 8005ed8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005eda:	f004 fde1 	bl	800aaa0 <__errno>
 8005ede:	2316      	movs	r3, #22
 8005ee0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8005ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee6:	bd08      	pop	{r3, pc}

08005ee8 <_exit>:

void _exit (int status)
{
 8005ee8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005eea:	f004 fdd9 	bl	800aaa0 <__errno>
 8005eee:	2316      	movs	r3, #22
 8005ef0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005ef2:	e7fe      	b.n	8005ef2 <_exit+0xa>

08005ef4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	460d      	mov	r5, r1
 8005ef8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005efa:	460e      	mov	r6, r1
 8005efc:	1b73      	subs	r3, r6, r5
 8005efe:	429c      	cmp	r4, r3
 8005f00:	dc01      	bgt.n	8005f06 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005f02:	4620      	mov	r0, r4
 8005f04:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005f06:	f3af 8000 	nop.w
 8005f0a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f0e:	e7f5      	b.n	8005efc <_read+0x8>

08005f10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	460d      	mov	r5, r1
 8005f14:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f16:	460e      	mov	r6, r1
 8005f18:	1b73      	subs	r3, r6, r5
 8005f1a:	429c      	cmp	r4, r3
 8005f1c:	dc01      	bgt.n	8005f22 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8005f1e:	4620      	mov	r0, r4
 8005f20:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8005f22:	f816 0b01 	ldrb.w	r0, [r6], #1
 8005f26:	f7ff ff03 	bl	8005d30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f2a:	e7f5      	b.n	8005f18 <_write+0x8>

08005f2c <_close>:

int _close(int file)
{
	return -1;
}
 8005f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f30:	4770      	bx	lr

08005f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005f36:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005f38:	604b      	str	r3, [r1, #4]
}
 8005f3a:	4770      	bx	lr

08005f3c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	4770      	bx	lr

08005f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005f40:	2000      	movs	r0, #0
 8005f42:	4770      	bx	lr

08005f44 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f44:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <_sbrk+0x30>)
{
 8005f46:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8005f48:	6811      	ldr	r1, [r2, #0]
{
 8005f4a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8005f4c:	b909      	cbnz	r1, 8005f52 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8005f4e:	490a      	ldr	r1, [pc, #40]	; (8005f78 <_sbrk+0x34>)
 8005f50:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f52:	6810      	ldr	r0, [r2, #0]
 8005f54:	4909      	ldr	r1, [pc, #36]	; (8005f7c <_sbrk+0x38>)
 8005f56:	4c0a      	ldr	r4, [pc, #40]	; (8005f80 <_sbrk+0x3c>)
 8005f58:	4403      	add	r3, r0
 8005f5a:	1b09      	subs	r1, r1, r4
 8005f5c:	428b      	cmp	r3, r1
 8005f5e:	d906      	bls.n	8005f6e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8005f60:	f004 fd9e 	bl	800aaa0 <__errno>
 8005f64:	230c      	movs	r3, #12
 8005f66:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8005f6c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8005f6e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8005f70:	e7fc      	b.n	8005f6c <_sbrk+0x28>
 8005f72:	bf00      	nop
 8005f74:	20000390 	.word	0x20000390
 8005f78:	20001af0 	.word	0x20001af0
 8005f7c:	20005000 	.word	0x20005000
 8005f80:	00000400 	.word	0x00000400

08005f84 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8005f84:	4b01      	ldr	r3, [pc, #4]	; (8005f8c <SystemInit+0x8>)
 8005f86:	4a02      	ldr	r2, [pc, #8]	; (8005f90 <SystemInit+0xc>)
 8005f88:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f8a:	4770      	bx	lr
 8005f8c:	e000ed00 	.word	0xe000ed00
 8005f90:	08005000 	.word	0x08005000

08005f94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f94:	480c      	ldr	r0, [pc, #48]	; (8005fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005f96:	490d      	ldr	r1, [pc, #52]	; (8005fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005f98:	4a0d      	ldr	r2, [pc, #52]	; (8005fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f9c:	e002      	b.n	8005fa4 <LoopCopyDataInit>

08005f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fa2:	3304      	adds	r3, #4

08005fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fa8:	d3f9      	bcc.n	8005f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005faa:	4a0a      	ldr	r2, [pc, #40]	; (8005fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005fac:	4c0a      	ldr	r4, [pc, #40]	; (8005fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fb0:	e001      	b.n	8005fb6 <LoopFillZerobss>

08005fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fb4:	3204      	adds	r2, #4

08005fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fb8:	d3fb      	bcc.n	8005fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005fba:	f7ff ffe3 	bl	8005f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fbe:	f004 fd75 	bl	800aaac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005fc2:	f004 fd63 	bl	800aa8c <main>
  bx lr
 8005fc6:	4770      	bx	lr
  ldr r0, =_sdata
 8005fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fcc:	20000374 	.word	0x20000374
  ldr r2, =_sidata
 8005fd0:	0800e3fc 	.word	0x0800e3fc
  ldr r2, =_sbss
 8005fd4:	20000374 	.word	0x20000374
  ldr r4, =_ebss
 8005fd8:	20001aec 	.word	0x20001aec

08005fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fdc:	e7fe      	b.n	8005fdc <ADC1_2_IRQHandler>

08005fde <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
  bool ret = true;

  p_node->in    = 0;
 8005fde:	2300      	movs	r3, #0
  p_node->out   = 0;
  p_node->len   = length;
  p_node->p_buf = p_buf;
 8005fe0:	e9c0 2102 	strd	r2, r1, [r0, #8]
  p_node->out   = 0;
 8005fe4:	e9c0 3300 	strd	r3, r3, [r0]
    ret = false;
  }
*/
  return ret;

}
 8005fe8:	2001      	movs	r0, #1
 8005fea:	4770      	bx	lr

08005fec <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8005fec:	b530      	push	{r4, r5, lr}
 8005fee:	440a      	add	r2, r1
  bool ret = true;

  for ( int i=0; i<length; i++)
 8005ff0:	4291      	cmp	r1, r2
 8005ff2:	d101      	bne.n	8005ff8 <qbufferRead+0xc>
  bool ret = true;
 8005ff4:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8005ff6:	bd30      	pop	{r4, r5, pc}
    if (p_node->p_buf != NULL)
 8005ff8:	68c3      	ldr	r3, [r0, #12]
 8005ffa:	b113      	cbz	r3, 8006002 <qbufferRead+0x16>
      p_data[i] = p_node->p_buf[p_node->out];
 8005ffc:	6844      	ldr	r4, [r0, #4]
 8005ffe:	5d1b      	ldrb	r3, [r3, r4]
 8006000:	700b      	strb	r3, [r1, #0]
    if (p_node->out != p_node->in)
 8006002:	6843      	ldr	r3, [r0, #4]
 8006004:	6804      	ldr	r4, [r0, #0]
 8006006:	3101      	adds	r1, #1
 8006008:	42a3      	cmp	r3, r4
 800600a:	d007      	beq.n	800601c <qbufferRead+0x30>
      p_node->out = (p_node->out + 1) % p_node->len;
 800600c:	6884      	ldr	r4, [r0, #8]
 800600e:	3301      	adds	r3, #1
 8006010:	fbb3 f5f4 	udiv	r5, r3, r4
 8006014:	fb04 3315 	mls	r3, r4, r5, r3
 8006018:	6043      	str	r3, [r0, #4]
  for ( int i=0; i<length; i++)
 800601a:	e7e9      	b.n	8005ff0 <qbufferRead+0x4>
      ret = false;
 800601c:	2000      	movs	r0, #0
 800601e:	e7ea      	b.n	8005ff6 <qbufferRead+0xa>

08006020 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 8006020:	e9d0 3200 	ldrd	r3, r2, [r0]
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	6882      	ldr	r2, [r0, #8]
 8006028:	fbb3 f0f2 	udiv	r0, r3, r2

  return ret;
}
 800602c:	fb02 3010 	mls	r0, r2, r0, r3
 8006030:	4770      	bx	lr

08006032 <cliToUpper>:

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
}

void cliToUpper(char *str)
{
 8006032:	b510      	push	{r4, lr}
 8006034:	1e42      	subs	r2, r0, #1
 8006036:	f100 010f 	add.w	r1, r0, #15
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
  {
    str_ch = str[i];
 800603a:	f812 3f01 	ldrb.w	r3, [r2, #1]!

    if (str_ch == 0)
 800603e:	b153      	cbz	r3, 8006056 <cliToUpper+0x24>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8006040:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 8006044:	2c19      	cmp	r4, #25
    {
      str_ch = str_ch - 'a' + 'A';
 8006046:	bf9c      	itt	ls
 8006048:	3b20      	subls	r3, #32
 800604a:	b2db      	uxtbls	r3, r3
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800604c:	428a      	cmp	r2, r1
    }
    str[i] = str_ch;
 800604e:	7013      	strb	r3, [r2, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8006050:	d1f3      	bne.n	800603a <cliToUpper+0x8>
  }

  if (i == CLI_CMD_NAME_MAX)
  {
    str[i-1] = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	73c3      	strb	r3, [r0, #15]
  }
}
 8006056:	bd10      	pop	{r4, pc}

08006058 <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <cliArgsGetStr+0x18>)
 800605a:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 800605e:	4282      	cmp	r2, r0
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 8006060:	bf86      	itte	hi
 8006062:	f8d3 3390 	ldrhi.w	r3, [r3, #912]	; 0x390
 8006066:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
    return 0;
 800606a:	2000      	movls	r0, #0

  return ret;
}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	20000394 	.word	0x20000394

08006074 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8006074:	b508      	push	{r3, lr}
 8006076:	4603      	mov	r3, r0
  bool ret = false;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8006078:	4a08      	ldr	r2, [pc, #32]	; (800609c <cliArgsIsStr+0x28>)
{
 800607a:	4608      	mov	r0, r1
  if (index >= p_cli->cmd_args.argc)
 800607c:	f8b2 138c 	ldrh.w	r1, [r2, #908]	; 0x38c
 8006080:	4299      	cmp	r1, r3
 8006082:	d909      	bls.n	8006098 <cliArgsIsStr+0x24>
  {
    return 0;
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8006084:	f8d2 2390 	ldr.w	r2, [r2, #912]	; 0x390
 8006088:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800608c:	f7ff f860 	bl	8005150 <strcmp>
 8006090:	fab0 f080 	clz	r0, r0
 8006094:	0940      	lsrs	r0, r0, #5
  {
    ret = true;
  }

  return ret;
}
 8006096:	bd08      	pop	{r3, pc}
    return 0;
 8006098:	2000      	movs	r0, #0
 800609a:	e7fc      	b.n	8006096 <cliArgsIsStr+0x22>
 800609c:	20000394 	.word	0x20000394

080060a0 <cliArgsGetFloat>:
  if (index >= p_cli->cmd_args.argc)
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <cliArgsGetFloat+0x1c>)
 80060a2:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 80060a6:	4282      	cmp	r2, r0
 80060a8:	d906      	bls.n	80060b8 <cliArgsGetFloat+0x18>
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80060aa:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80060ae:	2100      	movs	r1, #0
 80060b0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80060b4:	f005 bb54 	b.w	800b760 <strtof>
}
 80060b8:	2000      	movs	r0, #0
 80060ba:	4770      	bx	lr
 80060bc:	20000394 	.word	0x20000394

080060c0 <cliArgsGetData>:
  if (index >= p_cli->cmd_args.argc)
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <cliArgsGetData+0x20>)
 80060c2:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 80060c6:	4282      	cmp	r2, r0
 80060c8:	d907      	bls.n	80060da <cliArgsGetData+0x1a>
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80060d0:	4611      	mov	r1, r2
 80060d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80060d6:	f005 bc33 	b.w	800b940 <strtoul>
}
 80060da:	2000      	movs	r0, #0
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000394 	.word	0x20000394

080060e4 <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 80060e4:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->hist_line_count == 0)
 80060e6:	4c25      	ldr	r4, [pc, #148]	; (800617c <cliLineChange.constprop.0+0x98>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 80060e8:	4605      	mov	r5, r0
  if (p_cli->hist_line_count == 0)
 80060ea:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d03e      	beq.n	8006170 <cliLineChange.constprop.0+0x8c>
  if (p_cli->line.cursor > 0)
 80060f2:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80060f6:	b11a      	cbz	r2, 8006100 <cliLineChange.constprop.0+0x1c>
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80060f8:	4921      	ldr	r1, [pc, #132]	; (8006180 <cliLineChange.constprop.0+0x9c>)
 80060fa:	7820      	ldrb	r0, [r4, #0]
 80060fc:	f000 fd5c 	bl	8006bb8 <uartPrintf>
  if (p_cli->line.count > 0)
 8006100:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 8006104:	b11a      	cbz	r2, 800610e <cliLineChange.constprop.0+0x2a>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8006106:	491f      	ldr	r1, [pc, #124]	; (8006184 <cliLineChange.constprop.0+0xa0>)
 8006108:	7820      	ldrb	r0, [r4, #0]
 800610a:	f000 fd55 	bl	8006bb8 <uartPrintf>
  if (key_up == true)
 800610e:	2d01      	cmp	r5, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8006110:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
  if (key_up == true)
 8006114:	d12d      	bne.n	8006172 <cliLineChange.constprop.0+0x8e>
    if (p_cli->hist_line_new == true)
 8006116:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
 800611a:	b11b      	cbz	r3, 8006124 <cliLineChange.constprop.0+0x40>
      p_cli->hist_line_i = p_cli->hist_line_last;
 800611c:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
 8006120:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8006124:	f994 3195 	ldrsb.w	r3, [r4, #405]	; 0x195
 8006128:	4413      	add	r3, r2
 800612a:	3b01      	subs	r3, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800612c:	fb93 f1f2 	sdiv	r1, r3, r2
 8006130:	fb02 3311 	mls	r3, r2, r1, r3
  p_cli->line = p_cli->line_buf[change_i];
 8006134:	2223      	movs	r2, #35	; 0x23
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8006136:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800613a:	b2db      	uxtb	r3, r3
  p_cli->line = p_cli->line_buf[change_i];
 800613c:	fb02 4303 	mla	r3, r2, r3, r4
 8006140:	4d11      	ldr	r5, [pc, #68]	; (8006188 <cliLineChange.constprop.0+0xa4>)
 8006142:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8006146:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800614a:	462e      	mov	r6, r5
 800614c:	6810      	ldr	r0, [r2, #0]
 800614e:	6851      	ldr	r1, [r2, #4]
 8006150:	3208      	adds	r2, #8
 8006152:	c603      	stmia	r6!, {r0, r1}
 8006154:	429a      	cmp	r2, r3
 8006156:	4635      	mov	r5, r6
 8006158:	d1f7      	bne.n	800614a <cliLineChange.constprop.0+0x66>
 800615a:	7893      	ldrb	r3, [r2, #2]
 800615c:	8811      	ldrh	r1, [r2, #0]
 800615e:	70b3      	strb	r3, [r6, #2]
 8006160:	8031      	strh	r1, [r6, #0]
  p_cli->line.cursor = p_cli->line.count;
 8006162:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8006166:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
  p_cli->hist_line_new = false;
 800616a:	2300      	movs	r3, #0
 800616c:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
}
 8006170:	bd70      	pop	{r4, r5, r6, pc}
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8006172:	f994 3195 	ldrsb.w	r3, [r4, #405]	; 0x195
 8006176:	3301      	adds	r3, #1
 8006178:	e7d8      	b.n	800612c <cliLineChange.constprop.0+0x48>
 800617a:	bf00      	nop
 800617c:	20000394 	.word	0x20000394
 8006180:	0800de23 	.word	0x0800de23
 8006184:	0800de29 	.word	0x0800de29
 8006188:	200005b8 	.word	0x200005b8

0800618c <cliOpen>:
{
 800618c:	b510      	push	{r4, lr}
  cli_node.ch = ch;
 800618e:	4c03      	ldr	r4, [pc, #12]	; (800619c <cliOpen+0x10>)
 8006190:	7020      	strb	r0, [r4, #0]
  cli_node.baud = baud;
 8006192:	6061      	str	r1, [r4, #4]
  cli_node.is_open = uartOpen(ch, baud);
 8006194:	f000 fc70 	bl	8006a78 <uartOpen>
 8006198:	7220      	strb	r0, [r4, #8]
}
 800619a:	bd10      	pop	{r4, pc}
 800619c:	20000394 	.word	0x20000394

080061a0 <cliOpenLog>:
{
 80061a0:	b510      	push	{r4, lr}
  cli_node.log_ch = ch;
 80061a2:	4c04      	ldr	r4, [pc, #16]	; (80061b4 <cliOpenLog+0x14>)
 80061a4:	72a0      	strb	r0, [r4, #10]
  cli_node.log_baud = baud;
 80061a6:	60e1      	str	r1, [r4, #12]
  ret = uartOpen(ch, baud);
 80061a8:	f000 fc66 	bl	8006a78 <uartOpen>
  if (ret == true)
 80061ac:	b108      	cbz	r0, 80061b2 <cliOpenLog+0x12>
    cli_node.is_log = true;
 80061ae:	2301      	movs	r3, #1
 80061b0:	7263      	strb	r3, [r4, #9]
}
 80061b2:	bd10      	pop	{r4, pc}
 80061b4:	20000394 	.word	0x20000394

080061b8 <cliShowLog>:
{
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cli_node.is_log == true)
 80061ba:	4b23      	ldr	r3, [pc, #140]	; (8006248 <cliShowLog+0x90>)
{
 80061bc:	4604      	mov	r4, r0
  if (cli_node.is_log == true)
 80061be:	7a5b      	ldrb	r3, [r3, #9]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d03f      	beq.n	8006244 <cliShowLog+0x8c>
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80061c4:	f890 2245 	ldrb.w	r2, [r0, #581]	; 0x245
 80061c8:	4920      	ldr	r1, [pc, #128]	; (800624c <cliShowLog+0x94>)
 80061ca:	7a80      	ldrb	r0, [r0, #10]
 80061cc:	f000 fcf4 	bl	8006bb8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80061d0:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 80061d4:	491e      	ldr	r1, [pc, #120]	; (8006250 <cliShowLog+0x98>)
 80061d6:	7aa0      	ldrb	r0, [r4, #10]
 80061d8:	f000 fcee 	bl	8006bb8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80061dc:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
 80061e0:	491c      	ldr	r1, [pc, #112]	; (8006254 <cliShowLog+0x9c>)
 80061e2:	7aa0      	ldrb	r0, [r4, #10]
 80061e4:	f000 fce8 	bl	8006bb8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80061e8:	491b      	ldr	r1, [pc, #108]	; (8006258 <cliShowLog+0xa0>)
 80061ea:	f504 7209 	add.w	r2, r4, #548	; 0x224
 80061ee:	7aa0      	ldrb	r0, [r4, #10]
 80061f0:	f000 fce2 	bl	8006bb8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80061f4:	f994 2195 	ldrsb.w	r2, [r4, #405]	; 0x195
 80061f8:	4918      	ldr	r1, [pc, #96]	; (800625c <cliShowLog+0xa4>)
 80061fa:	7aa0      	ldrb	r0, [r4, #10]
 80061fc:	f000 fcdc 	bl	8006bb8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8006200:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 8006204:	4916      	ldr	r1, [pc, #88]	; (8006260 <cliShowLog+0xa8>)
 8006206:	7aa0      	ldrb	r0, [r4, #10]
 8006208:	f000 fcd6 	bl	8006bb8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 800620c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
 8006210:	4914      	ldr	r1, [pc, #80]	; (8006264 <cliShowLog+0xac>)
 8006212:	7aa0      	ldrb	r0, [r4, #10]
 8006214:	f000 fcd0 	bl	8006bb8 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8006218:	2500      	movs	r5, #0
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800621a:	4f13      	ldr	r7, [pc, #76]	; (8006268 <cliShowLog+0xb0>)
 800621c:	f504 76cc 	add.w	r6, r4, #408	; 0x198
    for (int i=0; i<p_cli->hist_line_count; i++)
 8006220:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8006224:	7aa0      	ldrb	r0, [r4, #10]
    for (int i=0; i<p_cli->hist_line_count; i++)
 8006226:	429d      	cmp	r5, r3
 8006228:	db04      	blt.n	8006234 <cliShowLog+0x7c>
}
 800622a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    uartPrintf(p_cli->log_ch, "\n");
 800622e:	490f      	ldr	r1, [pc, #60]	; (800626c <cliShowLog+0xb4>)
 8006230:	f000 bcc2 	b.w	8006bb8 <uartPrintf>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8006234:	4633      	mov	r3, r6
 8006236:	462a      	mov	r2, r5
 8006238:	4639      	mov	r1, r7
 800623a:	f000 fcbd 	bl	8006bb8 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800623e:	3501      	adds	r5, #1
 8006240:	3623      	adds	r6, #35	; 0x23
 8006242:	e7ed      	b.n	8006220 <cliShowLog+0x68>
}
 8006244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006246:	bf00      	nop
 8006248:	20000394 	.word	0x20000394
 800624c:	0800de2f 	.word	0x0800de2f
 8006250:	0800de3d 	.word	0x0800de3d
 8006254:	0800de4b 	.word	0x0800de4b
 8006258:	0800de59 	.word	0x0800de59
 800625c:	0800de67 	.word	0x0800de67
 8006260:	0800de75 	.word	0x0800de75
 8006264:	0800de83 	.word	0x0800de83
 8006268:	0800de91 	.word	0x0800de91
 800626c:	0800debe 	.word	0x0800debe

08006270 <cliPrintf>:
{
 8006270:	b40f      	push	{r0, r1, r2, r3}
 8006272:	b537      	push	{r0, r1, r2, r4, r5, lr}
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006274:	4c0a      	ldr	r4, [pc, #40]	; (80062a0 <cliPrintf+0x30>)
{
 8006276:	ab06      	add	r3, sp, #24
 8006278:	f853 2b04 	ldr.w	r2, [r3], #4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800627c:	f104 0511 	add.w	r5, r4, #17
 8006280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006284:	4628      	mov	r0, r5
  va_start (arg, fmt);
 8006286:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006288:	f005 fb90 	bl	800b9ac <vsniprintf>
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800628c:	4629      	mov	r1, r5
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800628e:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8006290:	7820      	ldrb	r0, [r4, #0]
 8006292:	f000 fc77 	bl	8006b84 <uartWrite>
}
 8006296:	b003      	add	sp, #12
 8006298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800629c:	b004      	add	sp, #16
 800629e:	4770      	bx	lr
 80062a0:	20000394 	.word	0x20000394

080062a4 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  cli_t *p_cli = &cli_node;


  cliPrintf("\r\n");
 80062a6:	480e      	ldr	r0, [pc, #56]	; (80062e0 <cliShowList+0x3c>)
 80062a8:	f7ff ffe2 	bl	8006270 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80062ac:	480d      	ldr	r0, [pc, #52]	; (80062e4 <cliShowList+0x40>)
 80062ae:	f7ff ffdf 	bl	8006270 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80062b2:	2500      	movs	r5, #0
 80062b4:	4c0c      	ldr	r4, [pc, #48]	; (80062e8 <cliShowList+0x44>)
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
    cliPrintf("\r\n");
 80062b6:	4f0a      	ldr	r7, [pc, #40]	; (80062e0 <cliShowList+0x3c>)
  for (int i=0; i<p_cli->cmd_count; i++)
 80062b8:	f5a4 7613 	sub.w	r6, r4, #588	; 0x24c
 80062bc:	f8b6 3248 	ldrh.w	r3, [r6, #584]	; 0x248
 80062c0:	42ab      	cmp	r3, r5
 80062c2:	dc04      	bgt.n	80062ce <cliShowList+0x2a>
  }

  cliPrintf("-----------------------------\r\n");
}
 80062c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  cliPrintf("-----------------------------\r\n");
 80062c8:	4808      	ldr	r0, [pc, #32]	; (80062ec <cliShowList+0x48>)
 80062ca:	f7ff bfd1 	b.w	8006270 <cliPrintf>
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80062ce:	4620      	mov	r0, r4
 80062d0:	f7ff ffce 	bl	8006270 <cliPrintf>
    cliPrintf("\r\n");
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7ff ffcb 	bl	8006270 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80062da:	3501      	adds	r5, #1
 80062dc:	3414      	adds	r4, #20
 80062de:	e7ed      	b.n	80062bc <cliShowList+0x18>
 80062e0:	0800debd 	.word	0x0800debd
 80062e4:	0800dea0 	.word	0x0800dea0
 80062e8:	200005e0 	.word	0x200005e0
 80062ec:	0800dec0 	.word	0x0800dec0

080062f0 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80062f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80062f4:	8803      	ldrh	r3, [r0, #0]
{
 80062f6:	b085      	sub	sp, #20
  char **argv = args->argv;


  if(args->argc < 1)
 80062f8:	b92b      	cbnz	r3, 8006306 <cliMemoryDump+0x16>
  {
    cliPrintf(">> md addr [size] \n");
 80062fa:	482d      	ldr	r0, [pc, #180]	; (80063b0 <cliMemoryDump+0xc0>)
      }
      cliPrintf("|\n   ");
    }
    addr++;
  }
}
 80062fc:	b005      	add	sp, #20
 80062fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cliPrintf(">> md addr [size] \n");
 8006302:	f7ff bfb5 	b.w	8006270 <cliPrintf>
  if(argc > 1)
 8006306:	2b01      	cmp	r3, #1
  char **argv = args->argv;
 8006308:	6844      	ldr	r4, [r0, #4]
  if(argc > 1)
 800630a:	d015      	beq.n	8006338 <cliMemoryDump+0x48>
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800630c:	2200      	movs	r2, #0
 800630e:	6860      	ldr	r0, [r4, #4]
 8006310:	4611      	mov	r1, r2
 8006312:	f005 fb15 	bl	800b940 <strtoul>
 8006316:	4606      	mov	r6, r0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8006318:	2200      	movs	r2, #0
 800631a:	6820      	ldr	r0, [r4, #0]
 800631c:	4611      	mov	r1, r2
 800631e:	f005 fb0f 	bl	800b940 <strtoul>
 8006322:	4604      	mov	r4, r0
  cliPrintf("\n   ");
 8006324:	4823      	ldr	r0, [pc, #140]	; (80063b4 <cliMemoryDump+0xc4>)
 8006326:	f7ff ffa3 	bl	8006270 <cliPrintf>
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800632a:	4627      	mov	r7, r4
  for (idx = 0; idx<size; idx++)
 800632c:	2500      	movs	r5, #0
 800632e:	42b5      	cmp	r5, r6
 8006330:	db04      	blt.n	800633c <cliMemoryDump+0x4c>
}
 8006332:	b005      	add	sp, #20
 8006334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int idx, size = 16;
 8006338:	2610      	movs	r6, #16
 800633a:	e7ed      	b.n	8006318 <cliMemoryDump+0x28>
    if((idx%4) == 0)
 800633c:	f015 0803 	ands.w	r8, r5, #3
 8006340:	d103      	bne.n	800634a <cliMemoryDump+0x5a>
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8006342:	4639      	mov	r1, r7
 8006344:	481c      	ldr	r0, [pc, #112]	; (80063b8 <cliMemoryDump+0xc8>)
 8006346:	f7ff ff93 	bl	8006270 <cliPrintf>
    cliPrintf(" 0x%08X", *(addr));
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	481b      	ldr	r0, [pc, #108]	; (80063bc <cliMemoryDump+0xcc>)
 800634e:	f7ff ff8f 	bl	8006270 <cliPrintf>
    if ((idx%4) == 3)
 8006352:	f1b8 0f03 	cmp.w	r8, #3
 8006356:	d124      	bne.n	80063a2 <cliMemoryDump+0xb2>
      cliPrintf ("  |");
 8006358:	4819      	ldr	r0, [pc, #100]	; (80063c0 <cliMemoryDump+0xd0>)
 800635a:	f7ff ff89 	bl	8006270 <cliPrintf>
            cliPrintf(".");
 800635e:	f8df a064 	ldr.w	sl, [pc, #100]	; 80063c4 <cliMemoryDump+0xd4>
 8006362:	f104 0310 	add.w	r3, r4, #16
            cliPrintf("%c", asc[i]);
 8006366:	f8df b060 	ldr.w	fp, [pc, #96]	; 80063c8 <cliMemoryDump+0xd8>
 800636a:	9301      	str	r3, [sp, #4]
        for (i=0;i<4;i++)
 800636c:	f04f 0900 	mov.w	r9, #0
        memcpy((char *)asc, (char *)ascptr, 4);
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	f10d 080c 	add.w	r8, sp, #12
 8006376:	9303      	str	r3, [sp, #12]
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8006378:	f818 1b01 	ldrb.w	r1, [r8], #1
 800637c:	f1a1 0220 	sub.w	r2, r1, #32
 8006380:	2a5e      	cmp	r2, #94	; 0x5e
 8006382:	d811      	bhi.n	80063a8 <cliMemoryDump+0xb8>
            cliPrintf("%c", asc[i]);
 8006384:	4658      	mov	r0, fp
 8006386:	f7ff ff73 	bl	8006270 <cliPrintf>
        for (i=0;i<4;i++)
 800638a:	f109 0901 	add.w	r9, r9, #1
 800638e:	f1b9 0f04 	cmp.w	r9, #4
 8006392:	d1f1      	bne.n	8006378 <cliMemoryDump+0x88>
      for (idx1= 0; idx1< 4; idx1++)
 8006394:	9b01      	ldr	r3, [sp, #4]
        ascptr+=1;
 8006396:	3404      	adds	r4, #4
      for (idx1= 0; idx1< 4; idx1++)
 8006398:	429c      	cmp	r4, r3
 800639a:	d1e7      	bne.n	800636c <cliMemoryDump+0x7c>
      cliPrintf("|\n   ");
 800639c:	480b      	ldr	r0, [pc, #44]	; (80063cc <cliMemoryDump+0xdc>)
 800639e:	f7ff ff67 	bl	8006270 <cliPrintf>
    addr++;
 80063a2:	3704      	adds	r7, #4
  for (idx = 0; idx<size; idx++)
 80063a4:	3501      	adds	r5, #1
 80063a6:	e7c2      	b.n	800632e <cliMemoryDump+0x3e>
            cliPrintf(".");
 80063a8:	4650      	mov	r0, sl
 80063aa:	f7ff ff61 	bl	8006270 <cliPrintf>
 80063ae:	e7ec      	b.n	800638a <cliMemoryDump+0x9a>
 80063b0:	0800dee0 	.word	0x0800dee0
 80063b4:	0800df10 	.word	0x0800df10
 80063b8:	0800def4 	.word	0x0800def4
 80063bc:	0800defe 	.word	0x0800defe
 80063c0:	0800df06 	.word	0x0800df06
 80063c4:	0800df0d 	.word	0x0800df0d
 80063c8:	0800df0a 	.word	0x0800df0a
 80063cc:	0800df0f 	.word	0x0800df0f

080063d0 <cliMain>:
{
 80063d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (cli_node.is_open != true)
 80063d4:	4ca7      	ldr	r4, [pc, #668]	; (8006674 <cliMain+0x2a4>)
{
 80063d6:	b085      	sub	sp, #20
  if (cli_node.is_open != true)
 80063d8:	7a27      	ldrb	r7, [r4, #8]
 80063da:	2f00      	cmp	r7, #0
 80063dc:	f000 8143 	beq.w	8006666 <cliMain+0x296>
  if (uartAvailable(cli_node.ch) > 0)
 80063e0:	7820      	ldrb	r0, [r4, #0]
 80063e2:	f000 fb9f 	bl	8006b24 <uartAvailable>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	f000 813d 	beq.w	8006666 <cliMain+0x296>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 80063ec:	7820      	ldrb	r0, [r4, #0]
 80063ee:	f000 fbaf 	bl	8006b50 <uartRead>
  if (p_cli->state == CLI_RX_IDLE)
 80063f2:	f894 8010 	ldrb.w	r8, [r4, #16]
 80063f6:	f88d 0007 	strb.w	r0, [sp, #7]
 80063fa:	f1b8 0f00 	cmp.w	r8, #0
 80063fe:	f040 80ea 	bne.w	80065d6 <cliMain+0x206>
    switch(rx_data)
 8006402:	281b      	cmp	r0, #27
 8006404:	f000 812a 	beq.w	800665c <cliMain+0x28c>
 8006408:	d852      	bhi.n	80064b0 <cliMain+0xe0>
 800640a:	2808      	cmp	r0, #8
 800640c:	f000 80fa 	beq.w	8006604 <cliMain+0x234>
 8006410:	280d      	cmp	r0, #13
 8006412:	d06a      	beq.n	80064ea <cliMain+0x11a>
        if ((line->count + 1) < line->buf_len)
 8006414:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8006418:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
 800641c:	1c59      	adds	r1, r3, #1
 800641e:	4291      	cmp	r1, r2
 8006420:	f280 811e 	bge.w	8006660 <cliMain+0x290>
          if (line->cursor == line->count)
 8006424:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 8006428:	429a      	cmp	r2, r3
 800642a:	d119      	bne.n	8006460 <cliMain+0x90>
            uartWrite(p_cli->ch, &rx_data, 1);
 800642c:	2201      	movs	r2, #1
 800642e:	f10d 0107 	add.w	r1, sp, #7
 8006432:	7820      	ldrb	r0, [r4, #0]
 8006434:	f000 fba6 	bl	8006b84 <uartWrite>
            line->buf[line->cursor] = rx_data;
 8006438:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 800643c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006440:	18a3      	adds	r3, r4, r2
            line->cursor++;
 8006442:	3201      	adds	r2, #1
 8006444:	f884 2245 	strb.w	r2, [r4, #581]	; 0x245
            line->buf[line->count] = 0;
 8006448:	2200      	movs	r2, #0
            line->buf[line->cursor] = rx_data;
 800644a:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
            line->count++;
 800644e:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8006452:	3301      	adds	r3, #1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 800645a:	4423      	add	r3, r4
 800645c:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
          if (line->cursor < line->count)
 8006460:	f894 6245 	ldrb.w	r6, [r4, #581]	; 0x245
 8006464:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 8006468:	42ae      	cmp	r6, r5
 800646a:	f080 80b4 	bcs.w	80065d6 <cliMain+0x206>
            mov_len = line->count - line->cursor;
 800646e:	1baa      	subs	r2, r5, r6
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	f505 7109 	add.w	r1, r5, #548	; 0x224
 8006476:	f205 2025 	addw	r0, r5, #549	; 0x225
 800647a:	1a89      	subs	r1, r1, r2
 800647c:	1a80      	subs	r0, r0, r2
 800647e:	4421      	add	r1, r4
 8006480:	4420      	add	r0, r4
 8006482:	f004 fb37 	bl	800aaf4 <memmove>
            line->buf[line->count] = 0;
 8006486:	2100      	movs	r1, #0
            line->buf[line->cursor] = rx_data;
 8006488:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800648c:	19a3      	adds	r3, r4, r6
 800648e:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
            line->count++;
 8006492:	1c6b      	adds	r3, r5, #1
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 800649a:	4423      	add	r3, r4
            line->cursor++;
 800649c:	3601      	adds	r6, #1
            line->buf[line->count] = 0;
 800649e:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80064a2:	7820      	ldrb	r0, [r4, #0]
 80064a4:	4974      	ldr	r1, [pc, #464]	; (8006678 <cliMain+0x2a8>)
            line->cursor++;
 80064a6:	f884 6245 	strb.w	r6, [r4, #581]	; 0x245
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80064aa:	f000 fb85 	bl	8006bb8 <uartPrintf>
 80064ae:	e092      	b.n	80065d6 <cliMain+0x206>
    switch(rx_data)
 80064b0:	287f      	cmp	r0, #127	; 0x7f
 80064b2:	d1af      	bne.n	8006414 <cliMain+0x44>
        if (line->cursor < line->count)
 80064b4:	f894 0245 	ldrb.w	r0, [r4, #581]	; 0x245
 80064b8:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 80064bc:	42a8      	cmp	r0, r5
 80064be:	f080 80cf 	bcs.w	8006660 <cliMain+0x290>
          mov_len = line->count - line->cursor;
 80064c2:	1a2a      	subs	r2, r5, r0
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80064c4:	f200 2125 	addw	r1, r0, #549	; 0x225
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	f500 7009 	add.w	r0, r0, #548	; 0x224
          line->count--;
 80064ce:	3d01      	subs	r5, #1
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80064d0:	4421      	add	r1, r4
          line->count--;
 80064d2:	b2ed      	uxtb	r5, r5
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80064d4:	3a01      	subs	r2, #1
 80064d6:	4420      	add	r0, r4
 80064d8:	f004 fb0c 	bl	800aaf4 <memmove>
          line->count--;
 80064dc:	f884 5246 	strb.w	r5, [r4, #582]	; 0x246
          line->buf[line->count] = 0;
 80064e0:	4425      	add	r5, r4
          uartPrintf(p_cli->ch, "\x1B[1P");
 80064e2:	4966      	ldr	r1, [pc, #408]	; (800667c <cliMain+0x2ac>)
          line->buf[line->count] = 0;
 80064e4:	f885 8224 	strb.w	r8, [r5, #548]	; 0x224
          uartPrintf(p_cli->ch, "\x1B[1P");
 80064e8:	e072      	b.n	80065d0 <cliMain+0x200>
        if (line->count > 0)
 80064ea:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d062      	beq.n	80065b8 <cliMain+0x1e8>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 80064f2:	2323      	movs	r3, #35	; 0x23
 80064f4:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 80064f8:	f504 7509 	add.w	r5, r4, #548	; 0x224
 80064fc:	fb03 4302 	mla	r3, r3, r2, r4
 8006500:	f504 7c11 	add.w	ip, r4, #580	; 0x244
 8006504:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8006508:	462e      	mov	r6, r5
 800650a:	ce03      	ldmia	r6!, {r0, r1}
 800650c:	4566      	cmp	r6, ip
 800650e:	6018      	str	r0, [r3, #0]
 8006510:	6059      	str	r1, [r3, #4]
 8006512:	4635      	mov	r5, r6
 8006514:	f103 0308 	add.w	r3, r3, #8
 8006518:	d1f6      	bne.n	8006508 <cliMain+0x138>
 800651a:	8830      	ldrh	r0, [r6, #0]
 800651c:	78b1      	ldrb	r1, [r6, #2]
 800651e:	8018      	strh	r0, [r3, #0]
 8006520:	7099      	strb	r1, [r3, #2]
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8006522:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
  p_cli->argc = 0;
 8006526:	2600      	movs	r6, #0
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8006528:	2b03      	cmp	r3, #3
    p_cli->hist_line_count++;
 800652a:	bf9c      	itt	ls
 800652c:	3301      	addls	r3, #1
 800652e:	f884 3197 	strbls.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_new  = true;
 8006532:	2301      	movs	r3, #1
  p_cli->hist_line_i    = p_cli->hist_line_last;
 8006534:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8006538:	3201      	adds	r2, #1
 800653a:	f002 0203 	and.w	r2, r2, #3
 800653e:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8006542:	494f      	ldr	r1, [pc, #316]	; (8006680 <cliMain+0x2b0>)
 8006544:	484f      	ldr	r0, [pc, #316]	; (8006684 <cliMain+0x2b4>)
 8006546:	aa02      	add	r2, sp, #8
  p_cli->hist_line_new  = true;
 8006548:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
  p_cli->argc = 0;
 800654c:	f8a4 6112 	strh.w	r6, [r4, #274]	; 0x112
  argv[argc] = NULL;
 8006550:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8006554:	f005 f97e 	bl	800b854 <strtok_r>
 8006558:	4633      	mov	r3, r6
 800655a:	4605      	mov	r5, r0
 800655c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8006680 <cliMain+0x2b0>
 8006560:	b29a      	uxth	r2, r3
 8006562:	1c5e      	adds	r6, r3, #1
 8006564:	2d00      	cmp	r5, #0
 8006566:	d13e      	bne.n	80065e6 <cliMain+0x216>
  p_cli->argc = argc;
 8006568:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
  if (argc > 0)
 800656c:	b322      	cbz	r2, 80065b8 <cliMain+0x1e8>
    cliPrintf("\r\n");
 800656e:	4846      	ldr	r0, [pc, #280]	; (8006688 <cliMain+0x2b8>)
 8006570:	f7ff fe7e 	bl	8006270 <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 8006574:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8006578:	f7ff fd5b 	bl	8006032 <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 800657c:	4e43      	ldr	r6, [pc, #268]	; (800668c <cliMain+0x2bc>)
 800657e:	f8b4 8248 	ldrh.w	r8, [r4, #584]	; 0x248
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8006582:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
    for (int i=0; i<p_cli->cmd_count; i++)
 8006586:	4545      	cmp	r5, r8
 8006588:	da16      	bge.n	80065b8 <cliMain+0x1e8>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800658a:	4631      	mov	r1, r6
 800658c:	4648      	mov	r0, r9
 800658e:	f7fe fddf 	bl	8005150 <strcmp>
 8006592:	3614      	adds	r6, #20
 8006594:	2800      	cmp	r0, #0
 8006596:	d133      	bne.n	8006600 <cliMain+0x230>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8006598:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800659c:	483c      	ldr	r0, [pc, #240]	; (8006690 <cliMain+0x2c0>)
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800659e:	3b01      	subs	r3, #1
 80065a0:	f8a4 338c 	strh.w	r3, [r4, #908]	; 0x38c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80065a4:	2314      	movs	r3, #20
 80065a6:	fb03 4505 	mla	r5, r3, r5, r4
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80065aa:	f8c4 0390 	str.w	r0, [r4, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80065ae:	f8d5 325c 	ldr.w	r3, [r5, #604]	; 0x25c
 80065b2:	f500 701d 	add.w	r0, r0, #628	; 0x274
 80065b6:	4798      	blx	r3
        line->count = 0;
 80065b8:	2300      	movs	r3, #0
  uartPrintf(p_cli->ch, "\n\r");
 80065ba:	4936      	ldr	r1, [pc, #216]	; (8006694 <cliMain+0x2c4>)
 80065bc:	7820      	ldrb	r0, [r4, #0]
        line->count = 0;
 80065be:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
        line->cursor = 0;
 80065c2:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        line->buf[0] = 0;
 80065c6:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
  uartPrintf(p_cli->ch, "\n\r");
 80065ca:	f000 faf5 	bl	8006bb8 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80065ce:	4932      	ldr	r1, [pc, #200]	; (8006698 <cliMain+0x2c8>)
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80065d0:	7820      	ldrb	r0, [r4, #0]
 80065d2:	f000 faf1 	bl	8006bb8 <uartPrintf>
  switch(p_cli->state)
 80065d6:	7c23      	ldrb	r3, [r4, #16]
 80065d8:	3b01      	subs	r3, #1
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d840      	bhi.n	8006660 <cliMain+0x290>
 80065de:	e8df f003 	tbb	[pc, r3]
 80065e2:	463d      	.short	0x463d
 80065e4:	da5f      	.short	0xda5f
    argv[argc++] = tok;
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065ec:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80065f0:	4641      	mov	r1, r8
 80065f2:	2000      	movs	r0, #0
 80065f4:	aa02      	add	r2, sp, #8
 80065f6:	f005 f92d 	bl	800b854 <strtok_r>
 80065fa:	4633      	mov	r3, r6
 80065fc:	4605      	mov	r5, r0
 80065fe:	e7af      	b.n	8006560 <cliMain+0x190>
    for (int i=0; i<p_cli->cmd_count; i++)
 8006600:	3501      	adds	r5, #1
 8006602:	e7c0      	b.n	8006586 <cliMain+0x1b6>
        if (line->count > 0 && line->cursor > 0)
 8006604:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
        if (line->cursor < line->count)
 8006608:	f894 6245 	ldrb.w	r6, [r4, #581]	; 0x245
        if (line->count > 0 && line->cursor > 0)
 800660c:	b92b      	cbnz	r3, 800661a <cliMain+0x24a>
        if (line->cursor > 0)
 800660e:	b33e      	cbz	r6, 8006660 <cliMain+0x290>
          line->cursor--;
 8006610:	1e73      	subs	r3, r6, #1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8006612:	4922      	ldr	r1, [pc, #136]	; (800669c <cliMain+0x2cc>)
          line->cursor--;
 8006614:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8006618:	e7da      	b.n	80065d0 <cliMain+0x200>
        if (line->count > 0 && line->cursor > 0)
 800661a:	b30e      	cbz	r6, 8006660 <cliMain+0x290>
          if (line->cursor == line->count)
 800661c:	42b3      	cmp	r3, r6
 800661e:	d106      	bne.n	800662e <cliMain+0x25e>
            line->count--;
 8006620:	1e73      	subs	r3, r6, #1
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 8006628:	4423      	add	r3, r4
 800662a:	f883 8224 	strb.w	r8, [r3, #548]	; 0x224
          if (line->cursor < line->count)
 800662e:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 8006632:	42b5      	cmp	r5, r6
 8006634:	d9ec      	bls.n	8006610 <cliMain+0x240>
            mov_len = line->count - line->cursor;
 8006636:	1baa      	subs	r2, r5, r6
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8006638:	f506 7109 	add.w	r1, r6, #548	; 0x224
 800663c:	f206 2023 	addw	r0, r6, #547	; 0x223
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	4421      	add	r1, r4
 8006644:	4420      	add	r0, r4
 8006646:	f004 fa55 	bl	800aaf4 <memmove>
            line->buf[line->count] = 0;
 800664a:	2300      	movs	r3, #0
            line->count--;
 800664c:	3d01      	subs	r5, #1
 800664e:	b2ed      	uxtb	r5, r5
 8006650:	f884 5246 	strb.w	r5, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 8006654:	4425      	add	r5, r4
 8006656:	f885 3224 	strb.w	r3, [r5, #548]	; 0x224
        if (line->cursor > 0)
 800665a:	e7d9      	b.n	8006610 <cliMain+0x240>
      p_cli->state = CLI_RX_SP2;
 800665c:	2302      	movs	r3, #2
      p_cli->state = CLI_RX_IDLE;
 800665e:	7423      	strb	r3, [r4, #16]
  cliShowLog(p_cli);
 8006660:	4804      	ldr	r0, [pc, #16]	; (8006674 <cliMain+0x2a4>)
 8006662:	f7ff fda9 	bl	80061b8 <cliShowLog>
}
 8006666:	4638      	mov	r0, r7
 8006668:	b005      	add	sp, #20
 800666a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p_cli->state = CLI_RX_SP3;
 800666e:	2303      	movs	r3, #3
 8006670:	e7f5      	b.n	800665e <cliMain+0x28e>
 8006672:	bf00      	nop
 8006674:	20000394 	.word	0x20000394
 8006678:	0800df2d 	.word	0x0800df2d
 800667c:	0800df28 	.word	0x0800df28
 8006680:	0800df15 	.word	0x0800df15
 8006684:	200005b8 	.word	0x200005b8
 8006688:	0800debd 	.word	0x0800debd
 800668c:	200005e0 	.word	0x200005e0
 8006690:	200004ac 	.word	0x200004ac
 8006694:	0800df1c 	.word	0x0800df1c
 8006698:	0800df1f 	.word	0x0800df1f
 800669c:	0800df25 	.word	0x0800df25
      p_cli->state = CLI_RX_IDLE;
 80066a0:	2300      	movs	r3, #0
      if (rx_data == CLI_KEY_LEFT)
 80066a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
      p_cli->state = CLI_RX_IDLE;
 80066a6:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 80066a8:	2a44      	cmp	r2, #68	; 0x44
 80066aa:	d112      	bne.n	80066d2 <cliMain+0x302>
        if (line->cursor > 0)
 80066ac:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 80066b0:	b3ab      	cbz	r3, 800671e <cliMain+0x34e>
          line->cursor--;
 80066b2:	3b01      	subs	r3, #1
 80066b4:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
          tx_buf[0] = 0x1B;
 80066b8:	231b      	movs	r3, #27
 80066ba:	f88d 3008 	strb.w	r3, [sp, #8]
          tx_buf[1] = 0x5B;
 80066be:	235b      	movs	r3, #91	; 0x5b
          tx_buf[2] = rx_data;
 80066c0:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 80066c4:	7820      	ldrb	r0, [r4, #0]
 80066c6:	2203      	movs	r2, #3
 80066c8:	a902      	add	r1, sp, #8
          tx_buf[1] = 0x5B;
 80066ca:	f88d 3009 	strb.w	r3, [sp, #9]
          uartWrite(p_cli->ch, tx_buf, 3);
 80066ce:	f000 fa59 	bl	8006b84 <uartWrite>
      if (rx_data == CLI_KEY_RIGHT)
 80066d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066d6:	2b43      	cmp	r3, #67	; 0x43
 80066d8:	d116      	bne.n	8006708 <cliMain+0x338>
        if (line->cursor < line->buf_len)
 80066da:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 80066de:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
        uartWrite(p_cli->ch, tx_buf, 3);
 80066e2:	7820      	ldrb	r0, [r4, #0]
        if (line->cursor < line->buf_len)
 80066e4:	429a      	cmp	r2, r3
          line->cursor++;
 80066e6:	bf84      	itt	hi
 80066e8:	3301      	addhi	r3, #1
 80066ea:	f884 3245 	strbhi.w	r3, [r4, #581]	; 0x245
        tx_buf[0] = 0x1B;
 80066ee:	231b      	movs	r3, #27
 80066f0:	f88d 3008 	strb.w	r3, [sp, #8]
        tx_buf[1] = 0x5B;
 80066f4:	235b      	movs	r3, #91	; 0x5b
 80066f6:	f88d 3009 	strb.w	r3, [sp, #9]
        tx_buf[2] = rx_data;
 80066fa:	2343      	movs	r3, #67	; 0x43
        uartWrite(p_cli->ch, tx_buf, 3);
 80066fc:	2203      	movs	r2, #3
 80066fe:	a902      	add	r1, sp, #8
        tx_buf[2] = rx_data;
 8006700:	f88d 300a 	strb.w	r3, [sp, #10]
        uartWrite(p_cli->ch, tx_buf, 3);
 8006704:	f000 fa3e 	bl	8006b84 <uartWrite>
      if (rx_data == CLI_KEY_UP)
 8006708:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800670c:	2b41      	cmp	r3, #65	; 0x41
 800670e:	d106      	bne.n	800671e <cliMain+0x34e>
        cliLineChange(p_cli, true);
 8006710:	2001      	movs	r0, #1
 8006712:	f7ff fce7 	bl	80060e4 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8006716:	4921      	ldr	r1, [pc, #132]	; (800679c <cliMain+0x3cc>)
 8006718:	7820      	ldrb	r0, [r4, #0]
 800671a:	f000 fa4d 	bl	8006bb8 <uartPrintf>
      if (rx_data == CLI_KEY_DOWN)
 800671e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006722:	2b42      	cmp	r3, #66	; 0x42
 8006724:	d106      	bne.n	8006734 <cliMain+0x364>
        cliLineChange(p_cli, false);
 8006726:	2000      	movs	r0, #0
 8006728:	f7ff fcdc 	bl	80060e4 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800672c:	491b      	ldr	r1, [pc, #108]	; (800679c <cliMain+0x3cc>)
 800672e:	7820      	ldrb	r0, [r4, #0]
 8006730:	f000 fa42 	bl	8006bb8 <uartPrintf>
      if (rx_data == CLI_KEY_HOME)
 8006734:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006738:	2b31      	cmp	r3, #49	; 0x31
 800673a:	d10a      	bne.n	8006752 <cliMain+0x382>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800673c:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 8006740:	4917      	ldr	r1, [pc, #92]	; (80067a0 <cliMain+0x3d0>)
 8006742:	7820      	ldrb	r0, [r4, #0]
 8006744:	f000 fa38 	bl	8006bb8 <uartPrintf>
        line->cursor = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        p_cli->state = CLI_RX_SP4;
 800674e:	2304      	movs	r3, #4
 8006750:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_END)
 8006752:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006756:	2b34      	cmp	r3, #52	; 0x34
 8006758:	d182      	bne.n	8006660 <cliMain+0x290>
        if (line->cursor < line->count)
 800675a:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 800675e:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 8006762:	4293      	cmp	r3, r2
 8006764:	d205      	bcs.n	8006772 <cliMain+0x3a2>
          mov_len = line->count - line->cursor;
 8006766:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8006768:	490e      	ldr	r1, [pc, #56]	; (80067a4 <cliMain+0x3d4>)
 800676a:	7820      	ldrb	r0, [r4, #0]
 800676c:	b292      	uxth	r2, r2
 800676e:	f000 fa23 	bl	8006bb8 <uartPrintf>
        if (line->cursor > line->count)
 8006772:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 8006776:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 800677a:	429a      	cmp	r2, r3
 800677c:	d905      	bls.n	800678a <cliMain+0x3ba>
          mov_len = line->cursor - line->count;
 800677e:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8006780:	4907      	ldr	r1, [pc, #28]	; (80067a0 <cliMain+0x3d0>)
 8006782:	7820      	ldrb	r0, [r4, #0]
 8006784:	b292      	uxth	r2, r2
 8006786:	f000 fa17 	bl	8006bb8 <uartPrintf>
        line->cursor = line->count;
 800678a:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 800678e:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        p_cli->state = CLI_RX_SP4;
 8006792:	2304      	movs	r3, #4
 8006794:	e763      	b.n	800665e <cliMain+0x28e>
      p_cli->state = CLI_RX_IDLE;
 8006796:	2300      	movs	r3, #0
 8006798:	e761      	b.n	800665e <cliMain+0x28e>
 800679a:	bf00      	nop
 800679c:	200005b8 	.word	0x200005b8
 80067a0:	0800de23 	.word	0x0800de23
 80067a4:	0800df38 	.word	0x0800df38

080067a8 <cliKeepLoop>:
{
 80067a8:	b508      	push	{r3, lr}
  if (uartAvailable(p_cli->ch) == 0)
 80067aa:	4b04      	ldr	r3, [pc, #16]	; (80067bc <cliKeepLoop+0x14>)
 80067ac:	7818      	ldrb	r0, [r3, #0]
 80067ae:	f000 f9b9 	bl	8006b24 <uartAvailable>
}
 80067b2:	fab0 f080 	clz	r0, r0
 80067b6:	0940      	lsrs	r0, r0, #5
 80067b8:	bd08      	pop	{r3, pc}
 80067ba:	bf00      	nop
 80067bc:	20000394 	.word	0x20000394

080067c0 <cliAdd>:
{
 80067c0:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80067c2:	4d0e      	ldr	r5, [pc, #56]	; (80067fc <cliAdd+0x3c>)
{
 80067c4:	460e      	mov	r6, r1
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80067c6:	f8b5 4248 	ldrh.w	r4, [r5, #584]	; 0x248
 80067ca:	2c0f      	cmp	r4, #15
 80067cc:	d814      	bhi.n	80067f8 <cliAdd+0x38>
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80067ce:	2314      	movs	r3, #20
 80067d0:	435c      	muls	r4, r3
 80067d2:	f504 7313 	add.w	r3, r4, #588	; 0x24c
 80067d6:	442b      	add	r3, r5
 80067d8:	4601      	mov	r1, r0
  p_cli->cmd_list[index].cmd_func = p_func;
 80067da:	442c      	add	r4, r5
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80067dc:	4618      	mov	r0, r3
 80067de:	f004 f9ab 	bl	800ab38 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80067e2:	f8c4 625c 	str.w	r6, [r4, #604]	; 0x25c
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80067e6:	f7ff fc24 	bl	8006032 <cliToUpper>
  return ret;
 80067ea:	2001      	movs	r0, #1
  p_cli->cmd_count++;
 80067ec:	f8b5 3248 	ldrh.w	r3, [r5, #584]	; 0x248
 80067f0:	3301      	adds	r3, #1
 80067f2:	f8a5 3248 	strh.w	r3, [r5, #584]	; 0x248
}
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80067f8:	2000      	movs	r0, #0
 80067fa:	e7fc      	b.n	80067f6 <cliAdd+0x36>
 80067fc:	20000394 	.word	0x20000394

08006800 <cliInit>:
{
 8006800:	b508      	push	{r3, lr}
  cli_node.cmd_args.getData  = cliArgsGetData;
 8006802:	4911      	ldr	r1, [pc, #68]	; (8006848 <cliInit+0x48>)
  cli_node.is_open = false;
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <cliInit+0x4c>)
 8006806:	2200      	movs	r2, #0
  cli_node.cmd_args.getData  = cliArgsGetData;
 8006808:	f8c3 1394 	str.w	r1, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800680c:	4910      	ldr	r1, [pc, #64]	; (8006850 <cliInit+0x50>)
  cli_node.is_open = false;
 800680e:	811a      	strh	r2, [r3, #8]
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8006810:	f8c3 1398 	str.w	r1, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8006814:	490f      	ldr	r1, [pc, #60]	; (8006854 <cliInit+0x54>)
  cli_node.hist_line_new   = false;
 8006816:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800681a:	f8c3 139c 	str.w	r1, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800681e:	490e      	ldr	r1, [pc, #56]	; (8006858 <cliInit+0x58>)
  p_cli->line.buf[0]  = 0;
 8006820:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8006824:	f8c3 13a0 	str.w	r1, [r3, #928]	; 0x3a0
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8006828:	211f      	movs	r1, #31
  cliAdd("help", cliShowList);
 800682a:	480c      	ldr	r0, [pc, #48]	; (800685c <cliInit+0x5c>)
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800682c:	f8a3 1244 	strh.w	r1, [r3, #580]	; 0x244
  cliAdd("help", cliShowList);
 8006830:	490b      	ldr	r1, [pc, #44]	; (8006860 <cliInit+0x60>)
  cli_node.state   = CLI_RX_IDLE;
 8006832:	741a      	strb	r2, [r3, #16]
  p_cli->line.count   = 0;
 8006834:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  cliAdd("help", cliShowList);
 8006838:	f7ff ffc2 	bl	80067c0 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800683c:	4909      	ldr	r1, [pc, #36]	; (8006864 <cliInit+0x64>)
 800683e:	480a      	ldr	r0, [pc, #40]	; (8006868 <cliInit+0x68>)
 8006840:	f7ff ffbe 	bl	80067c0 <cliAdd>
}
 8006844:	2001      	movs	r0, #1
 8006846:	bd08      	pop	{r3, pc}
 8006848:	080060c1 	.word	0x080060c1
 800684c:	20000394 	.word	0x20000394
 8006850:	080060a1 	.word	0x080060a1
 8006854:	08006059 	.word	0x08006059
 8006858:	08006075 	.word	0x08006075
 800685c:	0800df3e 	.word	0x0800df3e
 8006860:	080062a5 	.word	0x080062a5
 8006864:	080062f1 	.word	0x080062f1
 8006868:	0800df43 	.word	0x0800df43

0800686c <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 800686c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
  {
    flash_tbl[i].addr   = (0x8000000 + i*1024);
    flash_tbl[i].length = 1024;
 8006870:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006874:	4a05      	ldr	r2, [pc, #20]	; (800688c <flashInit+0x20>)
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8006876:	4906      	ldr	r1, [pc, #24]	; (8006890 <flashInit+0x24>)
    flash_tbl[i].addr   = (0x8000000 + i*1024);
 8006878:	6013      	str	r3, [r2, #0]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800687a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687e:	428b      	cmp	r3, r1
    flash_tbl[i].length = 1024;
 8006880:	8090      	strh	r0, [r2, #4]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8006882:	f102 0208 	add.w	r2, r2, #8
 8006886:	d1f7      	bne.n	8006878 <flashInit+0xc>
  }

  return true;
}
 8006888:	2001      	movs	r0, #1
 800688a:	4770      	bx	lr
 800688c:	20000738 	.word	0x20000738
 8006890:	08010000 	.word	0x08010000

08006894 <ledOff>:
}


void ledOff(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 8006894:	2802      	cmp	r0, #2
 8006896:	d808      	bhi.n	80068aa <ledOff+0x16>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8006898:	4b04      	ldr	r3, [pc, #16]	; (80068ac <ledOff+0x18>)
 800689a:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 800689e:	79ca      	ldrb	r2, [r1, #7]
 80068a0:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80068a4:	8889      	ldrh	r1, [r1, #4]
 80068a6:	f000 bdfd 	b.w	80074a4 <HAL_GPIO_WritePin>
}
 80068aa:	4770      	bx	lr
 80068ac:	20000004 	.word	0x20000004

080068b0 <ledInit>:
{
 80068b0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b2:	2400      	movs	r4, #0
{
 80068b4:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b6:	e9cd 4402 	strd	r4, r4, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <ledInit+0x54>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068bc:	9404      	str	r4, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80068be:	699a      	ldr	r2, [r3, #24]
 80068c0:	4d11      	ldr	r5, [pc, #68]	; (8006908 <ledInit+0x58>)
 80068c2:	f042 0208 	orr.w	r2, r2, #8
 80068c6:	619a      	str	r2, [r3, #24]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068d2:	2301      	movs	r3, #1
 80068d4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068d6:	2302      	movs	r3, #2
 80068d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80068da:	88ab      	ldrh	r3, [r5, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80068dc:	a902      	add	r1, sp, #8
 80068de:	f855 0b08 	ldr.w	r0, [r5], #8
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80068e2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80068e4:	f000 fc96 	bl	8007214 <HAL_GPIO_Init>
    ledOff(i);
 80068e8:	b2e0      	uxtb	r0, r4
  for (int i=0; i<LED_MAX_CH; i++)
 80068ea:	3401      	adds	r4, #1
    ledOff(i);
 80068ec:	f7ff ffd2 	bl	8006894 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 80068f0:	2c03      	cmp	r4, #3
 80068f2:	d1f2      	bne.n	80068da <ledInit+0x2a>
  cliAdd("led", cliLed);
 80068f4:	4905      	ldr	r1, [pc, #20]	; (800690c <ledInit+0x5c>)
 80068f6:	4806      	ldr	r0, [pc, #24]	; (8006910 <ledInit+0x60>)
 80068f8:	f7ff ff62 	bl	80067c0 <cliAdd>
}
 80068fc:	2001      	movs	r0, #1
 80068fe:	b007      	add	sp, #28
 8006900:	bd30      	pop	{r4, r5, pc}
 8006902:	bf00      	nop
 8006904:	40021000 	.word	0x40021000
 8006908:	20000004 	.word	0x20000004
 800690c:	08006931 	.word	0x08006931
 8006910:	0800df46 	.word	0x0800df46

08006914 <ledToggle>:


void ledToggle(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 8006914:	2802      	cmp	r0, #2
 8006916:	d807      	bhi.n	8006928 <ledToggle+0x14>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8006918:	4b04      	ldr	r3, [pc, #16]	; (800692c <ledToggle+0x18>)
 800691a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800691e:	8891      	ldrh	r1, [r2, #4]
 8006920:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8006924:	f000 bdc3 	b.w	80074ae <HAL_GPIO_TogglePin>
}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	20000004 	.word	0x20000004

08006930 <cliLed>:

void cliLed(cli_args_t *args)
{
  bool ret = false;

  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8006930:	8803      	ldrh	r3, [r0, #0]
{
 8006932:	b570      	push	{r4, r5, r6, lr}
  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8006934:	2b03      	cmp	r3, #3
{
 8006936:	4605      	mov	r5, r0
  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8006938:	d122      	bne.n	8006980 <cliLed+0x50>
 800693a:	6943      	ldr	r3, [r0, #20]
 800693c:	4913      	ldr	r1, [pc, #76]	; (800698c <cliLed+0x5c>)
 800693e:	2000      	movs	r0, #0
 8006940:	4798      	blx	r3
 8006942:	b1e8      	cbz	r0, 8006980 <cliLed+0x50>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8006944:	68ab      	ldr	r3, [r5, #8]
 8006946:	2001      	movs	r0, #1
 8006948:	4798      	blx	r3
    toggle_time = (uint32_t)args->getData(2);
 800694a:	68ab      	ldr	r3, [r5, #8]
    led_ch      = (uint8_t)args->getData(1);
 800694c:	b2c4      	uxtb	r4, r0
    toggle_time = (uint32_t)args->getData(2);
 800694e:	2002      	movs	r0, #2
 8006950:	4798      	blx	r3
 8006952:	4606      	mov	r6, r0

    if (led_ch > 0)
 8006954:	b10c      	cbz	r4, 800695a <cliLed+0x2a>
    {
      led_ch--;
 8006956:	3c01      	subs	r4, #1
 8006958:	b2e4      	uxtb	r4, r4
    }

    pre_time = millis();
 800695a:	f7ff f9e7 	bl	8005d2c <millis>
 800695e:	4605      	mov	r5, r0
    while(cliKeepLoop())
 8006960:	f7ff ff22 	bl	80067a8 <cliKeepLoop>
 8006964:	b900      	cbnz	r0, 8006968 <cliLed+0x38>
  if (ret != true)
  {
    cliPrintf("Led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
  }

}
 8006966:	bd70      	pop	{r4, r5, r6, pc}
      if (millis()-pre_time >= toggle_time)
 8006968:	f7ff f9e0 	bl	8005d2c <millis>
 800696c:	1b40      	subs	r0, r0, r5
 800696e:	4286      	cmp	r6, r0
 8006970:	d8f6      	bhi.n	8006960 <cliLed+0x30>
        pre_time = millis();
 8006972:	f7ff f9db 	bl	8005d2c <millis>
 8006976:	4605      	mov	r5, r0
        ledToggle(led_ch);
 8006978:	4620      	mov	r0, r4
 800697a:	f7ff ffcb 	bl	8006914 <ledToggle>
 800697e:	e7ef      	b.n	8006960 <cliLed+0x30>
    cliPrintf("Led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8006980:	2103      	movs	r1, #3
}
 8006982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cliPrintf("Led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8006986:	4802      	ldr	r0, [pc, #8]	; (8006990 <cliLed+0x60>)
 8006988:	f7ff bc72 	b.w	8006270 <cliPrintf>
 800698c:	0800df4a 	.word	0x0800df4a
 8006990:	0800df51 	.word	0x0800df51

08006994 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8006994:	b508      	push	{r3, lr}
	bool ret = true;


	//만약 Reset 핀이 눌렸다면
	if (RCC->CSR & (1<<26))
 8006996:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <resetInit+0x38>)
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	015b      	lsls	r3, r3, #5
 800699c:	d50f      	bpl.n	80069be <resetInit+0x2a>
	{
	  rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 800699e:	2001      	movs	r0, #1
 80069a0:	f000 f83c 	bl	8006a1c <rtcBackupRegRead>
 80069a4:	1c41      	adds	r1, r0, #1
 80069a6:	2001      	movs	r0, #1
 80069a8:	f000 f83e 	bl	8006a28 <rtcBackupRegWrite>
	  delay(500);
 80069ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069b0:	f7ff f9ba 	bl	8005d28 <delay>
	  reset_count = rtcBackupRegRead(1);
 80069b4:	2001      	movs	r0, #1
 80069b6:	f000 f831 	bl	8006a1c <rtcBackupRegRead>
 80069ba:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <resetInit+0x3c>)
 80069bc:	6018      	str	r0, [r3, #0]
	}

	rtcBackupRegWrite(1, 0);
 80069be:	2100      	movs	r1, #0
 80069c0:	2001      	movs	r0, #1
 80069c2:	f000 f831 	bl	8006a28 <rtcBackupRegWrite>

	return ret;
}
 80069c6:	2001      	movs	r0, #1
 80069c8:	bd08      	pop	{r3, pc}
 80069ca:	bf00      	nop
 80069cc:	40021000 	.word	0x40021000
 80069d0:	20000938 	.word	0x20000938

080069d4 <rtcInit>:

bool rtcInit(void)
{
	bool ret = true;

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80069d4:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <rtcInit+0x3c>)
{
 80069d6:	b507      	push	{r0, r1, r2, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80069d8:	699a      	ldr	r2, [r3, #24]

	/** Initialize RTC Only	  */
	hrtc.Instance 			= RTC;
 80069da:	480e      	ldr	r0, [pc, #56]	; (8006a14 <rtcInit+0x40>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80069dc:	f042 0210 	orr.w	r2, r2, #16
 80069e0:	619a      	str	r2, [r3, #24]
 80069e2:	699b      	ldr	r3, [r3, #24]
	hrtc.Init.AsynchPrediv 	= RTC_AUTO_1_SECOND;
 80069e4:	4a0c      	ldr	r2, [pc, #48]	; (8006a18 <rtcInit+0x44>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80069e6:	f003 0310 	and.w	r3, r3, #16
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	9b01      	ldr	r3, [sp, #4]
	hrtc.Init.AsynchPrediv 	= RTC_AUTO_1_SECOND;
 80069ee:	f04f 33ff 	mov.w	r3, #4294967295
 80069f2:	e9c0 2300 	strd	r2, r3, [r0]
	hrtc.Init.OutPut 		= RTC_OUTPUTSOURCE_ALARM;
 80069f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069fa:	6083      	str	r3, [r0, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80069fc:	f001 ff98 	bl	8008930 <HAL_RTC_Init>
 8006a00:	b108      	cbz	r0, 8006a06 <rtcInit+0x32>
	{
	  Error_Handler();
 8006a02:	f7ff fa27 	bl	8005e54 <Error_Handler>
	}

	return ret;
}
 8006a06:	2001      	movs	r0, #1
 8006a08:	b003      	add	sp, #12
 8006a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a0e:	bf00      	nop
 8006a10:	40021000 	.word	0x40021000
 8006a14:	2000093c 	.word	0x2000093c
 8006a18:	40002800 	.word	0x40002800

08006a1c <rtcBackupRegRead>:


uint32_t rtcBackupRegRead(uint32_t index)
{
 8006a1c:	4601      	mov	r1, r0
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8006a1e:	4801      	ldr	r0, [pc, #4]	; (8006a24 <rtcBackupRegRead+0x8>)
 8006a20:	f001 bfdc 	b.w	80089dc <HAL_RTCEx_BKUPRead>
 8006a24:	2000093c 	.word	0x2000093c

08006a28 <rtcBackupRegWrite>:
}

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8006a28:	460a      	mov	r2, r1
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	4801      	ldr	r0, [pc, #4]	; (8006a34 <rtcBackupRegWrite+0xc>)
 8006a2e:	f001 bfcd 	b.w	80089cc <HAL_RTCEx_BKUPWrite>
 8006a32:	bf00      	nop
 8006a34:	2000093c 	.word	0x2000093c

08006a38 <HAL_RTC_MspInit>:
}


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006a38:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 8006a3a:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <HAL_RTC_MspInit+0x30>)
 8006a3c:	6802      	ldr	r2, [r0, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d10f      	bne.n	8006a62 <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8006a42:	f001 fba7 	bl	8008194 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8006a46:	4b09      	ldr	r3, [pc, #36]	; (8006a6c <HAL_RTC_MspInit+0x34>)
 8006a48:	69da      	ldr	r2, [r3, #28]
 8006a4a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006a4e:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006a50:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8006a5c:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <HAL_RTC_MspInit+0x38>)
 8006a5e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006a62:	b003      	add	sp, #12
 8006a64:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a68:	40002800 	.word	0x40002800
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	42420000 	.word	0x42420000

08006a74 <uartInit>:
  {
    is_open[i] = false;
  }

  return true;
}
 8006a74:	2001      	movs	r0, #1
 8006a76:	4770      	bx	lr

08006a78 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8006a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
  bool ret = false;

  switch(ch)
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d040      	beq.n	8006b00 <uartOpen+0x88>
 8006a7e:	2801      	cmp	r0, #1
 8006a80:	d140      	bne.n	8006b04 <uartOpen+0x8c>
      is_open[ch] = true;
      ret = true;
      break;

    case _DEF_UART2:
      huart1.Instance            = USART1;
 8006a82:	4d22      	ldr	r5, [pc, #136]	; (8006b0c <uartOpen+0x94>)
 8006a84:	4b22      	ldr	r3, [pc, #136]	; (8006b10 <uartOpen+0x98>)
      huart1.Init.BaudRate       = baud;
      huart1.Init.WordLength     = UART_WORDLENGTH_8B;
 8006a86:	2400      	movs	r4, #0
      huart1.Init.BaudRate       = baud;
 8006a88:	e9c5 3100 	strd	r3, r1, [r5]
      huart1.Init.StopBits       = UART_STOPBITS_1;
      huart1.Init.Parity         = UART_PARITY_NONE;
      huart1.Init.Mode           = UART_MODE_TX_RX;
 8006a8c:	230c      	movs	r3, #12
      huart1.Init.HwFlowCtl      = UART_HWCONTROL_NONE;
      huart1.Init.OverSampling   = UART_OVERSAMPLING_16;

      HAL_UART_DeInit(&huart1);

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8006a8e:	4e21      	ldr	r6, [pc, #132]	; (8006b14 <uartOpen+0x9c>)
      HAL_UART_DeInit(&huart1);
 8006a90:	4628      	mov	r0, r5
      huart1.Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 8006a92:	e9c5 3405 	strd	r3, r4, [r5, #20]
      huart1.Init.StopBits       = UART_STOPBITS_1;
 8006a96:	e9c5 4402 	strd	r4, r4, [r5, #8]
      huart1.Init.Parity         = UART_PARITY_NONE;
 8006a9a:	612c      	str	r4, [r5, #16]
      huart1.Init.OverSampling   = UART_OVERSAMPLING_16;
 8006a9c:	61ec      	str	r4, [r5, #28]
      HAL_UART_DeInit(&huart1);
 8006a9e:	f002 f84b 	bl	8008b38 <HAL_UART_DeInit>
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8006aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006aa6:	491c      	ldr	r1, [pc, #112]	; (8006b18 <uartOpen+0xa0>)
 8006aa8:	f106 0010 	add.w	r0, r6, #16
 8006aac:	f7ff fa97 	bl	8005fde <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8006ab0:	4b1a      	ldr	r3, [pc, #104]	; (8006b1c <uartOpen+0xa4>)
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006ab2:	4621      	mov	r1, r4
      __HAL_RCC_DMA1_CLK_ENABLE();
 8006ab4:	695a      	ldr	r2, [r3, #20]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006ab6:	200f      	movs	r0, #15
      __HAL_RCC_DMA1_CLK_ENABLE();
 8006ab8:	f042 0201 	orr.w	r2, r2, #1
 8006abc:	615a      	str	r2, [r3, #20]
 8006abe:	695b      	ldr	r3, [r3, #20]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006ac0:	4622      	mov	r2, r4
      __HAL_RCC_DMA1_CLK_ENABLE();
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	9b01      	ldr	r3, [sp, #4]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006aca:	f000 f9b3 	bl	8006e34 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006ace:	200f      	movs	r0, #15
 8006ad0:	f000 f9e2 	bl	8006e98 <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart1) != HAL_OK)
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f002 f801 	bl	8008adc <HAL_UART_Init>
 8006ada:	b9a8      	cbnz	r0, 8006b08 <uartOpen+0x90>
      else
      {
        ret = true;
        is_open[ch] = true;

        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8006adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	490d      	ldr	r1, [pc, #52]	; (8006b18 <uartOpen+0xa0>)
 8006ae4:	f002 fa88 	bl	8008ff8 <HAL_UART_Receive_DMA>
 8006ae8:	fab0 f080 	clz	r0, r0
        {
          //Error_Handler();
          ret = false;
        }

        qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8006aec:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <uartOpen+0xa8>)
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8006aee:	0940      	lsrs	r0, r0, #5
        qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	69b3      	ldr	r3, [r6, #24]
 8006af6:	1a9b      	subs	r3, r3, r2
        qbuffer[ch].out = qbuffer[ch].in;
 8006af8:	e9c6 3304 	strd	r3, r3, [r6, #16]

      break;
  }

  return ret;
}
 8006afc:	b002      	add	sp, #8
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
  switch(ch)
 8006b00:	2001      	movs	r0, #1
 8006b02:	e7fb      	b.n	8006afc <uartOpen+0x84>
  bool ret = false;
 8006b04:	2000      	movs	r0, #0
 8006b06:	e7f9      	b.n	8006afc <uartOpen+0x84>
        ret = false;
 8006b08:	4620      	mov	r0, r4
 8006b0a:	e7f7      	b.n	8006afc <uartOpen+0x84>
 8006b0c:	20000994 	.word	0x20000994
 8006b10:	40013800 	.word	0x40013800
 8006b14:	200009d8 	.word	0x200009d8
 8006b18:	200009f8 	.word	0x200009f8
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	20000950 	.word	0x20000950

08006b24 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
 8006b24:	b118      	cbz	r0, 8006b2e <uartAvailable+0xa>
 8006b26:	2801      	cmp	r0, #1
 8006b28:	d003      	beq.n	8006b32 <uartAvailable+0xe>
      ret = qbufferAvailable(&qbuffer[ch]);
      break;
  }

  return ret;
}
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	4770      	bx	lr
      ret = cdcAvailable();
 8006b2e:	f003 bd6d 	b.w	800a60c <cdcAvailable>
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <uartAvailable+0x24>)
 8006b34:	4805      	ldr	r0, [pc, #20]	; (8006b4c <uartAvailable+0x28>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	6983      	ldr	r3, [r0, #24]
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	f840 3f10 	str.w	r3, [r0, #16]!
      ret = qbufferAvailable(&qbuffer[ch]);
 8006b42:	f7ff ba6d 	b.w	8006020 <qbufferAvailable>
 8006b46:	bf00      	nop
 8006b48:	20000950 	.word	0x20000950
 8006b4c:	200009d8 	.word	0x200009d8

08006b50 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
  uint8_t ret  = 0;
 8006b50:	2300      	movs	r3, #0
{
 8006b52:	b507      	push	{r0, r1, r2, lr}

  switch(ch)
 8006b54:	4602      	mov	r2, r0
  uint8_t ret  = 0;
 8006b56:	f88d 3007 	strb.w	r3, [sp, #7]
  switch(ch)
 8006b5a:	b130      	cbz	r0, 8006b6a <uartRead+0x1a>
 8006b5c:	2801      	cmp	r0, #1
 8006b5e:	d009      	beq.n	8006b74 <uartRead+0x24>
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
      break;
  }

  return ret;
}
 8006b60:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006b64:	b003      	add	sp, #12
 8006b66:	f85d fb04 	ldr.w	pc, [sp], #4
      ret = cdcRead();
 8006b6a:	f003 fd61 	bl	800a630 <cdcRead>
 8006b6e:	f88d 0007 	strb.w	r0, [sp, #7]
      break;
 8006b72:	e7f5      	b.n	8006b60 <uartRead+0x10>
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8006b74:	f10d 0107 	add.w	r1, sp, #7
 8006b78:	4801      	ldr	r0, [pc, #4]	; (8006b80 <uartRead+0x30>)
 8006b7a:	f7ff fa37 	bl	8005fec <qbufferRead>
      break;
 8006b7e:	e7ef      	b.n	8006b60 <uartRead+0x10>
 8006b80:	200009e8 	.word	0x200009e8

08006b84 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8006b84:	4603      	mov	r3, r0
 8006b86:	b510      	push	{r4, lr}
 8006b88:	4608      	mov	r0, r1
 8006b8a:	4614      	mov	r4, r2
  uint32_t ret = 0;
  HAL_StatusTypeDef status;

  switch(ch)
 8006b8c:	b123      	cbz	r3, 8006b98 <uartWrite+0x14>
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d007      	beq.n	8006ba2 <uartWrite+0x1e>
 8006b92:	2400      	movs	r4, #0
      }
      break;
  }

  return ret;
}
 8006b94:	4620      	mov	r0, r4
 8006b96:	bd10      	pop	{r4, pc}
      ret = cdcWrite(p_data, length);
 8006b98:	4611      	mov	r1, r2
}
 8006b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ret = cdcWrite(p_data, length);
 8006b9e:	f003 bdd1 	b.w	800a744 <cdcWrite>
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006ba2:	2364      	movs	r3, #100	; 0x64
 8006ba4:	4803      	ldr	r0, [pc, #12]	; (8006bb4 <uartWrite+0x30>)
 8006ba6:	b292      	uxth	r2, r2
 8006ba8:	f001 ffdf 	bl	8008b6a <HAL_UART_Transmit>
  uint32_t ret = 0;
 8006bac:	2800      	cmp	r0, #0
 8006bae:	bf18      	it	ne
 8006bb0:	2400      	movne	r4, #0
 8006bb2:	e7ef      	b.n	8006b94 <uartWrite+0x10>
 8006bb4:	20000994 	.word	0x20000994

08006bb8 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8006bb8:	b40e      	push	{r1, r2, r3}
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	b0c3      	sub	sp, #268	; 0x10c
 8006bbe:	ab45      	add	r3, sp, #276	; 0x114
 8006bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc4:	4604      	mov	r4, r0
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
  len = vsnprintf(buf, 256, fmt, args);
 8006bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bca:	a802      	add	r0, sp, #8
  va_start(args, fmt);
 8006bcc:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf, 256, fmt, args);
 8006bce:	f004 feed 	bl	800b9ac <vsniprintf>

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8006bd2:	a902      	add	r1, sp, #8
  len = vsnprintf(buf, 256, fmt, args);
 8006bd4:	4602      	mov	r2, r0
  ret = uartWrite(ch, (uint8_t *)buf, len);
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f7ff ffd4 	bl	8006b84 <uartWrite>

  va_end(args);

  return ret;

}
 8006bdc:	b043      	add	sp, #268	; 0x10c
 8006bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be2:	b003      	add	sp, #12
 8006be4:	4770      	bx	lr

08006be6 <HAL_UART_ErrorCallback>:
 8006be6:	4770      	bx	lr

08006be8 <HAL_UART_RxCpltCallback>:
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8006be8:	4770      	bx	lr
	...

08006bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	4606      	mov	r6, r0
 8006bf0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf2:	2210      	movs	r2, #16
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	a802      	add	r0, sp, #8
 8006bf8:	f003 ff96 	bl	800ab28 <memset>
  if(uartHandle->Instance==USART1)
 8006bfc:	6832      	ldr	r2, [r6, #0]
 8006bfe:	4b25      	ldr	r3, [pc, #148]	; (8006c94 <HAL_UART_MspInit+0xa8>)
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d144      	bne.n	8006c8e <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c04:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8006c08:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c0a:	4823      	ldr	r0, [pc, #140]	; (8006c98 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c10:	619a      	str	r2, [r3, #24]
 8006c12:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c14:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c16:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006c1a:	9200      	str	r2, [sp, #0]
 8006c1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c1e:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c20:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c22:	f042 0204 	orr.w	r2, r2, #4
 8006c26:	619a      	str	r2, [r3, #24]
 8006c28:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c2e:	f003 0304 	and.w	r3, r3, #4
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c36:	2302      	movs	r3, #2
 8006c38:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c40:	f000 fae8 	bl	8007214 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c48:	4813      	ldr	r0, [pc, #76]	; (8006c98 <HAL_UART_MspInit+0xac>)
 8006c4a:	a902      	add	r1, sp, #8

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006c4c:	4c13      	ldr	r4, [pc, #76]	; (8006c9c <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c4e:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c52:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c54:	f000 fade 	bl	8007214 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <HAL_UART_MspInit+0xb4>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006c5a:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c5c:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c60:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c62:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006c66:	2320      	movs	r3, #32
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c68:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006c6a:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c6e:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006c70:	f000 f948 	bl	8006f04 <HAL_DMA_Init>
 8006c74:	b108      	cbz	r0, 8006c7a <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8006c76:	f7ff f8ed 	bl	8005e54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2025      	movs	r0, #37	; 0x25
 8006c7e:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006c80:	63b4      	str	r4, [r6, #56]	; 0x38
 8006c82:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c84:	f000 f8d6 	bl	8006e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006c88:	2025      	movs	r0, #37	; 0x25
 8006c8a:	f000 f905 	bl	8006e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006c8e:	b006      	add	sp, #24
 8006c90:	bd70      	pop	{r4, r5, r6, pc}
 8006c92:	bf00      	nop
 8006c94:	40013800 	.word	0x40013800
 8006c98:	40010800 	.word	0x40010800
 8006c9c:	20000950 	.word	0x20000950
 8006ca0:	40020058 	.word	0x40020058

08006ca4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 8006ca4:	6802      	ldr	r2, [r0, #0]
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <HAL_UART_MspDeInit+0x34>)
{
 8006ca8:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 8006caa:	429a      	cmp	r2, r3
{
 8006cac:	4604      	mov	r4, r0
  if(uartHandle->Instance==USART1)
 8006cae:	d111      	bne.n	8006cd4 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006cb0:	4a0a      	ldr	r2, [pc, #40]	; (8006cdc <HAL_UART_MspDeInit+0x38>)

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006cb2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 8006cb6:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006cb8:	4809      	ldr	r0, [pc, #36]	; (8006ce0 <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8006cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cbe:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006cc0:	f000 fb82 	bl	80073c8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006cc4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006cc6:	f000 f94b 	bl	8006f60 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006cce:	2025      	movs	r0, #37	; 0x25
 8006cd0:	f000 b8f0 	b.w	8006eb4 <HAL_NVIC_DisableIRQ>
}
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	bf00      	nop
 8006cd8:	40013800 	.word	0x40013800
 8006cdc:	40021000 	.word	0x40021000
 8006ce0:	40010800 	.word	0x40010800

08006ce4 <usbInit>:

#include "usb.h"
#include "usb_device.h"

bool usbInit(void)
{
 8006ce4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006ce6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8006cea:	2311      	movs	r3, #17
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cec:	2500      	movs	r5, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006cee:	e9cd 6300 	strd	r6, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cf2:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cf4:	4c0e      	ldr	r4, [pc, #56]	; (8006d30 <usbInit+0x4c>)
 8006cf6:	4669      	mov	r1, sp
 8006cf8:	4620      	mov	r0, r4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cfa:	9303      	str	r3, [sp, #12]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cfc:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cfe:	f000 fa89 	bl	8007214 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8006d02:	462a      	mov	r2, r5
 8006d04:	4631      	mov	r1, r6
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 fbcc 	bl	80074a4 <HAL_GPIO_WritePin>
	delay(200);
 8006d0c:	20c8      	movs	r0, #200	; 0xc8
 8006d0e:	f7ff f80b 	bl	8005d28 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8006d12:	2201      	movs	r2, #1
 8006d14:	4631      	mov	r1, r6
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 fbc4 	bl	80074a4 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	4669      	mov	r1, sp
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d20:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d22:	f000 fa77 	bl	8007214 <HAL_GPIO_Init>


	MX_USB_DEVICE_Init();
 8006d26:	f003 fc03 	bl	800a530 <MX_USB_DEVICE_Init>

	return ret;

}
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	b004      	add	sp, #16
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	40010800 	.word	0x40010800

08006d34 <hwInit>:




void hwInit(void)
{
 8006d34:	b508      	push	{r3, lr}
  bspInit();
 8006d36:	f7ff f849 	bl	8005dcc <bspInit>
  cliInit();
 8006d3a:	f7ff fd61 	bl	8006800 <cliInit>

  rtcInit();
 8006d3e:	f7ff fe49 	bl	80069d4 <rtcInit>
  resetInit();
 8006d42:	f7ff fe27 	bl	8006994 <resetInit>
  ledInit();
 8006d46:	f7ff fdb3 	bl	80068b0 <ledInit>
  usbInit();
 8006d4a:	f7ff ffcb 	bl	8006ce4 <usbInit>
  uartInit();
 8006d4e:	f7ff fe91 	bl	8006a74 <uartInit>
  flashInit();

}
 8006d52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flashInit();
 8006d56:	f7ff bd89 	b.w	800686c <flashInit>
	...

08006d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d5c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <HAL_InitTick+0x3c>)
{
 8006d60:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d62:	7818      	ldrb	r0, [r3, #0]
 8006d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d68:	fbb3 f3f0 	udiv	r3, r3, r0
 8006d6c:	4a0b      	ldr	r2, [pc, #44]	; (8006d9c <HAL_InitTick+0x40>)
 8006d6e:	6810      	ldr	r0, [r2, #0]
 8006d70:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d74:	f000 f8b2 	bl	8006edc <HAL_SYSTICK_Config>
 8006d78:	4604      	mov	r4, r0
 8006d7a:	b958      	cbnz	r0, 8006d94 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d7c:	2d0f      	cmp	r5, #15
 8006d7e:	d809      	bhi.n	8006d94 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d80:	4602      	mov	r2, r0
 8006d82:	4629      	mov	r1, r5
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	f000 f854 	bl	8006e34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <HAL_InitTick+0x44>)
 8006d90:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006d94:	2001      	movs	r0, #1
 8006d96:	e7fc      	b.n	8006d92 <HAL_InitTick+0x36>
 8006d98:	2000001c 	.word	0x2000001c
 8006d9c:	20000000 	.word	0x20000000
 8006da0:	20000020 	.word	0x20000020

08006da4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006da4:	4a07      	ldr	r2, [pc, #28]	; (8006dc4 <HAL_Init+0x20>)
{
 8006da6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006da8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006daa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006dac:	f043 0310 	orr.w	r3, r3, #16
 8006db0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006db2:	f000 f82d 	bl	8006e10 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8006db6:	200f      	movs	r0, #15
 8006db8:	f7ff ffd0 	bl	8006d5c <HAL_InitTick>
  HAL_MspInit();
 8006dbc:	f7ff f84c 	bl	8005e58 <HAL_MspInit>
}
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	bd08      	pop	{r3, pc}
 8006dc4:	40022000 	.word	0x40022000

08006dc8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006dc8:	4a03      	ldr	r2, [pc, #12]	; (8006dd8 <HAL_IncTick+0x10>)
 8006dca:	4b04      	ldr	r3, [pc, #16]	; (8006ddc <HAL_IncTick+0x14>)
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	440b      	add	r3, r1
 8006dd2:	6013      	str	r3, [r2, #0]
}
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000af8 	.word	0x20000af8
 8006ddc:	2000001c 	.word	0x2000001c

08006de0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006de0:	4b01      	ldr	r3, [pc, #4]	; (8006de8 <HAL_GetTick+0x8>)
 8006de2:	6818      	ldr	r0, [r3, #0]
}
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20000af8 	.word	0x20000af8

08006dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006df0:	f7ff fff6 	bl	8006de0 <HAL_GetTick>
 8006df4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006df6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006df8:	bf1e      	ittt	ne
 8006dfa:	4b04      	ldrne	r3, [pc, #16]	; (8006e0c <HAL_Delay+0x20>)
 8006dfc:	781b      	ldrbne	r3, [r3, #0]
 8006dfe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e00:	f7ff ffee 	bl	8006de0 <HAL_GetTick>
 8006e04:	1b43      	subs	r3, r0, r5
 8006e06:	42a3      	cmp	r3, r4
 8006e08:	d3fa      	bcc.n	8006e00 <HAL_Delay+0x14>
  {
  }
}
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	2000001c 	.word	0x2000001c

08006e10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e10:	4907      	ldr	r1, [pc, #28]	; (8006e30 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006e12:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e14:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e1e:	0412      	lsls	r2, r2, #16
 8006e20:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006e2c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006e2e:	4770      	bx	lr
 8006e30:	e000ed00 	.word	0xe000ed00

08006e34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e34:	4b16      	ldr	r3, [pc, #88]	; (8006e90 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e36:	b530      	push	{r4, r5, lr}
 8006e38:	68dc      	ldr	r4, [r3, #12]
 8006e3a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e3e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e42:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	bf28      	it	cs
 8006e48:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e4a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e4c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e50:	bf98      	it	ls
 8006e52:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e54:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e58:	bf88      	it	hi
 8006e5a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e5c:	ea21 0303 	bic.w	r3, r1, r3
 8006e60:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e62:	fa05 f404 	lsl.w	r4, r5, r4
 8006e66:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8006e6a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e6c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e70:	bfac      	ite	ge
 8006e72:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e76:	4a07      	ldrlt	r2, [pc, #28]	; (8006e94 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e78:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	bfab      	itete	ge
 8006e80:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e84:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e88:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e8c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006e8e:	bd30      	pop	{r4, r5, pc}
 8006e90:	e000ed00 	.word	0xe000ed00
 8006e94:	e000ed14 	.word	0xe000ed14

08006e98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	db08      	blt.n	8006eae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	0942      	lsrs	r2, r0, #5
 8006ea0:	f000 001f 	and.w	r0, r0, #31
 8006ea4:	fa03 f000 	lsl.w	r0, r3, r0
 8006ea8:	4b01      	ldr	r3, [pc, #4]	; (8006eb0 <HAL_NVIC_EnableIRQ+0x18>)
 8006eaa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006eae:	4770      	bx	lr
 8006eb0:	e000e100 	.word	0xe000e100

08006eb4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	db0d      	blt.n	8006ed4 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eb8:	2201      	movs	r2, #1
 8006eba:	0943      	lsrs	r3, r0, #5
 8006ebc:	f000 001f 	and.w	r0, r0, #31
 8006ec0:	fa02 f000 	lsl.w	r0, r2, r0
 8006ec4:	4a04      	ldr	r2, [pc, #16]	; (8006ed8 <HAL_NVIC_DisableIRQ+0x24>)
 8006ec6:	3320      	adds	r3, #32
 8006ec8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006ecc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006ed0:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	e000e100 	.word	0xe000e100

08006edc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006edc:	3801      	subs	r0, #1
 8006ede:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006ee2:	d20b      	bcs.n	8006efc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ee4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ee8:	21f0      	movs	r1, #240	; 0xf0
 8006eea:	4a05      	ldr	r2, [pc, #20]	; (8006f00 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006eec:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eee:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ef2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ef4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ef6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ef8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006efa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006efc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006efe:	4770      	bx	lr
 8006f00:	e000ed00 	.word	0xe000ed00

08006f04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f04:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006f06:	b320      	cbz	r0, 8006f52 <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f08:	2214      	movs	r2, #20
 8006f0a:	6801      	ldr	r1, [r0, #0]
 8006f0c:	4b12      	ldr	r3, [pc, #72]	; (8006f58 <HAL_DMA_Init+0x54>)
 8006f0e:	440b      	add	r3, r1
 8006f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006f18:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006f1a:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8006f1c:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006f1e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8006f22:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f24:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006f26:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f2a:	4323      	orrs	r3, r4
 8006f2c:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006f2e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f32:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f34:	6944      	ldr	r4, [r0, #20]
 8006f36:	4323      	orrs	r3, r4
 8006f38:	6984      	ldr	r4, [r0, #24]
 8006f3a:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f3c:	69c4      	ldr	r4, [r0, #28]
 8006f3e:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8006f40:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f42:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006f44:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f48:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8006f4a:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f4c:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8006f4e:	4618      	mov	r0, r3
}
 8006f50:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006f52:	2001      	movs	r0, #1
 8006f54:	e7fc      	b.n	8006f50 <HAL_DMA_Init+0x4c>
 8006f56:	bf00      	nop
 8006f58:	bffdfff8 	.word	0xbffdfff8
 8006f5c:	40020000 	.word	0x40020000

08006f60 <HAL_DMA_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006f60:	4603      	mov	r3, r0
{
 8006f62:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8006f64:	b1e8      	cbz	r0, 8006fa2 <HAL_DMA_DeInit+0x42>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006f66:	6801      	ldr	r1, [r0, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8006f68:	2000      	movs	r0, #0
  __HAL_DMA_DISABLE(hdma);
 8006f6a:	680a      	ldr	r2, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
 8006f6c:	4c0e      	ldr	r4, [pc, #56]	; (8006fa8 <HAL_DMA_DeInit+0x48>)
  __HAL_DMA_DISABLE(hdma);
 8006f6e:	f022 0201 	bic.w	r2, r2, #1
 8006f72:	600a      	str	r2, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f74:	4a0d      	ldr	r2, [pc, #52]	; (8006fac <HAL_DMA_DeInit+0x4c>)
  hdma->Instance->CCR  = 0U;
 8006f76:	6008      	str	r0, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f78:	440a      	add	r2, r1
  hdma->Instance->CNDTR = 0U;
 8006f7a:	6048      	str	r0, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8006f7c:	6088      	str	r0, [r1, #8]
  hdma->Instance->CMAR = 0U;
 8006f7e:	60c8      	str	r0, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f80:	2114      	movs	r1, #20
 8006f82:	fbb2 f2f1 	udiv	r2, r2, r1
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8006f86:	2101      	movs	r1, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f88:	0092      	lsls	r2, r2, #2
 8006f8a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8006f8c:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8006f90:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8006f92:	6062      	str	r2, [r4, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
  hdma->XferHalfCpltCallback = NULL;
 8006f94:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;
 8006f98:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f9c:	6398      	str	r0, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006f9e:	8418      	strh	r0, [r3, #32]

  return HAL_OK;
}
 8006fa0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	e7fc      	b.n	8006fa0 <HAL_DMA_DeInit+0x40>
 8006fa6:	bf00      	nop
 8006fa8:	40020000 	.word	0x40020000
 8006fac:	bffdfff8 	.word	0xbffdfff8

08006fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fb0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006fb2:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006fb6:	2c01      	cmp	r4, #1
 8006fb8:	d034      	beq.n	8007024 <HAL_DMA_Start_IT+0x74>
 8006fba:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006fbc:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8006fc0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006fc4:	42a5      	cmp	r5, r4
 8006fc6:	f04f 0600 	mov.w	r6, #0
 8006fca:	f04f 0402 	mov.w	r4, #2
 8006fce:	d127      	bne.n	8007020 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006fd0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006fd4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fd6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8006fd8:	6826      	ldr	r6, [r4, #0]
 8006fda:	f026 0601 	bic.w	r6, r6, #1
 8006fde:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006fe0:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8006fe4:	40bd      	lsls	r5, r7
 8006fe6:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006fe8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fea:	6843      	ldr	r3, [r0, #4]
 8006fec:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8006fee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ff0:	bf0b      	itete	eq
 8006ff2:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006ff4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006ff6:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006ff8:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8006ffa:	b14b      	cbz	r3, 8007010 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8007002:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007004:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	6023      	str	r3, [r4, #0]
}
 800700e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	f023 0304 	bic.w	r3, r3, #4
 8007016:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	f043 030a 	orr.w	r3, r3, #10
 800701e:	e7f0      	b.n	8007002 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8007020:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8007024:	2002      	movs	r0, #2
 8007026:	e7f2      	b.n	800700e <HAL_DMA_Start_IT+0x5e>

08007028 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007028:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800702c:	2b02      	cmp	r3, #2
 800702e:	d006      	beq.n	800703e <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007030:	2304      	movs	r3, #4
 8007032:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8007034:	2300      	movs	r3, #0
 8007036:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 800703a:	2001      	movs	r0, #1
 800703c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800703e:	6803      	ldr	r3, [r0, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	f022 020e 	bic.w	r2, r2, #14
 8007046:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007050:	2301      	movs	r3, #1
 8007052:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 8007056:	408b      	lsls	r3, r1
 8007058:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);      
 800705a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800705e:	8403      	strh	r3, [r0, #32]
  return status; 
 8007060:	2000      	movs	r0, #0
}
 8007062:	4770      	bx	lr

08007064 <HAL_DMA_Abort_IT>:
{  
 8007064:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007066:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800706a:	2b02      	cmp	r3, #2
 800706c:	d003      	beq.n	8007076 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800706e:	2304      	movs	r3, #4
 8007070:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8007072:	2001      	movs	r0, #1
}
 8007074:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007076:	6803      	ldr	r3, [r0, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	f022 020e 	bic.w	r2, r2, #14
 800707e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	f022 0201 	bic.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007088:	4a17      	ldr	r2, [pc, #92]	; (80070e8 <HAL_DMA_Abort_IT+0x84>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d01c      	beq.n	80070c8 <HAL_DMA_Abort_IT+0x64>
 800708e:	3214      	adds	r2, #20
 8007090:	4293      	cmp	r3, r2
 8007092:	d01b      	beq.n	80070cc <HAL_DMA_Abort_IT+0x68>
 8007094:	3214      	adds	r2, #20
 8007096:	4293      	cmp	r3, r2
 8007098:	d01a      	beq.n	80070d0 <HAL_DMA_Abort_IT+0x6c>
 800709a:	3214      	adds	r2, #20
 800709c:	4293      	cmp	r3, r2
 800709e:	d01a      	beq.n	80070d6 <HAL_DMA_Abort_IT+0x72>
 80070a0:	3214      	adds	r2, #20
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d01a      	beq.n	80070dc <HAL_DMA_Abort_IT+0x78>
 80070a6:	3214      	adds	r2, #20
 80070a8:	4293      	cmp	r3, r2
 80070aa:	bf0c      	ite	eq
 80070ac:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80070b0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80070b4:	4a0d      	ldr	r2, [pc, #52]	; (80070ec <HAL_DMA_Abort_IT+0x88>)
 80070b6:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80070b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070bc:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80070be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80070c0:	b17b      	cbz	r3, 80070e2 <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 80070c2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80070c4:	2000      	movs	r0, #0
 80070c6:	e7d5      	b.n	8007074 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80070c8:	2301      	movs	r3, #1
 80070ca:	e7f3      	b.n	80070b4 <HAL_DMA_Abort_IT+0x50>
 80070cc:	2310      	movs	r3, #16
 80070ce:	e7f1      	b.n	80070b4 <HAL_DMA_Abort_IT+0x50>
 80070d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070d4:	e7ee      	b.n	80070b4 <HAL_DMA_Abort_IT+0x50>
 80070d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070da:	e7eb      	b.n	80070b4 <HAL_DMA_Abort_IT+0x50>
 80070dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070e0:	e7e8      	b.n	80070b4 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80070e2:	4618      	mov	r0, r3
 80070e4:	e7c6      	b.n	8007074 <HAL_DMA_Abort_IT+0x10>
 80070e6:	bf00      	nop
 80070e8:	40020008 	.word	0x40020008
 80070ec:	40020000 	.word	0x40020000

080070f0 <HAL_DMA_IRQHandler>:
{
 80070f0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80070f2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80070f4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80070f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80070f8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80070fa:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80070fc:	4095      	lsls	r5, r2
 80070fe:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8007100:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007102:	d032      	beq.n	800716a <HAL_DMA_IRQHandler+0x7a>
 8007104:	074d      	lsls	r5, r1, #29
 8007106:	d530      	bpl.n	800716a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800710c:	bf5e      	ittt	pl
 800710e:	681a      	ldrpl	r2, [r3, #0]
 8007110:	f022 0204 	bicpl.w	r2, r2, #4
 8007114:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007116:	4a3d      	ldr	r2, [pc, #244]	; (800720c <HAL_DMA_IRQHandler+0x11c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d019      	beq.n	8007150 <HAL_DMA_IRQHandler+0x60>
 800711c:	3214      	adds	r2, #20
 800711e:	4293      	cmp	r3, r2
 8007120:	d018      	beq.n	8007154 <HAL_DMA_IRQHandler+0x64>
 8007122:	3214      	adds	r2, #20
 8007124:	4293      	cmp	r3, r2
 8007126:	d017      	beq.n	8007158 <HAL_DMA_IRQHandler+0x68>
 8007128:	3214      	adds	r2, #20
 800712a:	4293      	cmp	r3, r2
 800712c:	d017      	beq.n	800715e <HAL_DMA_IRQHandler+0x6e>
 800712e:	3214      	adds	r2, #20
 8007130:	4293      	cmp	r3, r2
 8007132:	d017      	beq.n	8007164 <HAL_DMA_IRQHandler+0x74>
 8007134:	3214      	adds	r2, #20
 8007136:	4293      	cmp	r3, r2
 8007138:	bf0c      	ite	eq
 800713a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800713e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8007142:	4a33      	ldr	r2, [pc, #204]	; (8007210 <HAL_DMA_IRQHandler+0x120>)
 8007144:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8007146:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8007148:	2b00      	cmp	r3, #0
 800714a:	d05c      	beq.n	8007206 <HAL_DMA_IRQHandler+0x116>
}
 800714c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800714e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007150:	2304      	movs	r3, #4
 8007152:	e7f6      	b.n	8007142 <HAL_DMA_IRQHandler+0x52>
 8007154:	2340      	movs	r3, #64	; 0x40
 8007156:	e7f4      	b.n	8007142 <HAL_DMA_IRQHandler+0x52>
 8007158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800715c:	e7f1      	b.n	8007142 <HAL_DMA_IRQHandler+0x52>
 800715e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007162:	e7ee      	b.n	8007142 <HAL_DMA_IRQHandler+0x52>
 8007164:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007168:	e7eb      	b.n	8007142 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800716a:	2502      	movs	r5, #2
 800716c:	4095      	lsls	r5, r2
 800716e:	4225      	tst	r5, r4
 8007170:	d035      	beq.n	80071de <HAL_DMA_IRQHandler+0xee>
 8007172:	078d      	lsls	r5, r1, #30
 8007174:	d533      	bpl.n	80071de <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	0694      	lsls	r4, r2, #26
 800717a:	d406      	bmi.n	800718a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	f022 020a 	bic.w	r2, r2, #10
 8007182:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007184:	2201      	movs	r2, #1
 8007186:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800718a:	4a20      	ldr	r2, [pc, #128]	; (800720c <HAL_DMA_IRQHandler+0x11c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d019      	beq.n	80071c4 <HAL_DMA_IRQHandler+0xd4>
 8007190:	3214      	adds	r2, #20
 8007192:	4293      	cmp	r3, r2
 8007194:	d018      	beq.n	80071c8 <HAL_DMA_IRQHandler+0xd8>
 8007196:	3214      	adds	r2, #20
 8007198:	4293      	cmp	r3, r2
 800719a:	d017      	beq.n	80071cc <HAL_DMA_IRQHandler+0xdc>
 800719c:	3214      	adds	r2, #20
 800719e:	4293      	cmp	r3, r2
 80071a0:	d017      	beq.n	80071d2 <HAL_DMA_IRQHandler+0xe2>
 80071a2:	3214      	adds	r2, #20
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d017      	beq.n	80071d8 <HAL_DMA_IRQHandler+0xe8>
 80071a8:	3214      	adds	r2, #20
 80071aa:	4293      	cmp	r3, r2
 80071ac:	bf0c      	ite	eq
 80071ae:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80071b2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80071b6:	4a16      	ldr	r2, [pc, #88]	; (8007210 <HAL_DMA_IRQHandler+0x120>)
 80071b8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80071ba:	2300      	movs	r3, #0
 80071bc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80071c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80071c2:	e7c1      	b.n	8007148 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80071c4:	2302      	movs	r3, #2
 80071c6:	e7f6      	b.n	80071b6 <HAL_DMA_IRQHandler+0xc6>
 80071c8:	2320      	movs	r3, #32
 80071ca:	e7f4      	b.n	80071b6 <HAL_DMA_IRQHandler+0xc6>
 80071cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071d0:	e7f1      	b.n	80071b6 <HAL_DMA_IRQHandler+0xc6>
 80071d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071d6:	e7ee      	b.n	80071b6 <HAL_DMA_IRQHandler+0xc6>
 80071d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071dc:	e7eb      	b.n	80071b6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80071de:	2508      	movs	r5, #8
 80071e0:	4095      	lsls	r5, r2
 80071e2:	4225      	tst	r5, r4
 80071e4:	d00f      	beq.n	8007206 <HAL_DMA_IRQHandler+0x116>
 80071e6:	0709      	lsls	r1, r1, #28
 80071e8:	d50d      	bpl.n	8007206 <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071ea:	6819      	ldr	r1, [r3, #0]
 80071ec:	f021 010e 	bic.w	r1, r1, #14
 80071f0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80071f2:	2301      	movs	r3, #1
 80071f4:	fa03 f202 	lsl.w	r2, r3, r2
 80071f8:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071fa:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80071fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007200:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8007202:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007204:	e7a0      	b.n	8007148 <HAL_DMA_IRQHandler+0x58>
}
 8007206:	bc70      	pop	{r4, r5, r6}
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40020008 	.word	0x40020008
 8007210:	40020000 	.word	0x40020000

08007214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007218:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800721a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800721c:	4f64      	ldr	r7, [pc, #400]	; (80073b0 <HAL_GPIO_Init+0x19c>)
 800721e:	4b65      	ldr	r3, [pc, #404]	; (80073b4 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8007220:	f8df c194 	ldr.w	ip, [pc, #404]	; 80073b8 <HAL_GPIO_Init+0x1a4>
 8007224:	f8df e194 	ldr.w	lr, [pc, #404]	; 80073bc <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007228:	680d      	ldr	r5, [r1, #0]
 800722a:	fa35 f406 	lsrs.w	r4, r5, r6
 800722e:	d102      	bne.n	8007236 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8007230:	b003      	add	sp, #12
 8007232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8007236:	f04f 0801 	mov.w	r8, #1
 800723a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800723e:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8007242:	ea38 0505 	bics.w	r5, r8, r5
 8007246:	d17b      	bne.n	8007340 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8007248:	684d      	ldr	r5, [r1, #4]
 800724a:	2d03      	cmp	r5, #3
 800724c:	d807      	bhi.n	800725e <HAL_GPIO_Init+0x4a>
 800724e:	3d01      	subs	r5, #1
 8007250:	2d02      	cmp	r5, #2
 8007252:	f200 8088 	bhi.w	8007366 <HAL_GPIO_Init+0x152>
 8007256:	e8df f005 	tbb	[pc, r5]
 800725a:	9b96      	.short	0x9b96
 800725c:	a1          	.byte	0xa1
 800725d:	00          	.byte	0x00
 800725e:	2d12      	cmp	r5, #18
 8007260:	f000 8099 	beq.w	8007396 <HAL_GPIO_Init+0x182>
 8007264:	d86e      	bhi.n	8007344 <HAL_GPIO_Init+0x130>
 8007266:	2d11      	cmp	r5, #17
 8007268:	f000 808f 	beq.w	800738a <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800726c:	2cff      	cmp	r4, #255	; 0xff
 800726e:	bf98      	it	ls
 8007270:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007272:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007276:	bf88      	it	hi
 8007278:	f100 0a04 	addhi.w	sl, r0, #4
 800727c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007280:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007284:	bf88      	it	hi
 8007286:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007288:	fa09 fb05 	lsl.w	fp, r9, r5
 800728c:	ea28 080b 	bic.w	r8, r8, fp
 8007290:	fa02 f505 	lsl.w	r5, r2, r5
 8007294:	ea48 0505 	orr.w	r5, r8, r5
 8007298:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800729c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80072a0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80072a4:	d04c      	beq.n	8007340 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80072a6:	69bd      	ldr	r5, [r7, #24]
 80072a8:	f026 0803 	bic.w	r8, r6, #3
 80072ac:	f045 0501 	orr.w	r5, r5, #1
 80072b0:	61bd      	str	r5, [r7, #24]
 80072b2:	69bd      	ldr	r5, [r7, #24]
 80072b4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80072b8:	f005 0501 	and.w	r5, r5, #1
 80072bc:	9501      	str	r5, [sp, #4]
 80072be:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80072c2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80072c6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80072c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80072cc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80072d0:	fa09 f90b 	lsl.w	r9, r9, fp
 80072d4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80072d8:	4d39      	ldr	r5, [pc, #228]	; (80073c0 <HAL_GPIO_Init+0x1ac>)
 80072da:	42a8      	cmp	r0, r5
 80072dc:	d062      	beq.n	80073a4 <HAL_GPIO_Init+0x190>
 80072de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80072e2:	42a8      	cmp	r0, r5
 80072e4:	d060      	beq.n	80073a8 <HAL_GPIO_Init+0x194>
 80072e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80072ea:	42a8      	cmp	r0, r5
 80072ec:	d05e      	beq.n	80073ac <HAL_GPIO_Init+0x198>
 80072ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80072f2:	42a8      	cmp	r0, r5
 80072f4:	bf0c      	ite	eq
 80072f6:	2503      	moveq	r5, #3
 80072f8:	2504      	movne	r5, #4
 80072fa:	fa05 f50b 	lsl.w	r5, r5, fp
 80072fe:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8007302:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8007306:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007308:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800730c:	bf14      	ite	ne
 800730e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007310:	43a5      	biceq	r5, r4
 8007312:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8007314:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007316:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800731a:	bf14      	ite	ne
 800731c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800731e:	43a5      	biceq	r5, r4
 8007320:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8007322:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007324:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8007328:	bf14      	ite	ne
 800732a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800732c:	43a5      	biceq	r5, r4
 800732e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8007330:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007332:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8007336:	bf14      	ite	ne
 8007338:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800733a:	ea25 0404 	biceq.w	r4, r5, r4
 800733e:	60dc      	str	r4, [r3, #12]
	position++;
 8007340:	3601      	adds	r6, #1
 8007342:	e771      	b.n	8007228 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8007344:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80073c4 <HAL_GPIO_Init+0x1b0>
 8007348:	454d      	cmp	r5, r9
 800734a:	d00c      	beq.n	8007366 <HAL_GPIO_Init+0x152>
 800734c:	d817      	bhi.n	800737e <HAL_GPIO_Init+0x16a>
 800734e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8007352:	454d      	cmp	r5, r9
 8007354:	d007      	beq.n	8007366 <HAL_GPIO_Init+0x152>
 8007356:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800735a:	454d      	cmp	r5, r9
 800735c:	d003      	beq.n	8007366 <HAL_GPIO_Init+0x152>
 800735e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8007362:	454d      	cmp	r5, r9
 8007364:	d182      	bne.n	800726c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007366:	688a      	ldr	r2, [r1, #8]
 8007368:	b1d2      	cbz	r2, 80073a0 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800736a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800736c:	bf08      	it	eq
 800736e:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007372:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8007376:	bf18      	it	ne
 8007378:	f8c0 8014 	strne.w	r8, [r0, #20]
 800737c:	e776      	b.n	800726c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800737e:	4565      	cmp	r5, ip
 8007380:	d0f1      	beq.n	8007366 <HAL_GPIO_Init+0x152>
 8007382:	4575      	cmp	r5, lr
 8007384:	e7ee      	b.n	8007364 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007386:	68ca      	ldr	r2, [r1, #12]
          break;
 8007388:	e770      	b.n	800726c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800738a:	68ca      	ldr	r2, [r1, #12]
 800738c:	3204      	adds	r2, #4
          break;
 800738e:	e76d      	b.n	800726c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007390:	68ca      	ldr	r2, [r1, #12]
 8007392:	3208      	adds	r2, #8
          break;
 8007394:	e76a      	b.n	800726c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007396:	68ca      	ldr	r2, [r1, #12]
 8007398:	320c      	adds	r2, #12
          break;
 800739a:	e767      	b.n	800726c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800739c:	2200      	movs	r2, #0
 800739e:	e765      	b.n	800726c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80073a0:	2204      	movs	r2, #4
 80073a2:	e763      	b.n	800726c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80073a4:	2500      	movs	r5, #0
 80073a6:	e7a8      	b.n	80072fa <HAL_GPIO_Init+0xe6>
 80073a8:	2501      	movs	r5, #1
 80073aa:	e7a6      	b.n	80072fa <HAL_GPIO_Init+0xe6>
 80073ac:	2502      	movs	r5, #2
 80073ae:	e7a4      	b.n	80072fa <HAL_GPIO_Init+0xe6>
 80073b0:	40021000 	.word	0x40021000
 80073b4:	40010400 	.word	0x40010400
 80073b8:	10310000 	.word	0x10310000
 80073bc:	10320000 	.word	0x10320000
 80073c0:	40010800 	.word	0x40010800
 80073c4:	10220000 	.word	0x10220000

080073c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80073c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80073cc:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 80073d0:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80073d2:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80073d6:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80073da:	eb00 030b 	add.w	r3, r0, fp
 80073de:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80073e0:	4b2e      	ldr	r3, [pc, #184]	; (800749c <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 80073e2:	fa31 f402 	lsrs.w	r4, r1, r2
 80073e6:	d102      	bne.n	80073ee <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 80073e8:	b003      	add	sp, #12
 80073ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80073ee:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 80073f2:	400f      	ands	r7, r1
 80073f4:	d049      	beq.n	800748a <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 80073f6:	f022 0403 	bic.w	r4, r2, #3
 80073fa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80073fe:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007402:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8007406:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007408:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800740c:	fa08 f90c 	lsl.w	r9, r8, ip
 8007410:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007414:	4d22      	ldr	r5, [pc, #136]	; (80074a0 <HAL_GPIO_DeInit+0xd8>)
 8007416:	42a8      	cmp	r0, r5
 8007418:	d039      	beq.n	800748e <HAL_GPIO_DeInit+0xc6>
 800741a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800741e:	42a8      	cmp	r0, r5
 8007420:	d037      	beq.n	8007492 <HAL_GPIO_DeInit+0xca>
 8007422:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007426:	42a8      	cmp	r0, r5
 8007428:	d035      	beq.n	8007496 <HAL_GPIO_DeInit+0xce>
 800742a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800742e:	42a8      	cmp	r0, r5
 8007430:	bf0c      	ite	eq
 8007432:	2503      	moveq	r5, #3
 8007434:	2504      	movne	r5, #4
 8007436:	fa05 f50c 	lsl.w	r5, r5, ip
 800743a:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800743c:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007440:	d10f      	bne.n	8007462 <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8007442:	68a5      	ldr	r5, [r4, #8]
 8007444:	ea25 0509 	bic.w	r5, r5, r9
 8007448:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800744a:	681c      	ldr	r4, [r3, #0]
 800744c:	4034      	ands	r4, r6
 800744e:	601c      	str	r4, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8007450:	685c      	ldr	r4, [r3, #4]
 8007452:	4034      	ands	r4, r6
 8007454:	605c      	str	r4, [r3, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8007456:	689c      	ldr	r4, [r3, #8]
 8007458:	4034      	ands	r4, r6
 800745a:	609c      	str	r4, [r3, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800745c:	68dc      	ldr	r4, [r3, #12]
 800745e:	4034      	ands	r4, r6
 8007460:	60dc      	str	r4, [r3, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007462:	2fff      	cmp	r7, #255	; 0xff
 8007464:	bf94      	ite	ls
 8007466:	4607      	movls	r7, r0
 8007468:	9f01      	ldrhi	r7, [sp, #4]
 800746a:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800746e:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007470:	bf88      	it	hi
 8007472:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007474:	fa08 fc04 	lsl.w	ip, r8, r4
 8007478:	ea25 050c 	bic.w	r5, r5, ip
 800747c:	fa0b f404 	lsl.w	r4, fp, r4
 8007480:	4325      	orrs	r5, r4
 8007482:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8007484:	68c4      	ldr	r4, [r0, #12]
 8007486:	4026      	ands	r6, r4
 8007488:	60c6      	str	r6, [r0, #12]
    position++;
 800748a:	3201      	adds	r2, #1
 800748c:	e7a9      	b.n	80073e2 <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800748e:	2500      	movs	r5, #0
 8007490:	e7d1      	b.n	8007436 <HAL_GPIO_DeInit+0x6e>
 8007492:	2501      	movs	r5, #1
 8007494:	e7cf      	b.n	8007436 <HAL_GPIO_DeInit+0x6e>
 8007496:	2502      	movs	r5, #2
 8007498:	e7cd      	b.n	8007436 <HAL_GPIO_DeInit+0x6e>
 800749a:	bf00      	nop
 800749c:	40010400 	.word	0x40010400
 80074a0:	40010800 	.word	0x40010800

080074a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074a4:	b10a      	cbz	r2, 80074aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80074a6:	6101      	str	r1, [r0, #16]
  }
}
 80074a8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80074aa:	0409      	lsls	r1, r1, #16
 80074ac:	e7fb      	b.n	80074a6 <HAL_GPIO_WritePin+0x2>

080074ae <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80074ae:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074b0:	ea01 0203 	and.w	r2, r1, r3
 80074b4:	ea21 0103 	bic.w	r1, r1, r3
 80074b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074bc:	6101      	str	r1, [r0, #16]
}
 80074be:	4770      	bx	lr

080074c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80074c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80074c2:	4604      	mov	r4, r0
{
 80074c4:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80074c6:	b310      	cbz	r0, 800750e <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80074c8:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80074cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80074d0:	b91b      	cbnz	r3, 80074da <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80074d2:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80074d6:	f003 f9cd 	bl	800a874 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80074da:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80074dc:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074de:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 80074e0:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80074e4:	f855 0b10 	ldr.w	r0, [r5], #16
 80074e8:	f001 fdae 	bl	8009048 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	1d27      	adds	r7, r4, #4
 80074f4:	6033      	str	r3, [r6, #0]
 80074f6:	4626      	mov	r6, r4
 80074f8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80074fc:	f856 0b10 	ldr.w	r0, [r6], #16
 8007500:	f001 fd92 	bl	8009028 <USB_CoreInit>
 8007504:	4605      	mov	r5, r0
 8007506:	b120      	cbz	r0, 8007512 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007508:	2302      	movs	r3, #2
 800750a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800750e:	2501      	movs	r5, #1
 8007510:	e04c      	b.n	80075ac <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007512:	4601      	mov	r1, r0
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	f001 fda1 	bl	800905c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800751a:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800751c:	f04f 0e01 	mov.w	lr, #1
 8007520:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007522:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007524:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8007528:	b2ca      	uxtb	r2, r1
 800752a:	4594      	cmp	ip, r2
 800752c:	f101 0101 	add.w	r1, r1, #1
 8007530:	d81b      	bhi.n	800756a <HAL_PCD_Init+0xaa>
 8007532:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007534:	2528      	movs	r5, #40	; 0x28
 8007536:	4619      	mov	r1, r3
 8007538:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800753a:	4584      	cmp	ip, r0
 800753c:	f103 0301 	add.w	r3, r3, #1
 8007540:	d820      	bhi.n	8007584 <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007542:	46ec      	mov	ip, sp
 8007544:	4635      	mov	r5, r6
 8007546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007548:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	f8cc 3000 	str.w	r3, [ip]
 8007552:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8007556:	6820      	ldr	r0, [r4, #0]
 8007558:	f001 fd82 	bl	8009060 <USB_DevInit>
 800755c:	2301      	movs	r3, #1
 800755e:	4605      	mov	r5, r0
 8007560:	b1e8      	cbz	r0, 800759e <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007562:	2202      	movs	r2, #2
 8007564:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8007568:	e7d1      	b.n	800750e <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 800756a:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 800756e:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8007572:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8007576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800757a:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800757c:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8007580:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007582:	e7d1      	b.n	8007528 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8007584:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007588:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800758c:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8007590:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007594:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007598:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800759c:	e7cc      	b.n	8007538 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 800759e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80075a2:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80075a4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80075a8:	f001 ffec 	bl	8009584 <USB_DevDisconnect>

  return HAL_OK;
}
 80075ac:	4628      	mov	r0, r5
 80075ae:	b007      	add	sp, #28
 80075b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80075b2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80075b4:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 80075b8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d010      	beq.n	80075e0 <HAL_PCD_Start+0x2e>
 80075be:	2501      	movs	r5, #1
 80075c0:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80075c4:	6800      	ldr	r0, [r0, #0]
 80075c6:	f001 fd36 	bl	8009036 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80075ca:	4629      	mov	r1, r5
 80075cc:	4620      	mov	r0, r4
 80075ce:	f003 fa5c 	bl	800aa8a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80075d2:	6820      	ldr	r0, [r4, #0]
 80075d4:	f001 ffd4 	bl	8009580 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80075d8:	2000      	movs	r0, #0
 80075da:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80075de:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80075e0:	2002      	movs	r0, #2
 80075e2:	e7fc      	b.n	80075de <HAL_PCD_Start+0x2c>

080075e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80075e4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80075e6:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 80075ea:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80075ec:	2a01      	cmp	r2, #1
 80075ee:	d00b      	beq.n	8007608 <HAL_PCD_SetAddress+0x24>
 80075f0:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80075f2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80075f6:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80075fa:	6800      	ldr	r0, [r0, #0]
 80075fc:	f001 ffba 	bl	8009574 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007600:	2000      	movs	r0, #0
 8007602:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8007606:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007608:	2002      	movs	r0, #2
 800760a:	e7fc      	b.n	8007606 <HAL_PCD_SetAddress+0x22>

0800760c <HAL_PCD_IRQHandler>:
{
 800760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	4604      	mov	r4, r0
 8007612:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8007614:	6800      	ldr	r0, [r0, #0]
 8007616:	f001 ffb7 	bl	8009588 <USB_ReadInterrupts>
 800761a:	0401      	lsls	r1, r0, #16
 800761c:	d509      	bpl.n	8007632 <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800761e:	f8df 930c 	ldr.w	r9, [pc, #780]	; 800792c <HAL_PCD_IRQHandler+0x320>
 8007622:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8007930 <HAL_PCD_IRQHandler+0x324>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007626:	6820      	ldr	r0, [r4, #0]
 8007628:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800762c:	041d      	lsls	r5, r3, #16
 800762e:	f100 80c1 	bmi.w	80077b4 <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8007632:	6820      	ldr	r0, [r4, #0]
 8007634:	f001 ffa8 	bl	8009588 <USB_ReadInterrupts>
 8007638:	0542      	lsls	r2, r0, #21
 800763a:	d50f      	bpl.n	800765c <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800763c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800763e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007640:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007648:	041b      	lsls	r3, r3, #16
 800764a:	0c1b      	lsrs	r3, r3, #16
 800764c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8007650:	f003 f94b 	bl	800a8ea <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007654:	2100      	movs	r1, #0
 8007656:	4620      	mov	r0, r4
 8007658:	f7ff ffc4 	bl	80075e4 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800765c:	6820      	ldr	r0, [r4, #0]
 800765e:	f001 ff93 	bl	8009588 <USB_ReadInterrupts>
 8007662:	0441      	lsls	r1, r0, #17
 8007664:	d508      	bpl.n	8007678 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007666:	6822      	ldr	r2, [r4, #0]
 8007668:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800766c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007670:	041b      	lsls	r3, r3, #16
 8007672:	0c1b      	lsrs	r3, r3, #16
 8007674:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8007678:	6820      	ldr	r0, [r4, #0]
 800767a:	f001 ff85 	bl	8009588 <USB_ReadInterrupts>
 800767e:	0482      	lsls	r2, r0, #18
 8007680:	d508      	bpl.n	8007694 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007682:	6822      	ldr	r2, [r4, #0]
 8007684:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	0c1b      	lsrs	r3, r3, #16
 8007690:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8007694:	6820      	ldr	r0, [r4, #0]
 8007696:	f001 ff77 	bl	8009588 <USB_ReadInterrupts>
 800769a:	04c3      	lsls	r3, r0, #19
 800769c:	d51c      	bpl.n	80076d8 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800769e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80076a0:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80076a2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80076a6:	f023 0304 	bic.w	r3, r3, #4
 80076aa:	041b      	lsls	r3, r3, #16
 80076ac:	0c1b      	lsrs	r3, r3, #16
 80076ae:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80076b2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80076b6:	f023 0308 	bic.w	r3, r3, #8
 80076ba:	041b      	lsls	r3, r3, #16
 80076bc:	0c1b      	lsrs	r3, r3, #16
 80076be:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80076c2:	f003 f935 	bl	800a930 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80076cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076d0:	041b      	lsls	r3, r3, #16
 80076d2:	0c1b      	lsrs	r3, r3, #16
 80076d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80076d8:	6820      	ldr	r0, [r4, #0]
 80076da:	f001 ff55 	bl	8009588 <USB_ReadInterrupts>
 80076de:	0507      	lsls	r7, r0, #20
 80076e0:	d546      	bpl.n	8007770 <HAL_PCD_IRQHandler+0x164>
 80076e2:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	4606      	mov	r6, r0
 80076e8:	4619      	mov	r1, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	f103 0520 	add.w	r5, r3, #32
 80076f0:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 80076f4:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80076f6:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80076fa:	d1f9      	bne.n	80076f0 <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80076fc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8007700:	b292      	uxth	r2, r2
 8007702:	f042 0201 	orr.w	r2, r2, #1
 8007706:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800770a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800770e:	f022 0201 	bic.w	r2, r2, #1
 8007712:	0412      	lsls	r2, r2, #16
 8007714:	0c12      	lsrs	r2, r2, #16
 8007716:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800771a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800771e:	0556      	lsls	r6, r2, #21
 8007720:	d5fb      	bpl.n	800771a <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007722:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8007726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800772a:	0412      	lsls	r2, r2, #16
 800772c:	0c12      	lsrs	r2, r2, #16
 800772e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8007732:	f830 2b02 	ldrh.w	r2, [r0], #2
 8007736:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 800773a:	428d      	cmp	r5, r1
 800773c:	d1f9      	bne.n	8007732 <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800773e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8007742:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007744:	b292      	uxth	r2, r2
 8007746:	f042 0208 	orr.w	r2, r2, #8
 800774a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800774e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8007752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007756:	0412      	lsls	r2, r2, #16
 8007758:	0c12      	lsrs	r2, r2, #16
 800775a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800775e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8007762:	b292      	uxth	r2, r2
 8007764:	f042 0204 	orr.w	r2, r2, #4
 8007768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800776c:	f003 f8d0 	bl	800a910 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8007770:	6820      	ldr	r0, [r4, #0]
 8007772:	f001 ff09 	bl	8009588 <USB_ReadInterrupts>
 8007776:	0582      	lsls	r2, r0, #22
 8007778:	d50b      	bpl.n	8007792 <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800777a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800777c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800777e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007782:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007786:	041b      	lsls	r3, r3, #16
 8007788:	0c1b      	lsrs	r3, r3, #16
 800778a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800778e:	f003 f8a8 	bl	800a8e2 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8007792:	6820      	ldr	r0, [r4, #0]
 8007794:	f001 fef8 	bl	8009588 <USB_ReadInterrupts>
 8007798:	05c3      	lsls	r3, r0, #23
 800779a:	d508      	bpl.n	80077ae <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800779c:	6822      	ldr	r2, [r4, #0]
 800779e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80077a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a6:	041b      	lsls	r3, r3, #16
 80077a8:	0c1b      	lsrs	r3, r3, #16
 80077aa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80077ae:	b005      	add	sp, #20
 80077b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80077b4:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 80077b8:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 80077ba:	f016 060f 	ands.w	r6, r6, #15
 80077be:	f040 80c1 	bne.w	8007944 <HAL_PCD_IRQHandler+0x338>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80077c2:	f011 0110 	ands.w	r1, r1, #16
 80077c6:	d12d      	bne.n	8007824 <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80077c8:	8803      	ldrh	r3, [r0, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	ea03 0309 	and.w	r3, r3, r9
 80077d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d4:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80077d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80077da:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80077de:	b29b      	uxth	r3, r3
 80077e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077e4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80077e8:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80077ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80077ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077f2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80077f4:	4413      	add	r3, r2
 80077f6:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80077f8:	4620      	mov	r0, r4
 80077fa:	f003 f86a 	bl	800a8d2 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80077fe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007802:	2b00      	cmp	r3, #0
 8007804:	f43f af0f 	beq.w	8007626 <HAL_PCD_IRQHandler+0x1a>
 8007808:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800780a:	2a00      	cmp	r2, #0
 800780c:	f47f af0b 	bne.w	8007626 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007810:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007814:	6821      	ldr	r1, [r4, #0]
 8007816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800781e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8007822:	e700      	b.n	8007626 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007824:	8805      	ldrh	r5, [r0, #0]
 8007826:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007828:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 800782c:	d021      	beq.n	8007872 <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800782e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007832:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8007836:	b29b      	uxth	r3, r3
 8007838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800783c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007840:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007844:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8007848:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800784c:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007850:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8007854:	f002 f93c 	bl	8009ad0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007858:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800785a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800785c:	8813      	ldrh	r3, [r2, #0]
 800785e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007862:	051b      	lsls	r3, r3, #20
 8007864:	0d1b      	lsrs	r3, r3, #20
 8007866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800786c:	f003 f822 	bl	800a8b4 <HAL_PCD_SetupStageCallback>
 8007870:	e6d9      	b.n	8007626 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007872:	041b      	lsls	r3, r3, #16
 8007874:	f57f aed7 	bpl.w	8007626 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007878:	8803      	ldrh	r3, [r0, #0]
 800787a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787e:	051b      	lsls	r3, r3, #20
 8007880:	0d1b      	lsrs	r3, r3, #20
 8007882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007886:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007888:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800788c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8007890:	b29b      	uxth	r3, r3
 8007892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007896:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800789a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800789e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078a2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80078a6:	b18b      	cbz	r3, 80078cc <HAL_PCD_IRQHandler+0x2c0>
 80078a8:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80078ac:	b171      	cbz	r1, 80078cc <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80078ae:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80078b2:	f002 f90d 	bl	8009ad0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80078b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078ba:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80078be:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80078c0:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80078c2:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80078c4:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80078c8:	f002 fffa 	bl	800a8c0 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80078cc:	6821      	ldr	r1, [r4, #0]
 80078ce:	880b      	ldrh	r3, [r1, #0]
 80078d0:	051f      	lsls	r7, r3, #20
 80078d2:	f53f aea8 	bmi.w	8007626 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80078d6:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80078da:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 80078de:	b29b      	uxth	r3, r3
 80078e0:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 80078e4:	b9cd      	cbnz	r5, 800791a <HAL_PCD_IRQHandler+0x30e>
 80078e6:	5ac2      	ldrh	r2, [r0, r3]
 80078e8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80078ec:	0412      	lsls	r2, r2, #16
 80078ee:	0c12      	lsrs	r2, r2, #16
 80078f0:	52c2      	strh	r2, [r0, r3]
 80078f2:	5ac2      	ldrh	r2, [r0, r3]
 80078f4:	b292      	uxth	r2, r2
 80078f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078fa:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80078fc:	880b      	ldrh	r3, [r1, #0]
 80078fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	041b      	lsls	r3, r3, #16
 8007908:	0c1b      	lsrs	r3, r3, #16
 800790a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800790e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	800b      	strh	r3, [r1, #0]
 8007918:	e685      	b.n	8007626 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800791a:	2d3e      	cmp	r5, #62	; 0x3e
 800791c:	d80a      	bhi.n	8007934 <HAL_PCD_IRQHandler+0x328>
 800791e:	086a      	lsrs	r2, r5, #1
 8007920:	07ee      	lsls	r6, r5, #31
 8007922:	bf48      	it	mi
 8007924:	3201      	addmi	r2, #1
 8007926:	0292      	lsls	r2, r2, #10
 8007928:	b292      	uxth	r2, r2
 800792a:	e7e6      	b.n	80078fa <HAL_PCD_IRQHandler+0x2ee>
 800792c:	ffff8f0f 	.word	0xffff8f0f
 8007930:	ffff8000 	.word	0xffff8000
 8007934:	096a      	lsrs	r2, r5, #5
 8007936:	06ed      	lsls	r5, r5, #27
 8007938:	bf08      	it	eq
 800793a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800793e:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8007942:	e7f1      	b.n	8007928 <HAL_PCD_IRQHandler+0x31c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007944:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007948:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800794a:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800794c:	f140 80ee 	bpl.w	8007b2c <HAL_PCD_IRQHandler+0x520>
        if (ep->doublebuffer == 0U)
 8007950:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007952:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8007956:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800795a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795e:	051b      	lsls	r3, r3, #20
 8007960:	0d1b      	lsrs	r3, r3, #20
 8007962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007966:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800796a:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 800796e:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8007972:	b9b3      	cbnz	r3, 80079a2 <HAL_PCD_IRQHandler+0x396>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007974:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007978:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800797c:	b29b      	uxth	r3, r3
 800797e:	3306      	adds	r3, #6
 8007980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007984:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8007988:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800798c:	2d00      	cmp	r5, #0
 800798e:	f000 80b1 	beq.w	8007af4 <HAL_PCD_IRQHandler+0x4e8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007992:	462b      	mov	r3, r5
 8007994:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007998:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800799c:	f002 f898 	bl	8009ad0 <USB_ReadPMA>
 80079a0:	e0a8      	b.n	8007af4 <HAL_PCD_IRQHandler+0x4e8>
          if (ep->type == EP_TYPE_BULK)
 80079a2:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80079a6:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 80079aa:	2a02      	cmp	r2, #2
 80079ac:	f040 8081 	bne.w	8007ab2 <HAL_PCD_IRQHandler+0x4a6>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80079b0:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80079b4:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 80079b8:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80079bc:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80079c0:	b2ad      	uxth	r5, r5
 80079c2:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80079c6:	d03b      	beq.n	8007a40 <HAL_PCD_IRQHandler+0x434>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80079c8:	44ab      	add	fp, r5
 80079ca:	f10b 0b02 	add.w	fp, fp, #2
 80079ce:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 80079d2:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 80079d6:	4295      	cmp	r5, r2
 80079d8:	d913      	bls.n	8007a02 <HAL_PCD_IRQHandler+0x3f6>
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80079e0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80079e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80079ec:	0412      	lsls	r2, r2, #16
 80079ee:	0c12      	lsrs	r2, r2, #16
 80079f0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80079f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079fc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8007a00:	e004      	b.n	8007a0c <HAL_PCD_IRQHandler+0x400>
      ep->xfer_len -= count;
 8007a02:	1b52      	subs	r2, r2, r5
 8007a04:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	d0e9      	beq.n	80079e0 <HAL_PCD_IRQHandler+0x3d4>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007a0c:	f1be 0f00 	cmp.w	lr, #0
 8007a10:	d00d      	beq.n	8007a2e <HAL_PCD_IRQHandler+0x422>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007a12:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007a16:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007a1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a1e:	0412      	lsls	r2, r2, #16
 8007a20:	0c12      	lsrs	r2, r2, #16
 8007a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a26:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007a2a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8007a2e:	2d00      	cmp	r5, #0
 8007a30:	d060      	beq.n	8007af4 <HAL_PCD_IRQHandler+0x4e8>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007a32:	2128      	movs	r1, #40	; 0x28
 8007a34:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007a38:	462b      	mov	r3, r5
 8007a3a:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8007a3e:	e7ab      	b.n	8007998 <HAL_PCD_IRQHandler+0x38c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007a40:	445d      	add	r5, fp
 8007a42:	3506      	adds	r5, #6
 8007a44:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8007a48:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8007a4c:	4295      	cmp	r5, r2
 8007a4e:	d912      	bls.n	8007a76 <HAL_PCD_IRQHandler+0x46a>
 8007a50:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007a54:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007a58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a60:	0412      	lsls	r2, r2, #16
 8007a62:	0c12      	lsrs	r2, r2, #16
 8007a64:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8007a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a70:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8007a74:	e004      	b.n	8007a80 <HAL_PCD_IRQHandler+0x474>
      ep->xfer_len -= count;
 8007a76:	1b52      	subs	r2, r2, r5
 8007a78:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	d0e9      	beq.n	8007a54 <HAL_PCD_IRQHandler+0x448>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007a80:	f1be 0f00 	cmp.w	lr, #0
 8007a84:	d10d      	bne.n	8007aa2 <HAL_PCD_IRQHandler+0x496>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007a86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007a8a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007a8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a92:	0412      	lsls	r2, r2, #16
 8007a94:	0c12      	lsrs	r2, r2, #16
 8007a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a9a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007a9e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8007aa2:	b33d      	cbz	r5, 8007af4 <HAL_PCD_IRQHandler+0x4e8>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007aa4:	2128      	movs	r1, #40	; 0x28
 8007aa6:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007aaa:	462b      	mov	r3, r5
 8007aac:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8007ab0:	e772      	b.n	8007998 <HAL_PCD_IRQHandler+0x38c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007ab2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007ab6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007aba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007abe:	0412      	lsls	r2, r2, #16
 8007ac0:	0c12      	lsrs	r2, r2, #16
 8007ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ac6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007aca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007ace:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8007ad2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007adc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007ae0:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007ae2:	d056      	beq.n	8007b92 <HAL_PCD_IRQHandler+0x586>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007ae4:	3202      	adds	r2, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8007aec:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8007af0:	2d00      	cmp	r5, #0
 8007af2:	d1a1      	bne.n	8007a38 <HAL_PCD_IRQHandler+0x42c>
        ep->xfer_count += count;
 8007af4:	2128      	movs	r1, #40	; 0x28
 8007af6:	4371      	muls	r1, r6
 8007af8:	1863      	adds	r3, r4, r1
 8007afa:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8007afe:	442a      	add	r2, r5
 8007b00:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8007b04:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8007b08:	442a      	add	r2, r5
 8007b0a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007b0e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8007b12:	b11a      	cbz	r2, 8007b1c <HAL_PCD_IRQHandler+0x510>
 8007b14:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007b18:	429d      	cmp	r5, r3
 8007b1a:	d243      	bcs.n	8007ba4 <HAL_PCD_IRQHandler+0x598>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007b1c:	2328      	movs	r3, #40	; 0x28
 8007b1e:	fb03 4306 	mla	r3, r3, r6, r4
 8007b22:	4620      	mov	r0, r4
 8007b24:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8007b28:	f002 feca 	bl	800a8c0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007b2c:	063a      	lsls	r2, r7, #24
 8007b2e:	f57f ad7a 	bpl.w	8007626 <HAL_PCD_IRQHandler+0x1a>
 8007b32:	2528      	movs	r5, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	fb05 4506 	mla	r5, r5, r6, r4
 8007b3a:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	ea03 0309 	and.w	r3, r3, r9
 8007b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b48:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007b4c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8007b50:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d004      	beq.n	8007b62 <HAL_PCD_IRQHandler+0x556>
 8007b58:	b11b      	cbz	r3, 8007b62 <HAL_PCD_IRQHandler+0x556>
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d13a      	bne.n	8007bd4 <HAL_PCD_IRQHandler+0x5c8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007b5e:	05fb      	lsls	r3, r7, #23
 8007b60:	d438      	bmi.n	8007bd4 <HAL_PCD_IRQHandler+0x5c8>
          if (ep->xfer_len > TxByteNbre)
 8007b62:	2528      	movs	r5, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007b64:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 8007b68:	fb05 4206 	mla	r2, r5, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3302      	adds	r3, #2
 8007b70:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007b74:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007b78:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8007b7c:	6c17      	ldr	r7, [r2, #64]	; 0x40
 8007b7e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007b82:	4567      	cmp	r7, ip
 8007b84:	d815      	bhi.n	8007bb2 <HAL_PCD_IRQHandler+0x5a6>
 8007b86:	2300      	movs	r3, #0
 8007b88:	6413      	str	r3, [r2, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f002 fea1 	bl	800a8d2 <HAL_PCD_DataInStageCallback>
 8007b90:	e549      	b.n	8007626 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007b92:	3206      	adds	r2, #6
 8007b94:	4413      	add	r3, r2
 8007b96:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8007b9a:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8007b9e:	2d00      	cmp	r5, #0
 8007ba0:	d0a8      	beq.n	8007af4 <HAL_PCD_IRQHandler+0x4e8>
 8007ba2:	e782      	b.n	8007aaa <HAL_PCD_IRQHandler+0x49e>
        ep = &hpcd->OUT_ep[epindex];
 8007ba4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8007ba8:	6820      	ldr	r0, [r4, #0]
 8007baa:	4421      	add	r1, r4
 8007bac:	f001 fd02 	bl	80095b4 <USB_EPStartXfer>
 8007bb0:	e7bc      	b.n	8007b2c <HAL_PCD_IRQHandler+0x520>
            ep->xfer_len -= TxByteNbre;
 8007bb2:	eba7 070c 	sub.w	r7, r7, ip
 8007bb6:	6417      	str	r7, [r2, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8007bb8:	2f00      	cmp	r7, #0
 8007bba:	d0e6      	beq.n	8007b8a <HAL_PCD_IRQHandler+0x57e>
        ep = &hpcd->IN_ep[epindex];
 8007bbc:	fb06 5505 	mla	r5, r6, r5, r5
            ep->xfer_buff += TxByteNbre;
 8007bc0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8007bc2:	6c53      	ldr	r3, [r2, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8007bc4:	4461      	add	r1, ip
            ep->xfer_count += TxByteNbre;
 8007bc6:	4463      	add	r3, ip
            ep->xfer_buff += TxByteNbre;
 8007bc8:	63d1      	str	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8007bca:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007bcc:	1961      	adds	r1, r4, r5
 8007bce:	f001 fcf1 	bl	80095b4 <USB_EPStartXfer>
 8007bd2:	e528      	b.n	8007626 <HAL_PCD_IRQHandler+0x1a>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);

    if (ep->xfer_len > TxByteNbre)
 8007bd4:	2328      	movs	r3, #40	; 0x28
 8007bd6:	fb03 4306 	mla	r3, r3, r6, r4
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007bda:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8007bde:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8007be2:	fa1f fc8c 	uxth.w	ip, ip
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007be6:	f017 0240 	ands.w	r2, r7, #64	; 0x40
    if (ep->xfer_len > TxByteNbre)
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007bf0:	44d4      	add	ip, sl
 8007bf2:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007bf6:	f000 80e4 	beq.w	8007dc2 <HAL_PCD_IRQHandler+0x7b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007bfa:	f10c 0c02 	add.w	ip, ip, #2
 8007bfe:	f83e c01c 	ldrh.w	ip, [lr, ip, lsl #1]
 8007c02:	2228      	movs	r2, #40	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8007c04:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007c08:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8007c0a:	bf28      	it	cs
 8007c0c:	2300      	movcs	r3, #0
 8007c0e:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 8007c12:	bf38      	it	cc
 8007c14:	eba3 030c 	subcc.w	r3, r3, ip
 8007c18:	6413      	str	r3, [r2, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007c1a:	b2bf      	uxth	r7, r7
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d151      	bne.n	8007cc4 <HAL_PCD_IRQHandler+0x6b8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c20:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8007c24:	2a00      	cmp	r2, #0
 8007c26:	d13a      	bne.n	8007c9e <HAL_PCD_IRQHandler+0x692>
 8007c28:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8007c2c:	010b      	lsls	r3, r1, #4
 8007c2e:	b2b2      	uxth	r2, r6
 8007c30:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8007c34:	4416      	add	r6, r2
 8007c36:	5af2      	ldrh	r2, [r6, r3]
 8007c38:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007c3c:	0412      	lsls	r2, r2, #16
 8007c3e:	0c12      	lsrs	r2, r2, #16
 8007c40:	52f2      	strh	r2, [r6, r3]
 8007c42:	5af2      	ldrh	r2, [r6, r3]
 8007c44:	b292      	uxth	r2, r2
 8007c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c4a:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c4c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007c50:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8007c54:	b292      	uxth	r2, r2
 8007c56:	4410      	add	r0, r2
 8007c58:	5ac2      	ldrh	r2, [r0, r3]
 8007c5a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007c5e:	0412      	lsls	r2, r2, #16
 8007c60:	0c12      	lsrs	r2, r2, #16
 8007c62:	52c2      	strh	r2, [r0, r3]
 8007c64:	5ac2      	ldrh	r2, [r0, r3]
 8007c66:	b292      	uxth	r2, r2
 8007c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c6c:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f002 fe2f 	bl	800a8d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007c74:	2f00      	cmp	r7, #0
 8007c76:	f000 80e2 	beq.w	8007e3e <HAL_PCD_IRQHandler+0x832>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007c7a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8007c7e:	6822      	ldr	r2, [r4, #0]
 8007c80:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8c:	041b      	lsls	r3, r3, #16
 8007c8e:	0c1b      	lsrs	r3, r3, #16
 8007c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c98:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8007c9c:	e0cf      	b.n	8007e3e <HAL_PCD_IRQHandler+0x832>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c9e:	2a01      	cmp	r2, #1
 8007ca0:	d1e5      	bne.n	8007c6e <HAL_PCD_IRQHandler+0x662>
 8007ca2:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8007ca6:	010a      	lsls	r2, r1, #4
 8007ca8:	fa1f fc86 	uxth.w	ip, r6
 8007cac:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8007cb0:	4466      	add	r6, ip
 8007cb2:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007cb4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8007cb8:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8007cbc:	b2b6      	uxth	r6, r6
 8007cbe:	4430      	add	r0, r6
 8007cc0:	5283      	strh	r3, [r0, r2]
 8007cc2:	e7d4      	b.n	8007c6e <HAL_PCD_IRQHandler+0x662>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007cc4:	b16f      	cbz	r7, 8007ce2 <HAL_PCD_IRQHandler+0x6d6>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007cc6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd2:	041b      	lsls	r3, r3, #16
 8007cd4:	0c1b      	lsrs	r3, r3, #16
 8007cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cde:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007ce2:	2328      	movs	r3, #40	; 0x28
 8007ce4:	fb03 4306 	mla	r3, r3, r6, r4
 8007ce8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8007cec:	2a01      	cmp	r2, #1
 8007cee:	f040 80a6 	bne.w	8007e3e <HAL_PCD_IRQHandler+0x832>
        ep->xfer_buff += TxByteNbre;
 8007cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8007cf4:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 8007cf8:	eb02 070c 	add.w	r7, r2, ip
        ep->xfer_count += TxByteNbre;
 8007cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8007cfe:	63df      	str	r7, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8007d00:	4462      	add	r2, ip
 8007d02:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8007d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d06:	4596      	cmp	lr, r2
 8007d08:	d329      	bcc.n	8007d5e <HAL_PCD_IRQHandler+0x752>
          ep->xfer_len_db -= len;
 8007d0a:	ebae 0e02 	sub.w	lr, lr, r2
 8007d0e:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007d12:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 8007d16:	b293      	uxth	r3, r2
 8007d18:	f1bc 0f00 	cmp.w	ip, #0
 8007d1c:	d144      	bne.n	8007da8 <HAL_PCD_IRQHandler+0x79c>
 8007d1e:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8007d22:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 8007d26:	fa1f fc8c 	uxth.w	ip, ip
 8007d2a:	44f4      	add	ip, lr
 8007d2c:	0109      	lsls	r1, r1, #4
 8007d2e:	bb1a      	cbnz	r2, 8007d78 <HAL_PCD_IRQHandler+0x76c>
 8007d30:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8007d34:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007d38:	0412      	lsls	r2, r2, #16
 8007d3a:	0c12      	lsrs	r2, r2, #16
 8007d3c:	f82c 2001 	strh.w	r2, [ip, r1]
 8007d40:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8007d44:	b292      	uxth	r2, r2
 8007d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d4a:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007d4e:	2128      	movs	r1, #40	; 0x28
 8007d50:	fb01 4606 	mla	r6, r1, r6, r4
 8007d54:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007d56:	4639      	mov	r1, r7
 8007d58:	f001 fc1c 	bl	8009594 <USB_WritePMA>
 8007d5c:	e06f      	b.n	8007e3e <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 8007d5e:	f1be 0f00 	cmp.w	lr, #0
 8007d62:	d103      	bne.n	8007d6c <HAL_PCD_IRQHandler+0x760>
    if (ep->xfer_len > TxByteNbre)
 8007d64:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8007d66:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
 8007d6a:	e7d2      	b.n	8007d12 <HAL_PCD_IRQHandler+0x706>
          ep->xfer_fill_db = 0U;
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8007d72:	649a      	str	r2, [r3, #72]	; 0x48
 8007d74:	4672      	mov	r2, lr
 8007d76:	e7cc      	b.n	8007d12 <HAL_PCD_IRQHandler+0x706>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007d78:	2a3e      	cmp	r2, #62	; 0x3e
 8007d7a:	d80c      	bhi.n	8007d96 <HAL_PCD_IRQHandler+0x78a>
 8007d7c:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8007d80:	07d2      	lsls	r2, r2, #31
 8007d82:	bf48      	it	mi
 8007d84:	f10e 0e01 	addmi.w	lr, lr, #1
 8007d88:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8007d8c:	fa1f fe8e 	uxth.w	lr, lr
 8007d90:	f82c e001 	strh.w	lr, [ip, r1]
 8007d94:	e7db      	b.n	8007d4e <HAL_PCD_IRQHandler+0x742>
 8007d96:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8007d9a:	06d2      	lsls	r2, r2, #27
 8007d9c:	bf08      	it	eq
 8007d9e:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8007da2:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8007da6:	e7f1      	b.n	8007d8c <HAL_PCD_IRQHandler+0x780>
 8007da8:	f1bc 0f01 	cmp.w	ip, #1
 8007dac:	d1cf      	bne.n	8007d4e <HAL_PCD_IRQHandler+0x742>
 8007dae:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007db2:	0109      	lsls	r1, r1, #4
 8007db4:	fa1f fc82 	uxth.w	ip, r2
 8007db8:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8007dbc:	4462      	add	r2, ip
 8007dbe:	5253      	strh	r3, [r2, r1]
 8007dc0:	e7c5      	b.n	8007d4e <HAL_PCD_IRQHandler+0x742>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007dc2:	f10c 0c06 	add.w	ip, ip, #6
 8007dc6:	f83e c01c 	ldrh.w	ip, [lr, ip, lsl #1]
 8007dca:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxByteNbre)
 8007dcc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007dd0:	459c      	cmp	ip, r3
      ep->xfer_len -= TxByteNbre;
 8007dd2:	bf98      	it	ls
 8007dd4:	eba3 020c 	subls.w	r2, r3, ip
 8007dd8:	2328      	movs	r3, #40	; 0x28
 8007dda:	fb03 4306 	mla	r3, r3, r6, r4
 8007dde:	641a      	str	r2, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d152      	bne.n	8007e8a <HAL_PCD_IRQHandler+0x87e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007de4:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d13c      	bne.n	8007e66 <HAL_PCD_IRQHandler+0x85a>
 8007dec:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8007df0:	010b      	lsls	r3, r1, #4
 8007df2:	b2b2      	uxth	r2, r6
 8007df4:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8007df8:	4416      	add	r6, r2
 8007dfa:	5af2      	ldrh	r2, [r6, r3]
 8007dfc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007e00:	0412      	lsls	r2, r2, #16
 8007e02:	0c12      	lsrs	r2, r2, #16
 8007e04:	52f2      	strh	r2, [r6, r3]
 8007e06:	5af2      	ldrh	r2, [r6, r3]
 8007e08:	b292      	uxth	r2, r2
 8007e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e0e:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e10:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007e14:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8007e18:	b292      	uxth	r2, r2
 8007e1a:	4410      	add	r0, r2
 8007e1c:	5ac2      	ldrh	r2, [r0, r3]
 8007e1e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007e22:	0412      	lsls	r2, r2, #16
 8007e24:	0c12      	lsrs	r2, r2, #16
 8007e26:	52c2      	strh	r2, [r0, r3]
 8007e28:	5ac2      	ldrh	r2, [r0, r3]
 8007e2a:	b292      	uxth	r2, r2
 8007e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e30:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e32:	4620      	mov	r0, r4
 8007e34:	f002 fd4d 	bl	800a8d2 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007e38:	2f00      	cmp	r7, #0
 8007e3a:	f43f af1e 	beq.w	8007c7a <HAL_PCD_IRQHandler+0x66e>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007e3e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8007e42:	6822      	ldr	r2, [r4, #0]
 8007e44:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e52:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8007e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e5e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8007e62:	f7ff bbe0 	b.w	8007626 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d1e3      	bne.n	8007e32 <HAL_PCD_IRQHandler+0x826>
 8007e6a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8007e6e:	010b      	lsls	r3, r1, #4
 8007e70:	fa1f fc86 	uxth.w	ip, r6
 8007e74:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8007e78:	4466      	add	r6, ip
 8007e7a:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e7c:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8007e80:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8007e84:	b2b6      	uxth	r6, r6
 8007e86:	4430      	add	r0, r6
 8007e88:	e7d2      	b.n	8007e30 <HAL_PCD_IRQHandler+0x824>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007e8a:	b96f      	cbnz	r7, 8007ea8 <HAL_PCD_IRQHandler+0x89c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007e8c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8007e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e98:	041b      	lsls	r3, r3, #16
 8007e9a:	0c1b      	lsrs	r3, r3, #16
 8007e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007ea8:	2228      	movs	r2, #40	; 0x28
 8007eaa:	fb02 4206 	mla	r2, r2, r6, r4
 8007eae:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d1c3      	bne.n	8007e3e <HAL_PCD_IRQHandler+0x832>
        ep->xfer_count += TxByteNbre;
 8007eb6:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8007eb8:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8007eba:	4463      	add	r3, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8007ebc:	f8d2 e048 	ldr.w	lr, [r2, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8007ec0:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8007ec2:	6b93      	ldr	r3, [r2, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8007ec4:	4467      	add	r7, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8007ec6:	459e      	cmp	lr, r3
        ep->xfer_buff += TxByteNbre;
 8007ec8:	63d7      	str	r7, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8007eca:	d322      	bcc.n	8007f12 <HAL_PCD_IRQHandler+0x906>
          ep->xfer_len_db -= len;
 8007ecc:	ebae 0e03 	sub.w	lr, lr, r3
 8007ed0:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007ed4:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8007ed8:	fa1f fc83 	uxth.w	ip, r3
 8007edc:	2a00      	cmp	r2, #0
 8007ede:	d13d      	bne.n	8007f5c <HAL_PCD_IRQHandler+0x950>
 8007ee0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007ee4:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 8007ee8:	b292      	uxth	r2, r2
 8007eea:	4472      	add	r2, lr
 8007eec:	0109      	lsls	r1, r1, #4
 8007eee:	b9eb      	cbnz	r3, 8007f2c <HAL_PCD_IRQHandler+0x920>
 8007ef0:	5a53      	ldrh	r3, [r2, r1]
 8007ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ef6:	041b      	lsls	r3, r3, #16
 8007ef8:	0c1b      	lsrs	r3, r3, #16
 8007efa:	5253      	strh	r3, [r2, r1]
 8007efc:	5a53      	ldrh	r3, [r2, r1]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f04:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007f06:	2128      	movs	r1, #40	; 0x28
 8007f08:	fb01 4606 	mla	r6, r1, r6, r4
 8007f0c:	4663      	mov	r3, ip
 8007f0e:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8007f10:	e721      	b.n	8007d56 <HAL_PCD_IRQHandler+0x74a>
        else if (ep->xfer_len_db == 0U)
 8007f12:	f1be 0f00 	cmp.w	lr, #0
 8007f16:	d103      	bne.n	8007f20 <HAL_PCD_IRQHandler+0x914>
    if (ep->xfer_len >= TxByteNbre)
 8007f18:	4663      	mov	r3, ip
          ep->xfer_fill_db = 0U;
 8007f1a:	f882 e04c 	strb.w	lr, [r2, #76]	; 0x4c
 8007f1e:	e7d9      	b.n	8007ed4 <HAL_PCD_IRQHandler+0x8c8>
          ep->xfer_len_db = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	6493      	str	r3, [r2, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8007f24:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
 8007f28:	4673      	mov	r3, lr
 8007f2a:	e7d3      	b.n	8007ed4 <HAL_PCD_IRQHandler+0x8c8>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f2e:	d80c      	bhi.n	8007f4a <HAL_PCD_IRQHandler+0x93e>
 8007f30:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8007f34:	07db      	lsls	r3, r3, #31
 8007f36:	bf48      	it	mi
 8007f38:	f10e 0e01 	addmi.w	lr, lr, #1
 8007f3c:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8007f40:	fa1f fe8e 	uxth.w	lr, lr
 8007f44:	f822 e001 	strh.w	lr, [r2, r1]
 8007f48:	e7dd      	b.n	8007f06 <HAL_PCD_IRQHandler+0x8fa>
 8007f4a:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8007f4e:	06db      	lsls	r3, r3, #27
 8007f50:	bf08      	it	eq
 8007f52:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8007f56:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8007f5a:	e7f1      	b.n	8007f40 <HAL_PCD_IRQHandler+0x934>
 8007f5c:	2a01      	cmp	r2, #1
 8007f5e:	d1d2      	bne.n	8007f06 <HAL_PCD_IRQHandler+0x8fa>
 8007f60:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8007f6a:	4413      	add	r3, r2
 8007f6c:	010a      	lsls	r2, r1, #4
 8007f6e:	f823 c002 	strh.w	ip, [r3, r2]
 8007f72:	e7c8      	b.n	8007f06 <HAL_PCD_IRQHandler+0x8fa>

08007f74 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007f74:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	f04f 0428 	mov.w	r4, #40	; 0x28
 8007f80:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8007f84:	d01c      	beq.n	8007fc0 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 8007f86:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f88:	fb00 4104 	mla	r1, r0, r4, r4
 8007f8c:	4429      	add	r1, r5
    ep->is_in = 1U;
 8007f8e:	704e      	strb	r6, [r1, #1]
  ep->maxpacket = ep_mps;
 8007f90:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8007f92:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f94:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8007f96:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007f98:	b102      	cbz	r2, 8007f9c <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8007f9a:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8007f9c:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8007f9e:	bf04      	itt	eq
 8007fa0:	2300      	moveq	r3, #0
 8007fa2:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8007fa4:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d012      	beq.n	8007fd2 <HAL_PCD_EP_Open+0x5e>
 8007fac:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007fae:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8007fb0:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007fb4:	f001 f868 	bl	8009088 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8007fc0:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fc2:	4344      	muls	r4, r0
 8007fc4:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8007fc8:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fca:	4429      	add	r1, r5
    ep->is_in = 0U;
 8007fcc:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8007fd0:	e7de      	b.n	8007f90 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8007fd2:	2002      	movs	r0, #2
 8007fd4:	e7f3      	b.n	8007fbe <HAL_PCD_EP_Open+0x4a>

08007fd6 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007fd6:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8007fda:	b510      	push	{r4, lr}
 8007fdc:	f04f 0328 	mov.w	r3, #40	; 0x28
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8007fe6:	d013      	beq.n	8008010 <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fe8:	fb02 3103 	mla	r1, r2, r3, r3
 8007fec:	4401      	add	r1, r0
    ep->is_in = 1U;
 8007fee:	2001      	movs	r0, #1
 8007ff0:	7048      	strb	r0, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007ff2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007ff4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d012      	beq.n	8008022 <HAL_PCD_EP_Close+0x4c>
 8007ffc:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ffe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008000:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008004:	f001 f97c 	bl	8009300 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008008:	2000      	movs	r0, #0
 800800a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800800e:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008010:	4353      	muls	r3, r2
 8008012:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8008016:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008018:	4403      	add	r3, r0
 800801a:	2000      	movs	r0, #0
 800801c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8008020:	e7e7      	b.n	8007ff2 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8008022:	2002      	movs	r0, #2
 8008024:	e7f3      	b.n	800800e <HAL_PCD_EP_Close+0x38>

08008026 <HAL_PCD_EP_Receive>:
{
 8008026:	b570      	push	{r4, r5, r6, lr}
 8008028:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 800802c:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 800802e:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8008030:	4369      	muls	r1, r5
 8008032:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008034:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008038:	4401      	add	r1, r0
  ep->xfer_len = len;
 800803a:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 800803e:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8008042:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8008046:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800804a:	6800      	ldr	r0, [r0, #0]
 800804c:	f001 fab2 	bl	80095b4 <USB_EPStartXfer>
}
 8008050:	4630      	mov	r0, r6
 8008052:	bd70      	pop	{r4, r5, r6, pc}

08008054 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008054:	2328      	movs	r3, #40	; 0x28
 8008056:	f001 0107 	and.w	r1, r1, #7
 800805a:	fb03 0001 	mla	r0, r3, r1, r0
}
 800805e:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8008062:	4770      	bx	lr

08008064 <HAL_PCD_EP_Transmit>:
{
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 800806a:	2128      	movs	r1, #40	; 0x28
 800806c:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8008070:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8008072:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8008076:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008078:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 800807c:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008080:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8008082:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8008084:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8008086:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800808a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800808e:	6800      	ldr	r0, [r0, #0]
 8008090:	f001 fa90 	bl	80095b4 <USB_EPStartXfer>
}
 8008094:	4630      	mov	r0, r6
 8008096:	bd70      	pop	{r4, r5, r6, pc}

08008098 <HAL_PCD_EP_SetStall>:
{
 8008098:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800809a:	6843      	ldr	r3, [r0, #4]
 800809c:	f001 0507 	and.w	r5, r1, #7
 80080a0:	429d      	cmp	r5, r3
{
 80080a2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080a4:	d828      	bhi.n	80080f8 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80080a6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80080aa:	f04f 0328 	mov.w	r3, #40	; 0x28
 80080ae:	d01a      	beq.n	80080e6 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 80080b0:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080b2:	fb05 3103 	mla	r1, r5, r3, r3
 80080b6:	4401      	add	r1, r0
    ep->is_in = 1U;
 80080b8:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 80080ba:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80080bc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80080be:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80080c0:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d019      	beq.n	80080fc <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80080c8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80080ca:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80080ce:	f001 f9e8 	bl	80094a2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80080d2:	b925      	cbnz	r5, 80080de <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80080d4:	6820      	ldr	r0, [r4, #0]
 80080d6:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80080da:	f001 fa59 	bl	8009590 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80080de:	2000      	movs	r0, #0
 80080e0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80080e4:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80080e6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80080e8:	434b      	muls	r3, r1
 80080ea:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80080ee:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80080f0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80080f2:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 80080f6:	e7e0      	b.n	80080ba <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80080f8:	2001      	movs	r0, #1
 80080fa:	e7f3      	b.n	80080e4 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80080fc:	2002      	movs	r0, #2
 80080fe:	e7f1      	b.n	80080e4 <HAL_PCD_EP_SetStall+0x4c>

08008100 <HAL_PCD_EP_ClrStall>:
{
 8008100:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008102:	6843      	ldr	r3, [r0, #4]
 8008104:	f001 020f 	and.w	r2, r1, #15
 8008108:	429a      	cmp	r2, r3
{
 800810a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800810c:	d825      	bhi.n	800815a <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 800810e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008112:	f04f 0328 	mov.w	r3, #40	; 0x28
 8008116:	f001 0207 	and.w	r2, r1, #7
 800811a:	d015      	beq.n	8008148 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800811c:	fb02 3103 	mla	r1, r2, r3, r3
 8008120:	4401      	add	r1, r0
    ep->is_in = 1U;
 8008122:	2001      	movs	r0, #1
 8008124:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 8008126:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8008128:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800812a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800812c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008130:	2b01      	cmp	r3, #1
 8008132:	d014      	beq.n	800815e <HAL_PCD_EP_ClrStall+0x5e>
 8008134:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008136:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008138:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800813c:	f001 f9d1 	bl	80094e2 <USB_EPClearStall>
  return HAL_OK;
 8008140:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8008142:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8008146:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008148:	4353      	muls	r3, r2
 800814a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800814e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008150:	4403      	add	r3, r0
 8008152:	2000      	movs	r0, #0
 8008154:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8008158:	e7e5      	b.n	8008126 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 800815a:	2001      	movs	r0, #1
 800815c:	e7f3      	b.n	8008146 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 800815e:	2002      	movs	r0, #2
 8008160:	e7f1      	b.n	8008146 <HAL_PCD_EP_ClrStall+0x46>

08008162 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008162:	b510      	push	{r4, lr}
 8008164:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008166:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800816a:	bf1b      	ittet	ne
 800816c:	f001 0107 	andne.w	r1, r1, #7
 8008170:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008174:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008178:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800817a:	bf08      	it	eq
 800817c:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008180:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8008182:	b91a      	cbnz	r2, 800818c <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8008184:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8008186:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8008188:	2000      	movs	r0, #0
 800818a:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 800818c:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800818e:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8008190:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008192:	e7f9      	b.n	8008188 <HAL_PCDEx_PMAConfig+0x26>

08008194 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008194:	2201      	movs	r2, #1
 8008196:	4b01      	ldr	r3, [pc, #4]	; (800819c <HAL_PWR_EnableBkUpAccess+0x8>)
 8008198:	621a      	str	r2, [r3, #32]
}
 800819a:	4770      	bx	lr
 800819c:	420e0000 	.word	0x420e0000

080081a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081a4:	4605      	mov	r5, r0
 80081a6:	b338      	cbz	r0, 80081f8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081a8:	6803      	ldr	r3, [r0, #0]
 80081aa:	07db      	lsls	r3, r3, #31
 80081ac:	d410      	bmi.n	80081d0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081ae:	682b      	ldr	r3, [r5, #0]
 80081b0:	079f      	lsls	r7, r3, #30
 80081b2:	d45e      	bmi.n	8008272 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	0719      	lsls	r1, r3, #28
 80081b8:	f100 8095 	bmi.w	80082e6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	075a      	lsls	r2, r3, #29
 80081c0:	f100 80c1 	bmi.w	8008346 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081c4:	69e8      	ldr	r0, [r5, #28]
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f040 812c 	bne.w	8008424 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80081cc:	2000      	movs	r0, #0
 80081ce:	e029      	b.n	8008224 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80081d0:	4c90      	ldr	r4, [pc, #576]	; (8008414 <HAL_RCC_OscConfig+0x274>)
 80081d2:	6863      	ldr	r3, [r4, #4]
 80081d4:	f003 030c 	and.w	r3, r3, #12
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d007      	beq.n	80081ec <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80081dc:	6863      	ldr	r3, [r4, #4]
 80081de:	f003 030c 	and.w	r3, r3, #12
 80081e2:	2b08      	cmp	r3, #8
 80081e4:	d10a      	bne.n	80081fc <HAL_RCC_OscConfig+0x5c>
 80081e6:	6863      	ldr	r3, [r4, #4]
 80081e8:	03de      	lsls	r6, r3, #15
 80081ea:	d507      	bpl.n	80081fc <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	039c      	lsls	r4, r3, #14
 80081f0:	d5dd      	bpl.n	80081ae <HAL_RCC_OscConfig+0xe>
 80081f2:	686b      	ldr	r3, [r5, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1da      	bne.n	80081ae <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80081f8:	2001      	movs	r0, #1
 80081fa:	e013      	b.n	8008224 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081fc:	686b      	ldr	r3, [r5, #4]
 80081fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008202:	d112      	bne.n	800822a <HAL_RCC_OscConfig+0x8a>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800820a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800820c:	f7fe fde8 	bl	8006de0 <HAL_GetTick>
 8008210:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	0398      	lsls	r0, r3, #14
 8008216:	d4ca      	bmi.n	80081ae <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008218:	f7fe fde2 	bl	8006de0 <HAL_GetTick>
 800821c:	1b80      	subs	r0, r0, r6
 800821e:	2864      	cmp	r0, #100	; 0x64
 8008220:	d9f7      	bls.n	8008212 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8008222:	2003      	movs	r0, #3
}
 8008224:	b002      	add	sp, #8
 8008226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800822a:	b99b      	cbnz	r3, 8008254 <HAL_RCC_OscConfig+0xb4>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800823a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800823c:	f7fe fdd0 	bl	8006de0 <HAL_GetTick>
 8008240:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	0399      	lsls	r1, r3, #14
 8008246:	d5b2      	bpl.n	80081ae <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008248:	f7fe fdca 	bl	8006de0 <HAL_GetTick>
 800824c:	1b80      	subs	r0, r0, r6
 800824e:	2864      	cmp	r0, #100	; 0x64
 8008250:	d9f7      	bls.n	8008242 <HAL_RCC_OscConfig+0xa2>
 8008252:	e7e6      	b.n	8008222 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	d103      	bne.n	8008264 <HAL_RCC_OscConfig+0xc4>
 800825c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	e7cf      	b.n	8008204 <HAL_RCC_OscConfig+0x64>
 8008264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008270:	e7cb      	b.n	800820a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008272:	4c68      	ldr	r4, [pc, #416]	; (8008414 <HAL_RCC_OscConfig+0x274>)
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	f013 0f0c 	tst.w	r3, #12
 800827a:	d007      	beq.n	800828c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800827c:	6863      	ldr	r3, [r4, #4]
 800827e:	f003 030c 	and.w	r3, r3, #12
 8008282:	2b08      	cmp	r3, #8
 8008284:	d110      	bne.n	80082a8 <HAL_RCC_OscConfig+0x108>
 8008286:	6863      	ldr	r3, [r4, #4]
 8008288:	03da      	lsls	r2, r3, #15
 800828a:	d40d      	bmi.n	80082a8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	079b      	lsls	r3, r3, #30
 8008290:	d502      	bpl.n	8008298 <HAL_RCC_OscConfig+0xf8>
 8008292:	692b      	ldr	r3, [r5, #16]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d1af      	bne.n	80081f8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	696a      	ldr	r2, [r5, #20]
 800829c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80082a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	e785      	b.n	80081b4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80082a8:	692a      	ldr	r2, [r5, #16]
 80082aa:	4b5b      	ldr	r3, [pc, #364]	; (8008418 <HAL_RCC_OscConfig+0x278>)
 80082ac:	b16a      	cbz	r2, 80082ca <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80082ae:	2201      	movs	r2, #1
 80082b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80082b2:	f7fe fd95 	bl	8006de0 <HAL_GetTick>
 80082b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	079f      	lsls	r7, r3, #30
 80082bc:	d4ec      	bmi.n	8008298 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082be:	f7fe fd8f 	bl	8006de0 <HAL_GetTick>
 80082c2:	1b80      	subs	r0, r0, r6
 80082c4:	2802      	cmp	r0, #2
 80082c6:	d9f7      	bls.n	80082b8 <HAL_RCC_OscConfig+0x118>
 80082c8:	e7ab      	b.n	8008222 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80082ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80082cc:	f7fe fd88 	bl	8006de0 <HAL_GetTick>
 80082d0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	0798      	lsls	r0, r3, #30
 80082d6:	f57f af6d 	bpl.w	80081b4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082da:	f7fe fd81 	bl	8006de0 <HAL_GetTick>
 80082de:	1b80      	subs	r0, r0, r6
 80082e0:	2802      	cmp	r0, #2
 80082e2:	d9f6      	bls.n	80082d2 <HAL_RCC_OscConfig+0x132>
 80082e4:	e79d      	b.n	8008222 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082e6:	69aa      	ldr	r2, [r5, #24]
 80082e8:	4e4a      	ldr	r6, [pc, #296]	; (8008414 <HAL_RCC_OscConfig+0x274>)
 80082ea:	4b4b      	ldr	r3, [pc, #300]	; (8008418 <HAL_RCC_OscConfig+0x278>)
 80082ec:	b1e2      	cbz	r2, 8008328 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80082ee:	2201      	movs	r2, #1
 80082f0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80082f4:	f7fe fd74 	bl	8006de0 <HAL_GetTick>
 80082f8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80082fc:	079b      	lsls	r3, r3, #30
 80082fe:	d50d      	bpl.n	800831c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008300:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008304:	4b45      	ldr	r3, [pc, #276]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	fbb3 f3f2 	udiv	r3, r3, r2
 800830c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800830e:	bf00      	nop
  }
  while (Delay --);
 8008310:	9b01      	ldr	r3, [sp, #4]
 8008312:	1e5a      	subs	r2, r3, #1
 8008314:	9201      	str	r2, [sp, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1f9      	bne.n	800830e <HAL_RCC_OscConfig+0x16e>
 800831a:	e74f      	b.n	80081bc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800831c:	f7fe fd60 	bl	8006de0 <HAL_GetTick>
 8008320:	1b00      	subs	r0, r0, r4
 8008322:	2802      	cmp	r0, #2
 8008324:	d9e9      	bls.n	80082fa <HAL_RCC_OscConfig+0x15a>
 8008326:	e77c      	b.n	8008222 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8008328:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800832c:	f7fe fd58 	bl	8006de0 <HAL_GetTick>
 8008330:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008332:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008334:	079f      	lsls	r7, r3, #30
 8008336:	f57f af41 	bpl.w	80081bc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800833a:	f7fe fd51 	bl	8006de0 <HAL_GetTick>
 800833e:	1b00      	subs	r0, r0, r4
 8008340:	2802      	cmp	r0, #2
 8008342:	d9f6      	bls.n	8008332 <HAL_RCC_OscConfig+0x192>
 8008344:	e76d      	b.n	8008222 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008346:	4c33      	ldr	r4, [pc, #204]	; (8008414 <HAL_RCC_OscConfig+0x274>)
 8008348:	69e3      	ldr	r3, [r4, #28]
 800834a:	00d8      	lsls	r0, r3, #3
 800834c:	d424      	bmi.n	8008398 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800834e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008350:	69e3      	ldr	r3, [r4, #28]
 8008352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008356:	61e3      	str	r3, [r4, #28]
 8008358:	69e3      	ldr	r3, [r4, #28]
 800835a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008362:	4e2f      	ldr	r6, [pc, #188]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008364:	6833      	ldr	r3, [r6, #0]
 8008366:	05d9      	lsls	r1, r3, #23
 8008368:	d518      	bpl.n	800839c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800836a:	68eb      	ldr	r3, [r5, #12]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d126      	bne.n	80083be <HAL_RCC_OscConfig+0x21e>
 8008370:	6a23      	ldr	r3, [r4, #32]
 8008372:	f043 0301 	orr.w	r3, r3, #1
 8008376:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008378:	f7fe fd32 	bl	8006de0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800837c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008380:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008382:	6a23      	ldr	r3, [r4, #32]
 8008384:	079b      	lsls	r3, r3, #30
 8008386:	d53f      	bpl.n	8008408 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8008388:	2f00      	cmp	r7, #0
 800838a:	f43f af1b 	beq.w	80081c4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800838e:	69e3      	ldr	r3, [r4, #28]
 8008390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008394:	61e3      	str	r3, [r4, #28]
 8008396:	e715      	b.n	80081c4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8008398:	2700      	movs	r7, #0
 800839a:	e7e2      	b.n	8008362 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800839c:	6833      	ldr	r3, [r6, #0]
 800839e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80083a4:	f7fe fd1c 	bl	8006de0 <HAL_GetTick>
 80083a8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083aa:	6833      	ldr	r3, [r6, #0]
 80083ac:	05da      	lsls	r2, r3, #23
 80083ae:	d4dc      	bmi.n	800836a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083b0:	f7fe fd16 	bl	8006de0 <HAL_GetTick>
 80083b4:	eba0 0008 	sub.w	r0, r0, r8
 80083b8:	2864      	cmp	r0, #100	; 0x64
 80083ba:	d9f6      	bls.n	80083aa <HAL_RCC_OscConfig+0x20a>
 80083bc:	e731      	b.n	8008222 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083be:	b9ab      	cbnz	r3, 80083ec <HAL_RCC_OscConfig+0x24c>
 80083c0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083c2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083c6:	f023 0301 	bic.w	r3, r3, #1
 80083ca:	6223      	str	r3, [r4, #32]
 80083cc:	6a23      	ldr	r3, [r4, #32]
 80083ce:	f023 0304 	bic.w	r3, r3, #4
 80083d2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80083d4:	f7fe fd04 	bl	8006de0 <HAL_GetTick>
 80083d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083da:	6a23      	ldr	r3, [r4, #32]
 80083dc:	0798      	lsls	r0, r3, #30
 80083de:	d5d3      	bpl.n	8008388 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083e0:	f7fe fcfe 	bl	8006de0 <HAL_GetTick>
 80083e4:	1b80      	subs	r0, r0, r6
 80083e6:	4540      	cmp	r0, r8
 80083e8:	d9f7      	bls.n	80083da <HAL_RCC_OscConfig+0x23a>
 80083ea:	e71a      	b.n	8008222 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083ec:	2b05      	cmp	r3, #5
 80083ee:	6a23      	ldr	r3, [r4, #32]
 80083f0:	d103      	bne.n	80083fa <HAL_RCC_OscConfig+0x25a>
 80083f2:	f043 0304 	orr.w	r3, r3, #4
 80083f6:	6223      	str	r3, [r4, #32]
 80083f8:	e7ba      	b.n	8008370 <HAL_RCC_OscConfig+0x1d0>
 80083fa:	f023 0301 	bic.w	r3, r3, #1
 80083fe:	6223      	str	r3, [r4, #32]
 8008400:	6a23      	ldr	r3, [r4, #32]
 8008402:	f023 0304 	bic.w	r3, r3, #4
 8008406:	e7b6      	b.n	8008376 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008408:	f7fe fcea 	bl	8006de0 <HAL_GetTick>
 800840c:	1b80      	subs	r0, r0, r6
 800840e:	4540      	cmp	r0, r8
 8008410:	d9b7      	bls.n	8008382 <HAL_RCC_OscConfig+0x1e2>
 8008412:	e706      	b.n	8008222 <HAL_RCC_OscConfig+0x82>
 8008414:	40021000 	.word	0x40021000
 8008418:	42420000 	.word	0x42420000
 800841c:	20000000 	.word	0x20000000
 8008420:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008424:	4c2a      	ldr	r4, [pc, #168]	; (80084d0 <HAL_RCC_OscConfig+0x330>)
 8008426:	6863      	ldr	r3, [r4, #4]
 8008428:	f003 030c 	and.w	r3, r3, #12
 800842c:	2b08      	cmp	r3, #8
 800842e:	d03e      	beq.n	80084ae <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008430:	2200      	movs	r2, #0
 8008432:	4b28      	ldr	r3, [pc, #160]	; (80084d4 <HAL_RCC_OscConfig+0x334>)
 8008434:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008436:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008438:	d12c      	bne.n	8008494 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800843a:	f7fe fcd1 	bl	8006de0 <HAL_GetTick>
 800843e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	0199      	lsls	r1, r3, #6
 8008444:	d420      	bmi.n	8008488 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008446:	6a2b      	ldr	r3, [r5, #32]
 8008448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800844c:	d105      	bne.n	800845a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800844e:	6862      	ldr	r2, [r4, #4]
 8008450:	68a9      	ldr	r1, [r5, #8]
 8008452:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008456:	430a      	orrs	r2, r1
 8008458:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800845a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800845c:	6862      	ldr	r2, [r4, #4]
 800845e:	430b      	orrs	r3, r1
 8008460:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8008464:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8008466:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008468:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800846a:	4b1a      	ldr	r3, [pc, #104]	; (80084d4 <HAL_RCC_OscConfig+0x334>)
 800846c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800846e:	f7fe fcb7 	bl	8006de0 <HAL_GetTick>
 8008472:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	019a      	lsls	r2, r3, #6
 8008478:	f53f aea8 	bmi.w	80081cc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800847c:	f7fe fcb0 	bl	8006de0 <HAL_GetTick>
 8008480:	1b40      	subs	r0, r0, r5
 8008482:	2802      	cmp	r0, #2
 8008484:	d9f6      	bls.n	8008474 <HAL_RCC_OscConfig+0x2d4>
 8008486:	e6cc      	b.n	8008222 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008488:	f7fe fcaa 	bl	8006de0 <HAL_GetTick>
 800848c:	1b80      	subs	r0, r0, r6
 800848e:	2802      	cmp	r0, #2
 8008490:	d9d6      	bls.n	8008440 <HAL_RCC_OscConfig+0x2a0>
 8008492:	e6c6      	b.n	8008222 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8008494:	f7fe fca4 	bl	8006de0 <HAL_GetTick>
 8008498:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	019b      	lsls	r3, r3, #6
 800849e:	f57f ae95 	bpl.w	80081cc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084a2:	f7fe fc9d 	bl	8006de0 <HAL_GetTick>
 80084a6:	1b40      	subs	r0, r0, r5
 80084a8:	2802      	cmp	r0, #2
 80084aa:	d9f6      	bls.n	800849a <HAL_RCC_OscConfig+0x2fa>
 80084ac:	e6b9      	b.n	8008222 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084ae:	2801      	cmp	r0, #1
 80084b0:	f43f aeb8 	beq.w	8008224 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80084b4:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084b6:	6a2a      	ldr	r2, [r5, #32]
 80084b8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80084bc:	4291      	cmp	r1, r2
 80084be:	f47f ae9b 	bne.w	80081f8 <HAL_RCC_OscConfig+0x58>
 80084c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80084c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c8:	4293      	cmp	r3, r2
 80084ca:	f43f ae7f 	beq.w	80081cc <HAL_RCC_OscConfig+0x2c>
 80084ce:	e693      	b.n	80081f8 <HAL_RCC_OscConfig+0x58>
 80084d0:	40021000 	.word	0x40021000
 80084d4:	42420000 	.word	0x42420000

080084d8 <HAL_RCC_GetSysClockFreq>:
{
 80084d8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80084da:	4b18      	ldr	r3, [pc, #96]	; (800853c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80084dc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80084de:	ac02      	add	r4, sp, #8
 80084e0:	f103 0510 	add.w	r5, r3, #16
 80084e4:	4622      	mov	r2, r4
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	6859      	ldr	r1, [r3, #4]
 80084ea:	3308      	adds	r3, #8
 80084ec:	c203      	stmia	r2!, {r0, r1}
 80084ee:	42ab      	cmp	r3, r5
 80084f0:	4614      	mov	r4, r2
 80084f2:	d1f7      	bne.n	80084e4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80084f4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80084f8:	4911      	ldr	r1, [pc, #68]	; (8008540 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80084fa:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80084fe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008500:	f003 020c 	and.w	r2, r3, #12
 8008504:	2a08      	cmp	r2, #8
 8008506:	d117      	bne.n	8008538 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008508:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800850c:	3218      	adds	r2, #24
 800850e:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008510:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008512:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008516:	d50c      	bpl.n	8008532 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008518:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800851a:	4a0a      	ldr	r2, [pc, #40]	; (8008544 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800851c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008520:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008522:	3318      	adds	r3, #24
 8008524:	446b      	add	r3, sp
 8008526:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800852a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800852e:	b007      	add	sp, #28
 8008530:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008532:	4b05      	ldr	r3, [pc, #20]	; (8008548 <HAL_RCC_GetSysClockFreq+0x70>)
 8008534:	4358      	muls	r0, r3
 8008536:	e7fa      	b.n	800852e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8008538:	4802      	ldr	r0, [pc, #8]	; (8008544 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800853a:	e7f8      	b.n	800852e <HAL_RCC_GetSysClockFreq+0x56>
 800853c:	0800df6e 	.word	0x0800df6e
 8008540:	40021000 	.word	0x40021000
 8008544:	007a1200 	.word	0x007a1200
 8008548:	003d0900 	.word	0x003d0900

0800854c <HAL_RCC_ClockConfig>:
{
 800854c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008550:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8008552:	4604      	mov	r4, r0
 8008554:	b910      	cbnz	r0, 800855c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008556:	2001      	movs	r0, #1
}
 8008558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800855c:	4a44      	ldr	r2, [pc, #272]	; (8008670 <HAL_RCC_ClockConfig+0x124>)
 800855e:	6813      	ldr	r3, [r2, #0]
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	428b      	cmp	r3, r1
 8008566:	d328      	bcc.n	80085ba <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008568:	6821      	ldr	r1, [r4, #0]
 800856a:	078e      	lsls	r6, r1, #30
 800856c:	d430      	bmi.n	80085d0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800856e:	07ca      	lsls	r2, r1, #31
 8008570:	d443      	bmi.n	80085fa <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008572:	4a3f      	ldr	r2, [pc, #252]	; (8008670 <HAL_RCC_ClockConfig+0x124>)
 8008574:	6813      	ldr	r3, [r2, #0]
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	42ab      	cmp	r3, r5
 800857c:	d865      	bhi.n	800864a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800857e:	6822      	ldr	r2, [r4, #0]
 8008580:	4d3c      	ldr	r5, [pc, #240]	; (8008674 <HAL_RCC_ClockConfig+0x128>)
 8008582:	f012 0f04 	tst.w	r2, #4
 8008586:	d16c      	bne.n	8008662 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008588:	0713      	lsls	r3, r2, #28
 800858a:	d506      	bpl.n	800859a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800858c:	686b      	ldr	r3, [r5, #4]
 800858e:	6922      	ldr	r2, [r4, #16]
 8008590:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008594:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008598:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800859a:	f7ff ff9d 	bl	80084d8 <HAL_RCC_GetSysClockFreq>
 800859e:	686b      	ldr	r3, [r5, #4]
 80085a0:	4a35      	ldr	r2, [pc, #212]	; (8008678 <HAL_RCC_ClockConfig+0x12c>)
 80085a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80085a6:	5cd3      	ldrb	r3, [r2, r3]
 80085a8:	40d8      	lsrs	r0, r3
 80085aa:	4b34      	ldr	r3, [pc, #208]	; (800867c <HAL_RCC_ClockConfig+0x130>)
 80085ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80085ae:	4b34      	ldr	r3, [pc, #208]	; (8008680 <HAL_RCC_ClockConfig+0x134>)
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	f7fe fbd3 	bl	8006d5c <HAL_InitTick>
  return HAL_OK;
 80085b6:	2000      	movs	r0, #0
 80085b8:	e7ce      	b.n	8008558 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ba:	6813      	ldr	r3, [r2, #0]
 80085bc:	f023 0307 	bic.w	r3, r3, #7
 80085c0:	430b      	orrs	r3, r1
 80085c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085c4:	6813      	ldr	r3, [r2, #0]
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	428b      	cmp	r3, r1
 80085cc:	d1c3      	bne.n	8008556 <HAL_RCC_ClockConfig+0xa>
 80085ce:	e7cb      	b.n	8008568 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d0:	4b28      	ldr	r3, [pc, #160]	; (8008674 <HAL_RCC_ClockConfig+0x128>)
 80085d2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085d6:	bf1e      	ittt	ne
 80085d8:	685a      	ldrne	r2, [r3, #4]
 80085da:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80085de:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085e0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085e2:	bf42      	ittt	mi
 80085e4:	685a      	ldrmi	r2, [r3, #4]
 80085e6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80085ea:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	68a0      	ldr	r0, [r4, #8]
 80085f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085f4:	4302      	orrs	r2, r0
 80085f6:	605a      	str	r2, [r3, #4]
 80085f8:	e7b9      	b.n	800856e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085fa:	6862      	ldr	r2, [r4, #4]
 80085fc:	4e1d      	ldr	r6, [pc, #116]	; (8008674 <HAL_RCC_ClockConfig+0x128>)
 80085fe:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008600:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008602:	d11a      	bne.n	800863a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008604:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008608:	d0a5      	beq.n	8008556 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800860a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800860c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008610:	f023 0303 	bic.w	r3, r3, #3
 8008614:	4313      	orrs	r3, r2
 8008616:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8008618:	f7fe fbe2 	bl	8006de0 <HAL_GetTick>
 800861c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800861e:	6873      	ldr	r3, [r6, #4]
 8008620:	6862      	ldr	r2, [r4, #4]
 8008622:	f003 030c 	and.w	r3, r3, #12
 8008626:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800862a:	d0a2      	beq.n	8008572 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800862c:	f7fe fbd8 	bl	8006de0 <HAL_GetTick>
 8008630:	1bc0      	subs	r0, r0, r7
 8008632:	4540      	cmp	r0, r8
 8008634:	d9f3      	bls.n	800861e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8008636:	2003      	movs	r0, #3
 8008638:	e78e      	b.n	8008558 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800863a:	2a02      	cmp	r2, #2
 800863c:	d102      	bne.n	8008644 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800863e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008642:	e7e1      	b.n	8008608 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008644:	f013 0f02 	tst.w	r3, #2
 8008648:	e7de      	b.n	8008608 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800864a:	6813      	ldr	r3, [r2, #0]
 800864c:	f023 0307 	bic.w	r3, r3, #7
 8008650:	432b      	orrs	r3, r5
 8008652:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008654:	6813      	ldr	r3, [r2, #0]
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	42ab      	cmp	r3, r5
 800865c:	f47f af7b 	bne.w	8008556 <HAL_RCC_ClockConfig+0xa>
 8008660:	e78d      	b.n	800857e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008662:	686b      	ldr	r3, [r5, #4]
 8008664:	68e1      	ldr	r1, [r4, #12]
 8008666:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800866a:	430b      	orrs	r3, r1
 800866c:	606b      	str	r3, [r5, #4]
 800866e:	e78b      	b.n	8008588 <HAL_RCC_ClockConfig+0x3c>
 8008670:	40022000 	.word	0x40022000
 8008674:	40021000 	.word	0x40021000
 8008678:	0800de0b 	.word	0x0800de0b
 800867c:	20000000 	.word	0x20000000
 8008680:	20000020 	.word	0x20000020

08008684 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008684:	4b04      	ldr	r3, [pc, #16]	; (8008698 <HAL_RCC_GetPCLK1Freq+0x14>)
 8008686:	4a05      	ldr	r2, [pc, #20]	; (800869c <HAL_RCC_GetPCLK1Freq+0x18>)
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800868e:	5cd3      	ldrb	r3, [r2, r3]
 8008690:	4a03      	ldr	r2, [pc, #12]	; (80086a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008692:	6810      	ldr	r0, [r2, #0]
}
 8008694:	40d8      	lsrs	r0, r3
 8008696:	4770      	bx	lr
 8008698:	40021000 	.word	0x40021000
 800869c:	0800de1b 	.word	0x0800de1b
 80086a0:	20000000 	.word	0x20000000

080086a4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80086a4:	4b04      	ldr	r3, [pc, #16]	; (80086b8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80086a6:	4a05      	ldr	r2, [pc, #20]	; (80086bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80086ae:	5cd3      	ldrb	r3, [r2, r3]
 80086b0:	4a03      	ldr	r2, [pc, #12]	; (80086c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80086b2:	6810      	ldr	r0, [r2, #0]
}
 80086b4:	40d8      	lsrs	r0, r3
 80086b6:	4770      	bx	lr
 80086b8:	40021000 	.word	0x40021000
 80086bc:	0800de1b 	.word	0x0800de1b
 80086c0:	20000000 	.word	0x20000000

080086c4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80086c4:	6803      	ldr	r3, [r0, #0]
{
 80086c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80086ca:	07d9      	lsls	r1, r3, #31
{
 80086cc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80086ce:	d520      	bpl.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086d0:	4c36      	ldr	r4, [pc, #216]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80086d2:	69e3      	ldr	r3, [r4, #28]
 80086d4:	00da      	lsls	r2, r3, #3
 80086d6:	d432      	bmi.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80086d8:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80086da:	69e3      	ldr	r3, [r4, #28]
 80086dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e0:	61e3      	str	r3, [r4, #28]
 80086e2:	69e3      	ldr	r3, [r4, #28]
 80086e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086ec:	4f30      	ldr	r7, [pc, #192]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	05db      	lsls	r3, r3, #23
 80086f2:	d526      	bpl.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086f4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086f6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80086fa:	d136      	bne.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086fc:	6a23      	ldr	r3, [r4, #32]
 80086fe:	686a      	ldr	r2, [r5, #4]
 8008700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008704:	4313      	orrs	r3, r2
 8008706:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008708:	b11e      	cbz	r6, 8008712 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800870a:	69e3      	ldr	r3, [r4, #28]
 800870c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008710:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008712:	6828      	ldr	r0, [r5, #0]
 8008714:	0783      	lsls	r3, r0, #30
 8008716:	d506      	bpl.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008718:	4924      	ldr	r1, [pc, #144]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800871a:	68ab      	ldr	r3, [r5, #8]
 800871c:	684a      	ldr	r2, [r1, #4]
 800871e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008722:	431a      	orrs	r2, r3
 8008724:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008726:	f010 0010 	ands.w	r0, r0, #16
 800872a:	d01b      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800872c:	4a1f      	ldr	r2, [pc, #124]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800872e:	68e9      	ldr	r1, [r5, #12]
 8008730:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008732:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008734:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008738:	430b      	orrs	r3, r1
 800873a:	6053      	str	r3, [r2, #4]
 800873c:	e012      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 800873e:	2600      	movs	r6, #0
 8008740:	e7d4      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008748:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800874a:	f7fe fb49 	bl	8006de0 <HAL_GetTick>
 800874e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	05d8      	lsls	r0, r3, #23
 8008754:	d4ce      	bmi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008756:	f7fe fb43 	bl	8006de0 <HAL_GetTick>
 800875a:	eba0 0008 	sub.w	r0, r0, r8
 800875e:	2864      	cmp	r0, #100	; 0x64
 8008760:	d9f6      	bls.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8008762:	2003      	movs	r0, #3
}
 8008764:	b002      	add	sp, #8
 8008766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800876a:	686a      	ldr	r2, [r5, #4]
 800876c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008770:	429a      	cmp	r2, r3
 8008772:	d0c3      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8008774:	2001      	movs	r0, #1
 8008776:	4a0f      	ldr	r2, [pc, #60]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008778:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800877a:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800877e:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008780:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008784:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8008788:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800878a:	07d9      	lsls	r1, r3, #31
 800878c:	d5b6      	bpl.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800878e:	f7fe fb27 	bl	8006de0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008792:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008796:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008798:	6a23      	ldr	r3, [r4, #32]
 800879a:	079a      	lsls	r2, r3, #30
 800879c:	d4ae      	bmi.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800879e:	f7fe fb1f 	bl	8006de0 <HAL_GetTick>
 80087a2:	1bc0      	subs	r0, r0, r7
 80087a4:	4540      	cmp	r0, r8
 80087a6:	d9f7      	bls.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80087a8:	e7db      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80087aa:	bf00      	nop
 80087ac:	40021000 	.word	0x40021000
 80087b0:	40007000 	.word	0x40007000
 80087b4:	42420000 	.word	0x42420000

080087b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80087b8:	4602      	mov	r2, r0
 80087ba:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80087bc:	4b33      	ldr	r3, [pc, #204]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 80087be:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80087c0:	ad02      	add	r5, sp, #8
 80087c2:	f103 0610 	add.w	r6, r3, #16
 80087c6:	462c      	mov	r4, r5
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	6859      	ldr	r1, [r3, #4]
 80087cc:	3308      	adds	r3, #8
 80087ce:	c403      	stmia	r4!, {r0, r1}
 80087d0:	42b3      	cmp	r3, r6
 80087d2:	4625      	mov	r5, r4
 80087d4:	d1f7      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80087d6:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80087da:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80087dc:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 80087e0:	d047      	beq.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80087e2:	2a10      	cmp	r2, #16
 80087e4:	d003      	beq.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 80087e6:	2a01      	cmp	r2, #1
 80087e8:	d024      	beq.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 80087ea:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 80087ec:	e036      	b.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 80087ee:	4a28      	ldr	r2, [pc, #160]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80087f0:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80087f2:	6810      	ldr	r0, [r2, #0]
 80087f4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80087f8:	d030      	beq.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80087fa:	f3c1 4383 	ubfx	r3, r1, #18, #4
 80087fe:	3318      	adds	r3, #24
 8008800:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008802:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008804:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008808:	bf49      	itett	mi
 800880a:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800880c:	4b21      	ldrpl	r3, [pc, #132]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800880e:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 8008812:	3318      	addmi	r3, #24
 8008814:	bf41      	itttt	mi
 8008816:	446b      	addmi	r3, sp
 8008818:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800881c:	4b1e      	ldrmi	r3, [pc, #120]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800881e:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008822:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008824:	6853      	ldr	r3, [r2, #4]
 8008826:	025b      	lsls	r3, r3, #9
 8008828:	d418      	bmi.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 800882a:	2303      	movs	r3, #3
 800882c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800882e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8008832:	e013      	b.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008834:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8008838:	4a15      	ldr	r2, [pc, #84]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 800883a:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800883c:	4019      	ands	r1, r3
 800883e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8008842:	d01f      	beq.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800884c:	d108      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 800884e:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008852:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8008854:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8008858:	bf18      	it	ne
 800885a:	4618      	movne	r0, r3
}
 800885c:	b006      	add	sp, #24
 800885e:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008864:	d1c1      	bne.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 8008866:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8008868:	f24f 4324 	movw	r3, #62500	; 0xf424
 800886c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008870:	e7f2      	b.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008872:	f7ff ff17 	bl	80086a4 <HAL_RCC_GetPCLK2Freq>
 8008876:	4b06      	ldr	r3, [pc, #24]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800887e:	3301      	adds	r3, #1
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	e7d4      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 8008884:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008888:	e7e8      	b.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800888a:	bf00      	nop
 800888c:	0800df6e 	.word	0x0800df6e
 8008890:	40021000 	.word	0x40021000
 8008894:	003d0900 	.word	0x003d0900
 8008898:	007a1200 	.word	0x007a1200

0800889c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 80088a0:	f7fe fa9e 	bl	8006de0 <HAL_GetTick>
 80088a4:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	0692      	lsls	r2, r2, #26
 80088ac:	d505      	bpl.n	80088ba <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 80088ae:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	f042 0210 	orr.w	r2, r2, #16
 80088b6:	605a      	str	r2, [r3, #4]
}
 80088b8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80088ba:	f7fe fa91 	bl	8006de0 <HAL_GetTick>
 80088be:	1b40      	subs	r0, r0, r5
 80088c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80088c4:	d9ef      	bls.n	80088a6 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80088c6:	2003      	movs	r0, #3
 80088c8:	e7f6      	b.n	80088b8 <RTC_EnterInitMode+0x1c>

080088ca <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ca:	6802      	ldr	r2, [r0, #0]
{
 80088cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ce:	6853      	ldr	r3, [r2, #4]
{
 80088d0:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d2:	f023 0310 	bic.w	r3, r3, #16
 80088d6:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 80088d8:	f7fe fa82 	bl	8006de0 <HAL_GetTick>
 80088dc:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	069b      	lsls	r3, r3, #26
 80088e4:	d501      	bpl.n	80088ea <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80088e6:	2000      	movs	r0, #0
}
 80088e8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80088ea:	f7fe fa79 	bl	8006de0 <HAL_GetTick>
 80088ee:	1b40      	subs	r0, r0, r5
 80088f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80088f4:	d9f3      	bls.n	80088de <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80088f6:	2003      	movs	r0, #3
 80088f8:	e7f6      	b.n	80088e8 <RTC_ExitInitMode+0x1e>

080088fa <HAL_RTC_WaitForSynchro>:
{
 80088fa:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80088fc:	4604      	mov	r4, r0
 80088fe:	b1a8      	cbz	r0, 800892c <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8008900:	6802      	ldr	r2, [r0, #0]
 8008902:	6853      	ldr	r3, [r2, #4]
 8008904:	f023 0308 	bic.w	r3, r3, #8
 8008908:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800890a:	f7fe fa69 	bl	8006de0 <HAL_GetTick>
 800890e:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	071b      	lsls	r3, r3, #28
 8008916:	d501      	bpl.n	800891c <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8008918:	2000      	movs	r0, #0
}
 800891a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800891c:	f7fe fa60 	bl	8006de0 <HAL_GetTick>
 8008920:	1b40      	subs	r0, r0, r5
 8008922:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008926:	d9f3      	bls.n	8008910 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8008928:	2003      	movs	r0, #3
 800892a:	e7f6      	b.n	800891a <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 800892c:	2001      	movs	r0, #1
 800892e:	e7f4      	b.n	800891a <HAL_RTC_WaitForSynchro+0x20>

08008930 <HAL_RTC_Init>:
{
 8008930:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8008932:	4604      	mov	r4, r0
 8008934:	b170      	cbz	r0, 8008954 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008936:	7c43      	ldrb	r3, [r0, #17]
 8008938:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800893c:	b913      	cbnz	r3, 8008944 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800893e:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8008940:	f7fe f87a 	bl	8006a38 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008944:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008946:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008948:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800894a:	f7ff ffd6 	bl	80088fa <HAL_RTC_WaitForSynchro>
 800894e:	b118      	cbz	r0, 8008958 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008950:	2304      	movs	r3, #4
 8008952:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8008954:	2001      	movs	r0, #1
 8008956:	e036      	b.n	80089c6 <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008958:	4620      	mov	r0, r4
 800895a:	f7ff ff9f 	bl	800889c <RTC_EnterInitMode>
 800895e:	2800      	cmp	r0, #0
 8008960:	d1f6      	bne.n	8008950 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008962:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008964:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008966:	6853      	ldr	r3, [r2, #4]
 8008968:	f023 0307 	bic.w	r3, r3, #7
 800896c:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800896e:	4a16      	ldr	r2, [pc, #88]	; (80089c8 <HAL_RTC_Init+0x98>)
 8008970:	b118      	cbz	r0, 800897a <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8008972:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008974:	f021 0101 	bic.w	r1, r1, #1
 8008978:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800897a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800897c:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8008980:	4303      	orrs	r3, r0
 8008982:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8008984:	6860      	ldr	r0, [r4, #4]
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	d105      	bne.n	8008996 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800898a:	2001      	movs	r0, #1
 800898c:	f7ff ff14 	bl	80087b8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8008990:	2800      	cmp	r0, #0
 8008992:	d0dd      	beq.n	8008950 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8008994:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8008996:	6822      	ldr	r2, [r4, #0]
 8008998:	6893      	ldr	r3, [r2, #8]
 800899a:	f023 030f 	bic.w	r3, r3, #15
 800899e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80089a2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80089a4:	68d3      	ldr	r3, [r2, #12]
 80089a6:	b280      	uxth	r0, r0
 80089a8:	0c1b      	lsrs	r3, r3, #16
 80089aa:	041b      	lsls	r3, r3, #16
 80089ac:	4318      	orrs	r0, r3
 80089ae:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80089b0:	4620      	mov	r0, r4
 80089b2:	f7ff ff8a 	bl	80088ca <RTC_ExitInitMode>
 80089b6:	2301      	movs	r3, #1
 80089b8:	b110      	cbz	r0, 80089c0 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80089ba:	2204      	movs	r2, #4
 80089bc:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 80089be:	e7c9      	b.n	8008954 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80089c0:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80089c2:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80089c4:	7463      	strb	r3, [r4, #17]
}
 80089c6:	bd10      	pop	{r4, pc}
 80089c8:	40006c00 	.word	0x40006c00

080089cc <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 80089cc:	0089      	lsls	r1, r1, #2
 80089ce:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80089d2:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80089d6:	b292      	uxth	r2, r2
 80089d8:	600a      	str	r2, [r1, #0]
}
 80089da:	4770      	bx	lr

080089dc <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 80089dc:	0089      	lsls	r1, r1, #2
 80089de:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80089e2:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80089e6:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 80089e8:	b280      	uxth	r0, r0
 80089ea:	4770      	bx	lr

080089ec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ec:	6803      	ldr	r3, [r0, #0]
 80089ee:	68da      	ldr	r2, [r3, #12]
 80089f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089f4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f6:	695a      	ldr	r2, [r3, #20]
 80089f8:	f022 0201 	bic.w	r2, r2, #1
 80089fc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089fe:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8008a00:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a02:	bf02      	ittt	eq
 8008a04:	68da      	ldreq	r2, [r3, #12]
 8008a06:	f022 0210 	biceq.w	r2, r2, #16
 8008a0a:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a0c:	2320      	movs	r3, #32
 8008a0e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a12:	2300      	movs	r3, #0
 8008a14:	6303      	str	r3, [r0, #48]	; 0x30
}
 8008a16:	4770      	bx	lr

08008a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a1c:	6803      	ldr	r3, [r0, #0]
 8008a1e:	68c1      	ldr	r1, [r0, #12]
 8008a20:	691a      	ldr	r2, [r3, #16]
 8008a22:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008a26:	430a      	orrs	r2, r1
 8008a28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a2a:	6882      	ldr	r2, [r0, #8]
 8008a2c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8008a2e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a30:	4302      	orrs	r2, r0
 8008a32:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8008a34:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8008a38:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a3c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a42:	695a      	ldr	r2, [r3, #20]
 8008a44:	69a1      	ldr	r1, [r4, #24]
 8008a46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008a4e:	4a0e      	ldr	r2, [pc, #56]	; (8008a88 <UART_SetConfig+0x70>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d115      	bne.n	8008a80 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008a54:	f7ff fe26 	bl	80086a4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a58:	2319      	movs	r3, #25
 8008a5a:	4343      	muls	r3, r0
 8008a5c:	6862      	ldr	r2, [r4, #4]
 8008a5e:	6820      	ldr	r0, [r4, #0]
 8008a60:	0092      	lsls	r2, r2, #2
 8008a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a66:	2264      	movs	r2, #100	; 0x64
 8008a68:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a6c:	fb02 3311 	mls	r3, r2, r1, r3
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	3332      	adds	r3, #50	; 0x32
 8008a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a78:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8008a7c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8008a7e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8008a80:	f7ff fe00 	bl	8008684 <HAL_RCC_GetPCLK1Freq>
 8008a84:	e7e8      	b.n	8008a58 <UART_SetConfig+0x40>
 8008a86:	bf00      	nop
 8008a88:	40013800 	.word	0x40013800

08008a8c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	4604      	mov	r4, r0
 8008a90:	460e      	mov	r6, r1
 8008a92:	4617      	mov	r7, r2
 8008a94:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a96:	6822      	ldr	r2, [r4, #0]
 8008a98:	6813      	ldr	r3, [r2, #0]
 8008a9a:	ea36 0303 	bics.w	r3, r6, r3
 8008a9e:	d101      	bne.n	8008aa4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	e014      	b.n	8008ace <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8008aa4:	1c6b      	adds	r3, r5, #1
 8008aa6:	d0f7      	beq.n	8008a98 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008aa8:	b995      	cbnz	r5, 8008ad0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008aaa:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8008aac:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ab4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab6:	695a      	ldr	r2, [r3, #20]
 8008ab8:	f022 0201 	bic.w	r2, r2, #1
 8008abc:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8008abe:	2320      	movs	r3, #32
 8008ac0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008ac4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ad0:	f7fe f986 	bl	8006de0 <HAL_GetTick>
 8008ad4:	1bc0      	subs	r0, r0, r7
 8008ad6:	4285      	cmp	r5, r0
 8008ad8:	d2dd      	bcs.n	8008a96 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8008ada:	e7e6      	b.n	8008aaa <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08008adc <HAL_UART_Init>:
{
 8008adc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8008ade:	4604      	mov	r4, r0
 8008ae0:	b340      	cbz	r0, 8008b34 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008ae2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008ae6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008aea:	b91b      	cbnz	r3, 8008af4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8008aec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8008af0:	f7fe f87c 	bl	8006bec <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8008af4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8008af6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008af8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8008afc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8008afe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8008b00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b04:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8008b06:	f7ff ff87 	bl	8008a18 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b0a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b0c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b16:	695a      	ldr	r2, [r3, #20]
 8008b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b1c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8008b1e:	68da      	ldr	r2, [r3, #12]
 8008b20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b24:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008b26:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b28:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8008b32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008b34:	2001      	movs	r0, #1
 8008b36:	e7fc      	b.n	8008b32 <HAL_UART_Init+0x56>

08008b38 <HAL_UART_DeInit>:
{
 8008b38:	b510      	push	{r4, lr}
  if (huart == NULL)
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	b198      	cbz	r0, 8008b66 <HAL_UART_DeInit+0x2e>
  huart->gState = HAL_UART_STATE_BUSY;
 8008b3e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8008b40:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008b42:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8008b46:	68d3      	ldr	r3, [r2, #12]
 8008b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b4c:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8008b4e:	f7fe f8a9 	bl	8006ca4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b52:	2000      	movs	r0, #0
 8008b54:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(huart);
 8008b56:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8008b5a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008b5e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b62:	6320      	str	r0, [r4, #48]	; 0x30
}
 8008b64:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008b66:	2001      	movs	r0, #1
 8008b68:	e7fc      	b.n	8008b64 <HAL_UART_DeInit+0x2c>

08008b6a <HAL_UART_Transmit>:
{
 8008b6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b6e:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008b70:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8008b74:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8008b76:	2b20      	cmp	r3, #32
{
 8008b78:	460e      	mov	r6, r1
 8008b7a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8008b7c:	d148      	bne.n	8008c10 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8008b7e:	2900      	cmp	r1, #0
 8008b80:	d044      	beq.n	8008c0c <HAL_UART_Transmit+0xa2>
 8008b82:	2a00      	cmp	r2, #0
 8008b84:	d042      	beq.n	8008c0c <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8008b86:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d040      	beq.n	8008c10 <HAL_UART_Transmit+0xa6>
 8008b8e:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b90:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8008b92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b96:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b98:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8008b9e:	f7fe f91f 	bl	8006de0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba2:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8008ba4:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8008baa:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bac:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bae:	d103      	bne.n	8008bb8 <HAL_UART_Transmit+0x4e>
 8008bb0:	6923      	ldr	r3, [r4, #16]
 8008bb2:	b90b      	cbnz	r3, 8008bb8 <HAL_UART_Transmit+0x4e>
 8008bb4:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8008bb6:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8008bbe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	b953      	cbnz	r3, 8008bda <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bc4:	464b      	mov	r3, r9
 8008bc6:	4642      	mov	r2, r8
 8008bc8:	2140      	movs	r1, #64	; 0x40
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f7ff ff5e 	bl	8008a8c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8008bd0:	b950      	cbnz	r0, 8008be8 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8008bd2:	2320      	movs	r3, #32
 8008bd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8008bd8:	e007      	b.n	8008bea <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bda:	464b      	mov	r3, r9
 8008bdc:	4642      	mov	r2, r8
 8008bde:	2180      	movs	r1, #128	; 0x80
 8008be0:	4620      	mov	r0, r4
 8008be2:	f7ff ff53 	bl	8008a8c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8008be6:	b110      	cbz	r0, 8008bee <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8008be8:	2003      	movs	r0, #3
}
 8008bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bee:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8008bf0:	b94e      	cbnz	r6, 8008c06 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bf2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8008bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bfa:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8008bfc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8008bfe:	3901      	subs	r1, #1
 8008c00:	b289      	uxth	r1, r1
 8008c02:	84e1      	strh	r1, [r4, #38]	; 0x26
 8008c04:	e7db      	b.n	8008bbe <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c06:	f816 3b01 	ldrb.w	r3, [r6], #1
 8008c0a:	e7f6      	b.n	8008bfa <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8008c0c:	2001      	movs	r0, #1
 8008c0e:	e7ec      	b.n	8008bea <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8008c10:	2002      	movs	r0, #2
 8008c12:	e7ea      	b.n	8008bea <HAL_UART_Transmit+0x80>

08008c14 <HAL_UART_TxCpltCallback>:
 8008c14:	4770      	bx	lr

08008c16 <HAL_UART_RxHalfCpltCallback>:
 8008c16:	4770      	bx	lr

08008c18 <UART_DMAError>:
{
 8008c18:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c1a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008c1c:	6803      	ldr	r3, [r0, #0]
 8008c1e:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008c20:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8008c24:	2921      	cmp	r1, #33	; 0x21
 8008c26:	d10a      	bne.n	8008c3e <UART_DMAError+0x26>
 8008c28:	0612      	lsls	r2, r2, #24
 8008c2a:	d508      	bpl.n	8008c3e <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008c36:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c3e:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c40:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8008c44:	2a22      	cmp	r2, #34	; 0x22
 8008c46:	d105      	bne.n	8008c54 <UART_DMAError+0x3c>
 8008c48:	065b      	lsls	r3, r3, #25
 8008c4a:	d503      	bpl.n	8008c54 <UART_DMAError+0x3c>
    huart->RxXferCount = 0x00U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008c50:	f7ff fecc 	bl	80089ec <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c54:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008c56:	f043 0310 	orr.w	r3, r3, #16
 8008c5a:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8008c5c:	f7fd ffc3 	bl	8006be6 <HAL_UART_ErrorCallback>
}
 8008c60:	bd08      	pop	{r3, pc}

08008c62 <UART_DMAAbortOnError>:
{
 8008c62:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8008c64:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c66:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8008c68:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c6a:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8008c6c:	f7fd ffbb 	bl	8006be6 <HAL_UART_ErrorCallback>
}
 8008c70:	bd08      	pop	{r3, pc}

08008c72 <HAL_UARTEx_RxEventCallback>:
}
 8008c72:	4770      	bx	lr

08008c74 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c74:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8008c76:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c78:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d104      	bne.n	8008c88 <UART_DMARxHalfCplt+0x14>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008c7e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8008c80:	0849      	lsrs	r1, r1, #1
 8008c82:	f7ff fff6 	bl	8008c72 <HAL_UARTEx_RxEventCallback>
}
 8008c86:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8008c88:	f7ff ffc5 	bl	8008c16 <HAL_UART_RxHalfCpltCallback>
}
 8008c8c:	e7fb      	b.n	8008c86 <UART_DMARxHalfCplt+0x12>

08008c8e <UART_DMAReceiveCplt>:
{
 8008c8e:	b508      	push	{r3, lr}
 8008c90:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008c92:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c94:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f013 0320 	ands.w	r3, r3, #32
 8008c9c:	d117      	bne.n	8008cce <UART_DMAReceiveCplt+0x40>
    huart->RxXferCount = 0U;
 8008c9e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ca0:	6803      	ldr	r3, [r0, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ca8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008caa:	695a      	ldr	r2, [r3, #20]
 8008cac:	f022 0201 	bic.w	r2, r2, #1
 8008cb0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cb2:	695a      	ldr	r2, [r3, #20]
 8008cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cb8:	615a      	str	r2, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8008cba:	2220      	movs	r2, #32
 8008cbc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8008cc2:	2a01      	cmp	r2, #1
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc4:	bf02      	ittt	eq
 8008cc6:	68da      	ldreq	r2, [r3, #12]
 8008cc8:	f022 0210 	biceq.w	r2, r2, #16
 8008ccc:	60da      	streq	r2, [r3, #12]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d103      	bne.n	8008cdc <UART_DMAReceiveCplt+0x4e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cd4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8008cd6:	f7ff ffcc 	bl	8008c72 <HAL_UARTEx_RxEventCallback>
}
 8008cda:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8008cdc:	f7fd ff84 	bl	8006be8 <HAL_UART_RxCpltCallback>
}
 8008ce0:	e7fb      	b.n	8008cda <UART_DMAReceiveCplt+0x4c>

08008ce2 <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8008ce2:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce4:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ce6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cec:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cee:	d134      	bne.n	8008d5a <UART_Receive_IT.part.0.isra.0+0x78>
 8008cf0:	6901      	ldr	r1, [r0, #16]
 8008cf2:	2900      	cmp	r1, #0
 8008cf4:	d134      	bne.n	8008d60 <UART_Receive_IT.part.0.isra.0+0x7e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cf6:	6852      	ldr	r2, [r2, #4]
 8008cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cfc:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8008d00:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8008d02:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8008d04:	3a01      	subs	r2, #1
 8008d06:	b292      	uxth	r2, r2
 8008d08:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8008d0a:	bb1a      	cbnz	r2, 8008d54 <UART_Receive_IT.part.0.isra.0+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d0c:	6803      	ldr	r3, [r0, #0]
 8008d0e:	68d9      	ldr	r1, [r3, #12]
 8008d10:	f021 0120 	bic.w	r1, r1, #32
 8008d14:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d16:	68d9      	ldr	r1, [r3, #12]
 8008d18:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008d1c:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d1e:	6959      	ldr	r1, [r3, #20]
 8008d20:	f021 0101 	bic.w	r1, r1, #1
 8008d24:	6159      	str	r1, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8008d26:	2120      	movs	r1, #32
 8008d28:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d2c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008d2e:	2901      	cmp	r1, #1
 8008d30:	d120      	bne.n	8008d74 <UART_Receive_IT.part.0.isra.0+0x92>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d32:	6302      	str	r2, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d34:	68d9      	ldr	r1, [r3, #12]
 8008d36:	f021 0110 	bic.w	r1, r1, #16
 8008d3a:	60d9      	str	r1, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d3c:	6819      	ldr	r1, [r3, #0]
 8008d3e:	06c9      	lsls	r1, r1, #27
 8008d40:	d505      	bpl.n	8008d4e <UART_Receive_IT.part.0.isra.0+0x6c>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d42:	9201      	str	r2, [sp, #4]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	9201      	str	r2, [sp, #4]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d4e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8008d50:	f7ff ff8f 	bl	8008c72 <HAL_UARTEx_RxEventCallback>
}
 8008d54:	b003      	add	sp, #12
 8008d56:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d5a:	b939      	cbnz	r1, 8008d6c <UART_Receive_IT.part.0.isra.0+0x8a>
 8008d5c:	6901      	ldr	r1, [r0, #16]
 8008d5e:	b929      	cbnz	r1, 8008d6c <UART_Receive_IT.part.0.isra.0+0x8a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d60:	6852      	ldr	r2, [r2, #4]
 8008d62:	b2d2      	uxtb	r2, r2
 8008d64:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8008d66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008d68:	3301      	adds	r3, #1
 8008d6a:	e7c9      	b.n	8008d00 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d6c:	6852      	ldr	r2, [r2, #4]
 8008d6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d72:	e7f7      	b.n	8008d64 <UART_Receive_IT.part.0.isra.0+0x82>
       HAL_UART_RxCpltCallback(huart);
 8008d74:	f7fd ff38 	bl	8006be8 <HAL_UART_RxCpltCallback>
 8008d78:	e7ec      	b.n	8008d54 <UART_Receive_IT.part.0.isra.0+0x72>
	...

08008d7c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d7c:	6803      	ldr	r3, [r0, #0]
{
 8008d7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d80:	681a      	ldr	r2, [r3, #0]
{
 8008d82:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8008d84:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d88:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d8a:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8008d8c:	d10c      	bne.n	8008da8 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d8e:	0695      	lsls	r5, r2, #26
 8008d90:	d567      	bpl.n	8008e62 <HAL_UART_IRQHandler+0xe6>
 8008d92:	068d      	lsls	r5, r1, #26
 8008d94:	d565      	bpl.n	8008e62 <HAL_UART_IRQHandler+0xe6>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d96:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008d9a:	2b22      	cmp	r3, #34	; 0x22
 8008d9c:	d15b      	bne.n	8008e56 <HAL_UART_IRQHandler+0xda>
}
 8008d9e:	b003      	add	sp, #12
 8008da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008da4:	f7ff bf9d 	b.w	8008ce2 <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008da8:	f005 0001 	and.w	r0, r5, #1
 8008dac:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8008db0:	4305      	orrs	r5, r0
 8008db2:	d056      	beq.n	8008e62 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008db4:	07d5      	lsls	r5, r2, #31
 8008db6:	d505      	bpl.n	8008dc4 <HAL_UART_IRQHandler+0x48>
 8008db8:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dba:	bf42      	ittt	mi
 8008dbc:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 8008dbe:	f043 0301 	orrmi.w	r3, r3, #1
 8008dc2:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dc4:	0755      	lsls	r5, r2, #29
 8008dc6:	d504      	bpl.n	8008dd2 <HAL_UART_IRQHandler+0x56>
 8008dc8:	b118      	cbz	r0, 8008dd2 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dcc:	f043 0302 	orr.w	r3, r3, #2
 8008dd0:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dd2:	0793      	lsls	r3, r2, #30
 8008dd4:	d504      	bpl.n	8008de0 <HAL_UART_IRQHandler+0x64>
 8008dd6:	b118      	cbz	r0, 8008de0 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dda:	f043 0304 	orr.w	r3, r3, #4
 8008dde:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008de0:	0715      	lsls	r5, r2, #28
 8008de2:	d507      	bpl.n	8008df4 <HAL_UART_IRQHandler+0x78>
 8008de4:	f001 0320 	and.w	r3, r1, #32
 8008de8:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dea:	bf1e      	ittt	ne
 8008dec:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 8008dee:	f043 0308 	orrne.w	r3, r3, #8
 8008df2:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008df4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008df6:	b373      	cbz	r3, 8008e56 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008df8:	0692      	lsls	r2, r2, #26
 8008dfa:	d508      	bpl.n	8008e0e <HAL_UART_IRQHandler+0x92>
 8008dfc:	068b      	lsls	r3, r1, #26
 8008dfe:	d506      	bpl.n	8008e0e <HAL_UART_IRQHandler+0x92>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e00:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8008e04:	2b22      	cmp	r3, #34	; 0x22
 8008e06:	d102      	bne.n	8008e0e <HAL_UART_IRQHandler+0x92>
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f7ff ff6a 	bl	8008ce2 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e0e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8008e10:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e12:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e14:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e1a:	f005 0508 	and.w	r5, r5, #8
 8008e1e:	431d      	orrs	r5, r3
 8008e20:	d01b      	beq.n	8008e5a <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8008e22:	f7ff fde3 	bl	80089ec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	695a      	ldr	r2, [r3, #20]
 8008e2a:	0655      	lsls	r5, r2, #25
 8008e2c:	d510      	bpl.n	8008e50 <HAL_UART_IRQHandler+0xd4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e2e:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008e30:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e36:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008e38:	b150      	cbz	r0, 8008e50 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e3a:	4b53      	ldr	r3, [pc, #332]	; (8008f88 <HAL_UART_IRQHandler+0x20c>)
 8008e3c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e3e:	f7fe f911 	bl	8007064 <HAL_DMA_Abort_IT>
 8008e42:	b140      	cbz	r0, 8008e56 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008e46:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8008e48:	b003      	add	sp, #12
 8008e4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e4e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7fd fec8 	bl	8006be6 <HAL_UART_ErrorCallback>
}
 8008e56:	b003      	add	sp, #12
 8008e58:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8008e5a:	f7fd fec4 	bl	8006be6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e5e:	6425      	str	r5, [r4, #64]	; 0x40
 8008e60:	e7f9      	b.n	8008e56 <HAL_UART_IRQHandler+0xda>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e62:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008e64:	2801      	cmp	r0, #1
 8008e66:	d155      	bne.n	8008f14 <HAL_UART_IRQHandler+0x198>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008e68:	06d0      	lsls	r0, r2, #27
 8008e6a:	d553      	bpl.n	8008f14 <HAL_UART_IRQHandler+0x198>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008e6c:	06cd      	lsls	r5, r1, #27
 8008e6e:	d551      	bpl.n	8008f14 <HAL_UART_IRQHandler+0x198>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e70:	2100      	movs	r1, #0
 8008e72:	9101      	str	r1, [sp, #4]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	9201      	str	r2, [sp, #4]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	9201      	str	r2, [sp, #4]
 8008e7c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7e:	695a      	ldr	r2, [r3, #20]
 8008e80:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8008e84:	d02a      	beq.n	8008edc <HAL_UART_IRQHandler+0x160>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e86:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008e88:	6802      	ldr	r2, [r0, #0]
 8008e8a:	6852      	ldr	r2, [r2, #4]
 8008e8c:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8008e8e:	2a00      	cmp	r2, #0
 8008e90:	d0e1      	beq.n	8008e56 <HAL_UART_IRQHandler+0xda>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008e92:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8008e94:	4295      	cmp	r5, r2
 8008e96:	d9de      	bls.n	8008e56 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8008e98:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e9a:	6982      	ldr	r2, [r0, #24]
 8008e9c:	2a20      	cmp	r2, #32
 8008e9e:	d015      	beq.n	8008ecc <HAL_UART_IRQHandler+0x150>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ea0:	68da      	ldr	r2, [r3, #12]
 8008ea2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ea6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea8:	695a      	ldr	r2, [r3, #20]
 8008eaa:	f022 0201 	bic.w	r2, r2, #1
 8008eae:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb0:	695a      	ldr	r2, [r3, #20]
 8008eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eb6:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ebe:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	f022 0210 	bic.w	r2, r2, #16
 8008ec6:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ec8:	f7fe f8ae 	bl	8007028 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ecc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8008ece:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008ed0:	1ac9      	subs	r1, r1, r3
 8008ed2:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f7ff fecc 	bl	8008c72 <HAL_UARTEx_RxEventCallback>
 8008eda:	e7bc      	b.n	8008e56 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008edc:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8008ede:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 8008ee0:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8008ee2:	b289      	uxth	r1, r1
 8008ee4:	2900      	cmp	r1, #0
 8008ee6:	d0b6      	beq.n	8008e56 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ee8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008eea:	1a09      	subs	r1, r1, r0
 8008eec:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	d0b1      	beq.n	8008e56 <HAL_UART_IRQHandler+0xda>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ef2:	68d8      	ldr	r0, [r3, #12]
 8008ef4:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8008ef8:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008efa:	6958      	ldr	r0, [r3, #20]
 8008efc:	f020 0001 	bic.w	r0, r0, #1
 8008f00:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8008f02:	2020      	movs	r0, #32
 8008f04:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f08:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	f022 0210 	bic.w	r2, r2, #16
 8008f10:	60da      	str	r2, [r3, #12]
 8008f12:	e7df      	b.n	8008ed4 <HAL_UART_IRQHandler+0x158>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f14:	0610      	lsls	r0, r2, #24
 8008f16:	d526      	bpl.n	8008f66 <HAL_UART_IRQHandler+0x1ea>
 8008f18:	060d      	lsls	r5, r1, #24
 8008f1a:	d524      	bpl.n	8008f66 <HAL_UART_IRQHandler+0x1ea>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f1c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008f20:	2a21      	cmp	r2, #33	; 0x21
 8008f22:	d198      	bne.n	8008e56 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f24:	68a1      	ldr	r1, [r4, #8]
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008f26:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f28:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008f2c:	d116      	bne.n	8008f5c <HAL_UART_IRQHandler+0x1e0>
 8008f2e:	6921      	ldr	r1, [r4, #16]
 8008f30:	b9a1      	cbnz	r1, 8008f5c <HAL_UART_IRQHandler+0x1e0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f32:	f832 1b02 	ldrh.w	r1, [r2], #2
 8008f36:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008f3a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f3c:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8008f3e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8008f40:	3a01      	subs	r2, #1
 8008f42:	b292      	uxth	r2, r2
 8008f44:	84e2      	strh	r2, [r4, #38]	; 0x26
 8008f46:	2a00      	cmp	r2, #0
 8008f48:	d185      	bne.n	8008e56 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f50:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f58:	60da      	str	r2, [r3, #12]
 8008f5a:	e77c      	b.n	8008e56 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f5c:	1c51      	adds	r1, r2, #1
 8008f5e:	6221      	str	r1, [r4, #32]
 8008f60:	7812      	ldrb	r2, [r2, #0]
 8008f62:	605a      	str	r2, [r3, #4]
 8008f64:	e7eb      	b.n	8008f3e <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f66:	0650      	lsls	r0, r2, #25
 8008f68:	f57f af75 	bpl.w	8008e56 <HAL_UART_IRQHandler+0xda>
 8008f6c:	064a      	lsls	r2, r1, #25
 8008f6e:	f57f af72 	bpl.w	8008e56 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f72:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8008f74:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f7a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008f7c:	2320      	movs	r3, #32
 8008f7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8008f82:	f7ff fe47 	bl	8008c14 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8008f86:	e766      	b.n	8008e56 <HAL_UART_IRQHandler+0xda>
 8008f88:	08008c63 	.word	0x08008c63

08008f8c <UART_Start_Receive_DMA>:
{
 8008f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f8e:	4613      	mov	r3, r2
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f90:	2500      	movs	r5, #0
  huart->RxXferSize = Size;
 8008f92:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f94:	2222      	movs	r2, #34	; 0x22
{
 8008f96:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8008f98:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f9a:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f9c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008fa0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008fa2:	4a12      	ldr	r2, [pc, #72]	; (8008fec <UART_Start_Receive_DMA+0x60>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008fa4:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008fa6:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008fa8:	4a11      	ldr	r2, [pc, #68]	; (8008ff0 <UART_Start_Receive_DMA+0x64>)
 8008faa:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008fac:	4a11      	ldr	r2, [pc, #68]	; (8008ff4 <UART_Start_Receive_DMA+0x68>)
  huart->hdmarx->XferAbortCallback = NULL;
 8008fae:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008fb2:	460a      	mov	r2, r1
 8008fb4:	1d31      	adds	r1, r6, #4
 8008fb6:	f7fd fffb 	bl	8006fb0 <HAL_DMA_Start_IT>
}
 8008fba:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	9501      	str	r5, [sp, #4]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	9201      	str	r2, [sp, #4]
 8008fc4:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 8008fc6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008fca:	9201      	str	r2, [sp, #4]
 8008fcc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fd4:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fd6:	695a      	ldr	r2, [r3, #20]
 8008fd8:	f042 0201 	orr.w	r2, r2, #1
 8008fdc:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fde:	695a      	ldr	r2, [r3, #20]
 8008fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fe4:	615a      	str	r2, [r3, #20]
}
 8008fe6:	b002      	add	sp, #8
 8008fe8:	bd70      	pop	{r4, r5, r6, pc}
 8008fea:	bf00      	nop
 8008fec:	08008c8f 	.word	0x08008c8f
 8008ff0:	08008c75 	.word	0x08008c75
 8008ff4:	08008c19 	.word	0x08008c19

08008ff8 <HAL_UART_Receive_DMA>:
{
 8008ff8:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ffa:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8008ffe:	2e20      	cmp	r6, #32
 8009000:	d110      	bne.n	8009024 <HAL_UART_Receive_DMA+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8009002:	b161      	cbz	r1, 800901e <HAL_UART_Receive_DMA+0x26>
 8009004:	b15a      	cbz	r2, 800901e <HAL_UART_Receive_DMA+0x26>
    __HAL_LOCK(huart);
 8009006:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800900a:	2c01      	cmp	r4, #1
 800900c:	d00a      	beq.n	8009024 <HAL_UART_Receive_DMA+0x2c>
 800900e:	2401      	movs	r4, #1
 8009010:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009014:	2400      	movs	r4, #0
 8009016:	6304      	str	r4, [r0, #48]	; 0x30
}
 8009018:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800901a:	f7ff bfb7 	b.w	8008f8c <UART_Start_Receive_DMA>
      return HAL_ERROR;
 800901e:	2001      	movs	r0, #1
}
 8009020:	bc70      	pop	{r4, r5, r6}
 8009022:	4770      	bx	lr
    return HAL_BUSY;
 8009024:	2002      	movs	r0, #2
 8009026:	e7fb      	b.n	8009020 <HAL_UART_Receive_DMA+0x28>

08009028 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009028:	b084      	sub	sp, #16
 800902a:	a801      	add	r0, sp, #4
 800902c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8009030:	b004      	add	sp, #16
 8009032:	2000      	movs	r0, #0
 8009034:	4770      	bx	lr

08009036 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009036:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009038:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800903c:	2000      	movs	r0, #0
 800903e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8009042:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8009046:	4770      	bx	lr

08009048 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009048:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800904c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009050:	045b      	lsls	r3, r3, #17
 8009052:	0c5b      	lsrs	r3, r3, #17
 8009054:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8009058:	2000      	movs	r0, #0
 800905a:	4770      	bx	lr

0800905c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800905c:	2000      	movs	r0, #0
 800905e:	4770      	bx	lr

08009060 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009060:	b084      	sub	sp, #16
 8009062:	b510      	push	{r4, lr}
 8009064:	4604      	mov	r4, r0
 8009066:	a803      	add	r0, sp, #12
 8009068:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800906c:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800906e:	2301      	movs	r3, #1
 8009070:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8009074:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009078:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800907c:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8009080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009084:	b004      	add	sp, #16
 8009086:	4770      	bx	lr

08009088 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009088:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800908a:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800908c:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800908e:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8009092:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009094:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009098:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800909c:	0424      	lsls	r4, r4, #16
 800909e:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 80090a0:	2d03      	cmp	r5, #3
 80090a2:	d848      	bhi.n	8009136 <USB_ActivateEndpoint+0xae>
 80090a4:	e8df f005 	tbb	[pc, r5]
 80090a8:	40424402 	.word	0x40424402
  HAL_StatusTypeDef ret = HAL_OK;
 80090ac:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80090ae:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80090b2:	f248 0680 	movw	r6, #32896	; 0x8080
 80090b6:	4334      	orrs	r4, r6
 80090b8:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80090bc:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80090c0:	4f8c      	ldr	r7, [pc, #560]	; (80092f4 <USB_ActivateEndpoint+0x26c>)
 80090c2:	b2a4      	uxth	r4, r4
 80090c4:	403c      	ands	r4, r7
 80090c6:	4314      	orrs	r4, r2
 80090c8:	4334      	orrs	r4, r6
 80090ca:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80090ce:	7b0c      	ldrb	r4, [r1, #12]
 80090d0:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 80090d4:	2c00      	cmp	r4, #0
 80090d6:	d17b      	bne.n	80091d0 <USB_ActivateEndpoint+0x148>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090d8:	88ce      	ldrh	r6, [r1, #6]
    if (ep->is_in != 0U)
 80090da:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090dc:	0876      	lsrs	r6, r6, #1
 80090de:	0076      	lsls	r6, r6, #1
    if (ep->is_in != 0U)
 80090e0:	b35c      	cbz	r4, 800913a <USB_ActivateEndpoint+0xb2>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090e2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80090e6:	b2a4      	uxth	r4, r4
 80090e8:	4464      	add	r4, ip
 80090ea:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090ee:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80090f2:	064e      	lsls	r6, r1, #25
 80090f4:	d509      	bpl.n	800910a <USB_ActivateEndpoint+0x82>
 80090f6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80090fa:	b289      	uxth	r1, r1
 80090fc:	4039      	ands	r1, r7
 80090fe:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009102:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009106:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800910a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800910e:	4c7a      	ldr	r4, [pc, #488]	; (80092f8 <USB_ActivateEndpoint+0x270>)
 8009110:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8009112:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009114:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8009118:	d001      	beq.n	800911e <USB_ActivateEndpoint+0x96>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800911a:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800911e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009122:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009126:	e0a9      	b.n	800927c <USB_ActivateEndpoint+0x1f4>
      wEpRegVal |= USB_EP_INTERRUPT;
 8009128:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800912c:	2000      	movs	r0, #0
      break;
 800912e:	e7c0      	b.n	80090b2 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009130:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8009134:	e7fa      	b.n	800912c <USB_ActivateEndpoint+0xa4>
  switch (ep->type)
 8009136:	2001      	movs	r0, #1
 8009138:	e7bb      	b.n	80090b2 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800913a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800913e:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009140:	b2a4      	uxth	r4, r4
 8009142:	4464      	add	r4, ip
 8009144:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009148:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800914c:	b2a4      	uxth	r4, r4
 800914e:	4464      	add	r4, ip
 8009150:	bb6d      	cbnz	r5, 80091ae <USB_ActivateEndpoint+0x126>
 8009152:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8009156:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800915a:	0409      	lsls	r1, r1, #16
 800915c:	0c09      	lsrs	r1, r1, #16
 800915e:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
 8009162:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8009166:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800916a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800916e:	b289      	uxth	r1, r1
 8009170:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009174:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009178:	044f      	lsls	r7, r1, #17
 800917a:	d50d      	bpl.n	8009198 <USB_ActivateEndpoint+0x110>
 800917c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009180:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009184:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009188:	0409      	lsls	r1, r1, #16
 800918a:	0c09      	lsrs	r1, r1, #16
 800918c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8009190:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009194:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009198:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800919c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80091a0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80091a4:	0409      	lsls	r1, r1, #16
 80091a6:	0c09      	lsrs	r1, r1, #16
 80091a8:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80091ac:	e7b7      	b.n	800911e <USB_ActivateEndpoint+0x96>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80091ae:	2d3e      	cmp	r5, #62	; 0x3e
 80091b0:	d805      	bhi.n	80091be <USB_ActivateEndpoint+0x136>
 80091b2:	0869      	lsrs	r1, r5, #1
 80091b4:	07ed      	lsls	r5, r5, #31
 80091b6:	bf48      	it	mi
 80091b8:	3101      	addmi	r1, #1
 80091ba:	0289      	lsls	r1, r1, #10
 80091bc:	e7d7      	b.n	800916e <USB_ActivateEndpoint+0xe6>
 80091be:	096e      	lsrs	r6, r5, #5
 80091c0:	06e9      	lsls	r1, r5, #27
 80091c2:	494e      	ldr	r1, [pc, #312]	; (80092fc <USB_ActivateEndpoint+0x274>)
 80091c4:	bf08      	it	eq
 80091c6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80091ca:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80091ce:	e7ce      	b.n	800916e <USB_ActivateEndpoint+0xe6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80091d0:	f833 6022 	ldrh.w	r6, [r3, r2, lsl #2]
 80091d4:	b2b6      	uxth	r6, r6
 80091d6:	403e      	ands	r6, r7
 80091d8:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
 80091dc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 80091e0:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80091e4:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80091e8:	890e      	ldrh	r6, [r1, #8]
 80091ea:	b2a4      	uxth	r4, r4
 80091ec:	0876      	lsrs	r6, r6, #1
 80091ee:	4464      	add	r4, ip
 80091f0:	0076      	lsls	r6, r6, #1
 80091f2:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 80091f6:	894e      	ldrh	r6, [r1, #10]
 80091f8:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80091fc:	0876      	lsrs	r6, r6, #1
 80091fe:	b2a4      	uxth	r4, r4
 8009200:	4464      	add	r4, ip
 8009202:	0076      	lsls	r6, r6, #1
 8009204:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 8009208:	7849      	ldrb	r1, [r1, #1]
 800920a:	bbd1      	cbnz	r1, 8009282 <USB_ActivateEndpoint+0x1fa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800920c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009210:	044e      	lsls	r6, r1, #17
 8009212:	d509      	bpl.n	8009228 <USB_ActivateEndpoint+0x1a0>
 8009214:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009218:	b289      	uxth	r1, r1
 800921a:	4039      	ands	r1, r7
 800921c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8009220:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009224:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009228:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800922c:	064d      	lsls	r5, r1, #25
 800922e:	d50d      	bpl.n	800924c <USB_ActivateEndpoint+0x1c4>
 8009230:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009234:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009238:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800923c:	0409      	lsls	r1, r1, #16
 800923e:	0c09      	lsrs	r1, r1, #16
 8009240:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009244:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009248:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800924c:	f248 0480 	movw	r4, #32896	; 0x8080
 8009250:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009254:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009258:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800925c:	0409      	lsls	r1, r1, #16
 800925e:	0c09      	lsrs	r1, r1, #16
 8009260:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8009264:	4321      	orrs	r1, r4
 8009266:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800926a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800926e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009272:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8009276:	0409      	lsls	r1, r1, #16
 8009278:	0c09      	lsrs	r1, r1, #16
 800927a:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800927c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
    }
  }

  return ret;
}
 8009280:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009282:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009286:	044c      	lsls	r4, r1, #17
 8009288:	d509      	bpl.n	800929e <USB_ActivateEndpoint+0x216>
 800928a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800928e:	b289      	uxth	r1, r1
 8009290:	4039      	ands	r1, r7
 8009292:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8009296:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800929a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800929e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80092a2:	0649      	lsls	r1, r1, #25
 80092a4:	d50d      	bpl.n	80092c2 <USB_ActivateEndpoint+0x23a>
 80092a6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80092aa:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80092ae:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80092b2:	0409      	lsls	r1, r1, #16
 80092b4:	0c09      	lsrs	r1, r1, #16
 80092b6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80092ba:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80092be:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80092c2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80092c6:	4c0c      	ldr	r4, [pc, #48]	; (80092f8 <USB_ActivateEndpoint+0x270>)
 80092c8:	b289      	uxth	r1, r1
 80092ca:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80092cc:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80092ce:	bf18      	it	ne
 80092d0:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092d4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80092d8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80092dc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092e0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80092e4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80092e8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80092ec:	0409      	lsls	r1, r1, #16
 80092ee:	0c09      	lsrs	r1, r1, #16
 80092f0:	e715      	b.n	800911e <USB_ActivateEndpoint+0x96>
 80092f2:	bf00      	nop
 80092f4:	ffff8f8f 	.word	0xffff8f8f
 80092f8:	ffff8fbf 	.word	0xffff8fbf
 80092fc:	ffff8000 	.word	0xffff8000

08009300 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8009300:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009302:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8009304:	7b09      	ldrb	r1, [r1, #12]
 8009306:	bbd9      	cbnz	r1, 8009380 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8009308:	b30a      	cbz	r2, 800934e <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800930a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800930e:	0651      	lsls	r1, r2, #25
 8009310:	d50d      	bpl.n	800932e <USB_DeactivateEndpoint+0x2e>
 8009312:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009316:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800931a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800931e:	0412      	lsls	r2, r2, #16
 8009320:	0c12      	lsrs	r2, r2, #16
 8009322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009326:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800932a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800932e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009332:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800933a:	0412      	lsls	r2, r2, #16
 800933c:	0c12      	lsrs	r2, r2, #16
 800933e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009342:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009346:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }

  return HAL_OK;
}
 800934a:	2000      	movs	r0, #0
 800934c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800934e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009352:	0452      	lsls	r2, r2, #17
 8009354:	d50d      	bpl.n	8009372 <USB_DeactivateEndpoint+0x72>
 8009356:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800935a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800935e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009362:	0412      	lsls	r2, r2, #16
 8009364:	0c12      	lsrs	r2, r2, #16
 8009366:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800936a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800936e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009372:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009376:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800937a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800937e:	e7dc      	b.n	800933a <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8009380:	2a00      	cmp	r2, #0
 8009382:	d148      	bne.n	8009416 <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009384:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009388:	0451      	lsls	r1, r2, #17
 800938a:	d50d      	bpl.n	80093a8 <USB_DeactivateEndpoint+0xa8>
 800938c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009390:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009394:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009398:	0412      	lsls	r2, r2, #16
 800939a:	0c12      	lsrs	r2, r2, #16
 800939c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80093a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80093a4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093a8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80093ac:	0652      	lsls	r2, r2, #25
 80093ae:	d50d      	bpl.n	80093cc <USB_DeactivateEndpoint+0xcc>
 80093b0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80093b4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80093b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80093bc:	0412      	lsls	r2, r2, #16
 80093be:	0c12      	lsrs	r2, r2, #16
 80093c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093c4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80093c8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093cc:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 80093d0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80093d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80093d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80093dc:	0412      	lsls	r2, r2, #16
 80093de:	0c12      	lsrs	r2, r2, #16
 80093e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093e4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80093e8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093ec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80093f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80093f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80093f8:	0412      	lsls	r2, r2, #16
 80093fa:	0c12      	lsrs	r2, r2, #16
 80093fc:	430a      	orrs	r2, r1
 80093fe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009402:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009406:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800940a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800940e:	0412      	lsls	r2, r2, #16
 8009410:	0c12      	lsrs	r2, r2, #16
 8009412:	430a      	orrs	r2, r1
 8009414:	e797      	b.n	8009346 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009416:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800941a:	0451      	lsls	r1, r2, #17
 800941c:	d50d      	bpl.n	800943a <USB_DeactivateEndpoint+0x13a>
 800941e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009422:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009426:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800942a:	0412      	lsls	r2, r2, #16
 800942c:	0c12      	lsrs	r2, r2, #16
 800942e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009432:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009436:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800943a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800943e:	0652      	lsls	r2, r2, #25
 8009440:	d50d      	bpl.n	800945e <USB_DeactivateEndpoint+0x15e>
 8009442:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009446:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800944a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800944e:	0412      	lsls	r2, r2, #16
 8009450:	0c12      	lsrs	r2, r2, #16
 8009452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009456:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800945a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800945e:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8009462:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009466:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800946a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800946e:	0412      	lsls	r2, r2, #16
 8009470:	0c12      	lsrs	r2, r2, #16
 8009472:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009476:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800947a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800947e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009482:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800948a:	0412      	lsls	r2, r2, #16
 800948c:	0c12      	lsrs	r2, r2, #16
 800948e:	430a      	orrs	r2, r1
 8009490:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009494:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009498:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800949c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80094a0:	e7b5      	b.n	800940e <USB_DeactivateEndpoint+0x10e>

080094a2 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80094a2:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80094a4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80094a6:	b18b      	cbz	r3, 80094cc <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80094a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80094ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094b4:	041b      	lsls	r3, r3, #16
 80094b6:	0c1b      	lsrs	r3, r3, #16
 80094b8:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80094bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80094c8:	2000      	movs	r0, #0
 80094ca:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80094cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80094d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d8:	041b      	lsls	r3, r3, #16
 80094da:	0c1b      	lsrs	r3, r3, #16
 80094dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80094e0:	e7ec      	b.n	80094bc <USB_EPSetStall+0x1a>

080094e2 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80094e2:	7b0b      	ldrb	r3, [r1, #12]
 80094e4:	bb3b      	cbnz	r3, 8009536 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 80094e6:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094e8:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80094ea:	b333      	cbz	r3, 800953a <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80094f0:	065b      	lsls	r3, r3, #25
 80094f2:	d50d      	bpl.n	8009510 <USB_EPClearStall+0x2e>
 80094f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80094f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009500:	041b      	lsls	r3, r3, #16
 8009502:	0c1b      	lsrs	r3, r3, #16
 8009504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800950c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8009510:	78cb      	ldrb	r3, [r1, #3]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d00f      	beq.n	8009536 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009516:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800951a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800951e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009522:	041b      	lsls	r3, r3, #16
 8009524:	0c1b      	lsrs	r3, r3, #16
 8009526:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800952a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800952e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009532:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8009536:	2000      	movs	r0, #0
 8009538:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800953a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800953e:	045b      	lsls	r3, r3, #17
 8009540:	d50d      	bpl.n	800955e <USB_EPClearStall+0x7c>
 8009542:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800954a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800954e:	041b      	lsls	r3, r3, #16
 8009550:	0c1b      	lsrs	r3, r3, #16
 8009552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800955e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800956a:	041b      	lsls	r3, r3, #16
 800956c:	0c1b      	lsrs	r3, r3, #16
 800956e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009572:	e7da      	b.n	800952a <USB_EPClearStall+0x48>

08009574 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8009574:	b911      	cbnz	r1, 800957c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009576:	2380      	movs	r3, #128	; 0x80
 8009578:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800957c:	2000      	movs	r0, #0
 800957e:	4770      	bx	lr

08009580 <USB_DevConnect>:
 8009580:	2000      	movs	r0, #0
 8009582:	4770      	bx	lr

08009584 <USB_DevDisconnect>:
 8009584:	2000      	movs	r0, #0
 8009586:	4770      	bx	lr

08009588 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009588:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800958c:	b280      	uxth	r0, r0
 800958e:	4770      	bx	lr

08009590 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8009590:	2000      	movs	r0, #0
 8009592:	4770      	bx	lr

08009594 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009594:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009598:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800959a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800959e:	085b      	lsrs	r3, r3, #1
 80095a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d100      	bne.n	80095aa <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80095a8:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80095aa:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80095ae:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 80095b2:	e7f7      	b.n	80095a4 <USB_WritePMA+0x10>

080095b4 <USB_EPStartXfer>:
{
 80095b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b6:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80095b8:	7849      	ldrb	r1, [r1, #1]
{
 80095ba:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 80095bc:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 80095be:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 80095c0:	f040 818e 	bne.w	80098e0 <USB_EPStartXfer+0x32c>
    if (ep->xfer_len > ep->maxpacket)
 80095c4:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80095c8:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80095ca:	6961      	ldr	r1, [r4, #20]
 80095cc:	4576      	cmp	r6, lr
 80095ce:	bf28      	it	cs
 80095d0:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 80095d2:	bb02      	cbnz	r2, 8009616 <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80095d4:	b2b6      	uxth	r6, r6
 80095d6:	88e2      	ldrh	r2, [r4, #6]
 80095d8:	4633      	mov	r3, r6
 80095da:	f7ff ffdb 	bl	8009594 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80095de:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80095e2:	7821      	ldrb	r1, [r4, #0]
 80095e4:	b290      	uxth	r0, r2
 80095e6:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80095ea:	0109      	lsls	r1, r1, #4
 80095ec:	4402      	add	r2, r0
 80095ee:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80095f0:	7822      	ldrb	r2, [r4, #0]
 80095f2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80095f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095fe:	041b      	lsls	r3, r3, #16
 8009600:	0c1b      	lsrs	r3, r3, #16
 8009602:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8009606:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800960c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009610:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8009614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8009616:	78e2      	ldrb	r2, [r4, #3]
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009618:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 800961a:	2a02      	cmp	r2, #2
        if (ep->xfer_len_db > ep->maxpacket)
 800961c:	6a23      	ldr	r3, [r4, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 800961e:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009622:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8009626:	f040 80bb 	bne.w	80097a0 <USB_EPStartXfer+0x1ec>
        if (ep->xfer_len_db > ep->maxpacket)
 800962a:	459e      	cmp	lr, r3
 800962c:	f080 809f 	bcs.w	800976e <USB_EPStartXfer+0x1ba>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009630:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009634:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009638:	0412      	lsls	r2, r2, #16
 800963a:	0c12      	lsrs	r2, r2, #16
 800963c:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8009640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009644:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009648:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
          ep->xfer_len_db -= len;
 800964c:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800964e:	f017 0740 	ands.w	r7, r7, #64	; 0x40
          ep->xfer_len_db -= len;
 8009652:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009654:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009658:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800965a:	d044      	beq.n	80096e6 <USB_EPStartXfer+0x132>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800965c:	b297      	uxth	r7, r2
 800965e:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8009662:	443a      	add	r2, r7
 8009664:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009668:	8962      	ldrh	r2, [r4, #10]
 800966a:	f7ff ff93 	bl	8009594 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800966e:	6a22      	ldr	r2, [r4, #32]
 8009670:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8009672:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8009674:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8009676:	bf8a      	itet	hi
 8009678:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800967a:	2300      	movls	r3, #0
 800967c:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800967e:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8009680:	4431      	add	r1, r6
 8009682:	6223      	str	r3, [r4, #32]
 8009684:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009686:	b293      	uxth	r3, r2
 8009688:	2800      	cmp	r0, #0
 800968a:	f040 80d7 	bne.w	800983c <USB_EPStartXfer+0x288>
 800968e:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8009692:	7826      	ldrb	r6, [r4, #0]
 8009694:	b280      	uxth	r0, r0
 8009696:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800969a:	0136      	lsls	r6, r6, #4
 800969c:	4438      	add	r0, r7
 800969e:	b96a      	cbnz	r2, 80096bc <USB_EPStartXfer+0x108>
 80096a0:	5a32      	ldrh	r2, [r6, r0]
 80096a2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80096a6:	0412      	lsls	r2, r2, #16
 80096a8:	0c12      	lsrs	r2, r2, #16
 80096aa:	5232      	strh	r2, [r6, r0]
 80096ac:	5a32      	ldrh	r2, [r6, r0]
 80096ae:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80096b2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80096b6:	b292      	uxth	r2, r2
 80096b8:	5232      	strh	r2, [r6, r0]
 80096ba:	e008      	b.n	80096ce <USB_EPStartXfer+0x11a>
 80096bc:	2a3e      	cmp	r2, #62	; 0x3e
 80096be:	d809      	bhi.n	80096d4 <USB_EPStartXfer+0x120>
 80096c0:	0857      	lsrs	r7, r2, #1
 80096c2:	07d2      	lsls	r2, r2, #31
 80096c4:	bf48      	it	mi
 80096c6:	3701      	addmi	r7, #1
 80096c8:	02bf      	lsls	r7, r7, #10
 80096ca:	b2bf      	uxth	r7, r7
 80096cc:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096ce:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096d0:	4628      	mov	r0, r5
 80096d2:	e062      	b.n	800979a <USB_EPStartXfer+0x1e6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096d4:	0957      	lsrs	r7, r2, #5
 80096d6:	06d2      	lsls	r2, r2, #27
 80096d8:	4a91      	ldr	r2, [pc, #580]	; (8009920 <USB_EPStartXfer+0x36c>)
 80096da:	bf08      	it	eq
 80096dc:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80096e0:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80096e4:	e7e7      	b.n	80096b6 <USB_EPStartXfer+0x102>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096e6:	fa1f fe82 	uxth.w	lr, r2
 80096ea:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80096ee:	4472      	add	r2, lr
 80096f0:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096f4:	8922      	ldrh	r2, [r4, #8]
 80096f6:	f7ff ff4d 	bl	8009594 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80096fa:	6a22      	ldr	r2, [r4, #32]
 80096fc:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80096fe:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8009700:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8009702:	bf84      	itt	hi
 8009704:	1b97      	subhi	r7, r2, r6
 8009706:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009708:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 800970a:	4431      	add	r1, r6
 800970c:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db -= len;
 800970e:	6227      	str	r7, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009710:	b293      	uxth	r3, r2
 8009712:	2800      	cmp	r0, #0
 8009714:	f040 80d7 	bne.w	80098c6 <USB_EPStartXfer+0x312>
 8009718:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800971c:	7826      	ldrb	r6, [r4, #0]
 800971e:	b280      	uxth	r0, r0
 8009720:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8009724:	0136      	lsls	r6, r6, #4
 8009726:	4438      	add	r0, r7
 8009728:	b96a      	cbnz	r2, 8009746 <USB_EPStartXfer+0x192>
 800972a:	5a32      	ldrh	r2, [r6, r0]
 800972c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009730:	0412      	lsls	r2, r2, #16
 8009732:	0c12      	lsrs	r2, r2, #16
 8009734:	5232      	strh	r2, [r6, r0]
 8009736:	5a32      	ldrh	r2, [r6, r0]
 8009738:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800973c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009740:	b292      	uxth	r2, r2
 8009742:	5232      	strh	r2, [r6, r0]
 8009744:	e008      	b.n	8009758 <USB_EPStartXfer+0x1a4>
 8009746:	2a3e      	cmp	r2, #62	; 0x3e
 8009748:	d808      	bhi.n	800975c <USB_EPStartXfer+0x1a8>
 800974a:	0857      	lsrs	r7, r2, #1
 800974c:	07d2      	lsls	r2, r2, #31
 800974e:	bf48      	it	mi
 8009750:	3701      	addmi	r7, #1
 8009752:	02bf      	lsls	r7, r7, #10
 8009754:	b2bf      	uxth	r7, r7
 8009756:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009758:	8962      	ldrh	r2, [r4, #10]
 800975a:	e7b9      	b.n	80096d0 <USB_EPStartXfer+0x11c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800975c:	0957      	lsrs	r7, r2, #5
 800975e:	06d2      	lsls	r2, r2, #27
 8009760:	4a6f      	ldr	r2, [pc, #444]	; (8009920 <USB_EPStartXfer+0x36c>)
 8009762:	bf08      	it	eq
 8009764:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8009768:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800976c:	e7e8      	b.n	8009740 <USB_EPStartXfer+0x18c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800976e:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8009772:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009776:	0412      	lsls	r2, r2, #16
 8009778:	0c12      	lsrs	r2, r2, #16
 800977a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800977e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009782:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009786:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800978a:	b29b      	uxth	r3, r3
 800978c:	b296      	uxth	r6, r2
 800978e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8009792:	4432      	add	r2, r6
 8009794:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009798:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800979a:	f7ff fefb 	bl	8009594 <USB_WritePMA>
 800979e:	e727      	b.n	80095f0 <USB_EPStartXfer+0x3c>
        PCD_SET_EP_DBUF(USBx, ep->num);
 80097a0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80097a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80097a8:	0412      	lsls	r2, r2, #16
 80097aa:	0c12      	lsrs	r2, r2, #16
 80097ac:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80097b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097b4:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80097b8:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 80097bc:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80097be:	f017 0740 	ands.w	r7, r7, #64	; 0x40
        ep->xfer_len_db -= len;
 80097c2:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80097c4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80097c8:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80097ca:	d044      	beq.n	8009856 <USB_EPStartXfer+0x2a2>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80097cc:	b297      	uxth	r7, r2
 80097ce:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80097d2:	443a      	add	r2, r7
 80097d4:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097d8:	8962      	ldrh	r2, [r4, #10]
 80097da:	f7ff fedb 	bl	8009594 <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 80097de:	6a22      	ldr	r2, [r4, #32]
 80097e0:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 80097e2:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 80097e4:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 80097e6:	bf8a      	itet	hi
 80097e8:	1b93      	subhi	r3, r2, r6
            ep->xfer_len_db = 0U;
 80097ea:	2300      	movls	r3, #0
 80097ec:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 80097ee:	4431      	add	r1, r6
 80097f0:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 80097f2:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 80097f4:	2a00      	cmp	r2, #0
 80097f6:	f43f aefb 	beq.w	80095f0 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097fa:	7860      	ldrb	r0, [r4, #1]
 80097fc:	b293      	uxth	r3, r2
 80097fe:	b9e8      	cbnz	r0, 800983c <USB_EPStartXfer+0x288>
 8009800:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8009804:	7827      	ldrb	r7, [r4, #0]
 8009806:	b2b0      	uxth	r0, r6
 8009808:	2a3e      	cmp	r2, #62	; 0x3e
 800980a:	f205 4604 	addw	r6, r5, #1028	; 0x404
 800980e:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8009812:	4406      	add	r6, r0
 8009814:	d807      	bhi.n	8009826 <USB_EPStartXfer+0x272>
 8009816:	0850      	lsrs	r0, r2, #1
 8009818:	07d2      	lsls	r2, r2, #31
 800981a:	bf48      	it	mi
 800981c:	3001      	addmi	r0, #1
 800981e:	0280      	lsls	r0, r0, #10
 8009820:	b280      	uxth	r0, r0
 8009822:	53b8      	strh	r0, [r7, r6]
 8009824:	e753      	b.n	80096ce <USB_EPStartXfer+0x11a>
 8009826:	0950      	lsrs	r0, r2, #5
 8009828:	06d2      	lsls	r2, r2, #27
 800982a:	4a3d      	ldr	r2, [pc, #244]	; (8009920 <USB_EPStartXfer+0x36c>)
 800982c:	bf08      	it	eq
 800982e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8009832:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8009836:	b292      	uxth	r2, r2
 8009838:	53ba      	strh	r2, [r7, r6]
 800983a:	e748      	b.n	80096ce <USB_EPStartXfer+0x11a>
 800983c:	2801      	cmp	r0, #1
 800983e:	f47f af46 	bne.w	80096ce <USB_EPStartXfer+0x11a>
 8009842:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009846:	7820      	ldrb	r0, [r4, #0]
 8009848:	b296      	uxth	r6, r2
 800984a:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800984e:	0100      	lsls	r0, r0, #4
 8009850:	4432      	add	r2, r6
 8009852:	5283      	strh	r3, [r0, r2]
 8009854:	e73b      	b.n	80096ce <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009856:	fa1f fe82 	uxth.w	lr, r2
 800985a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800985e:	4472      	add	r2, lr
 8009860:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009864:	8922      	ldrh	r2, [r4, #8]
 8009866:	f7ff fe95 	bl	8009594 <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 800986a:	6a22      	ldr	r2, [r4, #32]
 800986c:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 800986e:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8009870:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 8009872:	bf84      	itt	hi
 8009874:	1b97      	subhi	r7, r2, r6
 8009876:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 8009878:	4431      	add	r1, r6
 800987a:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 800987c:	6227      	str	r7, [r4, #32]
          if (len > 0U)
 800987e:	2a00      	cmp	r2, #0
 8009880:	f43f aeb6 	beq.w	80095f0 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009884:	7860      	ldrb	r0, [r4, #1]
 8009886:	b293      	uxth	r3, r2
 8009888:	b9e8      	cbnz	r0, 80098c6 <USB_EPStartXfer+0x312>
 800988a:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800988e:	7827      	ldrb	r7, [r4, #0]
 8009890:	b2b0      	uxth	r0, r6
 8009892:	2a3e      	cmp	r2, #62	; 0x3e
 8009894:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 8009898:	ea4f 1707 	mov.w	r7, r7, lsl #4
 800989c:	4406      	add	r6, r0
 800989e:	d807      	bhi.n	80098b0 <USB_EPStartXfer+0x2fc>
 80098a0:	0850      	lsrs	r0, r2, #1
 80098a2:	07d2      	lsls	r2, r2, #31
 80098a4:	bf48      	it	mi
 80098a6:	3001      	addmi	r0, #1
 80098a8:	0280      	lsls	r0, r0, #10
 80098aa:	b280      	uxth	r0, r0
 80098ac:	53b8      	strh	r0, [r7, r6]
 80098ae:	e753      	b.n	8009758 <USB_EPStartXfer+0x1a4>
 80098b0:	0950      	lsrs	r0, r2, #5
 80098b2:	06d2      	lsls	r2, r2, #27
 80098b4:	4a1a      	ldr	r2, [pc, #104]	; (8009920 <USB_EPStartXfer+0x36c>)
 80098b6:	bf08      	it	eq
 80098b8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80098bc:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80098c0:	b292      	uxth	r2, r2
 80098c2:	53ba      	strh	r2, [r7, r6]
 80098c4:	e748      	b.n	8009758 <USB_EPStartXfer+0x1a4>
 80098c6:	2801      	cmp	r0, #1
 80098c8:	f47f af46 	bne.w	8009758 <USB_EPStartXfer+0x1a4>
 80098cc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80098d0:	7820      	ldrb	r0, [r4, #0]
 80098d2:	b296      	uxth	r6, r2
 80098d4:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80098d8:	0100      	lsls	r0, r0, #4
 80098da:	4432      	add	r2, r6
 80098dc:	5283      	strh	r3, [r0, r2]
 80098de:	e73b      	b.n	8009758 <USB_EPStartXfer+0x1a4>
    if (ep->doublebuffer == 0U)
 80098e0:	bb02      	cbnz	r2, 8009924 <USB_EPStartXfer+0x370>
      if (ep->xfer_len > ep->maxpacket)
 80098e2:	69a3      	ldr	r3, [r4, #24]
 80098e4:	6921      	ldr	r1, [r4, #16]
 80098e6:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 80098e8:	bf88      	it	hi
 80098ea:	1a5a      	subhi	r2, r3, r1
 80098ec:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80098ee:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80098f2:	bf88      	it	hi
 80098f4:	460b      	movhi	r3, r1
 80098f6:	7821      	ldrb	r1, [r4, #0]
 80098f8:	b292      	uxth	r2, r2
 80098fa:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80098fe:	0109      	lsls	r1, r1, #4
 8009900:	4402      	add	r2, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009902:	2b00      	cmp	r3, #0
 8009904:	f000 80c8 	beq.w	8009a98 <USB_EPStartXfer+0x4e4>
 8009908:	2b3e      	cmp	r3, #62	; 0x3e
 800990a:	f200 80d3 	bhi.w	8009ab4 <USB_EPStartXfer+0x500>
 800990e:	0858      	lsrs	r0, r3, #1
 8009910:	07de      	lsls	r6, r3, #31
 8009912:	bf48      	it	mi
 8009914:	3001      	addmi	r0, #1
 8009916:	0280      	lsls	r0, r0, #10
 8009918:	b280      	uxth	r0, r0
 800991a:	5250      	strh	r0, [r2, r1]
 800991c:	e04b      	b.n	80099b6 <USB_EPStartXfer+0x402>
 800991e:	bf00      	nop
 8009920:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8009924:	78e3      	ldrb	r3, [r4, #3]
 8009926:	2b02      	cmp	r3, #2
 8009928:	d179      	bne.n	8009a1e <USB_EPStartXfer+0x46a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800992a:	bb51      	cbnz	r1, 8009982 <USB_EPStartXfer+0x3ce>
 800992c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009930:	7821      	ldrb	r1, [r4, #0]
 8009932:	b293      	uxth	r3, r2
 8009934:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8009938:	441a      	add	r2, r3
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	0109      	lsls	r1, r1, #4
 800993e:	2b00      	cmp	r3, #0
 8009940:	d145      	bne.n	80099ce <USB_EPStartXfer+0x41a>
 8009942:	5a88      	ldrh	r0, [r1, r2]
 8009944:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8009948:	0400      	lsls	r0, r0, #16
 800994a:	0c00      	lsrs	r0, r0, #16
 800994c:	5288      	strh	r0, [r1, r2]
 800994e:	5a88      	ldrh	r0, [r1, r2]
 8009950:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8009954:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8009958:	b280      	uxth	r0, r0
 800995a:	5288      	strh	r0, [r1, r2]
 800995c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8009960:	7822      	ldrb	r2, [r4, #0]
 8009962:	b289      	uxth	r1, r1
 8009964:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8009968:	0112      	lsls	r2, r2, #4
 800996a:	4401      	add	r1, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d03f      	beq.n	80099f0 <USB_EPStartXfer+0x43c>
 8009970:	2b3e      	cmp	r3, #62	; 0x3e
 8009972:	d84b      	bhi.n	8009a0c <USB_EPStartXfer+0x458>
 8009974:	0858      	lsrs	r0, r3, #1
 8009976:	07db      	lsls	r3, r3, #31
 8009978:	bf48      	it	mi
 800997a:	3001      	addmi	r0, #1
 800997c:	0280      	lsls	r0, r0, #10
 800997e:	b280      	uxth	r0, r0
 8009980:	5250      	strh	r0, [r2, r1]
        if (ep->xfer_count != 0U)
 8009982:	69e3      	ldr	r3, [r4, #28]
 8009984:	b1bb      	cbz	r3, 80099b6 <USB_EPStartXfer+0x402>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009986:	f244 0340 	movw	r3, #16448	; 0x4040
 800998a:	7822      	ldrb	r2, [r4, #0]
 800998c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009990:	ea03 0001 	and.w	r0, r3, r1
 8009994:	438b      	bics	r3, r1
 8009996:	d000      	beq.n	800999a <USB_EPStartXfer+0x3e6>
 8009998:	b968      	cbnz	r0, 80099b6 <USB_EPStartXfer+0x402>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800999a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800999e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a6:	041b      	lsls	r3, r3, #16
 80099a8:	0c1b      	lsrs	r3, r3, #16
 80099aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099b2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099b6:	7822      	ldrb	r2, [r4, #0]
 80099b8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80099bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c4:	041b      	lsls	r3, r3, #16
 80099c6:	0c1b      	lsrs	r3, r3, #16
 80099c8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80099cc:	e61b      	b.n	8009606 <USB_EPStartXfer+0x52>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80099ce:	2b3e      	cmp	r3, #62	; 0x3e
 80099d0:	d805      	bhi.n	80099de <USB_EPStartXfer+0x42a>
 80099d2:	0858      	lsrs	r0, r3, #1
 80099d4:	07de      	lsls	r6, r3, #31
 80099d6:	bf48      	it	mi
 80099d8:	3001      	addmi	r0, #1
 80099da:	0280      	lsls	r0, r0, #10
 80099dc:	e7bc      	b.n	8009958 <USB_EPStartXfer+0x3a4>
 80099de:	095e      	lsrs	r6, r3, #5
 80099e0:	06d8      	lsls	r0, r3, #27
 80099e2:	483a      	ldr	r0, [pc, #232]	; (8009acc <USB_EPStartXfer+0x518>)
 80099e4:	bf08      	it	eq
 80099e6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80099ea:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80099ee:	e7b3      	b.n	8009958 <USB_EPStartXfer+0x3a4>
 80099f0:	5a53      	ldrh	r3, [r2, r1]
 80099f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099f6:	041b      	lsls	r3, r3, #16
 80099f8:	0c1b      	lsrs	r3, r3, #16
 80099fa:	5253      	strh	r3, [r2, r1]
 80099fc:	5a53      	ldrh	r3, [r2, r1]
 80099fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	5253      	strh	r3, [r2, r1]
 8009a0a:	e7ba      	b.n	8009982 <USB_EPStartXfer+0x3ce>
 8009a0c:	0958      	lsrs	r0, r3, #5
 8009a0e:	06df      	lsls	r7, r3, #27
 8009a10:	4b2e      	ldr	r3, [pc, #184]	; (8009acc <USB_EPStartXfer+0x518>)
 8009a12:	bf08      	it	eq
 8009a14:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8009a18:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8009a1c:	e7f3      	b.n	8009a06 <USB_EPStartXfer+0x452>
      else if (ep->type == EP_TYPE_ISOC)
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d151      	bne.n	8009ac6 <USB_EPStartXfer+0x512>
        if (ep->xfer_len > ep->maxpacket)
 8009a22:	69a3      	ldr	r3, [r4, #24]
 8009a24:	6922      	ldr	r2, [r4, #16]
 8009a26:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8009a28:	bf94      	ite	ls
 8009a2a:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8009a2c:	1a98      	subhi	r0, r3, r2
 8009a2e:	61a0      	str	r0, [r4, #24]
 8009a30:	bf88      	it	hi
 8009a32:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009a34:	2900      	cmp	r1, #0
 8009a36:	d1be      	bne.n	80099b6 <USB_EPStartXfer+0x402>
 8009a38:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009a3c:	7821      	ldrb	r1, [r4, #0]
 8009a3e:	b292      	uxth	r2, r2
 8009a40:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8009a44:	0109      	lsls	r1, r1, #4
 8009a46:	4402      	add	r2, r0
 8009a48:	b9ab      	cbnz	r3, 8009a76 <USB_EPStartXfer+0x4c2>
 8009a4a:	5a88      	ldrh	r0, [r1, r2]
 8009a4c:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8009a50:	0400      	lsls	r0, r0, #16
 8009a52:	0c00      	lsrs	r0, r0, #16
 8009a54:	5288      	strh	r0, [r1, r2]
 8009a56:	5a88      	ldrh	r0, [r1, r2]
 8009a58:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8009a5c:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8009a60:	b280      	uxth	r0, r0
 8009a62:	5288      	strh	r0, [r1, r2]
 8009a64:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8009a68:	7822      	ldrb	r2, [r4, #0]
 8009a6a:	b289      	uxth	r1, r1
 8009a6c:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8009a70:	0112      	lsls	r2, r2, #4
 8009a72:	4401      	add	r1, r0
 8009a74:	e745      	b.n	8009902 <USB_EPStartXfer+0x34e>
 8009a76:	2b3e      	cmp	r3, #62	; 0x3e
 8009a78:	d805      	bhi.n	8009a86 <USB_EPStartXfer+0x4d2>
 8009a7a:	0858      	lsrs	r0, r3, #1
 8009a7c:	07de      	lsls	r6, r3, #31
 8009a7e:	bf48      	it	mi
 8009a80:	3001      	addmi	r0, #1
 8009a82:	0280      	lsls	r0, r0, #10
 8009a84:	e7ec      	b.n	8009a60 <USB_EPStartXfer+0x4ac>
 8009a86:	095e      	lsrs	r6, r3, #5
 8009a88:	4810      	ldr	r0, [pc, #64]	; (8009acc <USB_EPStartXfer+0x518>)
 8009a8a:	06df      	lsls	r7, r3, #27
 8009a8c:	bf08      	it	eq
 8009a8e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8009a92:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8009a96:	e7e3      	b.n	8009a60 <USB_EPStartXfer+0x4ac>
 8009a98:	5a53      	ldrh	r3, [r2, r1]
 8009a9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a9e:	041b      	lsls	r3, r3, #16
 8009aa0:	0c1b      	lsrs	r3, r3, #16
 8009aa2:	5253      	strh	r3, [r2, r1]
 8009aa4:	5a53      	ldrh	r3, [r2, r1]
 8009aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	5253      	strh	r3, [r2, r1]
 8009ab2:	e780      	b.n	80099b6 <USB_EPStartXfer+0x402>
 8009ab4:	0958      	lsrs	r0, r3, #5
 8009ab6:	06db      	lsls	r3, r3, #27
 8009ab8:	4b04      	ldr	r3, [pc, #16]	; (8009acc <USB_EPStartXfer+0x518>)
 8009aba:	bf08      	it	eq
 8009abc:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8009ac0:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8009ac4:	e7f3      	b.n	8009aae <USB_EPStartXfer+0x4fa>
        return HAL_ERROR;
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	e5a4      	b.n	8009614 <USB_EPStartXfer+0x60>
 8009aca:	bf00      	nop
 8009acc:	ffff8000 	.word	0xffff8000

08009ad0 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ad0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8009ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009ada:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 8009adc:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ade:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8009ae0:	462e      	mov	r6, r5
 8009ae2:	3402      	adds	r4, #2
 8009ae4:	b936      	cbnz	r6, 8009af4 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009ae6:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8009ae8:	bf44      	itt	mi
 8009aea:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009aee:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8009af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8009af4:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8009af8:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8009afa:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009afc:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009b00:	0a00      	lsrs	r0, r0, #8
 8009b02:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 8009b06:	e7ec      	b.n	8009ae2 <USB_ReadPMA+0x12>

08009b08 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b08:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8009b0c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b0e:	b16b      	cbz	r3, 8009b2c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b10:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b14:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8009b18:	28ff      	cmp	r0, #255	; 0xff
 8009b1a:	d007      	beq.n	8009b2c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	4621      	mov	r1, r4
 8009b20:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8009b24:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8009b26:	23ff      	movs	r3, #255	; 0xff
 8009b28:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	bd10      	pop	{r4, pc}

08009b30 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009b30:	2343      	movs	r3, #67	; 0x43
 8009b32:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8009b34:	4800      	ldr	r0, [pc, #0]	; (8009b38 <USBD_CDC_GetFSCfgDesc+0x8>)
 8009b36:	4770      	bx	lr
 8009b38:	2000005c 	.word	0x2000005c

08009b3c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009b3c:	2343      	movs	r3, #67	; 0x43
 8009b3e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8009b40:	4800      	ldr	r0, [pc, #0]	; (8009b44 <USBD_CDC_GetHSCfgDesc+0x8>)
 8009b42:	4770      	bx	lr
 8009b44:	200000a0 	.word	0x200000a0

08009b48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009b48:	2343      	movs	r3, #67	; 0x43
 8009b4a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8009b4c:	4800      	ldr	r0, [pc, #0]	; (8009b50 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8009b4e:	4770      	bx	lr
 8009b50:	200000f0 	.word	0x200000f0

08009b54 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b54:	230a      	movs	r3, #10
 8009b56:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8009b58:	4800      	ldr	r0, [pc, #0]	; (8009b5c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8009b5a:	4770      	bx	lr
 8009b5c:	200000e4 	.word	0x200000e4

08009b60 <USBD_CDC_DataOut>:
{
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b64:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b68:	f000 ff85 	bl	800aa76 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8009b6c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b70:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8009b74:	b14b      	cbz	r3, 8009b8a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009b76:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8009b7a:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8009b84:	4798      	blx	r3
    return USBD_OK;
 8009b86:	2000      	movs	r0, #0
}
 8009b88:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8009b8a:	2002      	movs	r0, #2
 8009b8c:	e7fc      	b.n	8009b88 <USBD_CDC_DataOut+0x28>

08009b8e <USBD_CDC_DataIn>:
{
 8009b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b90:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8009b94:	b1d6      	cbz	r6, 8009bcc <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009b96:	2214      	movs	r2, #20
 8009b98:	fb02 0201 	mla	r2, r2, r1, r0
 8009b9c:	69d4      	ldr	r4, [r2, #28]
 8009b9e:	b18c      	cbz	r4, 8009bc4 <USBD_CDC_DataIn+0x36>
 8009ba0:	2728      	movs	r7, #40	; 0x28
 8009ba2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009ba6:	fb07 3501 	mla	r5, r7, r1, r3
 8009baa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009bac:	fbb4 f5f3 	udiv	r5, r4, r3
 8009bb0:	fb03 4415 	mls	r4, r3, r5, r4
 8009bb4:	b934      	cbnz	r4, 8009bc4 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8009bb6:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009bb8:	4623      	mov	r3, r4
 8009bba:	4622      	mov	r2, r4
 8009bbc:	f000 ff49 	bl	800aa52 <USBD_LL_Transmit>
    return USBD_OK;
 8009bc0:	4620      	mov	r0, r4
}
 8009bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8009bca:	e7fa      	b.n	8009bc2 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8009bcc:	2002      	movs	r0, #2
 8009bce:	e7f8      	b.n	8009bc2 <USBD_CDC_DataIn+0x34>

08009bd0 <USBD_CDC_Setup>:
{
 8009bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8009bd4:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bd8:	780a      	ldrb	r2, [r1, #0]
{
 8009bda:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bdc:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8009be0:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009be2:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8009be6:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8009bea:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bee:	d028      	beq.n	8009c42 <USBD_CDC_Setup+0x72>
 8009bf0:	2c20      	cmp	r4, #32
 8009bf2:	d142      	bne.n	8009c7a <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8009bf4:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bf6:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8009bf8:	b1e4      	cbz	r4, 8009c34 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8009bfa:	0612      	lsls	r2, r2, #24
 8009bfc:	d511      	bpl.n	8009c22 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bfe:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8009c02:	4639      	mov	r1, r7
 8009c04:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009c0e:	4639      	mov	r1, r7
 8009c10:	4628      	mov	r0, r5
 8009c12:	88f2      	ldrh	r2, [r6, #6]
 8009c14:	f000 fc4b 	bl	800a4ae <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8009c18:	4644      	mov	r4, r8
}
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	b003      	add	sp, #12
 8009c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009c22:	4622      	mov	r2, r4
 8009c24:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 8009c26:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009c2a:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009c2e:	f000 fc53 	bl	800a4d8 <USBD_CtlPrepareRx>
 8009c32:	e7f1      	b.n	8009c18 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c34:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8009c38:	4618      	mov	r0, r3
 8009c3a:	6895      	ldr	r5, [r2, #8]
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	47a8      	blx	r5
 8009c40:	e7eb      	b.n	8009c1a <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8009c42:	784b      	ldrb	r3, [r1, #1]
 8009c44:	2b0a      	cmp	r3, #10
 8009c46:	d00c      	beq.n	8009c62 <USBD_CDC_Setup+0x92>
 8009c48:	2b0b      	cmp	r3, #11
 8009c4a:	d012      	beq.n	8009c72 <USBD_CDC_Setup+0xa2>
 8009c4c:	b9ab      	cbnz	r3, 8009c7a <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d111      	bne.n	8009c7a <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009c56:	2202      	movs	r2, #2
 8009c58:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c5c:	f000 fc27 	bl	800a4ae <USBD_CtlSendData>
 8009c60:	e7db      	b.n	8009c1a <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c62:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d107      	bne.n	8009c7a <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f10d 0105 	add.w	r1, sp, #5
 8009c70:	e7f4      	b.n	8009c5c <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d0cf      	beq.n	8009c1a <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f000 fbef 	bl	800a460 <USBD_CtlError>
          ret = USBD_FAIL;
 8009c82:	2402      	movs	r4, #2
          break;
 8009c84:	e7c9      	b.n	8009c1a <USBD_CDC_Setup+0x4a>

08009c86 <USBD_CDC_DeInit>:
{
 8009c86:	b538      	push	{r3, r4, r5, lr}
 8009c88:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009c8a:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009c8c:	2181      	movs	r1, #129	; 0x81
 8009c8e:	f000 feaa 	bl	800a9e6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009c92:	2101      	movs	r1, #1
 8009c94:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009c96:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009c98:	f000 fea5 	bl	800a9e6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009c9c:	2182      	movs	r1, #130	; 0x82
 8009c9e:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009ca0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009ca4:	f000 fe9f 	bl	800a9e6 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8009ca8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009cac:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8009cae:	b14b      	cbz	r3, 8009cc4 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009cb0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009cb8:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8009cbc:	f000 fee4 	bl	800aa88 <USBD_static_free>
    pdev->pClassData = NULL;
 8009cc0:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}

08009cc8 <USBD_CDC_Init>:
{
 8009cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ccc:	7c03      	ldrb	r3, [r0, #16]
{
 8009cce:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cd0:	bbbb      	cbnz	r3, 8009d42 <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009cda:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009cdc:	f000 fe77 	bl	800a9ce <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009ce4:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009ce6:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ce8:	4629      	mov	r1, r5
 8009cea:	2202      	movs	r2, #2
 8009cec:	4620      	mov	r0, r4
 8009cee:	f000 fe6e 	bl	800a9ce <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cf2:	2308      	movs	r3, #8
 8009cf4:	2203      	movs	r2, #3
 8009cf6:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009cf8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f000 fe66 	bl	800a9ce <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d02:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009d06:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d08:	f000 feba 	bl	800aa80 <USBD_static_malloc>
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8009d12:	b340      	cbz	r0, 8009d66 <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 8009d14:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009d18:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4798      	blx	r3
    hcdc->TxState = 0U;
 8009d20:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8009d24:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d28:	7c26      	ldrb	r6, [r4, #16]
 8009d2a:	b99e      	cbnz	r6, 8009d54 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d30:	4639      	mov	r1, r7
 8009d32:	4620      	mov	r0, r4
 8009d34:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8009d38:	f000 fe94 	bl	800aa64 <USBD_LL_PrepareReceive>
}
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d42:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d44:	2340      	movs	r3, #64	; 0x40
 8009d46:	2202      	movs	r2, #2
 8009d48:	2181      	movs	r1, #129	; 0x81
 8009d4a:	f000 fe40 	bl	800a9ce <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d4e:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d50:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d52:	e7c8      	b.n	8009ce6 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d54:	2340      	movs	r3, #64	; 0x40
 8009d56:	4639      	mov	r1, r7
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8009d5e:	f000 fe81 	bl	800aa64 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8009d62:	4646      	mov	r6, r8
 8009d64:	e7ea      	b.n	8009d3c <USBD_CDC_Init+0x74>
    ret = 1U;
 8009d66:	463e      	mov	r6, r7
 8009d68:	e7e8      	b.n	8009d3c <USBD_CDC_Init+0x74>

08009d6a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8009d6a:	b119      	cbz	r1, 8009d74 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8009d6c:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8009d70:	2000      	movs	r0, #0
 8009d72:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8009d74:	2002      	movs	r0, #2
  }

  return ret;
}
 8009d76:	4770      	bx	lr

08009d78 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d78:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8009d7c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8009d7e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009d82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8009d86:	4770      	bx	lr

08009d88 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8009d88:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8009d8c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8009d8e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8009d92:	4770      	bx	lr

08009d94 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d94:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8009d98:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8009d9a:	b182      	cbz	r2, 8009dbe <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8009d9c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8009da0:	2301      	movs	r3, #1
 8009da2:	b974      	cbnz	r4, 8009dc2 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009da4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009da8:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009dac:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009dae:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009db0:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	f000 fe4c 	bl	800aa52 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8009dba:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8009dbc:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8009dbe:	2002      	movs	r0, #2
 8009dc0:	e7fc      	b.n	8009dbc <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	e7fa      	b.n	8009dbc <USBD_CDC_TransmitPacket+0x28>

08009dc6 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009dc6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8009dca:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009dcc:	b182      	cbz	r2, 8009df0 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dce:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009dd0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dd4:	b934      	cbnz	r4, 8009de4 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8009dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dda:	2101      	movs	r1, #1
 8009ddc:	f000 fe42 	bl	800aa64 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8009de0:	4620      	mov	r0, r4
 8009de2:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8009de4:	2340      	movs	r3, #64	; 0x40
 8009de6:	2101      	movs	r1, #1
 8009de8:	f000 fe3c 	bl	800aa64 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8009dec:	2400      	movs	r4, #0
 8009dee:	e7f7      	b.n	8009de0 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8009df0:	2402      	movs	r4, #2
 8009df2:	e7f5      	b.n	8009de0 <USBD_CDC_ReceivePacket+0x1a>

08009df4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009df4:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009df6:	b180      	cbz	r0, 8009e1a <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009df8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009dfc:	b113      	cbz	r3, 8009e04 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e04:	b109      	cbz	r1, 8009e0a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8009e06:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e0a:	2301      	movs	r3, #1
  pdev->id = id;
 8009e0c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e0e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009e12:	f000 fd91 	bl	800a938 <USBD_LL_Init>

  return USBD_OK;
 8009e16:	2000      	movs	r0, #0
}
 8009e18:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8009e1a:	2002      	movs	r0, #2
 8009e1c:	e7fc      	b.n	8009e18 <USBD_Init+0x24>

08009e1e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8009e1e:	b119      	cbz	r1, 8009e28 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009e20:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8009e24:	2000      	movs	r0, #0
 8009e26:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009e28:	2002      	movs	r0, #2
  }

  return status;
}
 8009e2a:	4770      	bx	lr

08009e2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e2c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009e2e:	f000 fdc5 	bl	800a9bc <USBD_LL_Start>

  return USBD_OK;
}
 8009e32:	2000      	movs	r0, #0
 8009e34:	bd08      	pop	{r3, pc}

08009e36 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e36:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8009e38:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009e3c:	b90b      	cbnz	r3, 8009e42 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009e3e:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8009e40:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4798      	blx	r3
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d0fa      	beq.n	8009e40 <USBD_SetClassConfig+0xa>
 8009e4a:	e7f8      	b.n	8009e3e <USBD_SetClassConfig+0x8>

08009e4c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e4c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009e4e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	4798      	blx	r3

  return USBD_OK;
}
 8009e56:	2000      	movs	r0, #0
 8009e58:	bd08      	pop	{r3, pc}

08009e5a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e5a:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e5c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8009e60:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e62:	4628      	mov	r0, r5
 8009e64:	f000 fae8 	bl	800a438 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e68:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8009e6a:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8009e6e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8009e72:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8009e76:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8009e7a:	f001 031f 	and.w	r3, r1, #31
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d008      	beq.n	8009e94 <USBD_LL_SetupStage+0x3a>
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d00b      	beq.n	8009e9e <USBD_LL_SetupStage+0x44>
 8009e86:	b97b      	cbnz	r3, 8009ea8 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009e88:	4629      	mov	r1, r5
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f000 f8fc 	bl	800a088 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8009e90:	2000      	movs	r0, #0
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8009e94:	4629      	mov	r1, r5
 8009e96:	4620      	mov	r0, r4
 8009e98:	f000 fa20 	bl	800a2dc <USBD_StdItfReq>
      break;
 8009e9c:	e7f8      	b.n	8009e90 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f000 fa3f 	bl	800a324 <USBD_StdEPReq>
      break;
 8009ea6:	e7f3      	b.n	8009e90 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8009eae:	f000 fda3 	bl	800a9f8 <USBD_LL_StallEP>
      break;
 8009eb2:	e7ed      	b.n	8009e90 <USBD_LL_SetupStage+0x36>

08009eb4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009eba:	460d      	mov	r5, r1
 8009ebc:	bb39      	cbnz	r1, 8009f0e <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ebe:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d11c      	bne.n	8009f00 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ec6:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8009eca:	4296      	cmp	r6, r2
 8009ecc:	d90b      	bls.n	8009ee6 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8009ece:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8009ed0:	42b2      	cmp	r2, r6
 8009ed2:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8009ed4:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8009ed8:	bf8c      	ite	hi
 8009eda:	b2b2      	uxthhi	r2, r6
 8009edc:	b292      	uxthls	r2, r2
 8009ede:	f000 fb08 	bl	800a4f2 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ee6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	b123      	cbz	r3, 8009ef8 <USBD_LL_DataOutStage+0x44>
 8009eee:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009ef2:	2a03      	cmp	r2, #3
 8009ef4:	d100      	bne.n	8009ef8 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8009ef6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 fb02 	bl	800a502 <USBD_CtlSendStatus>
 8009efe:	e7f0      	b.n	8009ee2 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009f00:	2b05      	cmp	r3, #5
 8009f02:	d1ee      	bne.n	8009ee2 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8009f04:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009f08:	f000 fd76 	bl	800a9f8 <USBD_LL_StallEP>
 8009f0c:	e7e9      	b.n	8009ee2 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f0e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	b133      	cbz	r3, 8009f24 <USBD_LL_DataOutStage+0x70>
 8009f16:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009f1a:	2a03      	cmp	r2, #3
 8009f1c:	d102      	bne.n	8009f24 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8009f1e:	4798      	blx	r3
  return USBD_OK;
 8009f20:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8009f22:	e7de      	b.n	8009ee2 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8009f24:	2502      	movs	r5, #2
 8009f26:	e7dc      	b.n	8009ee2 <USBD_LL_DataOutStage+0x2e>

08009f28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009f2e:	460d      	mov	r5, r1
 8009f30:	2900      	cmp	r1, #0
 8009f32:	d147      	bne.n	8009fc4 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f34:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d13c      	bne.n	8009fb6 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f3c:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8009f40:	429e      	cmp	r6, r3
 8009f42:	d914      	bls.n	8009f6e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8009f44:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009f46:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8009f48:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	f000 fabc 	bl	800a4c8 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f50:	462b      	mov	r3, r5
 8009f52:	462a      	mov	r2, r5
 8009f54:	4629      	mov	r1, r5
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 fd84 	bl	800aa64 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009f5c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d102      	bne.n	8009f6a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8009f64:	2300      	movs	r3, #0
 8009f66:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009f6e:	69c2      	ldr	r2, [r0, #28]
 8009f70:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f74:	fb03 2616 	mls	r6, r3, r6, r2
 8009f78:	b95e      	cbnz	r6, 8009f92 <USBD_LL_DataInStage+0x6a>
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d809      	bhi.n	8009f92 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8009f7e:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d205      	bcs.n	8009f92 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f86:	460a      	mov	r2, r1
 8009f88:	f000 fa9e 	bl	800a4c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f8c:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8009f90:	e7de      	b.n	8009f50 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009f92:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	b12b      	cbz	r3, 8009fa6 <USBD_LL_DataInStage+0x7e>
 8009f9a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8009f9e:	2a03      	cmp	r2, #3
 8009fa0:	d101      	bne.n	8009fa6 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8009fa6:	2180      	movs	r1, #128	; 0x80
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f000 fd25 	bl	800a9f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f000 fab2 	bl	800a518 <USBD_CtlReceiveStatus>
 8009fb4:	e7d2      	b.n	8009f5c <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009fb6:	f033 0304 	bics.w	r3, r3, #4
 8009fba:	d1cf      	bne.n	8009f5c <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8009fbc:	2180      	movs	r1, #128	; 0x80
 8009fbe:	f000 fd1b 	bl	800a9f8 <USBD_LL_StallEP>
 8009fc2:	e7cb      	b.n	8009f5c <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8009fc4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	b133      	cbz	r3, 8009fda <USBD_LL_DataInStage+0xb2>
 8009fcc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009fd0:	2a03      	cmp	r2, #3
 8009fd2:	d102      	bne.n	8009fda <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8009fd4:	4798      	blx	r3
  return USBD_OK;
 8009fd6:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8009fd8:	e7c7      	b.n	8009f6a <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8009fda:	2502      	movs	r5, #2
 8009fdc:	e7c5      	b.n	8009f6a <USBD_LL_DataInStage+0x42>

08009fde <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fde:	2200      	movs	r2, #0
{
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009fe4:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fe6:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fe8:	4611      	mov	r1, r2
 8009fea:	2340      	movs	r3, #64	; 0x40
 8009fec:	f000 fcef 	bl	800a9ce <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ff0:	4633      	mov	r3, r6
 8009ff2:	2180      	movs	r1, #128	; 0x80
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ff8:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ffc:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a000:	f000 fce5 	bl	800a9ce <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800a004:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800a006:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a00a:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a00c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a00e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a012:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800a016:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800a018:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800a01c:	b123      	cbz	r3, 800a028 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a01e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800a022:	4620      	mov	r0, r4
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	4798      	blx	r3
  }

  return USBD_OK;
}
 800a028:	2000      	movs	r0, #0
 800a02a:	bd70      	pop	{r4, r5, r6, pc}

0800a02c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a02c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800a02e:	2000      	movs	r0, #0
 800a030:	4770      	bx	lr

0800a032 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800a032:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a036:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a03a:	2304      	movs	r3, #4
 800a03c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800a040:	2000      	movs	r0, #0
 800a042:	4770      	bx	lr

0800a044 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a044:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a048:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800a04a:	bf04      	itt	eq
 800a04c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800a050:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800a054:	2000      	movs	r0, #0
 800a056:	4770      	bx	lr

0800a058 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a058:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a05a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800a05e:	2a03      	cmp	r2, #3
 800a060:	d104      	bne.n	800a06c <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800a062:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a066:	69db      	ldr	r3, [r3, #28]
 800a068:	b103      	cbz	r3, 800a06c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800a06a:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800a06c:	2000      	movs	r0, #0
 800a06e:	bd08      	pop	{r3, pc}

0800a070 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800a070:	b510      	push	{r4, lr}
 800a072:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800a074:	2180      	movs	r1, #128	; 0x80
 800a076:	f000 fcbf 	bl	800a9f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a07a:	4620      	mov	r0, r4
}
 800a07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800a080:	2100      	movs	r1, #0
 800a082:	f000 bcb9 	b.w	800a9f8 <USBD_LL_StallEP>
	...

0800a088 <USBD_StdDevReq>:
{
 800a088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a08a:	780b      	ldrb	r3, [r1, #0]
 800a08c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a08e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a092:	2b20      	cmp	r3, #32
{
 800a094:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a096:	d012      	beq.n	800a0be <USBD_StdDevReq+0x36>
 800a098:	2b40      	cmp	r3, #64	; 0x40
 800a09a:	d010      	beq.n	800a0be <USBD_StdDevReq+0x36>
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d151      	bne.n	800a144 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 800a0a0:	784b      	ldrb	r3, [r1, #1]
 800a0a2:	2b09      	cmp	r3, #9
 800a0a4:	d84e      	bhi.n	800a144 <USBD_StdDevReq+0xbc>
 800a0a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a0aa:	00ee      	.short	0x00ee
 800a0ac:	004d010a 	.word	0x004d010a
 800a0b0:	004d0103 	.word	0x004d0103
 800a0b4:	00130087 	.word	0x00130087
 800a0b8:	00d6004d 	.word	0x00d6004d
 800a0bc:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 800a0be:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	4798      	blx	r3
}
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	b003      	add	sp, #12
 800a0ce:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a0d6:	884b      	ldrh	r3, [r1, #2]
 800a0d8:	0a1a      	lsrs	r2, r3, #8
 800a0da:	3a01      	subs	r2, #1
 800a0dc:	2a06      	cmp	r2, #6
 800a0de:	d831      	bhi.n	800a144 <USBD_StdDevReq+0xbc>
 800a0e0:	e8df f002 	tbb	[pc, r2]
 800a0e4:	30231604 	.word	0x30231604
 800a0e8:	4830      	.short	0x4830
 800a0ea:	52          	.byte	0x52
 800a0eb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0ec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800a0f0:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0f2:	7c20      	ldrb	r0, [r4, #16]
 800a0f4:	f10d 0106 	add.w	r1, sp, #6
 800a0f8:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800a0fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a0fe:	2a00      	cmp	r2, #0
 800a100:	d056      	beq.n	800a1b0 <USBD_StdDevReq+0x128>
 800a102:	88eb      	ldrh	r3, [r5, #6]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d14a      	bne.n	800a19e <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 f9fa 	bl	800a502 <USBD_CtlSendStatus>
 800a10e:	e7dc      	b.n	800a0ca <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a110:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800a112:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a116:	b932      	cbnz	r2, 800a126 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a11a:	f10d 0006 	add.w	r0, sp, #6
 800a11e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a120:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a122:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a124:	e7e9      	b.n	800a0fa <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	e7f7      	b.n	800a11a <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b05      	cmp	r3, #5
 800a12e:	d809      	bhi.n	800a144 <USBD_StdDevReq+0xbc>
 800a130:	e8df f003 	tbb	[pc, r3]
 800a134:	14100c03 	.word	0x14100c03
 800a138:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a13a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800a13e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1d6      	bne.n	800a0f2 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 800a144:	4620      	mov	r0, r4
 800a146:	f7ff ff93 	bl	800a070 <USBD_CtlError.constprop.0>
        break;
 800a14a:	e7be      	b.n	800a0ca <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a14c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	e7f5      	b.n	800a140 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a154:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	e7f1      	b.n	800a140 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a15c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	e7ed      	b.n	800a140 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a164:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	e7e9      	b.n	800a140 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a16c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	e7e5      	b.n	800a140 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a174:	7c03      	ldrb	r3, [r0, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e4      	bne.n	800a144 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a17a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a17e:	f10d 0006 	add.w	r0, sp, #6
 800a182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a184:	4798      	blx	r3
  if (err != 0U)
 800a186:	e7b8      	b.n	800a0fa <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a188:	7c03      	ldrb	r3, [r0, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1da      	bne.n	800a144 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a18e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a192:	f10d 0006 	add.w	r0, sp, #6
 800a196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a198:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a19a:	2307      	movs	r3, #7
 800a19c:	e7c1      	b.n	800a122 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	bf28      	it	cs
 800a1a2:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1a4:	4601      	mov	r1, r0
 800a1a6:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800a1a8:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1ac:	f000 f97f 	bl	800a4ae <USBD_CtlSendData>
    if (req->wLength == 0U)
 800a1b0:	88eb      	ldrh	r3, [r5, #6]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d189      	bne.n	800a0ca <USBD_StdDevReq+0x42>
 800a1b6:	e7a7      	b.n	800a108 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1b8:	888b      	ldrh	r3, [r1, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1c2      	bne.n	800a144 <USBD_StdDevReq+0xbc>
 800a1be:	88cb      	ldrh	r3, [r1, #6]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1bf      	bne.n	800a144 <USBD_StdDevReq+0xbc>
 800a1c4:	884d      	ldrh	r5, [r1, #2]
 800a1c6:	2d7f      	cmp	r5, #127	; 0x7f
 800a1c8:	d8bc      	bhi.n	800a144 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d0b8      	beq.n	800a144 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1d2:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800a1d4:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1d8:	f000 fc32 	bl	800aa40 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f000 f990 	bl	800a502 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a1e2:	b11d      	cbz	r5, 800a1ec <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1e4:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a1e6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a1ea:	e76e      	b.n	800a0ca <USBD_StdDevReq+0x42>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e7fa      	b.n	800a1e6 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 800a1f0:	7889      	ldrb	r1, [r1, #2]
 800a1f2:	4d39      	ldr	r5, [pc, #228]	; (800a2d8 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1f4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800a1f6:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1f8:	d8a4      	bhi.n	800a144 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800a1fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d008      	beq.n	800a214 <USBD_StdDevReq+0x18c>
 800a202:	2b03      	cmp	r3, #3
 800a204:	d015      	beq.n	800a232 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800a206:	f7ff ff33 	bl	800a070 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a20a:	4620      	mov	r0, r4
 800a20c:	7829      	ldrb	r1, [r5, #0]
 800a20e:	f7ff fe1d 	bl	8009e4c <USBD_ClrClassConfig>
        break;
 800a212:	e75a      	b.n	800a0ca <USBD_StdDevReq+0x42>
        if (cfgidx)
 800a214:	2900      	cmp	r1, #0
 800a216:	f43f af77 	beq.w	800a108 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800a21a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a21c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800a21e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a220:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a224:	4620      	mov	r0, r4
 800a226:	f7ff fe06 	bl	8009e36 <USBD_SetClassConfig>
 800a22a:	2802      	cmp	r0, #2
 800a22c:	f47f af6c 	bne.w	800a108 <USBD_StdDevReq+0x80>
 800a230:	e788      	b.n	800a144 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 800a232:	b931      	cbnz	r1, 800a242 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a234:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800a236:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a238:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 800a23c:	f7ff fe06 	bl	8009e4c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a240:	e762      	b.n	800a108 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 800a242:	6841      	ldr	r1, [r0, #4]
 800a244:	2901      	cmp	r1, #1
 800a246:	f43f af5f 	beq.w	800a108 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a24a:	b2c9      	uxtb	r1, r1
 800a24c:	f7ff fdfe 	bl	8009e4c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a250:	7829      	ldrb	r1, [r5, #0]
 800a252:	6061      	str	r1, [r4, #4]
 800a254:	e7e6      	b.n	800a224 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 800a256:	88ca      	ldrh	r2, [r1, #6]
 800a258:	2a01      	cmp	r2, #1
 800a25a:	f47f af73 	bne.w	800a144 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800a25e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a262:	2b02      	cmp	r3, #2
 800a264:	d80a      	bhi.n	800a27c <USBD_StdDevReq+0x1f4>
 800a266:	2b00      	cmp	r3, #0
 800a268:	f43f af6c 	beq.w	800a144 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 800a26c:	4601      	mov	r1, r0
 800a26e:	2300      	movs	r3, #0
 800a270:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a274:	4620      	mov	r0, r4
 800a276:	f000 f91a 	bl	800a4ae <USBD_CtlSendData>
      break;
 800a27a:	e726      	b.n	800a0ca <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 800a27c:	2b03      	cmp	r3, #3
 800a27e:	f47f af61 	bne.w	800a144 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a282:	1d01      	adds	r1, r0, #4
 800a284:	e7f6      	b.n	800a274 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 800a286:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a28a:	3b01      	subs	r3, #1
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	f63f af59 	bhi.w	800a144 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 800a292:	88cb      	ldrh	r3, [r1, #6]
 800a294:	2b02      	cmp	r3, #2
 800a296:	f47f af55 	bne.w	800a144 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a29a:	2301      	movs	r3, #1
 800a29c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800a29e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800a2a2:	b10b      	cbz	r3, 800a2a8 <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	f104 010c 	add.w	r1, r4, #12
 800a2ae:	e7e1      	b.n	800a274 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2b0:	884b      	ldrh	r3, [r1, #2]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	f47f af09 	bne.w	800a0ca <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800a2b8:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800a2bc:	e724      	b.n	800a108 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 800a2be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	f63f af3d 	bhi.w	800a144 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ca:	884b      	ldrh	r3, [r1, #2]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	f47f aefc 	bne.w	800a0ca <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e7f0      	b.n	800a2b8 <USBD_StdDevReq+0x230>
 800a2d6:	bf00      	nop
 800a2d8:	20000afc 	.word	0x20000afc

0800a2dc <USBD_StdItfReq>:
{
 800a2dc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2de:	780b      	ldrb	r3, [r1, #0]
{
 800a2e0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2e2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800a2e6:	2a40      	cmp	r2, #64	; 0x40
{
 800a2e8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2ea:	d001      	beq.n	800a2f0 <USBD_StdItfReq+0x14>
 800a2ec:	065b      	lsls	r3, r3, #25
 800a2ee:	d415      	bmi.n	800a31c <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 800a2f0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d810      	bhi.n	800a31c <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2fa:	792b      	ldrb	r3, [r5, #4]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d80d      	bhi.n	800a31c <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a300:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800a304:	4629      	mov	r1, r5
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	4620      	mov	r0, r4
 800a30a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a30c:	88eb      	ldrh	r3, [r5, #6]
 800a30e:	b91b      	cbnz	r3, 800a318 <USBD_StdItfReq+0x3c>
 800a310:	b910      	cbnz	r0, 800a318 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 800a312:	4620      	mov	r0, r4
 800a314:	f000 f8f5 	bl	800a502 <USBD_CtlSendStatus>
}
 800a318:	2000      	movs	r0, #0
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800a31c:	4620      	mov	r0, r4
 800a31e:	f7ff fea7 	bl	800a070 <USBD_CtlError.constprop.0>
          break;
 800a322:	e7f9      	b.n	800a318 <USBD_StdItfReq+0x3c>

0800a324 <USBD_StdEPReq>:
{
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	780a      	ldrb	r2, [r1, #0]
 800a328:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a32a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800a32e:	2a20      	cmp	r2, #32
{
 800a330:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a332:	d027      	beq.n	800a384 <USBD_StdEPReq+0x60>
 800a334:	2a40      	cmp	r2, #64	; 0x40
 800a336:	d025      	beq.n	800a384 <USBD_StdEPReq+0x60>
 800a338:	bb92      	cbnz	r2, 800a3a0 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 800a33a:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800a33c:	888d      	ldrh	r5, [r1, #4]
 800a33e:	2a01      	cmp	r2, #1
 800a340:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 800a342:	d03d      	beq.n	800a3c0 <USBD_StdEPReq+0x9c>
 800a344:	2a03      	cmp	r2, #3
 800a346:	d025      	beq.n	800a394 <USBD_StdEPReq+0x70>
 800a348:	bb52      	cbnz	r2, 800a3a0 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 800a34a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d04d      	beq.n	800a3ee <USBD_StdEPReq+0xca>
 800a352:	2b03      	cmp	r3, #3
 800a354:	d124      	bne.n	800a3a0 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 800a356:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a358:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800a35c:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a360:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800a364:	d054      	beq.n	800a410 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	b1d3      	cbz	r3, 800a3a0 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a36a:	2314      	movs	r3, #20
 800a36c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800a370:	fb05 3303 	mla	r3, r5, r3, r3
 800a374:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a376:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800a37a:	d155      	bne.n	800a428 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 800a37c:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a37e:	2202      	movs	r2, #2
 800a380:	4629      	mov	r1, r5
 800a382:	e041      	b.n	800a408 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 800a384:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800a388:	4619      	mov	r1, r3
 800a38a:	4620      	mov	r0, r4
 800a38c:	6892      	ldr	r2, [r2, #8]
 800a38e:	4790      	blx	r2
}
 800a390:	2000      	movs	r0, #0
 800a392:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 800a394:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800a398:	2a02      	cmp	r2, #2
 800a39a:	d01f      	beq.n	800a3dc <USBD_StdEPReq+0xb8>
 800a39c:	2a03      	cmp	r2, #3
 800a39e:	d003      	beq.n	800a3a8 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f7ff fe65 	bl	800a070 <USBD_CtlError.constprop.0>
              break;
 800a3a6:	e7f3      	b.n	800a390 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3a8:	885a      	ldrh	r2, [r3, #2]
 800a3aa:	b92a      	cbnz	r2, 800a3b8 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 800a3ac:	064a      	lsls	r2, r1, #25
 800a3ae:	d003      	beq.n	800a3b8 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a3b0:	88db      	ldrh	r3, [r3, #6]
 800a3b2:	b90b      	cbnz	r3, 800a3b8 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 800a3b4:	f000 fb20 	bl	800a9f8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 f8a2 	bl	800a502 <USBD_CtlSendStatus>
              break;
 800a3be:	e7e7      	b.n	800a390 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 800a3c0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800a3c4:	2a02      	cmp	r2, #2
 800a3c6:	d009      	beq.n	800a3dc <USBD_StdEPReq+0xb8>
 800a3c8:	2a03      	cmp	r2, #3
 800a3ca:	d1e9      	bne.n	800a3a0 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3cc:	885b      	ldrh	r3, [r3, #2]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1de      	bne.n	800a390 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800a3d2:	064d      	lsls	r5, r1, #25
 800a3d4:	d0f0      	beq.n	800a3b8 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a3d6:	f000 fb18 	bl	800aa0a <USBD_LL_ClearStallEP>
 800a3da:	e7ed      	b.n	800a3b8 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3dc:	064b      	lsls	r3, r1, #25
 800a3de:	d0df      	beq.n	800a3a0 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 800a3e0:	f000 fb0a 	bl	800a9f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a3e4:	2180      	movs	r1, #128	; 0x80
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f000 fb06 	bl	800a9f8 <USBD_LL_StallEP>
 800a3ec:	e7d0      	b.n	800a390 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3ee:	064a      	lsls	r2, r1, #25
 800a3f0:	d1d6      	bne.n	800a3a0 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3f2:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 800a3f4:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a3f8:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3fc:	bf4c      	ite	mi
 800a3fe:	f100 0114 	addmi.w	r1, r0, #20
 800a402:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800a406:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 f850 	bl	800a4ae <USBD_CtlSendData>
              break;
 800a40e:	e7bf      	b.n	800a390 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a410:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a414:	2b00      	cmp	r3, #0
 800a416:	d0c3      	beq.n	800a3a0 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a418:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a41a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a41e:	fb03 0505 	mla	r5, r3, r5, r0
 800a422:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800a426:	e7a6      	b.n	800a376 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 faf7 	bl	800aa1c <USBD_LL_IsStallEP>
 800a42e:	b108      	cbz	r0, 800a434 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 800a430:	2301      	movs	r3, #1
 800a432:	e7a3      	b.n	800a37c <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 800a434:	6028      	str	r0, [r5, #0]
 800a436:	e7a2      	b.n	800a37e <USBD_StdEPReq+0x5a>

0800a438 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800a438:	780b      	ldrb	r3, [r1, #0]
 800a43a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a43c:	784b      	ldrb	r3, [r1, #1]
 800a43e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a440:	78ca      	ldrb	r2, [r1, #3]
 800a442:	788b      	ldrb	r3, [r1, #2]
 800a444:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a448:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a44a:	794a      	ldrb	r2, [r1, #5]
 800a44c:	790b      	ldrb	r3, [r1, #4]
 800a44e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a452:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a454:	79ca      	ldrb	r2, [r1, #7]
 800a456:	798b      	ldrb	r3, [r1, #6]
 800a458:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a45c:	80c3      	strh	r3, [r0, #6]
}
 800a45e:	4770      	bx	lr

0800a460 <USBD_CtlError>:
{
 800a460:	b510      	push	{r4, lr}
 800a462:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800a464:	2180      	movs	r1, #128	; 0x80
 800a466:	f000 fac7 	bl	800a9f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a46a:	4620      	mov	r0, r4
}
 800a46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800a470:	2100      	movs	r1, #0
 800a472:	f000 bac1 	b.w	800a9f8 <USBD_LL_StallEP>

0800a476 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a476:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800a478:	b188      	cbz	r0, 800a49e <USBD_GetString+0x28>
 800a47a:	2400      	movs	r4, #0
 800a47c:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800a47e:	4623      	mov	r3, r4
 800a480:	3401      	adds	r4, #1
 800a482:	5d05      	ldrb	r5, [r0, r4]
 800a484:	2d00      	cmp	r5, #0
 800a486:	d1fa      	bne.n	800a47e <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	3301      	adds	r3, #1
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a490:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a492:	2303      	movs	r3, #3
 800a494:	704b      	strb	r3, [r1, #1]
 800a496:	2302      	movs	r3, #2
    while (*desc != '\0')
 800a498:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800a49c:	b904      	cbnz	r4, 800a4a0 <USBD_GetString+0x2a>
}
 800a49e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800a4a0:	1c5a      	adds	r2, r3, #1
 800a4a2:	54cc      	strb	r4, [r1, r3]
 800a4a4:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800a4a6:	3302      	adds	r3, #2
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	548d      	strb	r5, [r1, r2]
 800a4ac:	e7f4      	b.n	800a498 <USBD_GetString+0x22>

0800a4ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a4ae:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4b0:	2202      	movs	r2, #2
{
 800a4b2:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800a4b4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4b8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4bc:	460a      	mov	r2, r1
 800a4be:	2100      	movs	r1, #0
 800a4c0:	f000 fac7 	bl	800aa52 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	bd10      	pop	{r4, pc}

0800a4c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a4c8:	b508      	push	{r3, lr}
 800a4ca:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4cc:	460a      	mov	r2, r1
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	f000 fabf 	bl	800aa52 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	bd08      	pop	{r3, pc}

0800a4d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a4d8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4da:	2203      	movs	r2, #3
{
 800a4dc:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800a4de:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4e2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4e6:	460a      	mov	r2, r1
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	f000 fabb 	bl	800aa64 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	bd10      	pop	{r4, pc}

0800a4f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a4f2:	b508      	push	{r3, lr}
 800a4f4:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4f6:	460a      	mov	r2, r1
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	f000 fab3 	bl	800aa64 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a4fe:	2000      	movs	r0, #0
 800a500:	bd08      	pop	{r3, pc}

0800a502 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a502:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a504:	2304      	movs	r3, #4
 800a506:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a50a:	2300      	movs	r3, #0
 800a50c:	461a      	mov	r2, r3
 800a50e:	4619      	mov	r1, r3
 800a510:	f000 fa9f 	bl	800aa52 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a514:	2000      	movs	r0, #0
 800a516:	bd08      	pop	{r3, pc}

0800a518 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a518:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a51a:	2305      	movs	r3, #5
 800a51c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a520:	2300      	movs	r3, #0
 800a522:	461a      	mov	r2, r3
 800a524:	4619      	mov	r1, r3
 800a526:	f000 fa9d 	bl	800aa64 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a52a:	2000      	movs	r0, #0
 800a52c:	bd08      	pop	{r3, pc}
	...

0800a530 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a530:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a532:	2200      	movs	r2, #0
 800a534:	490e      	ldr	r1, [pc, #56]	; (800a570 <MX_USB_DEVICE_Init+0x40>)
 800a536:	480f      	ldr	r0, [pc, #60]	; (800a574 <MX_USB_DEVICE_Init+0x44>)
 800a538:	f7ff fc5c 	bl	8009df4 <USBD_Init>
 800a53c:	b108      	cbz	r0, 800a542 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800a53e:	f7fb fc89 	bl	8005e54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a542:	490d      	ldr	r1, [pc, #52]	; (800a578 <MX_USB_DEVICE_Init+0x48>)
 800a544:	480b      	ldr	r0, [pc, #44]	; (800a574 <MX_USB_DEVICE_Init+0x44>)
 800a546:	f7ff fc6a 	bl	8009e1e <USBD_RegisterClass>
 800a54a:	b108      	cbz	r0, 800a550 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800a54c:	f7fb fc82 	bl	8005e54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a550:	490a      	ldr	r1, [pc, #40]	; (800a57c <MX_USB_DEVICE_Init+0x4c>)
 800a552:	4808      	ldr	r0, [pc, #32]	; (800a574 <MX_USB_DEVICE_Init+0x44>)
 800a554:	f7ff fc09 	bl	8009d6a <USBD_CDC_RegisterInterface>
 800a558:	b108      	cbz	r0, 800a55e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800a55a:	f7fb fc7b 	bl	8005e54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a55e:	4805      	ldr	r0, [pc, #20]	; (800a574 <MX_USB_DEVICE_Init+0x44>)
 800a560:	f7ff fc64 	bl	8009e2c <USBD_Start>
 800a564:	b118      	cbz	r0, 800a56e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800a56a:	f7fb bc73 	b.w	8005e54 <Error_Handler>
}
 800a56e:	bd08      	pop	{r3, pc}
 800a570:	20000150 	.word	0x20000150
 800a574:	20000b00 	.word	0x20000b00
 800a578:	20000024 	.word	0x20000024
 800a57c:	2000013c 	.word	0x2000013c

0800a580 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800a580:	2000      	movs	r0, #0
 800a582:	4770      	bx	lr

0800a584 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a584:	2820      	cmp	r0, #32
 800a586:	d003      	beq.n	800a590 <CDC_Control_FS+0xc>
 800a588:	2821      	cmp	r0, #33	; 0x21
 800a58a:	d017      	beq.n	800a5bc <CDC_Control_FS+0x38>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800a58c:	2000      	movs	r0, #0
 800a58e:	4770      	bx	lr
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800a590:	780b      	ldrb	r3, [r1, #0]
 800a592:	4a13      	ldr	r2, [pc, #76]	; (800a5e0 <CDC_Control_FS+0x5c>)
 800a594:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800a596:	7848      	ldrb	r0, [r1, #1]
 800a598:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a59c:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800a59e:	7888      	ldrb	r0, [r1, #2]
 800a5a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a5a4:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800a5a6:	78c8      	ldrb	r0, [r1, #3]
 800a5a8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a5ac:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800a5ae:	790b      	ldrb	r3, [r1, #4]
 800a5b0:	7113      	strb	r3, [r2, #4]
      LineCoding.paritytype= pbuf[5];
 800a5b2:	794b      	ldrb	r3, [r1, #5]
 800a5b4:	7153      	strb	r3, [r2, #5]
      LineCoding.datatype  = pbuf[6];
 800a5b6:	798b      	ldrb	r3, [r1, #6]
 800a5b8:	7193      	strb	r3, [r2, #6]
    break;
 800a5ba:	e7e7      	b.n	800a58c <CDC_Control_FS+0x8>
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800a5bc:	4b08      	ldr	r3, [pc, #32]	; (800a5e0 <CDC_Control_FS+0x5c>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	700a      	strb	r2, [r1, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	0a12      	lsrs	r2, r2, #8
 800a5c6:	704a      	strb	r2, [r1, #1]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800a5c8:	885a      	ldrh	r2, [r3, #2]
 800a5ca:	708a      	strb	r2, [r1, #2]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800a5cc:	78da      	ldrb	r2, [r3, #3]
 800a5ce:	70ca      	strb	r2, [r1, #3]
      pbuf[4] = LineCoding.format;
 800a5d0:	791a      	ldrb	r2, [r3, #4]
 800a5d2:	710a      	strb	r2, [r1, #4]
      pbuf[5] = LineCoding.paritytype;
 800a5d4:	795a      	ldrb	r2, [r3, #5]
 800a5d6:	714a      	strb	r2, [r1, #5]
      pbuf[6] = LineCoding.datatype;
 800a5d8:	799b      	ldrb	r3, [r3, #6]
 800a5da:	718b      	strb	r3, [r1, #6]
    break;
 800a5dc:	e7d6      	b.n	800a58c <CDC_Control_FS+0x8>
 800a5de:	bf00      	nop
 800a5e0:	20000134 	.word	0x20000134

0800a5e4 <CDC_Init_FS>:
{
 800a5e4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5e6:	4c06      	ldr	r4, [pc, #24]	; (800a600 <CDC_Init_FS+0x1c>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	4905      	ldr	r1, [pc, #20]	; (800a604 <CDC_Init_FS+0x20>)
 800a5ee:	f7ff fbc3 	bl	8009d78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	4904      	ldr	r1, [pc, #16]	; (800a608 <CDC_Init_FS+0x24>)
 800a5f6:	f7ff fbc7 	bl	8009d88 <USBD_CDC_SetRxBuffer>
}
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	bd10      	pop	{r4, pc}
 800a5fe:	bf00      	nop
 800a600:	20000b00 	.word	0x20000b00
 800a604:	20000fc4 	.word	0x20000fc4
 800a608:	20000dc4 	.word	0x20000dc4

0800a60c <cdcAvailable>:
  ret = (rx_in - rx_out) % rx_len;
 800a60c:	4a05      	ldr	r2, [pc, #20]	; (800a624 <cdcAvailable+0x18>)
 800a60e:	4b06      	ldr	r3, [pc, #24]	; (800a628 <cdcAvailable+0x1c>)
 800a610:	6810      	ldr	r0, [r2, #0]
 800a612:	4a06      	ldr	r2, [pc, #24]	; (800a62c <cdcAvailable+0x20>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6812      	ldr	r2, [r2, #0]
 800a618:	1a1b      	subs	r3, r3, r0
 800a61a:	fbb3 f0f2 	udiv	r0, r3, r2
}
 800a61e:	fb02 3010 	mls	r0, r2, r0, r3
 800a622:	4770      	bx	lr
 800a624:	200013cc 	.word	0x200013cc
 800a628:	200013c8 	.word	0x200013c8
 800a62c:	2000014c 	.word	0x2000014c

0800a630 <cdcRead>:
{
 800a630:	b510      	push	{r4, lr}
  ret = rx_buf[rx_out];
 800a632:	4a08      	ldr	r2, [pc, #32]	; (800a654 <cdcRead+0x24>)
 800a634:	4908      	ldr	r1, [pc, #32]	; (800a658 <cdcRead+0x28>)
 800a636:	6813      	ldr	r3, [r2, #0]
 800a638:	5cc8      	ldrb	r0, [r1, r3]
  if( rx_out != rx_in)
 800a63a:	4908      	ldr	r1, [pc, #32]	; (800a65c <cdcRead+0x2c>)
 800a63c:	6809      	ldr	r1, [r1, #0]
 800a63e:	428b      	cmp	r3, r1
 800a640:	d007      	beq.n	800a652 <cdcRead+0x22>
    rx_out = (rx_out + 1) % rx_len;
 800a642:	4907      	ldr	r1, [pc, #28]	; (800a660 <cdcRead+0x30>)
 800a644:	3301      	adds	r3, #1
 800a646:	6809      	ldr	r1, [r1, #0]
 800a648:	fbb3 f4f1 	udiv	r4, r3, r1
 800a64c:	fb01 3314 	mls	r3, r1, r4, r3
 800a650:	6013      	str	r3, [r2, #0]
}
 800a652:	bd10      	pop	{r4, pc}
 800a654:	200013cc 	.word	0x200013cc
 800a658:	200011c4 	.word	0x200011c4
 800a65c:	200013c8 	.word	0x200013c8
 800a660:	2000014c 	.word	0x2000014c

0800a664 <cdcDataIn>:
  rx_buf[rx_in] = rx_data;
 800a664:	4a08      	ldr	r2, [pc, #32]	; (800a688 <cdcDataIn+0x24>)
 800a666:	4909      	ldr	r1, [pc, #36]	; (800a68c <cdcDataIn+0x28>)
 800a668:	6813      	ldr	r3, [r2, #0]
 800a66a:	54c8      	strb	r0, [r1, r3]
  next_rx_in = (rx_in + 1 ) % rx_len;
 800a66c:	4908      	ldr	r1, [pc, #32]	; (800a690 <cdcDataIn+0x2c>)
 800a66e:	3301      	adds	r3, #1
 800a670:	6809      	ldr	r1, [r1, #0]
 800a672:	fbb3 f0f1 	udiv	r0, r3, r1
 800a676:	fb01 3310 	mls	r3, r1, r0, r3
  if (next_rx_in != rx_out)
 800a67a:	4906      	ldr	r1, [pc, #24]	; (800a694 <cdcDataIn+0x30>)
 800a67c:	6809      	ldr	r1, [r1, #0]
 800a67e:	4299      	cmp	r1, r3
    rx_in = next_rx_in;
 800a680:	bf18      	it	ne
 800a682:	6013      	strne	r3, [r2, #0]
}
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	200013c8 	.word	0x200013c8
 800a68c:	200011c4 	.word	0x200011c4
 800a690:	2000014c 	.word	0x2000014c
 800a694:	200013cc 	.word	0x200013cc

0800a698 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	4605      	mov	r5, r0
 800a69c:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */



  for ( int i=0; i<*Len; i++)
 800a69e:	2400      	movs	r4, #0
 800a6a0:	6833      	ldr	r3, [r6, #0]
 800a6a2:	42a3      	cmp	r3, r4
 800a6a4:	d810      	bhi.n	800a6c8 <CDC_Receive_FS+0x30>
  }

  uint32_t buf_len;

  //수신 버퍼에서 비어있는 데이터 양
  buf_len = (rx_len - cdcAvailable()) - 1;
 800a6a6:	4b0d      	ldr	r3, [pc, #52]	; (800a6dc <CDC_Receive_FS+0x44>)
 800a6a8:	681c      	ldr	r4, [r3, #0]
 800a6aa:	f7ff ffaf 	bl	800a60c <cdcAvailable>
 800a6ae:	3c01      	subs	r4, #1
 800a6b0:	1a24      	subs	r4, r4, r0

  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 800a6b2:	2c3f      	cmp	r4, #63	; 0x3f
 800a6b4:	d90d      	bls.n	800a6d2 <CDC_Receive_FS+0x3a>
  {
    //다음 데이터도 보내주세요 라고 컴퓨터에 알려준다.
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	4809      	ldr	r0, [pc, #36]	; (800a6e0 <CDC_Receive_FS+0x48>)
 800a6ba:	f7ff fb65 	bl	8009d88 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6be:	4808      	ldr	r0, [pc, #32]	; (800a6e0 <CDC_Receive_FS+0x48>)
 800a6c0:	f7ff fb81 	bl	8009dc6 <USBD_CDC_ReceivePacket>
    rx_full = true;
  }

  return (USBD_OK);
  /* USER CODE END 6 */
}
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	bd70      	pop	{r4, r5, r6, pc}
    cdcDataIn(Buf[i]);
 800a6c8:	5d28      	ldrb	r0, [r5, r4]
 800a6ca:	f7ff ffcb 	bl	800a664 <cdcDataIn>
  for ( int i=0; i<*Len; i++)
 800a6ce:	3401      	adds	r4, #1
 800a6d0:	e7e6      	b.n	800a6a0 <CDC_Receive_FS+0x8>
    rx_full = true;
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	4b03      	ldr	r3, [pc, #12]	; (800a6e4 <CDC_Receive_FS+0x4c>)
 800a6d6:	701a      	strb	r2, [r3, #0]
 800a6d8:	e7f4      	b.n	800a6c4 <CDC_Receive_FS+0x2c>
 800a6da:	bf00      	nop
 800a6dc:	2000014c 	.word	0x2000014c
 800a6e0:	20000b00 	.word	0x20000b00
 800a6e4:	200013c4 	.word	0x200013c4

0800a6e8 <USBD_CDC_SOF>:
{
 800a6e8:	b538      	push	{r3, r4, r5, lr}
  if ( rx_full == true)
 800a6ea:	4d09      	ldr	r5, [pc, #36]	; (800a710 <USBD_CDC_SOF+0x28>)
{
 800a6ec:	4604      	mov	r4, r0
  if ( rx_full == true)
 800a6ee:	782b      	ldrb	r3, [r5, #0]
 800a6f0:	b163      	cbz	r3, 800a70c <USBD_CDC_SOF+0x24>
    buf_len = (rx_len - cdcAvailable()) - 1;
 800a6f2:	4b08      	ldr	r3, [pc, #32]	; (800a714 <USBD_CDC_SOF+0x2c>)
 800a6f4:	6819      	ldr	r1, [r3, #0]
 800a6f6:	f7ff ff89 	bl	800a60c <cdcAvailable>
 800a6fa:	3901      	subs	r1, #1
 800a6fc:	1a09      	subs	r1, r1, r0
    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 800a6fe:	293f      	cmp	r1, #63	; 0x3f
 800a700:	d904      	bls.n	800a70c <USBD_CDC_SOF+0x24>
      USBD_CDC_ReceivePacket(pdev);
 800a702:	4620      	mov	r0, r4
 800a704:	f7ff fb5f 	bl	8009dc6 <USBD_CDC_ReceivePacket>
      rx_full = false;
 800a708:	2300      	movs	r3, #0
 800a70a:	702b      	strb	r3, [r5, #0]
}
 800a70c:	2000      	movs	r0, #0
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
 800a710:	200013c4 	.word	0x200013c4
 800a714:	2000014c 	.word	0x2000014c

0800a718 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a718:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a71a:	4c09      	ldr	r4, [pc, #36]	; (800a740 <CDC_Transmit_FS+0x28>)
{
 800a71c:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a71e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800a722:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a726:	b943      	cbnz	r3, 800a73a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a728:	4601      	mov	r1, r0
 800a72a:	4620      	mov	r0, r4
 800a72c:	f7ff fb24 	bl	8009d78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a730:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800a732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a736:	f7ff bb2d 	b.w	8009d94 <USBD_CDC_TransmitPacket>
}
 800a73a:	2001      	movs	r0, #1
 800a73c:	bd10      	pop	{r4, pc}
 800a73e:	bf00      	nop
 800a740:	20000b00 	.word	0x20000b00

0800a744 <cdcWrite>:
{
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	460c      	mov	r4, r1
 800a748:	4606      	mov	r6, r0
  pre_time = millis();
 800a74a:	f7fb faef 	bl	8005d2c <millis>
 800a74e:	4605      	mov	r5, r0
    ret = CDC_Transmit_FS(p_data, length);
 800a750:	b2a7      	uxth	r7, r4
 800a752:	4639      	mov	r1, r7
 800a754:	4630      	mov	r0, r6
 800a756:	f7ff ffdf 	bl	800a718 <CDC_Transmit_FS>
    if ( ret == USBD_OK)
 800a75a:	b110      	cbz	r0, 800a762 <cdcWrite+0x1e>
    else if ( ret == USBD_FAIL)
 800a75c:	2802      	cmp	r0, #2
 800a75e:	d102      	bne.n	800a766 <cdcWrite+0x22>
      return 0;
 800a760:	2400      	movs	r4, #0
}
 800a762:	4620      	mov	r0, r4
 800a764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (millis()-pre_time >= 100)
 800a766:	f7fb fae1 	bl	8005d2c <millis>
 800a76a:	1b43      	subs	r3, r0, r5
 800a76c:	2b63      	cmp	r3, #99	; 0x63
 800a76e:	d9f0      	bls.n	800a752 <cdcWrite+0xe>
 800a770:	e7f6      	b.n	800a760 <cdcWrite+0x1c>
	...

0800a774 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a774:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800a776:	4801      	ldr	r0, [pc, #4]	; (800a77c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800a778:	800b      	strh	r3, [r1, #0]
}
 800a77a:	4770      	bx	lr
 800a77c:	2000016c 	.word	0x2000016c

0800a780 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a780:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800a782:	4801      	ldr	r0, [pc, #4]	; (800a788 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800a784:	800b      	strh	r3, [r1, #0]
}
 800a786:	4770      	bx	lr
 800a788:	20000180 	.word	0x20000180

0800a78c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a78c:	2300      	movs	r3, #0
 800a78e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800a790:	461e      	mov	r6, r3
 800a792:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 800a794:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800a796:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800a79a:	bf34      	ite	cc
 800a79c:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a79e:	3437      	addcs	r4, #55	; 0x37
 800a7a0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800a7a4:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	b2dc      	uxtb	r4, r3
 800a7ac:	42a2      	cmp	r2, r4
    value = value << 4;
 800a7ae:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800a7b2:	d8ef      	bhi.n	800a794 <IntToUnicode+0x8>
  }
}
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7b8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800a7b8:	231a      	movs	r3, #26
{
 800a7ba:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800a7bc:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a7be:	4b0a      	ldr	r3, [pc, #40]	; (800a7e8 <USBD_FS_SerialStrDescriptor+0x30>)
 800a7c0:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 800a7c4:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 800a7c8:	1880      	adds	r0, r0, r2
 800a7ca:	d00a      	beq.n	800a7e2 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a7cc:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a7d0:	4906      	ldr	r1, [pc, #24]	; (800a7ec <USBD_FS_SerialStrDescriptor+0x34>)
 800a7d2:	2208      	movs	r2, #8
 800a7d4:	f7ff ffda 	bl	800a78c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7d8:	2204      	movs	r2, #4
 800a7da:	4620      	mov	r0, r4
 800a7dc:	3110      	adds	r1, #16
 800a7de:	f7ff ffd5 	bl	800a78c <IntToUnicode>
}
 800a7e2:	4803      	ldr	r0, [pc, #12]	; (800a7f0 <USBD_FS_SerialStrDescriptor+0x38>)
 800a7e4:	bd10      	pop	{r4, pc}
 800a7e6:	bf00      	nop
 800a7e8:	1ffff000 	.word	0x1ffff000
 800a7ec:	20000186 	.word	0x20000186
 800a7f0:	20000184 	.word	0x20000184

0800a7f4 <USBD_FS_ManufacturerStrDescriptor>:
{
 800a7f4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7f6:	4c04      	ldr	r4, [pc, #16]	; (800a808 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800a7f8:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7fa:	4804      	ldr	r0, [pc, #16]	; (800a80c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	f7ff fe3a 	bl	800a476 <USBD_GetString>
}
 800a802:	4620      	mov	r0, r4
 800a804:	bd10      	pop	{r4, pc}
 800a806:	bf00      	nop
 800a808:	200013d0 	.word	0x200013d0
 800a80c:	0800df7f 	.word	0x0800df7f

0800a810 <USBD_FS_ProductStrDescriptor>:
{
 800a810:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a812:	4c04      	ldr	r4, [pc, #16]	; (800a824 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800a814:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a816:	4804      	ldr	r0, [pc, #16]	; (800a828 <USBD_FS_ProductStrDescriptor+0x18>)
 800a818:	4621      	mov	r1, r4
 800a81a:	f7ff fe2c 	bl	800a476 <USBD_GetString>
}
 800a81e:	4620      	mov	r0, r4
 800a820:	bd10      	pop	{r4, pc}
 800a822:	bf00      	nop
 800a824:	200013d0 	.word	0x200013d0
 800a828:	0800df92 	.word	0x0800df92

0800a82c <USBD_FS_ConfigStrDescriptor>:
{
 800a82c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a82e:	4c04      	ldr	r4, [pc, #16]	; (800a840 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800a830:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a832:	4804      	ldr	r0, [pc, #16]	; (800a844 <USBD_FS_ConfigStrDescriptor+0x18>)
 800a834:	4621      	mov	r1, r4
 800a836:	f7ff fe1e 	bl	800a476 <USBD_GetString>
}
 800a83a:	4620      	mov	r0, r4
 800a83c:	bd10      	pop	{r4, pc}
 800a83e:	bf00      	nop
 800a840:	200013d0 	.word	0x200013d0
 800a844:	0800dfa8 	.word	0x0800dfa8

0800a848 <USBD_FS_InterfaceStrDescriptor>:
{
 800a848:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a84a:	4c04      	ldr	r4, [pc, #16]	; (800a85c <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800a84c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a84e:	4804      	ldr	r0, [pc, #16]	; (800a860 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800a850:	4621      	mov	r1, r4
 800a852:	f7ff fe10 	bl	800a476 <USBD_GetString>
}
 800a856:	4620      	mov	r0, r4
 800a858:	bd10      	pop	{r4, pc}
 800a85a:	bf00      	nop
 800a85c:	200013d0 	.word	0x200013d0
 800a860:	0800dfb3 	.word	0x0800dfb3

0800a864 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800a864:	2803      	cmp	r0, #3
 800a866:	bf9a      	itte	ls
 800a868:	4b01      	ldrls	r3, [pc, #4]	; (800a870 <USBD_Get_USB_Status+0xc>)
 800a86a:	5c18      	ldrbls	r0, [r3, r0]
{
 800a86c:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800a86e:	4770      	bx	lr
 800a870:	0800dfc1 	.word	0x0800dfc1

0800a874 <HAL_PCD_MspInit>:
{
 800a874:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800a876:	4b0e      	ldr	r3, [pc, #56]	; (800a8b0 <HAL_PCD_MspInit+0x3c>)
 800a878:	6802      	ldr	r2, [r0, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d115      	bne.n	800a8aa <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 800a87e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800a882:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a884:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800a886:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a88a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a88c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800a88e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a890:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800a892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a896:	9301      	str	r3, [sp, #4]
 800a898:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a89a:	f7fc facb 	bl	8006e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a89e:	2014      	movs	r0, #20
}
 800a8a0:	b003      	add	sp, #12
 800a8a2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a8a6:	f7fc baf7 	b.w	8006e98 <HAL_NVIC_EnableIRQ>
}
 800a8aa:	b003      	add	sp, #12
 800a8ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800a8b0:	40005c00 	.word	0x40005c00

0800a8b4 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a8b4:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800a8b8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a8bc:	f7ff bacd 	b.w	8009e5a <USBD_LL_SetupStage>

0800a8c0 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a8c0:	2328      	movs	r3, #40	; 0x28
 800a8c2:	fb03 0301 	mla	r3, r3, r1, r0
 800a8c6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a8ca:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800a8ce:	f7ff baf1 	b.w	8009eb4 <USBD_LL_DataOutStage>

0800a8d2 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a8d2:	2328      	movs	r3, #40	; 0x28
 800a8d4:	fb03 0301 	mla	r3, r3, r1, r0
 800a8d8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a8dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8de:	f7ff bb23 	b.w	8009f28 <USBD_LL_DataInStage>

0800a8e2 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a8e2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a8e6:	f7ff bbb7 	b.w	800a058 <USBD_LL_SOF>

0800a8ea <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a8ea:	6883      	ldr	r3, [r0, #8]
{
 800a8ec:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a8ee:	2b02      	cmp	r3, #2
{
 800a8f0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a8f2:	d001      	beq.n	800a8f8 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800a8f4:	f7fb faae 	bl	8005e54 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a8f8:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	f7ff fb95 	bl	800a02c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a902:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800a906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a90a:	f7ff bb68 	b.w	8009fde <USBD_LL_Reset>
	...

0800a910 <HAL_PCD_SuspendCallback>:
{
 800a910:	b510      	push	{r4, lr}
 800a912:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a914:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a918:	f7ff fb8b 	bl	800a032 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800a91c:	69a3      	ldr	r3, [r4, #24]
 800a91e:	b123      	cbz	r3, 800a92a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a920:	4a02      	ldr	r2, [pc, #8]	; (800a92c <HAL_PCD_SuspendCallback+0x1c>)
 800a922:	6913      	ldr	r3, [r2, #16]
 800a924:	f043 0306 	orr.w	r3, r3, #6
 800a928:	6113      	str	r3, [r2, #16]
}
 800a92a:	bd10      	pop	{r4, pc}
 800a92c:	e000ed00 	.word	0xe000ed00

0800a930 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a930:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a934:	f7ff bb86 	b.w	800a044 <USBD_LL_Resume>

0800a938 <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a938:	2308      	movs	r3, #8
{
 800a93a:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a93c:	4a1d      	ldr	r2, [pc, #116]	; (800a9b4 <USBD_LL_Init+0x7c>)
{
 800a93e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800a940:	481d      	ldr	r0, [pc, #116]	; (800a9b8 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a942:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a946:	2302      	movs	r3, #2
 800a948:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a94a:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800a94c:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a950:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a954:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a958:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a95a:	f7fc fdb1 	bl	80074c0 <HAL_PCD_Init>
 800a95e:	b108      	cbz	r0, 800a964 <USBD_LL_Init+0x2c>
    Error_Handler( );
 800a960:	f7fb fa78 	bl	8005e54 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a964:	2200      	movs	r2, #0
 800a966:	2318      	movs	r3, #24
 800a968:	4611      	mov	r1, r2
 800a96a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800a96e:	f7fd fbf8 	bl	8008162 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a972:	2358      	movs	r3, #88	; 0x58
 800a974:	2200      	movs	r2, #0
 800a976:	2180      	movs	r1, #128	; 0x80
 800a978:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800a97c:	f7fd fbf1 	bl	8008162 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a980:	23c0      	movs	r3, #192	; 0xc0
 800a982:	2200      	movs	r2, #0
 800a984:	2181      	movs	r1, #129	; 0x81
 800a986:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800a98a:	f7fd fbea 	bl	8008162 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a98e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a992:	2200      	movs	r2, #0
 800a994:	2101      	movs	r1, #1
 800a996:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800a99a:	f7fd fbe2 	bl	8008162 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a99e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2182      	movs	r1, #130	; 0x82
 800a9a6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800a9aa:	f7fd fbda 	bl	8008162 <HAL_PCDEx_PMAConfig>
}
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	bd10      	pop	{r4, pc}
 800a9b2:	bf00      	nop
 800a9b4:	40005c00 	.word	0x40005c00
 800a9b8:	200015d0 	.word	0x200015d0

0800a9bc <USBD_LL_Start>:
{
 800a9bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800a9be:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a9c2:	f7fc fdf6 	bl	80075b2 <HAL_PCD_Start>
}
 800a9c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ca:	f7ff bf4b 	b.w	800a864 <USBD_Get_USB_Status>

0800a9ce <USBD_LL_OpenEP>:
{
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9d2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 800a9d6:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9d8:	4623      	mov	r3, r4
 800a9da:	f7fd facb 	bl	8007f74 <HAL_PCD_EP_Open>
}
 800a9de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e2:	f7ff bf3f 	b.w	800a864 <USBD_Get_USB_Status>

0800a9e6 <USBD_LL_CloseEP>:
{
 800a9e6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9e8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a9ec:	f7fd faf3 	bl	8007fd6 <HAL_PCD_EP_Close>
}
 800a9f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f4:	f7ff bf36 	b.w	800a864 <USBD_Get_USB_Status>

0800a9f8 <USBD_LL_StallEP>:
{
 800a9f8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9fa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a9fe:	f7fd fb4b 	bl	8008098 <HAL_PCD_EP_SetStall>
}
 800aa02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa06:	f7ff bf2d 	b.w	800a864 <USBD_Get_USB_Status>

0800aa0a <USBD_LL_ClearStallEP>:
{
 800aa0a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa0c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800aa10:	f7fd fb76 	bl	8008100 <HAL_PCD_EP_ClrStall>
}
 800aa14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa18:	f7ff bf24 	b.w	800a864 <USBD_Get_USB_Status>

0800aa1c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa1c:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 800aa1e:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa22:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa26:	bf1b      	ittet	ne
 800aa28:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800aa2c:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa30:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa34:	185b      	addne	r3, r3, r1
 800aa36:	bf14      	ite	ne
 800aa38:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa3a:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 800aa3e:	4770      	bx	lr

0800aa40 <USBD_LL_SetUSBAddress>:
{
 800aa40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa42:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800aa46:	f7fc fdcd 	bl	80075e4 <HAL_PCD_SetAddress>
}
 800aa4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa4e:	f7ff bf09 	b.w	800a864 <USBD_Get_USB_Status>

0800aa52 <USBD_LL_Transmit>:
{
 800aa52:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa54:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800aa58:	f7fd fb04 	bl	8008064 <HAL_PCD_EP_Transmit>
}
 800aa5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa60:	f7ff bf00 	b.w	800a864 <USBD_Get_USB_Status>

0800aa64 <USBD_LL_PrepareReceive>:
{
 800aa64:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa66:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800aa6a:	f7fd fadc 	bl	8008026 <HAL_PCD_EP_Receive>
}
 800aa6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa72:	f7ff bef7 	b.w	800a864 <USBD_Get_USB_Status>

0800aa76 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa76:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800aa7a:	f7fd baeb 	b.w	8008054 <HAL_PCD_EP_GetRxCount>
	...

0800aa80 <USBD_static_malloc>:
}
 800aa80:	4800      	ldr	r0, [pc, #0]	; (800aa84 <USBD_static_malloc+0x4>)
 800aa82:	4770      	bx	lr
 800aa84:	200018bc 	.word	0x200018bc

0800aa88 <USBD_static_free>:
}
 800aa88:	4770      	bx	lr

0800aa8a <HAL_PCDEx_SetConnectionState>:
}
 800aa8a:	4770      	bx	lr

0800aa8c <main>:




int main(void)
{
 800aa8c:	b508      	push	{r3, lr}
  hwInit();
 800aa8e:	f7fc f951 	bl	8006d34 <hwInit>
  apInit();
 800aa92:	f7fb f90f 	bl	8005cb4 <apInit>

  apMain();
 800aa96:	f7fb f925 	bl	8005ce4 <apMain>

  return 0;
}
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	bd08      	pop	{r3, pc}
	...

0800aaa0 <__errno>:
 800aaa0:	4b01      	ldr	r3, [pc, #4]	; (800aaa8 <__errno+0x8>)
 800aaa2:	6818      	ldr	r0, [r3, #0]
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	200001a0 	.word	0x200001a0

0800aaac <__libc_init_array>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	2600      	movs	r6, #0
 800aab0:	4d0c      	ldr	r5, [pc, #48]	; (800aae4 <__libc_init_array+0x38>)
 800aab2:	4c0d      	ldr	r4, [pc, #52]	; (800aae8 <__libc_init_array+0x3c>)
 800aab4:	1b64      	subs	r4, r4, r5
 800aab6:	10a4      	asrs	r4, r4, #2
 800aab8:	42a6      	cmp	r6, r4
 800aaba:	d109      	bne.n	800aad0 <__libc_init_array+0x24>
 800aabc:	f003 f994 	bl	800dde8 <_init>
 800aac0:	2600      	movs	r6, #0
 800aac2:	4d0a      	ldr	r5, [pc, #40]	; (800aaec <__libc_init_array+0x40>)
 800aac4:	4c0a      	ldr	r4, [pc, #40]	; (800aaf0 <__libc_init_array+0x44>)
 800aac6:	1b64      	subs	r4, r4, r5
 800aac8:	10a4      	asrs	r4, r4, #2
 800aaca:	42a6      	cmp	r6, r4
 800aacc:	d105      	bne.n	800aada <__libc_init_array+0x2e>
 800aace:	bd70      	pop	{r4, r5, r6, pc}
 800aad0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad4:	4798      	blx	r3
 800aad6:	3601      	adds	r6, #1
 800aad8:	e7ee      	b.n	800aab8 <__libc_init_array+0xc>
 800aada:	f855 3b04 	ldr.w	r3, [r5], #4
 800aade:	4798      	blx	r3
 800aae0:	3601      	adds	r6, #1
 800aae2:	e7f2      	b.n	800aaca <__libc_init_array+0x1e>
 800aae4:	0800e3f4 	.word	0x0800e3f4
 800aae8:	0800e3f4 	.word	0x0800e3f4
 800aaec:	0800e3f4 	.word	0x0800e3f4
 800aaf0:	0800e3f8 	.word	0x0800e3f8

0800aaf4 <memmove>:
 800aaf4:	4288      	cmp	r0, r1
 800aaf6:	b510      	push	{r4, lr}
 800aaf8:	eb01 0402 	add.w	r4, r1, r2
 800aafc:	d902      	bls.n	800ab04 <memmove+0x10>
 800aafe:	4284      	cmp	r4, r0
 800ab00:	4623      	mov	r3, r4
 800ab02:	d807      	bhi.n	800ab14 <memmove+0x20>
 800ab04:	1e43      	subs	r3, r0, #1
 800ab06:	42a1      	cmp	r1, r4
 800ab08:	d008      	beq.n	800ab1c <memmove+0x28>
 800ab0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab12:	e7f8      	b.n	800ab06 <memmove+0x12>
 800ab14:	4601      	mov	r1, r0
 800ab16:	4402      	add	r2, r0
 800ab18:	428a      	cmp	r2, r1
 800ab1a:	d100      	bne.n	800ab1e <memmove+0x2a>
 800ab1c:	bd10      	pop	{r4, pc}
 800ab1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab26:	e7f7      	b.n	800ab18 <memmove+0x24>

0800ab28 <memset>:
 800ab28:	4603      	mov	r3, r0
 800ab2a:	4402      	add	r2, r0
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d100      	bne.n	800ab32 <memset+0xa>
 800ab30:	4770      	bx	lr
 800ab32:	f803 1b01 	strb.w	r1, [r3], #1
 800ab36:	e7f9      	b.n	800ab2c <memset+0x4>

0800ab38 <strcpy>:
 800ab38:	4603      	mov	r3, r0
 800ab3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab3e:	f803 2b01 	strb.w	r2, [r3], #1
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	d1f9      	bne.n	800ab3a <strcpy+0x2>
 800ab46:	4770      	bx	lr

0800ab48 <sulp>:
 800ab48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4c:	460f      	mov	r7, r1
 800ab4e:	4690      	mov	r8, r2
 800ab50:	f001 fe30 	bl	800c7b4 <__ulp>
 800ab54:	4604      	mov	r4, r0
 800ab56:	460d      	mov	r5, r1
 800ab58:	f1b8 0f00 	cmp.w	r8, #0
 800ab5c:	d011      	beq.n	800ab82 <sulp+0x3a>
 800ab5e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ab62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	dd0b      	ble.n	800ab82 <sulp+0x3a>
 800ab6a:	2400      	movs	r4, #0
 800ab6c:	051b      	lsls	r3, r3, #20
 800ab6e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ab72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ab76:	4622      	mov	r2, r4
 800ab78:	462b      	mov	r3, r5
 800ab7a:	f7fa fcb7 	bl	80054ec <__aeabi_dmul>
 800ab7e:	4604      	mov	r4, r0
 800ab80:	460d      	mov	r5, r1
 800ab82:	4620      	mov	r0, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab8a:	0000      	movs	r0, r0
 800ab8c:	0000      	movs	r0, r0
	...

0800ab90 <_strtod_l>:
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	469b      	mov	fp, r3
 800ab96:	2300      	movs	r3, #0
 800ab98:	b09f      	sub	sp, #124	; 0x7c
 800ab9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ab9c:	4b9e      	ldr	r3, [pc, #632]	; (800ae18 <_strtod_l+0x288>)
 800ab9e:	4682      	mov	sl, r0
 800aba0:	681f      	ldr	r7, [r3, #0]
 800aba2:	460e      	mov	r6, r1
 800aba4:	4638      	mov	r0, r7
 800aba6:	9215      	str	r2, [sp, #84]	; 0x54
 800aba8:	f7fa fadc 	bl	8005164 <strlen>
 800abac:	f04f 0800 	mov.w	r8, #0
 800abb0:	4604      	mov	r4, r0
 800abb2:	f04f 0900 	mov.w	r9, #0
 800abb6:	9619      	str	r6, [sp, #100]	; 0x64
 800abb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abba:	781a      	ldrb	r2, [r3, #0]
 800abbc:	2a2b      	cmp	r2, #43	; 0x2b
 800abbe:	d04c      	beq.n	800ac5a <_strtod_l+0xca>
 800abc0:	d83a      	bhi.n	800ac38 <_strtod_l+0xa8>
 800abc2:	2a0d      	cmp	r2, #13
 800abc4:	d833      	bhi.n	800ac2e <_strtod_l+0x9e>
 800abc6:	2a08      	cmp	r2, #8
 800abc8:	d833      	bhi.n	800ac32 <_strtod_l+0xa2>
 800abca:	2a00      	cmp	r2, #0
 800abcc:	d03d      	beq.n	800ac4a <_strtod_l+0xba>
 800abce:	2300      	movs	r3, #0
 800abd0:	930a      	str	r3, [sp, #40]	; 0x28
 800abd2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800abd4:	782b      	ldrb	r3, [r5, #0]
 800abd6:	2b30      	cmp	r3, #48	; 0x30
 800abd8:	f040 80aa 	bne.w	800ad30 <_strtod_l+0x1a0>
 800abdc:	786b      	ldrb	r3, [r5, #1]
 800abde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800abe2:	2b58      	cmp	r3, #88	; 0x58
 800abe4:	d166      	bne.n	800acb4 <_strtod_l+0x124>
 800abe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abe8:	4650      	mov	r0, sl
 800abea:	9301      	str	r3, [sp, #4]
 800abec:	ab1a      	add	r3, sp, #104	; 0x68
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	4a8a      	ldr	r2, [pc, #552]	; (800ae1c <_strtod_l+0x28c>)
 800abf2:	f8cd b008 	str.w	fp, [sp, #8]
 800abf6:	ab1b      	add	r3, sp, #108	; 0x6c
 800abf8:	a919      	add	r1, sp, #100	; 0x64
 800abfa:	f000 ff4d 	bl	800ba98 <__gethex>
 800abfe:	f010 0607 	ands.w	r6, r0, #7
 800ac02:	4604      	mov	r4, r0
 800ac04:	d005      	beq.n	800ac12 <_strtod_l+0x82>
 800ac06:	2e06      	cmp	r6, #6
 800ac08:	d129      	bne.n	800ac5e <_strtod_l+0xce>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	3501      	adds	r5, #1
 800ac0e:	9519      	str	r5, [sp, #100]	; 0x64
 800ac10:	930a      	str	r3, [sp, #40]	; 0x28
 800ac12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f040 858a 	bne.w	800b72e <_strtod_l+0xb9e>
 800ac1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac1c:	b1d3      	cbz	r3, 800ac54 <_strtod_l+0xc4>
 800ac1e:	4642      	mov	r2, r8
 800ac20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ac24:	4610      	mov	r0, r2
 800ac26:	4619      	mov	r1, r3
 800ac28:	b01f      	add	sp, #124	; 0x7c
 800ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2e:	2a20      	cmp	r2, #32
 800ac30:	d1cd      	bne.n	800abce <_strtod_l+0x3e>
 800ac32:	3301      	adds	r3, #1
 800ac34:	9319      	str	r3, [sp, #100]	; 0x64
 800ac36:	e7bf      	b.n	800abb8 <_strtod_l+0x28>
 800ac38:	2a2d      	cmp	r2, #45	; 0x2d
 800ac3a:	d1c8      	bne.n	800abce <_strtod_l+0x3e>
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	920a      	str	r2, [sp, #40]	; 0x28
 800ac40:	1c5a      	adds	r2, r3, #1
 800ac42:	9219      	str	r2, [sp, #100]	; 0x64
 800ac44:	785b      	ldrb	r3, [r3, #1]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1c3      	bne.n	800abd2 <_strtod_l+0x42>
 800ac4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac4c:	9619      	str	r6, [sp, #100]	; 0x64
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f040 856b 	bne.w	800b72a <_strtod_l+0xb9a>
 800ac54:	4642      	mov	r2, r8
 800ac56:	464b      	mov	r3, r9
 800ac58:	e7e4      	b.n	800ac24 <_strtod_l+0x94>
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	e7ef      	b.n	800ac3e <_strtod_l+0xae>
 800ac5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ac60:	b13a      	cbz	r2, 800ac72 <_strtod_l+0xe2>
 800ac62:	2135      	movs	r1, #53	; 0x35
 800ac64:	a81c      	add	r0, sp, #112	; 0x70
 800ac66:	f001 fea9 	bl	800c9bc <__copybits>
 800ac6a:	4650      	mov	r0, sl
 800ac6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ac6e:	f001 fa71 	bl	800c154 <_Bfree>
 800ac72:	3e01      	subs	r6, #1
 800ac74:	2e04      	cmp	r6, #4
 800ac76:	d806      	bhi.n	800ac86 <_strtod_l+0xf6>
 800ac78:	e8df f006 	tbb	[pc, r6]
 800ac7c:	1714030a 	.word	0x1714030a
 800ac80:	0a          	.byte	0x0a
 800ac81:	00          	.byte	0x00
 800ac82:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ac86:	0721      	lsls	r1, r4, #28
 800ac88:	d5c3      	bpl.n	800ac12 <_strtod_l+0x82>
 800ac8a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ac8e:	e7c0      	b.n	800ac12 <_strtod_l+0x82>
 800ac90:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ac92:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ac96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ac9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ac9e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800aca2:	e7f0      	b.n	800ac86 <_strtod_l+0xf6>
 800aca4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ae20 <_strtod_l+0x290>
 800aca8:	e7ed      	b.n	800ac86 <_strtod_l+0xf6>
 800acaa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800acae:	f04f 38ff 	mov.w	r8, #4294967295
 800acb2:	e7e8      	b.n	800ac86 <_strtod_l+0xf6>
 800acb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acb6:	1c5a      	adds	r2, r3, #1
 800acb8:	9219      	str	r2, [sp, #100]	; 0x64
 800acba:	785b      	ldrb	r3, [r3, #1]
 800acbc:	2b30      	cmp	r3, #48	; 0x30
 800acbe:	d0f9      	beq.n	800acb4 <_strtod_l+0x124>
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d0a6      	beq.n	800ac12 <_strtod_l+0x82>
 800acc4:	2301      	movs	r3, #1
 800acc6:	9307      	str	r3, [sp, #28]
 800acc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acca:	220a      	movs	r2, #10
 800accc:	9308      	str	r3, [sp, #32]
 800acce:	2300      	movs	r3, #0
 800acd0:	469b      	mov	fp, r3
 800acd2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800acd6:	9819      	ldr	r0, [sp, #100]	; 0x64
 800acd8:	7805      	ldrb	r5, [r0, #0]
 800acda:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800acde:	b2d9      	uxtb	r1, r3
 800ace0:	2909      	cmp	r1, #9
 800ace2:	d927      	bls.n	800ad34 <_strtod_l+0x1a4>
 800ace4:	4622      	mov	r2, r4
 800ace6:	4639      	mov	r1, r7
 800ace8:	f002 fa60 	bl	800d1ac <strncmp>
 800acec:	2800      	cmp	r0, #0
 800acee:	d033      	beq.n	800ad58 <_strtod_l+0x1c8>
 800acf0:	2000      	movs	r0, #0
 800acf2:	462a      	mov	r2, r5
 800acf4:	465c      	mov	r4, fp
 800acf6:	4603      	mov	r3, r0
 800acf8:	9004      	str	r0, [sp, #16]
 800acfa:	2a65      	cmp	r2, #101	; 0x65
 800acfc:	d001      	beq.n	800ad02 <_strtod_l+0x172>
 800acfe:	2a45      	cmp	r2, #69	; 0x45
 800ad00:	d114      	bne.n	800ad2c <_strtod_l+0x19c>
 800ad02:	b91c      	cbnz	r4, 800ad0c <_strtod_l+0x17c>
 800ad04:	9a07      	ldr	r2, [sp, #28]
 800ad06:	4302      	orrs	r2, r0
 800ad08:	d09f      	beq.n	800ac4a <_strtod_l+0xba>
 800ad0a:	2400      	movs	r4, #0
 800ad0c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ad0e:	1c72      	adds	r2, r6, #1
 800ad10:	9219      	str	r2, [sp, #100]	; 0x64
 800ad12:	7872      	ldrb	r2, [r6, #1]
 800ad14:	2a2b      	cmp	r2, #43	; 0x2b
 800ad16:	d079      	beq.n	800ae0c <_strtod_l+0x27c>
 800ad18:	2a2d      	cmp	r2, #45	; 0x2d
 800ad1a:	f000 8083 	beq.w	800ae24 <_strtod_l+0x294>
 800ad1e:	2700      	movs	r7, #0
 800ad20:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ad24:	2909      	cmp	r1, #9
 800ad26:	f240 8083 	bls.w	800ae30 <_strtod_l+0x2a0>
 800ad2a:	9619      	str	r6, [sp, #100]	; 0x64
 800ad2c:	2500      	movs	r5, #0
 800ad2e:	e09f      	b.n	800ae70 <_strtod_l+0x2e0>
 800ad30:	2300      	movs	r3, #0
 800ad32:	e7c8      	b.n	800acc6 <_strtod_l+0x136>
 800ad34:	f1bb 0f08 	cmp.w	fp, #8
 800ad38:	bfd5      	itete	le
 800ad3a:	9906      	ldrle	r1, [sp, #24]
 800ad3c:	9905      	ldrgt	r1, [sp, #20]
 800ad3e:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad42:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ad46:	f100 0001 	add.w	r0, r0, #1
 800ad4a:	bfd4      	ite	le
 800ad4c:	9306      	strle	r3, [sp, #24]
 800ad4e:	9305      	strgt	r3, [sp, #20]
 800ad50:	f10b 0b01 	add.w	fp, fp, #1
 800ad54:	9019      	str	r0, [sp, #100]	; 0x64
 800ad56:	e7be      	b.n	800acd6 <_strtod_l+0x146>
 800ad58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad5a:	191a      	adds	r2, r3, r4
 800ad5c:	9219      	str	r2, [sp, #100]	; 0x64
 800ad5e:	5d1a      	ldrb	r2, [r3, r4]
 800ad60:	f1bb 0f00 	cmp.w	fp, #0
 800ad64:	d036      	beq.n	800add4 <_strtod_l+0x244>
 800ad66:	465c      	mov	r4, fp
 800ad68:	9004      	str	r0, [sp, #16]
 800ad6a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ad6e:	2b09      	cmp	r3, #9
 800ad70:	d912      	bls.n	800ad98 <_strtod_l+0x208>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e7c1      	b.n	800acfa <_strtod_l+0x16a>
 800ad76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad78:	3001      	adds	r0, #1
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	9219      	str	r2, [sp, #100]	; 0x64
 800ad7e:	785a      	ldrb	r2, [r3, #1]
 800ad80:	2a30      	cmp	r2, #48	; 0x30
 800ad82:	d0f8      	beq.n	800ad76 <_strtod_l+0x1e6>
 800ad84:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	f200 84d5 	bhi.w	800b738 <_strtod_l+0xba8>
 800ad8e:	9004      	str	r0, [sp, #16]
 800ad90:	2000      	movs	r0, #0
 800ad92:	4604      	mov	r4, r0
 800ad94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad96:	9308      	str	r3, [sp, #32]
 800ad98:	3a30      	subs	r2, #48	; 0x30
 800ad9a:	f100 0301 	add.w	r3, r0, #1
 800ad9e:	d013      	beq.n	800adc8 <_strtod_l+0x238>
 800ada0:	9904      	ldr	r1, [sp, #16]
 800ada2:	1905      	adds	r5, r0, r4
 800ada4:	4419      	add	r1, r3
 800ada6:	9104      	str	r1, [sp, #16]
 800ada8:	4623      	mov	r3, r4
 800adaa:	210a      	movs	r1, #10
 800adac:	42ab      	cmp	r3, r5
 800adae:	d113      	bne.n	800add8 <_strtod_l+0x248>
 800adb0:	1823      	adds	r3, r4, r0
 800adb2:	2b08      	cmp	r3, #8
 800adb4:	f104 0401 	add.w	r4, r4, #1
 800adb8:	4404      	add	r4, r0
 800adba:	dc1b      	bgt.n	800adf4 <_strtod_l+0x264>
 800adbc:	230a      	movs	r3, #10
 800adbe:	9906      	ldr	r1, [sp, #24]
 800adc0:	fb03 2301 	mla	r3, r3, r1, r2
 800adc4:	9306      	str	r3, [sp, #24]
 800adc6:	2300      	movs	r3, #0
 800adc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adca:	4618      	mov	r0, r3
 800adcc:	1c51      	adds	r1, r2, #1
 800adce:	9119      	str	r1, [sp, #100]	; 0x64
 800add0:	7852      	ldrb	r2, [r2, #1]
 800add2:	e7ca      	b.n	800ad6a <_strtod_l+0x1da>
 800add4:	4658      	mov	r0, fp
 800add6:	e7d3      	b.n	800ad80 <_strtod_l+0x1f0>
 800add8:	2b08      	cmp	r3, #8
 800adda:	dc04      	bgt.n	800ade6 <_strtod_l+0x256>
 800addc:	9f06      	ldr	r7, [sp, #24]
 800adde:	434f      	muls	r7, r1
 800ade0:	9706      	str	r7, [sp, #24]
 800ade2:	3301      	adds	r3, #1
 800ade4:	e7e2      	b.n	800adac <_strtod_l+0x21c>
 800ade6:	1c5f      	adds	r7, r3, #1
 800ade8:	2f10      	cmp	r7, #16
 800adea:	bfde      	ittt	le
 800adec:	9f05      	ldrle	r7, [sp, #20]
 800adee:	434f      	mulle	r7, r1
 800adf0:	9705      	strle	r7, [sp, #20]
 800adf2:	e7f6      	b.n	800ade2 <_strtod_l+0x252>
 800adf4:	2c10      	cmp	r4, #16
 800adf6:	bfdf      	itttt	le
 800adf8:	230a      	movle	r3, #10
 800adfa:	9905      	ldrle	r1, [sp, #20]
 800adfc:	fb03 2301 	mlale	r3, r3, r1, r2
 800ae00:	9305      	strle	r3, [sp, #20]
 800ae02:	e7e0      	b.n	800adc6 <_strtod_l+0x236>
 800ae04:	2300      	movs	r3, #0
 800ae06:	9304      	str	r3, [sp, #16]
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e77b      	b.n	800ad04 <_strtod_l+0x174>
 800ae0c:	2700      	movs	r7, #0
 800ae0e:	1cb2      	adds	r2, r6, #2
 800ae10:	9219      	str	r2, [sp, #100]	; 0x64
 800ae12:	78b2      	ldrb	r2, [r6, #2]
 800ae14:	e784      	b.n	800ad20 <_strtod_l+0x190>
 800ae16:	bf00      	nop
 800ae18:	0800e1a0 	.word	0x0800e1a0
 800ae1c:	0800dfd8 	.word	0x0800dfd8
 800ae20:	7ff00000 	.word	0x7ff00000
 800ae24:	2701      	movs	r7, #1
 800ae26:	e7f2      	b.n	800ae0e <_strtod_l+0x27e>
 800ae28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae2a:	1c51      	adds	r1, r2, #1
 800ae2c:	9119      	str	r1, [sp, #100]	; 0x64
 800ae2e:	7852      	ldrb	r2, [r2, #1]
 800ae30:	2a30      	cmp	r2, #48	; 0x30
 800ae32:	d0f9      	beq.n	800ae28 <_strtod_l+0x298>
 800ae34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ae38:	2908      	cmp	r1, #8
 800ae3a:	f63f af77 	bhi.w	800ad2c <_strtod_l+0x19c>
 800ae3e:	f04f 0e0a 	mov.w	lr, #10
 800ae42:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ae46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae48:	9209      	str	r2, [sp, #36]	; 0x24
 800ae4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae4c:	1c51      	adds	r1, r2, #1
 800ae4e:	9119      	str	r1, [sp, #100]	; 0x64
 800ae50:	7852      	ldrb	r2, [r2, #1]
 800ae52:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ae56:	2d09      	cmp	r5, #9
 800ae58:	d935      	bls.n	800aec6 <_strtod_l+0x336>
 800ae5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ae5c:	1b49      	subs	r1, r1, r5
 800ae5e:	2908      	cmp	r1, #8
 800ae60:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ae64:	dc02      	bgt.n	800ae6c <_strtod_l+0x2dc>
 800ae66:	4565      	cmp	r5, ip
 800ae68:	bfa8      	it	ge
 800ae6a:	4665      	movge	r5, ip
 800ae6c:	b107      	cbz	r7, 800ae70 <_strtod_l+0x2e0>
 800ae6e:	426d      	negs	r5, r5
 800ae70:	2c00      	cmp	r4, #0
 800ae72:	d14c      	bne.n	800af0e <_strtod_l+0x37e>
 800ae74:	9907      	ldr	r1, [sp, #28]
 800ae76:	4301      	orrs	r1, r0
 800ae78:	f47f aecb 	bne.w	800ac12 <_strtod_l+0x82>
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f47f aee4 	bne.w	800ac4a <_strtod_l+0xba>
 800ae82:	2a69      	cmp	r2, #105	; 0x69
 800ae84:	d026      	beq.n	800aed4 <_strtod_l+0x344>
 800ae86:	dc23      	bgt.n	800aed0 <_strtod_l+0x340>
 800ae88:	2a49      	cmp	r2, #73	; 0x49
 800ae8a:	d023      	beq.n	800aed4 <_strtod_l+0x344>
 800ae8c:	2a4e      	cmp	r2, #78	; 0x4e
 800ae8e:	f47f aedc 	bne.w	800ac4a <_strtod_l+0xba>
 800ae92:	499d      	ldr	r1, [pc, #628]	; (800b108 <_strtod_l+0x578>)
 800ae94:	a819      	add	r0, sp, #100	; 0x64
 800ae96:	f001 f84d 	bl	800bf34 <__match>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	f43f aed5 	beq.w	800ac4a <_strtod_l+0xba>
 800aea0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2b28      	cmp	r3, #40	; 0x28
 800aea6:	d12c      	bne.n	800af02 <_strtod_l+0x372>
 800aea8:	4998      	ldr	r1, [pc, #608]	; (800b10c <_strtod_l+0x57c>)
 800aeaa:	aa1c      	add	r2, sp, #112	; 0x70
 800aeac:	a819      	add	r0, sp, #100	; 0x64
 800aeae:	f001 f855 	bl	800bf5c <__hexnan>
 800aeb2:	2805      	cmp	r0, #5
 800aeb4:	d125      	bne.n	800af02 <_strtod_l+0x372>
 800aeb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aeb8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800aebc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800aec0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800aec4:	e6a5      	b.n	800ac12 <_strtod_l+0x82>
 800aec6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800aeca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800aece:	e7bc      	b.n	800ae4a <_strtod_l+0x2ba>
 800aed0:	2a6e      	cmp	r2, #110	; 0x6e
 800aed2:	e7dc      	b.n	800ae8e <_strtod_l+0x2fe>
 800aed4:	498e      	ldr	r1, [pc, #568]	; (800b110 <_strtod_l+0x580>)
 800aed6:	a819      	add	r0, sp, #100	; 0x64
 800aed8:	f001 f82c 	bl	800bf34 <__match>
 800aedc:	2800      	cmp	r0, #0
 800aede:	f43f aeb4 	beq.w	800ac4a <_strtod_l+0xba>
 800aee2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aee4:	498b      	ldr	r1, [pc, #556]	; (800b114 <_strtod_l+0x584>)
 800aee6:	3b01      	subs	r3, #1
 800aee8:	a819      	add	r0, sp, #100	; 0x64
 800aeea:	9319      	str	r3, [sp, #100]	; 0x64
 800aeec:	f001 f822 	bl	800bf34 <__match>
 800aef0:	b910      	cbnz	r0, 800aef8 <_strtod_l+0x368>
 800aef2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aef4:	3301      	adds	r3, #1
 800aef6:	9319      	str	r3, [sp, #100]	; 0x64
 800aef8:	f04f 0800 	mov.w	r8, #0
 800aefc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800b118 <_strtod_l+0x588>
 800af00:	e687      	b.n	800ac12 <_strtod_l+0x82>
 800af02:	4886      	ldr	r0, [pc, #536]	; (800b11c <_strtod_l+0x58c>)
 800af04:	f002 f938 	bl	800d178 <nan>
 800af08:	4680      	mov	r8, r0
 800af0a:	4689      	mov	r9, r1
 800af0c:	e681      	b.n	800ac12 <_strtod_l+0x82>
 800af0e:	9b04      	ldr	r3, [sp, #16]
 800af10:	f1bb 0f00 	cmp.w	fp, #0
 800af14:	bf08      	it	eq
 800af16:	46a3      	moveq	fp, r4
 800af18:	1aeb      	subs	r3, r5, r3
 800af1a:	2c10      	cmp	r4, #16
 800af1c:	9806      	ldr	r0, [sp, #24]
 800af1e:	4626      	mov	r6, r4
 800af20:	9307      	str	r3, [sp, #28]
 800af22:	bfa8      	it	ge
 800af24:	2610      	movge	r6, #16
 800af26:	f7fa fa67 	bl	80053f8 <__aeabi_ui2d>
 800af2a:	2c09      	cmp	r4, #9
 800af2c:	4680      	mov	r8, r0
 800af2e:	4689      	mov	r9, r1
 800af30:	dd13      	ble.n	800af5a <_strtod_l+0x3ca>
 800af32:	4b7b      	ldr	r3, [pc, #492]	; (800b120 <_strtod_l+0x590>)
 800af34:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af38:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800af3c:	f7fa fad6 	bl	80054ec <__aeabi_dmul>
 800af40:	4680      	mov	r8, r0
 800af42:	9805      	ldr	r0, [sp, #20]
 800af44:	4689      	mov	r9, r1
 800af46:	f7fa fa57 	bl	80053f8 <__aeabi_ui2d>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4640      	mov	r0, r8
 800af50:	4649      	mov	r1, r9
 800af52:	f7fa f915 	bl	8005180 <__adddf3>
 800af56:	4680      	mov	r8, r0
 800af58:	4689      	mov	r9, r1
 800af5a:	2c0f      	cmp	r4, #15
 800af5c:	dc36      	bgt.n	800afcc <_strtod_l+0x43c>
 800af5e:	9b07      	ldr	r3, [sp, #28]
 800af60:	2b00      	cmp	r3, #0
 800af62:	f43f ae56 	beq.w	800ac12 <_strtod_l+0x82>
 800af66:	dd22      	ble.n	800afae <_strtod_l+0x41e>
 800af68:	2b16      	cmp	r3, #22
 800af6a:	dc09      	bgt.n	800af80 <_strtod_l+0x3f0>
 800af6c:	496c      	ldr	r1, [pc, #432]	; (800b120 <_strtod_l+0x590>)
 800af6e:	4642      	mov	r2, r8
 800af70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af74:	464b      	mov	r3, r9
 800af76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af7a:	f7fa fab7 	bl	80054ec <__aeabi_dmul>
 800af7e:	e7c3      	b.n	800af08 <_strtod_l+0x378>
 800af80:	9a07      	ldr	r2, [sp, #28]
 800af82:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800af86:	4293      	cmp	r3, r2
 800af88:	db20      	blt.n	800afcc <_strtod_l+0x43c>
 800af8a:	4d65      	ldr	r5, [pc, #404]	; (800b120 <_strtod_l+0x590>)
 800af8c:	f1c4 040f 	rsb	r4, r4, #15
 800af90:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800af94:	4642      	mov	r2, r8
 800af96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af9a:	464b      	mov	r3, r9
 800af9c:	f7fa faa6 	bl	80054ec <__aeabi_dmul>
 800afa0:	9b07      	ldr	r3, [sp, #28]
 800afa2:	1b1c      	subs	r4, r3, r4
 800afa4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800afa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afac:	e7e5      	b.n	800af7a <_strtod_l+0x3ea>
 800afae:	9b07      	ldr	r3, [sp, #28]
 800afb0:	3316      	adds	r3, #22
 800afb2:	db0b      	blt.n	800afcc <_strtod_l+0x43c>
 800afb4:	9b04      	ldr	r3, [sp, #16]
 800afb6:	4640      	mov	r0, r8
 800afb8:	1b5d      	subs	r5, r3, r5
 800afba:	4b59      	ldr	r3, [pc, #356]	; (800b120 <_strtod_l+0x590>)
 800afbc:	4649      	mov	r1, r9
 800afbe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800afc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afc6:	f7fa fbbb 	bl	8005740 <__aeabi_ddiv>
 800afca:	e79d      	b.n	800af08 <_strtod_l+0x378>
 800afcc:	9b07      	ldr	r3, [sp, #28]
 800afce:	1ba6      	subs	r6, r4, r6
 800afd0:	441e      	add	r6, r3
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	dd74      	ble.n	800b0c0 <_strtod_l+0x530>
 800afd6:	f016 030f 	ands.w	r3, r6, #15
 800afda:	d00a      	beq.n	800aff2 <_strtod_l+0x462>
 800afdc:	4950      	ldr	r1, [pc, #320]	; (800b120 <_strtod_l+0x590>)
 800afde:	4642      	mov	r2, r8
 800afe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afe8:	464b      	mov	r3, r9
 800afea:	f7fa fa7f 	bl	80054ec <__aeabi_dmul>
 800afee:	4680      	mov	r8, r0
 800aff0:	4689      	mov	r9, r1
 800aff2:	f036 060f 	bics.w	r6, r6, #15
 800aff6:	d052      	beq.n	800b09e <_strtod_l+0x50e>
 800aff8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800affc:	dd27      	ble.n	800b04e <_strtod_l+0x4be>
 800affe:	f04f 0b00 	mov.w	fp, #0
 800b002:	f8cd b010 	str.w	fp, [sp, #16]
 800b006:	f8cd b020 	str.w	fp, [sp, #32]
 800b00a:	f8cd b018 	str.w	fp, [sp, #24]
 800b00e:	2322      	movs	r3, #34	; 0x22
 800b010:	f04f 0800 	mov.w	r8, #0
 800b014:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800b118 <_strtod_l+0x588>
 800b018:	f8ca 3000 	str.w	r3, [sl]
 800b01c:	9b08      	ldr	r3, [sp, #32]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f43f adf7 	beq.w	800ac12 <_strtod_l+0x82>
 800b024:	4650      	mov	r0, sl
 800b026:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b028:	f001 f894 	bl	800c154 <_Bfree>
 800b02c:	4650      	mov	r0, sl
 800b02e:	9906      	ldr	r1, [sp, #24]
 800b030:	f001 f890 	bl	800c154 <_Bfree>
 800b034:	4650      	mov	r0, sl
 800b036:	9904      	ldr	r1, [sp, #16]
 800b038:	f001 f88c 	bl	800c154 <_Bfree>
 800b03c:	4650      	mov	r0, sl
 800b03e:	9908      	ldr	r1, [sp, #32]
 800b040:	f001 f888 	bl	800c154 <_Bfree>
 800b044:	4659      	mov	r1, fp
 800b046:	4650      	mov	r0, sl
 800b048:	f001 f884 	bl	800c154 <_Bfree>
 800b04c:	e5e1      	b.n	800ac12 <_strtod_l+0x82>
 800b04e:	4b35      	ldr	r3, [pc, #212]	; (800b124 <_strtod_l+0x594>)
 800b050:	4640      	mov	r0, r8
 800b052:	9305      	str	r3, [sp, #20]
 800b054:	2300      	movs	r3, #0
 800b056:	4649      	mov	r1, r9
 800b058:	461f      	mov	r7, r3
 800b05a:	1136      	asrs	r6, r6, #4
 800b05c:	2e01      	cmp	r6, #1
 800b05e:	dc21      	bgt.n	800b0a4 <_strtod_l+0x514>
 800b060:	b10b      	cbz	r3, 800b066 <_strtod_l+0x4d6>
 800b062:	4680      	mov	r8, r0
 800b064:	4689      	mov	r9, r1
 800b066:	4b2f      	ldr	r3, [pc, #188]	; (800b124 <_strtod_l+0x594>)
 800b068:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b06c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b070:	4642      	mov	r2, r8
 800b072:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b076:	464b      	mov	r3, r9
 800b078:	f7fa fa38 	bl	80054ec <__aeabi_dmul>
 800b07c:	4b26      	ldr	r3, [pc, #152]	; (800b118 <_strtod_l+0x588>)
 800b07e:	460a      	mov	r2, r1
 800b080:	400b      	ands	r3, r1
 800b082:	4929      	ldr	r1, [pc, #164]	; (800b128 <_strtod_l+0x598>)
 800b084:	4680      	mov	r8, r0
 800b086:	428b      	cmp	r3, r1
 800b088:	d8b9      	bhi.n	800affe <_strtod_l+0x46e>
 800b08a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b08e:	428b      	cmp	r3, r1
 800b090:	bf86      	itte	hi
 800b092:	f04f 38ff 	movhi.w	r8, #4294967295
 800b096:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800b12c <_strtod_l+0x59c>
 800b09a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9305      	str	r3, [sp, #20]
 800b0a2:	e07f      	b.n	800b1a4 <_strtod_l+0x614>
 800b0a4:	07f2      	lsls	r2, r6, #31
 800b0a6:	d505      	bpl.n	800b0b4 <_strtod_l+0x524>
 800b0a8:	9b05      	ldr	r3, [sp, #20]
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f7fa fa1d 	bl	80054ec <__aeabi_dmul>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	9a05      	ldr	r2, [sp, #20]
 800b0b6:	3701      	adds	r7, #1
 800b0b8:	3208      	adds	r2, #8
 800b0ba:	1076      	asrs	r6, r6, #1
 800b0bc:	9205      	str	r2, [sp, #20]
 800b0be:	e7cd      	b.n	800b05c <_strtod_l+0x4cc>
 800b0c0:	d0ed      	beq.n	800b09e <_strtod_l+0x50e>
 800b0c2:	4276      	negs	r6, r6
 800b0c4:	f016 020f 	ands.w	r2, r6, #15
 800b0c8:	d00a      	beq.n	800b0e0 <_strtod_l+0x550>
 800b0ca:	4b15      	ldr	r3, [pc, #84]	; (800b120 <_strtod_l+0x590>)
 800b0cc:	4640      	mov	r0, r8
 800b0ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d8:	f7fa fb32 	bl	8005740 <__aeabi_ddiv>
 800b0dc:	4680      	mov	r8, r0
 800b0de:	4689      	mov	r9, r1
 800b0e0:	1136      	asrs	r6, r6, #4
 800b0e2:	d0dc      	beq.n	800b09e <_strtod_l+0x50e>
 800b0e4:	2e1f      	cmp	r6, #31
 800b0e6:	dd23      	ble.n	800b130 <_strtod_l+0x5a0>
 800b0e8:	f04f 0b00 	mov.w	fp, #0
 800b0ec:	f8cd b010 	str.w	fp, [sp, #16]
 800b0f0:	f8cd b020 	str.w	fp, [sp, #32]
 800b0f4:	f8cd b018 	str.w	fp, [sp, #24]
 800b0f8:	2322      	movs	r3, #34	; 0x22
 800b0fa:	f04f 0800 	mov.w	r8, #0
 800b0fe:	f04f 0900 	mov.w	r9, #0
 800b102:	f8ca 3000 	str.w	r3, [sl]
 800b106:	e789      	b.n	800b01c <_strtod_l+0x48c>
 800b108:	0800dfd5 	.word	0x0800dfd5
 800b10c:	0800dfec 	.word	0x0800dfec
 800b110:	0800dfcc 	.word	0x0800dfcc
 800b114:	0800dfcf 	.word	0x0800dfcf
 800b118:	7ff00000 	.word	0x7ff00000
 800b11c:	0800debf 	.word	0x0800debf
 800b120:	0800e250 	.word	0x0800e250
 800b124:	0800e228 	.word	0x0800e228
 800b128:	7ca00000 	.word	0x7ca00000
 800b12c:	7fefffff 	.word	0x7fefffff
 800b130:	f016 0310 	ands.w	r3, r6, #16
 800b134:	bf18      	it	ne
 800b136:	236a      	movne	r3, #106	; 0x6a
 800b138:	4640      	mov	r0, r8
 800b13a:	9305      	str	r3, [sp, #20]
 800b13c:	4649      	mov	r1, r9
 800b13e:	2300      	movs	r3, #0
 800b140:	4fb0      	ldr	r7, [pc, #704]	; (800b404 <_strtod_l+0x874>)
 800b142:	07f2      	lsls	r2, r6, #31
 800b144:	d504      	bpl.n	800b150 <_strtod_l+0x5c0>
 800b146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b14a:	f7fa f9cf 	bl	80054ec <__aeabi_dmul>
 800b14e:	2301      	movs	r3, #1
 800b150:	1076      	asrs	r6, r6, #1
 800b152:	f107 0708 	add.w	r7, r7, #8
 800b156:	d1f4      	bne.n	800b142 <_strtod_l+0x5b2>
 800b158:	b10b      	cbz	r3, 800b15e <_strtod_l+0x5ce>
 800b15a:	4680      	mov	r8, r0
 800b15c:	4689      	mov	r9, r1
 800b15e:	9b05      	ldr	r3, [sp, #20]
 800b160:	b1c3      	cbz	r3, 800b194 <_strtod_l+0x604>
 800b162:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b166:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	4649      	mov	r1, r9
 800b16e:	dd11      	ble.n	800b194 <_strtod_l+0x604>
 800b170:	2b1f      	cmp	r3, #31
 800b172:	f340 8127 	ble.w	800b3c4 <_strtod_l+0x834>
 800b176:	2b34      	cmp	r3, #52	; 0x34
 800b178:	bfd8      	it	le
 800b17a:	f04f 33ff 	movle.w	r3, #4294967295
 800b17e:	f04f 0800 	mov.w	r8, #0
 800b182:	bfcf      	iteee	gt
 800b184:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b188:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b18c:	fa03 f202 	lslle.w	r2, r3, r2
 800b190:	ea02 0901 	andle.w	r9, r2, r1
 800b194:	2200      	movs	r2, #0
 800b196:	2300      	movs	r3, #0
 800b198:	4640      	mov	r0, r8
 800b19a:	4649      	mov	r1, r9
 800b19c:	f7fa fc0e 	bl	80059bc <__aeabi_dcmpeq>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d1a1      	bne.n	800b0e8 <_strtod_l+0x558>
 800b1a4:	9b06      	ldr	r3, [sp, #24]
 800b1a6:	465a      	mov	r2, fp
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	4650      	mov	r0, sl
 800b1ac:	4623      	mov	r3, r4
 800b1ae:	9908      	ldr	r1, [sp, #32]
 800b1b0:	f001 f838 	bl	800c224 <__s2b>
 800b1b4:	9008      	str	r0, [sp, #32]
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f43f af21 	beq.w	800affe <_strtod_l+0x46e>
 800b1bc:	9b04      	ldr	r3, [sp, #16]
 800b1be:	f04f 0b00 	mov.w	fp, #0
 800b1c2:	1b5d      	subs	r5, r3, r5
 800b1c4:	9b07      	ldr	r3, [sp, #28]
 800b1c6:	f8cd b010 	str.w	fp, [sp, #16]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	bfb4      	ite	lt
 800b1ce:	462b      	movlt	r3, r5
 800b1d0:	2300      	movge	r3, #0
 800b1d2:	930e      	str	r3, [sp, #56]	; 0x38
 800b1d4:	9b07      	ldr	r3, [sp, #28]
 800b1d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b1da:	9314      	str	r3, [sp, #80]	; 0x50
 800b1dc:	9b08      	ldr	r3, [sp, #32]
 800b1de:	4650      	mov	r0, sl
 800b1e0:	6859      	ldr	r1, [r3, #4]
 800b1e2:	f000 ff77 	bl	800c0d4 <_Balloc>
 800b1e6:	9006      	str	r0, [sp, #24]
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	f43f af10 	beq.w	800b00e <_strtod_l+0x47e>
 800b1ee:	9b08      	ldr	r3, [sp, #32]
 800b1f0:	300c      	adds	r0, #12
 800b1f2:	691a      	ldr	r2, [r3, #16]
 800b1f4:	f103 010c 	add.w	r1, r3, #12
 800b1f8:	3202      	adds	r2, #2
 800b1fa:	0092      	lsls	r2, r2, #2
 800b1fc:	f000 ff5c 	bl	800c0b8 <memcpy>
 800b200:	ab1c      	add	r3, sp, #112	; 0x70
 800b202:	9301      	str	r3, [sp, #4]
 800b204:	ab1b      	add	r3, sp, #108	; 0x6c
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	4642      	mov	r2, r8
 800b20a:	464b      	mov	r3, r9
 800b20c:	4650      	mov	r0, sl
 800b20e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800b212:	f001 fb49 	bl	800c8a8 <__d2b>
 800b216:	901a      	str	r0, [sp, #104]	; 0x68
 800b218:	2800      	cmp	r0, #0
 800b21a:	f43f aef8 	beq.w	800b00e <_strtod_l+0x47e>
 800b21e:	2101      	movs	r1, #1
 800b220:	4650      	mov	r0, sl
 800b222:	f001 f897 	bl	800c354 <__i2b>
 800b226:	4603      	mov	r3, r0
 800b228:	9004      	str	r0, [sp, #16]
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f43f aeef 	beq.w	800b00e <_strtod_l+0x47e>
 800b230:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b232:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b234:	2d00      	cmp	r5, #0
 800b236:	bfab      	itete	ge
 800b238:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b23a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800b23c:	18ee      	addge	r6, r5, r3
 800b23e:	1b5c      	sublt	r4, r3, r5
 800b240:	9b05      	ldr	r3, [sp, #20]
 800b242:	bfa8      	it	ge
 800b244:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800b246:	eba5 0503 	sub.w	r5, r5, r3
 800b24a:	4415      	add	r5, r2
 800b24c:	4b6e      	ldr	r3, [pc, #440]	; (800b408 <_strtod_l+0x878>)
 800b24e:	f105 35ff 	add.w	r5, r5, #4294967295
 800b252:	bfb8      	it	lt
 800b254:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b256:	429d      	cmp	r5, r3
 800b258:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b25c:	f280 80c4 	bge.w	800b3e8 <_strtod_l+0x858>
 800b260:	1b5b      	subs	r3, r3, r5
 800b262:	2b1f      	cmp	r3, #31
 800b264:	f04f 0701 	mov.w	r7, #1
 800b268:	eba2 0203 	sub.w	r2, r2, r3
 800b26c:	f300 80b1 	bgt.w	800b3d2 <_strtod_l+0x842>
 800b270:	2500      	movs	r5, #0
 800b272:	fa07 f303 	lsl.w	r3, r7, r3
 800b276:	930f      	str	r3, [sp, #60]	; 0x3c
 800b278:	18b7      	adds	r7, r6, r2
 800b27a:	9b05      	ldr	r3, [sp, #20]
 800b27c:	42be      	cmp	r6, r7
 800b27e:	4414      	add	r4, r2
 800b280:	441c      	add	r4, r3
 800b282:	4633      	mov	r3, r6
 800b284:	bfa8      	it	ge
 800b286:	463b      	movge	r3, r7
 800b288:	42a3      	cmp	r3, r4
 800b28a:	bfa8      	it	ge
 800b28c:	4623      	movge	r3, r4
 800b28e:	2b00      	cmp	r3, #0
 800b290:	bfc2      	ittt	gt
 800b292:	1aff      	subgt	r7, r7, r3
 800b294:	1ae4      	subgt	r4, r4, r3
 800b296:	1af6      	subgt	r6, r6, r3
 800b298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	dd17      	ble.n	800b2ce <_strtod_l+0x73e>
 800b29e:	461a      	mov	r2, r3
 800b2a0:	4650      	mov	r0, sl
 800b2a2:	9904      	ldr	r1, [sp, #16]
 800b2a4:	f001 f914 	bl	800c4d0 <__pow5mult>
 800b2a8:	9004      	str	r0, [sp, #16]
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	f43f aeaf 	beq.w	800b00e <_strtod_l+0x47e>
 800b2b0:	4601      	mov	r1, r0
 800b2b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b2b4:	4650      	mov	r0, sl
 800b2b6:	f001 f863 	bl	800c380 <__multiply>
 800b2ba:	9009      	str	r0, [sp, #36]	; 0x24
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	f43f aea6 	beq.w	800b00e <_strtod_l+0x47e>
 800b2c2:	4650      	mov	r0, sl
 800b2c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b2c6:	f000 ff45 	bl	800c154 <_Bfree>
 800b2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b2ce:	2f00      	cmp	r7, #0
 800b2d0:	f300 808e 	bgt.w	800b3f0 <_strtod_l+0x860>
 800b2d4:	9b07      	ldr	r3, [sp, #28]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	dd08      	ble.n	800b2ec <_strtod_l+0x75c>
 800b2da:	4650      	mov	r0, sl
 800b2dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2de:	9906      	ldr	r1, [sp, #24]
 800b2e0:	f001 f8f6 	bl	800c4d0 <__pow5mult>
 800b2e4:	9006      	str	r0, [sp, #24]
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f43f ae91 	beq.w	800b00e <_strtod_l+0x47e>
 800b2ec:	2c00      	cmp	r4, #0
 800b2ee:	dd08      	ble.n	800b302 <_strtod_l+0x772>
 800b2f0:	4622      	mov	r2, r4
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	9906      	ldr	r1, [sp, #24]
 800b2f6:	f001 f945 	bl	800c584 <__lshift>
 800b2fa:	9006      	str	r0, [sp, #24]
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	f43f ae86 	beq.w	800b00e <_strtod_l+0x47e>
 800b302:	2e00      	cmp	r6, #0
 800b304:	dd08      	ble.n	800b318 <_strtod_l+0x788>
 800b306:	4632      	mov	r2, r6
 800b308:	4650      	mov	r0, sl
 800b30a:	9904      	ldr	r1, [sp, #16]
 800b30c:	f001 f93a 	bl	800c584 <__lshift>
 800b310:	9004      	str	r0, [sp, #16]
 800b312:	2800      	cmp	r0, #0
 800b314:	f43f ae7b 	beq.w	800b00e <_strtod_l+0x47e>
 800b318:	4650      	mov	r0, sl
 800b31a:	9a06      	ldr	r2, [sp, #24]
 800b31c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b31e:	f001 f9bd 	bl	800c69c <__mdiff>
 800b322:	4683      	mov	fp, r0
 800b324:	2800      	cmp	r0, #0
 800b326:	f43f ae72 	beq.w	800b00e <_strtod_l+0x47e>
 800b32a:	2400      	movs	r4, #0
 800b32c:	68c3      	ldr	r3, [r0, #12]
 800b32e:	9904      	ldr	r1, [sp, #16]
 800b330:	60c4      	str	r4, [r0, #12]
 800b332:	930b      	str	r3, [sp, #44]	; 0x2c
 800b334:	f001 f996 	bl	800c664 <__mcmp>
 800b338:	42a0      	cmp	r0, r4
 800b33a:	da6b      	bge.n	800b414 <_strtod_l+0x884>
 800b33c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b33e:	ea53 0308 	orrs.w	r3, r3, r8
 800b342:	f040 8091 	bne.w	800b468 <_strtod_l+0x8d8>
 800b346:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f040 808c 	bne.w	800b468 <_strtod_l+0x8d8>
 800b350:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b354:	0d1b      	lsrs	r3, r3, #20
 800b356:	051b      	lsls	r3, r3, #20
 800b358:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b35c:	f240 8084 	bls.w	800b468 <_strtod_l+0x8d8>
 800b360:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b364:	b91b      	cbnz	r3, 800b36e <_strtod_l+0x7de>
 800b366:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	dd7c      	ble.n	800b468 <_strtod_l+0x8d8>
 800b36e:	4659      	mov	r1, fp
 800b370:	2201      	movs	r2, #1
 800b372:	4650      	mov	r0, sl
 800b374:	f001 f906 	bl	800c584 <__lshift>
 800b378:	9904      	ldr	r1, [sp, #16]
 800b37a:	4683      	mov	fp, r0
 800b37c:	f001 f972 	bl	800c664 <__mcmp>
 800b380:	2800      	cmp	r0, #0
 800b382:	dd71      	ble.n	800b468 <_strtod_l+0x8d8>
 800b384:	9905      	ldr	r1, [sp, #20]
 800b386:	464b      	mov	r3, r9
 800b388:	4a20      	ldr	r2, [pc, #128]	; (800b40c <_strtod_l+0x87c>)
 800b38a:	2900      	cmp	r1, #0
 800b38c:	f000 808c 	beq.w	800b4a8 <_strtod_l+0x918>
 800b390:	ea02 0109 	and.w	r1, r2, r9
 800b394:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b398:	f300 8086 	bgt.w	800b4a8 <_strtod_l+0x918>
 800b39c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b3a0:	f77f aeaa 	ble.w	800b0f8 <_strtod_l+0x568>
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	4b19      	ldr	r3, [pc, #100]	; (800b410 <_strtod_l+0x880>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f7fa f89e 	bl	80054ec <__aeabi_dmul>
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4303      	orrs	r3, r0
 800b3b4:	bf08      	it	eq
 800b3b6:	2322      	moveq	r3, #34	; 0x22
 800b3b8:	4680      	mov	r8, r0
 800b3ba:	4689      	mov	r9, r1
 800b3bc:	bf08      	it	eq
 800b3be:	f8ca 3000 	streq.w	r3, [sl]
 800b3c2:	e62f      	b.n	800b024 <_strtod_l+0x494>
 800b3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3cc:	ea03 0808 	and.w	r8, r3, r8
 800b3d0:	e6e0      	b.n	800b194 <_strtod_l+0x604>
 800b3d2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b3d6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b3da:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b3de:	35e2      	adds	r5, #226	; 0xe2
 800b3e0:	fa07 f505 	lsl.w	r5, r7, r5
 800b3e4:	970f      	str	r7, [sp, #60]	; 0x3c
 800b3e6:	e747      	b.n	800b278 <_strtod_l+0x6e8>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	2500      	movs	r5, #0
 800b3ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3ee:	e743      	b.n	800b278 <_strtod_l+0x6e8>
 800b3f0:	463a      	mov	r2, r7
 800b3f2:	4650      	mov	r0, sl
 800b3f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b3f6:	f001 f8c5 	bl	800c584 <__lshift>
 800b3fa:	901a      	str	r0, [sp, #104]	; 0x68
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f47f af69 	bne.w	800b2d4 <_strtod_l+0x744>
 800b402:	e604      	b.n	800b00e <_strtod_l+0x47e>
 800b404:	0800e000 	.word	0x0800e000
 800b408:	fffffc02 	.word	0xfffffc02
 800b40c:	7ff00000 	.word	0x7ff00000
 800b410:	39500000 	.word	0x39500000
 800b414:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b418:	d165      	bne.n	800b4e6 <_strtod_l+0x956>
 800b41a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b41c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b420:	b35a      	cbz	r2, 800b47a <_strtod_l+0x8ea>
 800b422:	4a99      	ldr	r2, [pc, #612]	; (800b688 <_strtod_l+0xaf8>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d12b      	bne.n	800b480 <_strtod_l+0x8f0>
 800b428:	9b05      	ldr	r3, [sp, #20]
 800b42a:	4641      	mov	r1, r8
 800b42c:	b303      	cbz	r3, 800b470 <_strtod_l+0x8e0>
 800b42e:	464a      	mov	r2, r9
 800b430:	4b96      	ldr	r3, [pc, #600]	; (800b68c <_strtod_l+0xafc>)
 800b432:	4013      	ands	r3, r2
 800b434:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b438:	f04f 32ff 	mov.w	r2, #4294967295
 800b43c:	d81b      	bhi.n	800b476 <_strtod_l+0x8e6>
 800b43e:	0d1b      	lsrs	r3, r3, #20
 800b440:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b444:	fa02 f303 	lsl.w	r3, r2, r3
 800b448:	4299      	cmp	r1, r3
 800b44a:	d119      	bne.n	800b480 <_strtod_l+0x8f0>
 800b44c:	4b90      	ldr	r3, [pc, #576]	; (800b690 <_strtod_l+0xb00>)
 800b44e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b450:	429a      	cmp	r2, r3
 800b452:	d102      	bne.n	800b45a <_strtod_l+0x8ca>
 800b454:	3101      	adds	r1, #1
 800b456:	f43f adda 	beq.w	800b00e <_strtod_l+0x47e>
 800b45a:	f04f 0800 	mov.w	r8, #0
 800b45e:	4b8b      	ldr	r3, [pc, #556]	; (800b68c <_strtod_l+0xafc>)
 800b460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b462:	401a      	ands	r2, r3
 800b464:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b468:	9b05      	ldr	r3, [sp, #20]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d19a      	bne.n	800b3a4 <_strtod_l+0x814>
 800b46e:	e5d9      	b.n	800b024 <_strtod_l+0x494>
 800b470:	f04f 33ff 	mov.w	r3, #4294967295
 800b474:	e7e8      	b.n	800b448 <_strtod_l+0x8b8>
 800b476:	4613      	mov	r3, r2
 800b478:	e7e6      	b.n	800b448 <_strtod_l+0x8b8>
 800b47a:	ea53 0308 	orrs.w	r3, r3, r8
 800b47e:	d081      	beq.n	800b384 <_strtod_l+0x7f4>
 800b480:	b1e5      	cbz	r5, 800b4bc <_strtod_l+0x92c>
 800b482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b484:	421d      	tst	r5, r3
 800b486:	d0ef      	beq.n	800b468 <_strtod_l+0x8d8>
 800b488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b48a:	4640      	mov	r0, r8
 800b48c:	4649      	mov	r1, r9
 800b48e:	9a05      	ldr	r2, [sp, #20]
 800b490:	b1c3      	cbz	r3, 800b4c4 <_strtod_l+0x934>
 800b492:	f7ff fb59 	bl	800ab48 <sulp>
 800b496:	4602      	mov	r2, r0
 800b498:	460b      	mov	r3, r1
 800b49a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b49e:	f7f9 fe6f 	bl	8005180 <__adddf3>
 800b4a2:	4680      	mov	r8, r0
 800b4a4:	4689      	mov	r9, r1
 800b4a6:	e7df      	b.n	800b468 <_strtod_l+0x8d8>
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b4ae:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b4b2:	f04f 38ff 	mov.w	r8, #4294967295
 800b4b6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b4ba:	e7d5      	b.n	800b468 <_strtod_l+0x8d8>
 800b4bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4be:	ea13 0f08 	tst.w	r3, r8
 800b4c2:	e7e0      	b.n	800b486 <_strtod_l+0x8f6>
 800b4c4:	f7ff fb40 	bl	800ab48 <sulp>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4d0:	f7f9 fe54 	bl	800517c <__aeabi_dsub>
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	4680      	mov	r8, r0
 800b4da:	4689      	mov	r9, r1
 800b4dc:	f7fa fa6e 	bl	80059bc <__aeabi_dcmpeq>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d0c1      	beq.n	800b468 <_strtod_l+0x8d8>
 800b4e4:	e608      	b.n	800b0f8 <_strtod_l+0x568>
 800b4e6:	4658      	mov	r0, fp
 800b4e8:	9904      	ldr	r1, [sp, #16]
 800b4ea:	f001 fa39 	bl	800c960 <__ratio>
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	460f      	mov	r7, r1
 800b4f8:	f7fa fa74 	bl	80059e4 <__aeabi_dcmple>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d070      	beq.n	800b5e2 <_strtod_l+0xa52>
 800b500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b502:	2b00      	cmp	r3, #0
 800b504:	d042      	beq.n	800b58c <_strtod_l+0x9fc>
 800b506:	2600      	movs	r6, #0
 800b508:	4f62      	ldr	r7, [pc, #392]	; (800b694 <_strtod_l+0xb04>)
 800b50a:	4d62      	ldr	r5, [pc, #392]	; (800b694 <_strtod_l+0xb04>)
 800b50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b50e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b512:	0d1b      	lsrs	r3, r3, #20
 800b514:	051b      	lsls	r3, r3, #20
 800b516:	930f      	str	r3, [sp, #60]	; 0x3c
 800b518:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b51a:	4b5f      	ldr	r3, [pc, #380]	; (800b698 <_strtod_l+0xb08>)
 800b51c:	429a      	cmp	r2, r3
 800b51e:	f040 80c3 	bne.w	800b6a8 <_strtod_l+0xb18>
 800b522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b524:	4640      	mov	r0, r8
 800b526:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b52a:	4649      	mov	r1, r9
 800b52c:	f001 f942 	bl	800c7b4 <__ulp>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	4630      	mov	r0, r6
 800b536:	4639      	mov	r1, r7
 800b538:	f7f9 ffd8 	bl	80054ec <__aeabi_dmul>
 800b53c:	4642      	mov	r2, r8
 800b53e:	464b      	mov	r3, r9
 800b540:	f7f9 fe1e 	bl	8005180 <__adddf3>
 800b544:	460b      	mov	r3, r1
 800b546:	4951      	ldr	r1, [pc, #324]	; (800b68c <_strtod_l+0xafc>)
 800b548:	4a54      	ldr	r2, [pc, #336]	; (800b69c <_strtod_l+0xb0c>)
 800b54a:	4019      	ands	r1, r3
 800b54c:	4291      	cmp	r1, r2
 800b54e:	4680      	mov	r8, r0
 800b550:	d95d      	bls.n	800b60e <_strtod_l+0xa7e>
 800b552:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b554:	4b4e      	ldr	r3, [pc, #312]	; (800b690 <_strtod_l+0xb00>)
 800b556:	429a      	cmp	r2, r3
 800b558:	d103      	bne.n	800b562 <_strtod_l+0x9d2>
 800b55a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b55c:	3301      	adds	r3, #1
 800b55e:	f43f ad56 	beq.w	800b00e <_strtod_l+0x47e>
 800b562:	f04f 38ff 	mov.w	r8, #4294967295
 800b566:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b690 <_strtod_l+0xb00>
 800b56a:	4650      	mov	r0, sl
 800b56c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b56e:	f000 fdf1 	bl	800c154 <_Bfree>
 800b572:	4650      	mov	r0, sl
 800b574:	9906      	ldr	r1, [sp, #24]
 800b576:	f000 fded 	bl	800c154 <_Bfree>
 800b57a:	4650      	mov	r0, sl
 800b57c:	9904      	ldr	r1, [sp, #16]
 800b57e:	f000 fde9 	bl	800c154 <_Bfree>
 800b582:	4659      	mov	r1, fp
 800b584:	4650      	mov	r0, sl
 800b586:	f000 fde5 	bl	800c154 <_Bfree>
 800b58a:	e627      	b.n	800b1dc <_strtod_l+0x64c>
 800b58c:	f1b8 0f00 	cmp.w	r8, #0
 800b590:	d119      	bne.n	800b5c6 <_strtod_l+0xa36>
 800b592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b598:	b9e3      	cbnz	r3, 800b5d4 <_strtod_l+0xa44>
 800b59a:	2200      	movs	r2, #0
 800b59c:	4630      	mov	r0, r6
 800b59e:	4639      	mov	r1, r7
 800b5a0:	4b3c      	ldr	r3, [pc, #240]	; (800b694 <_strtod_l+0xb04>)
 800b5a2:	f7fa fa15 	bl	80059d0 <__aeabi_dcmplt>
 800b5a6:	b9c8      	cbnz	r0, 800b5dc <_strtod_l+0xa4c>
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	4639      	mov	r1, r7
 800b5ae:	4b3c      	ldr	r3, [pc, #240]	; (800b6a0 <_strtod_l+0xb10>)
 800b5b0:	f7f9 ff9c 	bl	80054ec <__aeabi_dmul>
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	460d      	mov	r5, r1
 800b5b8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b5bc:	9416      	str	r4, [sp, #88]	; 0x58
 800b5be:	9317      	str	r3, [sp, #92]	; 0x5c
 800b5c0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800b5c4:	e7a2      	b.n	800b50c <_strtod_l+0x97c>
 800b5c6:	f1b8 0f01 	cmp.w	r8, #1
 800b5ca:	d103      	bne.n	800b5d4 <_strtod_l+0xa44>
 800b5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f43f ad92 	beq.w	800b0f8 <_strtod_l+0x568>
 800b5d4:	2600      	movs	r6, #0
 800b5d6:	2400      	movs	r4, #0
 800b5d8:	4f32      	ldr	r7, [pc, #200]	; (800b6a4 <_strtod_l+0xb14>)
 800b5da:	e796      	b.n	800b50a <_strtod_l+0x97a>
 800b5dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b5de:	4d30      	ldr	r5, [pc, #192]	; (800b6a0 <_strtod_l+0xb10>)
 800b5e0:	e7ea      	b.n	800b5b8 <_strtod_l+0xa28>
 800b5e2:	4b2f      	ldr	r3, [pc, #188]	; (800b6a0 <_strtod_l+0xb10>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	4639      	mov	r1, r7
 800b5ea:	f7f9 ff7f 	bl	80054ec <__aeabi_dmul>
 800b5ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	b933      	cbnz	r3, 800b604 <_strtod_l+0xa74>
 800b5f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5fa:	9010      	str	r0, [sp, #64]	; 0x40
 800b5fc:	9311      	str	r3, [sp, #68]	; 0x44
 800b5fe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b602:	e783      	b.n	800b50c <_strtod_l+0x97c>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b60c:	e7f7      	b.n	800b5fe <_strtod_l+0xa6e>
 800b60e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b612:	9b05      	ldr	r3, [sp, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1a8      	bne.n	800b56a <_strtod_l+0x9da>
 800b618:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b61c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b61e:	0d1b      	lsrs	r3, r3, #20
 800b620:	051b      	lsls	r3, r3, #20
 800b622:	429a      	cmp	r2, r3
 800b624:	d1a1      	bne.n	800b56a <_strtod_l+0x9da>
 800b626:	4620      	mov	r0, r4
 800b628:	4629      	mov	r1, r5
 800b62a:	f7fa fb0b 	bl	8005c44 <__aeabi_d2lz>
 800b62e:	f7f9 ff2f 	bl	8005490 <__aeabi_l2d>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4620      	mov	r0, r4
 800b638:	4629      	mov	r1, r5
 800b63a:	f7f9 fd9f 	bl	800517c <__aeabi_dsub>
 800b63e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b644:	ea43 0308 	orr.w	r3, r3, r8
 800b648:	4313      	orrs	r3, r2
 800b64a:	4604      	mov	r4, r0
 800b64c:	460d      	mov	r5, r1
 800b64e:	d066      	beq.n	800b71e <_strtod_l+0xb8e>
 800b650:	a309      	add	r3, pc, #36	; (adr r3, 800b678 <_strtod_l+0xae8>)
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	f7fa f9bb 	bl	80059d0 <__aeabi_dcmplt>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	f47f ace2 	bne.w	800b024 <_strtod_l+0x494>
 800b660:	a307      	add	r3, pc, #28	; (adr r3, 800b680 <_strtod_l+0xaf0>)
 800b662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b666:	4620      	mov	r0, r4
 800b668:	4629      	mov	r1, r5
 800b66a:	f7fa f9cf 	bl	8005a0c <__aeabi_dcmpgt>
 800b66e:	2800      	cmp	r0, #0
 800b670:	f43f af7b 	beq.w	800b56a <_strtod_l+0x9da>
 800b674:	e4d6      	b.n	800b024 <_strtod_l+0x494>
 800b676:	bf00      	nop
 800b678:	94a03595 	.word	0x94a03595
 800b67c:	3fdfffff 	.word	0x3fdfffff
 800b680:	35afe535 	.word	0x35afe535
 800b684:	3fe00000 	.word	0x3fe00000
 800b688:	000fffff 	.word	0x000fffff
 800b68c:	7ff00000 	.word	0x7ff00000
 800b690:	7fefffff 	.word	0x7fefffff
 800b694:	3ff00000 	.word	0x3ff00000
 800b698:	7fe00000 	.word	0x7fe00000
 800b69c:	7c9fffff 	.word	0x7c9fffff
 800b6a0:	3fe00000 	.word	0x3fe00000
 800b6a4:	bff00000 	.word	0xbff00000
 800b6a8:	9b05      	ldr	r3, [sp, #20]
 800b6aa:	b313      	cbz	r3, 800b6f2 <_strtod_l+0xb62>
 800b6ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b6b2:	d81e      	bhi.n	800b6f2 <_strtod_l+0xb62>
 800b6b4:	a326      	add	r3, pc, #152	; (adr r3, 800b750 <_strtod_l+0xbc0>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	4629      	mov	r1, r5
 800b6be:	f7fa f991 	bl	80059e4 <__aeabi_dcmple>
 800b6c2:	b190      	cbz	r0, 800b6ea <_strtod_l+0xb5a>
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f7fa f9c0 	bl	8005a4c <__aeabi_d2uiz>
 800b6cc:	2801      	cmp	r0, #1
 800b6ce:	bf38      	it	cc
 800b6d0:	2001      	movcc	r0, #1
 800b6d2:	f7f9 fe91 	bl	80053f8 <__aeabi_ui2d>
 800b6d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6d8:	4604      	mov	r4, r0
 800b6da:	460d      	mov	r5, r1
 800b6dc:	b9d3      	cbnz	r3, 800b714 <_strtod_l+0xb84>
 800b6de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6e2:	9012      	str	r0, [sp, #72]	; 0x48
 800b6e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b6e6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b6ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b6ec:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b6f0:	1a9f      	subs	r7, r3, r2
 800b6f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6f6:	f001 f85d 	bl	800c7b4 <__ulp>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4630      	mov	r0, r6
 800b700:	4639      	mov	r1, r7
 800b702:	f7f9 fef3 	bl	80054ec <__aeabi_dmul>
 800b706:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b70a:	f7f9 fd39 	bl	8005180 <__adddf3>
 800b70e:	4680      	mov	r8, r0
 800b710:	4689      	mov	r9, r1
 800b712:	e77e      	b.n	800b612 <_strtod_l+0xa82>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b71c:	e7e3      	b.n	800b6e6 <_strtod_l+0xb56>
 800b71e:	a30e      	add	r3, pc, #56	; (adr r3, 800b758 <_strtod_l+0xbc8>)
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	f7fa f954 	bl	80059d0 <__aeabi_dcmplt>
 800b728:	e7a1      	b.n	800b66e <_strtod_l+0xade>
 800b72a:	2300      	movs	r3, #0
 800b72c:	930a      	str	r3, [sp, #40]	; 0x28
 800b72e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b730:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b732:	6013      	str	r3, [r2, #0]
 800b734:	f7ff ba71 	b.w	800ac1a <_strtod_l+0x8a>
 800b738:	2a65      	cmp	r2, #101	; 0x65
 800b73a:	f43f ab63 	beq.w	800ae04 <_strtod_l+0x274>
 800b73e:	2a45      	cmp	r2, #69	; 0x45
 800b740:	f43f ab60 	beq.w	800ae04 <_strtod_l+0x274>
 800b744:	2301      	movs	r3, #1
 800b746:	f7ff bb95 	b.w	800ae74 <_strtod_l+0x2e4>
 800b74a:	bf00      	nop
 800b74c:	f3af 8000 	nop.w
 800b750:	ffc00000 	.word	0xffc00000
 800b754:	41dfffff 	.word	0x41dfffff
 800b758:	94a03595 	.word	0x94a03595
 800b75c:	3fcfffff 	.word	0x3fcfffff

0800b760 <strtof>:
 800b760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b764:	4f22      	ldr	r7, [pc, #136]	; (800b7f0 <strtof+0x90>)
 800b766:	460a      	mov	r2, r1
 800b768:	4b22      	ldr	r3, [pc, #136]	; (800b7f4 <strtof+0x94>)
 800b76a:	4601      	mov	r1, r0
 800b76c:	6838      	ldr	r0, [r7, #0]
 800b76e:	f7ff fa0f 	bl	800ab90 <_strtod_l>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	4606      	mov	r6, r0
 800b778:	460c      	mov	r4, r1
 800b77a:	f7fa f951 	bl	8005a20 <__aeabi_dcmpun>
 800b77e:	b168      	cbz	r0, 800b79c <strtof+0x3c>
 800b780:	2c00      	cmp	r4, #0
 800b782:	481d      	ldr	r0, [pc, #116]	; (800b7f8 <strtof+0x98>)
 800b784:	da06      	bge.n	800b794 <strtof+0x34>
 800b786:	f001 fd0d 	bl	800d1a4 <nanf>
 800b78a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800b78e:	4628      	mov	r0, r5
 800b790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b798:	f001 bd04 	b.w	800d1a4 <nanf>
 800b79c:	4621      	mov	r1, r4
 800b79e:	4630      	mov	r0, r6
 800b7a0:	f7fa f974 	bl	8005a8c <__aeabi_d2f>
 800b7a4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	4914      	ldr	r1, [pc, #80]	; (800b7fc <strtof+0x9c>)
 800b7ac:	4640      	mov	r0, r8
 800b7ae:	f7fa fa33 	bl	8005c18 <__aeabi_fcmpun>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d1eb      	bne.n	800b78e <strtof+0x2e>
 800b7b6:	4640      	mov	r0, r8
 800b7b8:	4910      	ldr	r1, [pc, #64]	; (800b7fc <strtof+0x9c>)
 800b7ba:	f7fa fa0f 	bl	8005bdc <__aeabi_fcmple>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d1e5      	bne.n	800b78e <strtof+0x2e>
 800b7c2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4b0c      	ldr	r3, [pc, #48]	; (800b800 <strtof+0xa0>)
 800b7d0:	f7fa f926 	bl	8005a20 <__aeabi_dcmpun>
 800b7d4:	b940      	cbnz	r0, 800b7e8 <strtof+0x88>
 800b7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7da:	4630      	mov	r0, r6
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4b08      	ldr	r3, [pc, #32]	; (800b800 <strtof+0xa0>)
 800b7e0:	f7fa f900 	bl	80059e4 <__aeabi_dcmple>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d0d2      	beq.n	800b78e <strtof+0x2e>
 800b7e8:	2222      	movs	r2, #34	; 0x22
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	e7ce      	b.n	800b78e <strtof+0x2e>
 800b7f0:	200001a0 	.word	0x200001a0
 800b7f4:	20000208 	.word	0x20000208
 800b7f8:	0800debf 	.word	0x0800debf
 800b7fc:	7f7fffff 	.word	0x7f7fffff
 800b800:	7fefffff 	.word	0x7fefffff

0800b804 <__strtok_r>:
 800b804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b806:	b908      	cbnz	r0, 800b80c <__strtok_r+0x8>
 800b808:	6810      	ldr	r0, [r2, #0]
 800b80a:	b188      	cbz	r0, 800b830 <__strtok_r+0x2c>
 800b80c:	4604      	mov	r4, r0
 800b80e:	460f      	mov	r7, r1
 800b810:	4620      	mov	r0, r4
 800b812:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b816:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b81a:	b91e      	cbnz	r6, 800b824 <__strtok_r+0x20>
 800b81c:	b965      	cbnz	r5, 800b838 <__strtok_r+0x34>
 800b81e:	4628      	mov	r0, r5
 800b820:	6015      	str	r5, [r2, #0]
 800b822:	e005      	b.n	800b830 <__strtok_r+0x2c>
 800b824:	42b5      	cmp	r5, r6
 800b826:	d1f6      	bne.n	800b816 <__strtok_r+0x12>
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1f0      	bne.n	800b80e <__strtok_r+0xa>
 800b82c:	6014      	str	r4, [r2, #0]
 800b82e:	7003      	strb	r3, [r0, #0]
 800b830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b832:	461c      	mov	r4, r3
 800b834:	e00c      	b.n	800b850 <__strtok_r+0x4c>
 800b836:	b915      	cbnz	r5, 800b83e <__strtok_r+0x3a>
 800b838:	460e      	mov	r6, r1
 800b83a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b83e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b842:	42ab      	cmp	r3, r5
 800b844:	d1f7      	bne.n	800b836 <__strtok_r+0x32>
 800b846:	2b00      	cmp	r3, #0
 800b848:	d0f3      	beq.n	800b832 <__strtok_r+0x2e>
 800b84a:	2300      	movs	r3, #0
 800b84c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b850:	6014      	str	r4, [r2, #0]
 800b852:	e7ed      	b.n	800b830 <__strtok_r+0x2c>

0800b854 <strtok_r>:
 800b854:	2301      	movs	r3, #1
 800b856:	f7ff bfd5 	b.w	800b804 <__strtok_r>
	...

0800b85c <_strtoul_l.constprop.0>:
 800b85c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b860:	4686      	mov	lr, r0
 800b862:	460d      	mov	r5, r1
 800b864:	4f35      	ldr	r7, [pc, #212]	; (800b93c <_strtoul_l.constprop.0+0xe0>)
 800b866:	4628      	mov	r0, r5
 800b868:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b86c:	5de6      	ldrb	r6, [r4, r7]
 800b86e:	f016 0608 	ands.w	r6, r6, #8
 800b872:	d1f8      	bne.n	800b866 <_strtoul_l.constprop.0+0xa>
 800b874:	2c2d      	cmp	r4, #45	; 0x2d
 800b876:	d12f      	bne.n	800b8d8 <_strtoul_l.constprop.0+0x7c>
 800b878:	2601      	movs	r6, #1
 800b87a:	782c      	ldrb	r4, [r5, #0]
 800b87c:	1c85      	adds	r5, r0, #2
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d057      	beq.n	800b932 <_strtoul_l.constprop.0+0xd6>
 800b882:	2b10      	cmp	r3, #16
 800b884:	d109      	bne.n	800b89a <_strtoul_l.constprop.0+0x3e>
 800b886:	2c30      	cmp	r4, #48	; 0x30
 800b888:	d107      	bne.n	800b89a <_strtoul_l.constprop.0+0x3e>
 800b88a:	7828      	ldrb	r0, [r5, #0]
 800b88c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b890:	2858      	cmp	r0, #88	; 0x58
 800b892:	d149      	bne.n	800b928 <_strtoul_l.constprop.0+0xcc>
 800b894:	2310      	movs	r3, #16
 800b896:	786c      	ldrb	r4, [r5, #1]
 800b898:	3502      	adds	r5, #2
 800b89a:	f04f 38ff 	mov.w	r8, #4294967295
 800b89e:	fbb8 f8f3 	udiv	r8, r8, r3
 800b8a2:	2700      	movs	r7, #0
 800b8a4:	fb03 f908 	mul.w	r9, r3, r8
 800b8a8:	4638      	mov	r0, r7
 800b8aa:	ea6f 0909 	mvn.w	r9, r9
 800b8ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b8b2:	f1bc 0f09 	cmp.w	ip, #9
 800b8b6:	d814      	bhi.n	800b8e2 <_strtoul_l.constprop.0+0x86>
 800b8b8:	4664      	mov	r4, ip
 800b8ba:	42a3      	cmp	r3, r4
 800b8bc:	dd22      	ble.n	800b904 <_strtoul_l.constprop.0+0xa8>
 800b8be:	2f00      	cmp	r7, #0
 800b8c0:	db1d      	blt.n	800b8fe <_strtoul_l.constprop.0+0xa2>
 800b8c2:	4580      	cmp	r8, r0
 800b8c4:	d31b      	bcc.n	800b8fe <_strtoul_l.constprop.0+0xa2>
 800b8c6:	d101      	bne.n	800b8cc <_strtoul_l.constprop.0+0x70>
 800b8c8:	45a1      	cmp	r9, r4
 800b8ca:	db18      	blt.n	800b8fe <_strtoul_l.constprop.0+0xa2>
 800b8cc:	2701      	movs	r7, #1
 800b8ce:	fb00 4003 	mla	r0, r0, r3, r4
 800b8d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8d6:	e7ea      	b.n	800b8ae <_strtoul_l.constprop.0+0x52>
 800b8d8:	2c2b      	cmp	r4, #43	; 0x2b
 800b8da:	bf04      	itt	eq
 800b8dc:	782c      	ldrbeq	r4, [r5, #0]
 800b8de:	1c85      	addeq	r5, r0, #2
 800b8e0:	e7cd      	b.n	800b87e <_strtoul_l.constprop.0+0x22>
 800b8e2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b8e6:	f1bc 0f19 	cmp.w	ip, #25
 800b8ea:	d801      	bhi.n	800b8f0 <_strtoul_l.constprop.0+0x94>
 800b8ec:	3c37      	subs	r4, #55	; 0x37
 800b8ee:	e7e4      	b.n	800b8ba <_strtoul_l.constprop.0+0x5e>
 800b8f0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b8f4:	f1bc 0f19 	cmp.w	ip, #25
 800b8f8:	d804      	bhi.n	800b904 <_strtoul_l.constprop.0+0xa8>
 800b8fa:	3c57      	subs	r4, #87	; 0x57
 800b8fc:	e7dd      	b.n	800b8ba <_strtoul_l.constprop.0+0x5e>
 800b8fe:	f04f 37ff 	mov.w	r7, #4294967295
 800b902:	e7e6      	b.n	800b8d2 <_strtoul_l.constprop.0+0x76>
 800b904:	2f00      	cmp	r7, #0
 800b906:	da07      	bge.n	800b918 <_strtoul_l.constprop.0+0xbc>
 800b908:	2322      	movs	r3, #34	; 0x22
 800b90a:	f04f 30ff 	mov.w	r0, #4294967295
 800b90e:	f8ce 3000 	str.w	r3, [lr]
 800b912:	b932      	cbnz	r2, 800b922 <_strtoul_l.constprop.0+0xc6>
 800b914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b918:	b106      	cbz	r6, 800b91c <_strtoul_l.constprop.0+0xc0>
 800b91a:	4240      	negs	r0, r0
 800b91c:	2a00      	cmp	r2, #0
 800b91e:	d0f9      	beq.n	800b914 <_strtoul_l.constprop.0+0xb8>
 800b920:	b107      	cbz	r7, 800b924 <_strtoul_l.constprop.0+0xc8>
 800b922:	1e69      	subs	r1, r5, #1
 800b924:	6011      	str	r1, [r2, #0]
 800b926:	e7f5      	b.n	800b914 <_strtoul_l.constprop.0+0xb8>
 800b928:	2430      	movs	r4, #48	; 0x30
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1b5      	bne.n	800b89a <_strtoul_l.constprop.0+0x3e>
 800b92e:	2308      	movs	r3, #8
 800b930:	e7b3      	b.n	800b89a <_strtoul_l.constprop.0+0x3e>
 800b932:	2c30      	cmp	r4, #48	; 0x30
 800b934:	d0a9      	beq.n	800b88a <_strtoul_l.constprop.0+0x2e>
 800b936:	230a      	movs	r3, #10
 800b938:	e7af      	b.n	800b89a <_strtoul_l.constprop.0+0x3e>
 800b93a:	bf00      	nop
 800b93c:	0800e029 	.word	0x0800e029

0800b940 <strtoul>:
 800b940:	4613      	mov	r3, r2
 800b942:	460a      	mov	r2, r1
 800b944:	4601      	mov	r1, r0
 800b946:	4802      	ldr	r0, [pc, #8]	; (800b950 <strtoul+0x10>)
 800b948:	6800      	ldr	r0, [r0, #0]
 800b94a:	f7ff bf87 	b.w	800b85c <_strtoul_l.constprop.0>
 800b94e:	bf00      	nop
 800b950:	200001a0 	.word	0x200001a0

0800b954 <_vsniprintf_r>:
 800b954:	b530      	push	{r4, r5, lr}
 800b956:	4614      	mov	r4, r2
 800b958:	2c00      	cmp	r4, #0
 800b95a:	4605      	mov	r5, r0
 800b95c:	461a      	mov	r2, r3
 800b95e:	b09b      	sub	sp, #108	; 0x6c
 800b960:	da05      	bge.n	800b96e <_vsniprintf_r+0x1a>
 800b962:	238b      	movs	r3, #139	; 0x8b
 800b964:	6003      	str	r3, [r0, #0]
 800b966:	f04f 30ff 	mov.w	r0, #4294967295
 800b96a:	b01b      	add	sp, #108	; 0x6c
 800b96c:	bd30      	pop	{r4, r5, pc}
 800b96e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b972:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b976:	bf0c      	ite	eq
 800b978:	4623      	moveq	r3, r4
 800b97a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b97e:	9302      	str	r3, [sp, #8]
 800b980:	9305      	str	r3, [sp, #20]
 800b982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b986:	9100      	str	r1, [sp, #0]
 800b988:	9104      	str	r1, [sp, #16]
 800b98a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b98e:	4669      	mov	r1, sp
 800b990:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b992:	f001 f95b 	bl	800cc4c <_svfiprintf_r>
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	bfbc      	itt	lt
 800b99a:	238b      	movlt	r3, #139	; 0x8b
 800b99c:	602b      	strlt	r3, [r5, #0]
 800b99e:	2c00      	cmp	r4, #0
 800b9a0:	d0e3      	beq.n	800b96a <_vsniprintf_r+0x16>
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	9b00      	ldr	r3, [sp, #0]
 800b9a6:	701a      	strb	r2, [r3, #0]
 800b9a8:	e7df      	b.n	800b96a <_vsniprintf_r+0x16>
	...

0800b9ac <vsniprintf>:
 800b9ac:	b507      	push	{r0, r1, r2, lr}
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	460a      	mov	r2, r1
 800b9b4:	4601      	mov	r1, r0
 800b9b6:	4803      	ldr	r0, [pc, #12]	; (800b9c4 <vsniprintf+0x18>)
 800b9b8:	6800      	ldr	r0, [r0, #0]
 800b9ba:	f7ff ffcb 	bl	800b954 <_vsniprintf_r>
 800b9be:	b003      	add	sp, #12
 800b9c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9c4:	200001a0 	.word	0x200001a0

0800b9c8 <rshift>:
 800b9c8:	6903      	ldr	r3, [r0, #16]
 800b9ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b9d2:	f100 0414 	add.w	r4, r0, #20
 800b9d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b9da:	dd46      	ble.n	800ba6a <rshift+0xa2>
 800b9dc:	f011 011f 	ands.w	r1, r1, #31
 800b9e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b9e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b9e8:	d10c      	bne.n	800ba04 <rshift+0x3c>
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	f100 0710 	add.w	r7, r0, #16
 800b9f0:	42b1      	cmp	r1, r6
 800b9f2:	d335      	bcc.n	800ba60 <rshift+0x98>
 800b9f4:	1a9b      	subs	r3, r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	1eea      	subs	r2, r5, #3
 800b9fa:	4296      	cmp	r6, r2
 800b9fc:	bf38      	it	cc
 800b9fe:	2300      	movcc	r3, #0
 800ba00:	4423      	add	r3, r4
 800ba02:	e015      	b.n	800ba30 <rshift+0x68>
 800ba04:	46a1      	mov	r9, r4
 800ba06:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba0a:	f1c1 0820 	rsb	r8, r1, #32
 800ba0e:	40cf      	lsrs	r7, r1
 800ba10:	f105 0e04 	add.w	lr, r5, #4
 800ba14:	4576      	cmp	r6, lr
 800ba16:	46f4      	mov	ip, lr
 800ba18:	d816      	bhi.n	800ba48 <rshift+0x80>
 800ba1a:	1a9a      	subs	r2, r3, r2
 800ba1c:	0092      	lsls	r2, r2, #2
 800ba1e:	3a04      	subs	r2, #4
 800ba20:	3501      	adds	r5, #1
 800ba22:	42ae      	cmp	r6, r5
 800ba24:	bf38      	it	cc
 800ba26:	2200      	movcc	r2, #0
 800ba28:	18a3      	adds	r3, r4, r2
 800ba2a:	50a7      	str	r7, [r4, r2]
 800ba2c:	b107      	cbz	r7, 800ba30 <rshift+0x68>
 800ba2e:	3304      	adds	r3, #4
 800ba30:	42a3      	cmp	r3, r4
 800ba32:	eba3 0204 	sub.w	r2, r3, r4
 800ba36:	bf08      	it	eq
 800ba38:	2300      	moveq	r3, #0
 800ba3a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba3e:	6102      	str	r2, [r0, #16]
 800ba40:	bf08      	it	eq
 800ba42:	6143      	streq	r3, [r0, #20]
 800ba44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba48:	f8dc c000 	ldr.w	ip, [ip]
 800ba4c:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba50:	ea4c 0707 	orr.w	r7, ip, r7
 800ba54:	f849 7b04 	str.w	r7, [r9], #4
 800ba58:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba5c:	40cf      	lsrs	r7, r1
 800ba5e:	e7d9      	b.n	800ba14 <rshift+0x4c>
 800ba60:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba64:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba68:	e7c2      	b.n	800b9f0 <rshift+0x28>
 800ba6a:	4623      	mov	r3, r4
 800ba6c:	e7e0      	b.n	800ba30 <rshift+0x68>

0800ba6e <__hexdig_fun>:
 800ba6e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ba72:	2b09      	cmp	r3, #9
 800ba74:	d802      	bhi.n	800ba7c <__hexdig_fun+0xe>
 800ba76:	3820      	subs	r0, #32
 800ba78:	b2c0      	uxtb	r0, r0
 800ba7a:	4770      	bx	lr
 800ba7c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba80:	2b05      	cmp	r3, #5
 800ba82:	d801      	bhi.n	800ba88 <__hexdig_fun+0x1a>
 800ba84:	3847      	subs	r0, #71	; 0x47
 800ba86:	e7f7      	b.n	800ba78 <__hexdig_fun+0xa>
 800ba88:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ba8c:	2b05      	cmp	r3, #5
 800ba8e:	d801      	bhi.n	800ba94 <__hexdig_fun+0x26>
 800ba90:	3827      	subs	r0, #39	; 0x27
 800ba92:	e7f1      	b.n	800ba78 <__hexdig_fun+0xa>
 800ba94:	2000      	movs	r0, #0
 800ba96:	4770      	bx	lr

0800ba98 <__gethex>:
 800ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9c:	b08b      	sub	sp, #44	; 0x2c
 800ba9e:	9305      	str	r3, [sp, #20]
 800baa0:	4bb2      	ldr	r3, [pc, #712]	; (800bd6c <__gethex+0x2d4>)
 800baa2:	9002      	str	r0, [sp, #8]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	468b      	mov	fp, r1
 800baa8:	4618      	mov	r0, r3
 800baaa:	4690      	mov	r8, r2
 800baac:	9303      	str	r3, [sp, #12]
 800baae:	f7f9 fb59 	bl	8005164 <strlen>
 800bab2:	4682      	mov	sl, r0
 800bab4:	9b03      	ldr	r3, [sp, #12]
 800bab6:	f8db 2000 	ldr.w	r2, [fp]
 800baba:	4403      	add	r3, r0
 800babc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bac0:	9306      	str	r3, [sp, #24]
 800bac2:	1c93      	adds	r3, r2, #2
 800bac4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bac8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bacc:	32fe      	adds	r2, #254	; 0xfe
 800bace:	18d1      	adds	r1, r2, r3
 800bad0:	461f      	mov	r7, r3
 800bad2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bad6:	9101      	str	r1, [sp, #4]
 800bad8:	2830      	cmp	r0, #48	; 0x30
 800bada:	d0f8      	beq.n	800bace <__gethex+0x36>
 800badc:	f7ff ffc7 	bl	800ba6e <__hexdig_fun>
 800bae0:	4604      	mov	r4, r0
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d13a      	bne.n	800bb5c <__gethex+0xc4>
 800bae6:	4652      	mov	r2, sl
 800bae8:	4638      	mov	r0, r7
 800baea:	9903      	ldr	r1, [sp, #12]
 800baec:	f001 fb5e 	bl	800d1ac <strncmp>
 800baf0:	4605      	mov	r5, r0
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d166      	bne.n	800bbc4 <__gethex+0x12c>
 800baf6:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bafa:	eb07 060a 	add.w	r6, r7, sl
 800bafe:	f7ff ffb6 	bl	800ba6e <__hexdig_fun>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d060      	beq.n	800bbc8 <__gethex+0x130>
 800bb06:	4633      	mov	r3, r6
 800bb08:	7818      	ldrb	r0, [r3, #0]
 800bb0a:	461f      	mov	r7, r3
 800bb0c:	2830      	cmp	r0, #48	; 0x30
 800bb0e:	f103 0301 	add.w	r3, r3, #1
 800bb12:	d0f9      	beq.n	800bb08 <__gethex+0x70>
 800bb14:	f7ff ffab 	bl	800ba6e <__hexdig_fun>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	fab0 f480 	clz	r4, r0
 800bb1e:	4635      	mov	r5, r6
 800bb20:	0964      	lsrs	r4, r4, #5
 800bb22:	9301      	str	r3, [sp, #4]
 800bb24:	463a      	mov	r2, r7
 800bb26:	4616      	mov	r6, r2
 800bb28:	7830      	ldrb	r0, [r6, #0]
 800bb2a:	3201      	adds	r2, #1
 800bb2c:	f7ff ff9f 	bl	800ba6e <__hexdig_fun>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d1f8      	bne.n	800bb26 <__gethex+0x8e>
 800bb34:	4652      	mov	r2, sl
 800bb36:	4630      	mov	r0, r6
 800bb38:	9903      	ldr	r1, [sp, #12]
 800bb3a:	f001 fb37 	bl	800d1ac <strncmp>
 800bb3e:	b980      	cbnz	r0, 800bb62 <__gethex+0xca>
 800bb40:	b94d      	cbnz	r5, 800bb56 <__gethex+0xbe>
 800bb42:	eb06 050a 	add.w	r5, r6, sl
 800bb46:	462a      	mov	r2, r5
 800bb48:	4616      	mov	r6, r2
 800bb4a:	7830      	ldrb	r0, [r6, #0]
 800bb4c:	3201      	adds	r2, #1
 800bb4e:	f7ff ff8e 	bl	800ba6e <__hexdig_fun>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d1f8      	bne.n	800bb48 <__gethex+0xb0>
 800bb56:	1bad      	subs	r5, r5, r6
 800bb58:	00ad      	lsls	r5, r5, #2
 800bb5a:	e004      	b.n	800bb66 <__gethex+0xce>
 800bb5c:	2400      	movs	r4, #0
 800bb5e:	4625      	mov	r5, r4
 800bb60:	e7e0      	b.n	800bb24 <__gethex+0x8c>
 800bb62:	2d00      	cmp	r5, #0
 800bb64:	d1f7      	bne.n	800bb56 <__gethex+0xbe>
 800bb66:	7833      	ldrb	r3, [r6, #0]
 800bb68:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb6c:	2b50      	cmp	r3, #80	; 0x50
 800bb6e:	d139      	bne.n	800bbe4 <__gethex+0x14c>
 800bb70:	7873      	ldrb	r3, [r6, #1]
 800bb72:	2b2b      	cmp	r3, #43	; 0x2b
 800bb74:	d02a      	beq.n	800bbcc <__gethex+0x134>
 800bb76:	2b2d      	cmp	r3, #45	; 0x2d
 800bb78:	d02c      	beq.n	800bbd4 <__gethex+0x13c>
 800bb7a:	f04f 0900 	mov.w	r9, #0
 800bb7e:	1c71      	adds	r1, r6, #1
 800bb80:	7808      	ldrb	r0, [r1, #0]
 800bb82:	f7ff ff74 	bl	800ba6e <__hexdig_fun>
 800bb86:	1e43      	subs	r3, r0, #1
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b18      	cmp	r3, #24
 800bb8c:	d82a      	bhi.n	800bbe4 <__gethex+0x14c>
 800bb8e:	f1a0 0210 	sub.w	r2, r0, #16
 800bb92:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb96:	f7ff ff6a 	bl	800ba6e <__hexdig_fun>
 800bb9a:	1e43      	subs	r3, r0, #1
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b18      	cmp	r3, #24
 800bba0:	d91b      	bls.n	800bbda <__gethex+0x142>
 800bba2:	f1b9 0f00 	cmp.w	r9, #0
 800bba6:	d000      	beq.n	800bbaa <__gethex+0x112>
 800bba8:	4252      	negs	r2, r2
 800bbaa:	4415      	add	r5, r2
 800bbac:	f8cb 1000 	str.w	r1, [fp]
 800bbb0:	b1d4      	cbz	r4, 800bbe8 <__gethex+0x150>
 800bbb2:	9b01      	ldr	r3, [sp, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	bf14      	ite	ne
 800bbb8:	2700      	movne	r7, #0
 800bbba:	2706      	moveq	r7, #6
 800bbbc:	4638      	mov	r0, r7
 800bbbe:	b00b      	add	sp, #44	; 0x2c
 800bbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc4:	463e      	mov	r6, r7
 800bbc6:	4625      	mov	r5, r4
 800bbc8:	2401      	movs	r4, #1
 800bbca:	e7cc      	b.n	800bb66 <__gethex+0xce>
 800bbcc:	f04f 0900 	mov.w	r9, #0
 800bbd0:	1cb1      	adds	r1, r6, #2
 800bbd2:	e7d5      	b.n	800bb80 <__gethex+0xe8>
 800bbd4:	f04f 0901 	mov.w	r9, #1
 800bbd8:	e7fa      	b.n	800bbd0 <__gethex+0x138>
 800bbda:	230a      	movs	r3, #10
 800bbdc:	fb03 0202 	mla	r2, r3, r2, r0
 800bbe0:	3a10      	subs	r2, #16
 800bbe2:	e7d6      	b.n	800bb92 <__gethex+0xfa>
 800bbe4:	4631      	mov	r1, r6
 800bbe6:	e7e1      	b.n	800bbac <__gethex+0x114>
 800bbe8:	4621      	mov	r1, r4
 800bbea:	1bf3      	subs	r3, r6, r7
 800bbec:	3b01      	subs	r3, #1
 800bbee:	2b07      	cmp	r3, #7
 800bbf0:	dc0a      	bgt.n	800bc08 <__gethex+0x170>
 800bbf2:	9802      	ldr	r0, [sp, #8]
 800bbf4:	f000 fa6e 	bl	800c0d4 <_Balloc>
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	b940      	cbnz	r0, 800bc0e <__gethex+0x176>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	21de      	movs	r1, #222	; 0xde
 800bc00:	4b5b      	ldr	r3, [pc, #364]	; (800bd70 <__gethex+0x2d8>)
 800bc02:	485c      	ldr	r0, [pc, #368]	; (800bd74 <__gethex+0x2dc>)
 800bc04:	f001 faf4 	bl	800d1f0 <__assert_func>
 800bc08:	3101      	adds	r1, #1
 800bc0a:	105b      	asrs	r3, r3, #1
 800bc0c:	e7ef      	b.n	800bbee <__gethex+0x156>
 800bc0e:	f04f 0b00 	mov.w	fp, #0
 800bc12:	f100 0914 	add.w	r9, r0, #20
 800bc16:	f1ca 0301 	rsb	r3, sl, #1
 800bc1a:	f8cd 9010 	str.w	r9, [sp, #16]
 800bc1e:	f8cd b004 	str.w	fp, [sp, #4]
 800bc22:	9308      	str	r3, [sp, #32]
 800bc24:	42b7      	cmp	r7, r6
 800bc26:	d33f      	bcc.n	800bca8 <__gethex+0x210>
 800bc28:	9f04      	ldr	r7, [sp, #16]
 800bc2a:	9b01      	ldr	r3, [sp, #4]
 800bc2c:	f847 3b04 	str.w	r3, [r7], #4
 800bc30:	eba7 0709 	sub.w	r7, r7, r9
 800bc34:	10bf      	asrs	r7, r7, #2
 800bc36:	6127      	str	r7, [r4, #16]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 fb3d 	bl	800c2b8 <__hi0bits>
 800bc3e:	017f      	lsls	r7, r7, #5
 800bc40:	f8d8 6000 	ldr.w	r6, [r8]
 800bc44:	1a3f      	subs	r7, r7, r0
 800bc46:	42b7      	cmp	r7, r6
 800bc48:	dd62      	ble.n	800bd10 <__gethex+0x278>
 800bc4a:	1bbf      	subs	r7, r7, r6
 800bc4c:	4639      	mov	r1, r7
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f000 fed7 	bl	800ca02 <__any_on>
 800bc54:	4682      	mov	sl, r0
 800bc56:	b1a8      	cbz	r0, 800bc84 <__gethex+0x1ec>
 800bc58:	f04f 0a01 	mov.w	sl, #1
 800bc5c:	1e7b      	subs	r3, r7, #1
 800bc5e:	1159      	asrs	r1, r3, #5
 800bc60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bc64:	f003 021f 	and.w	r2, r3, #31
 800bc68:	fa0a f202 	lsl.w	r2, sl, r2
 800bc6c:	420a      	tst	r2, r1
 800bc6e:	d009      	beq.n	800bc84 <__gethex+0x1ec>
 800bc70:	4553      	cmp	r3, sl
 800bc72:	dd05      	ble.n	800bc80 <__gethex+0x1e8>
 800bc74:	4620      	mov	r0, r4
 800bc76:	1eb9      	subs	r1, r7, #2
 800bc78:	f000 fec3 	bl	800ca02 <__any_on>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d144      	bne.n	800bd0a <__gethex+0x272>
 800bc80:	f04f 0a02 	mov.w	sl, #2
 800bc84:	4639      	mov	r1, r7
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7ff fe9e 	bl	800b9c8 <rshift>
 800bc8c:	443d      	add	r5, r7
 800bc8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc92:	42ab      	cmp	r3, r5
 800bc94:	da4a      	bge.n	800bd2c <__gethex+0x294>
 800bc96:	4621      	mov	r1, r4
 800bc98:	9802      	ldr	r0, [sp, #8]
 800bc9a:	f000 fa5b 	bl	800c154 <_Bfree>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bca2:	27a3      	movs	r7, #163	; 0xa3
 800bca4:	6013      	str	r3, [r2, #0]
 800bca6:	e789      	b.n	800bbbc <__gethex+0x124>
 800bca8:	1e73      	subs	r3, r6, #1
 800bcaa:	9a06      	ldr	r2, [sp, #24]
 800bcac:	9307      	str	r3, [sp, #28]
 800bcae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d019      	beq.n	800bcea <__gethex+0x252>
 800bcb6:	f1bb 0f20 	cmp.w	fp, #32
 800bcba:	d107      	bne.n	800bccc <__gethex+0x234>
 800bcbc:	9b04      	ldr	r3, [sp, #16]
 800bcbe:	9a01      	ldr	r2, [sp, #4]
 800bcc0:	f843 2b04 	str.w	r2, [r3], #4
 800bcc4:	9304      	str	r3, [sp, #16]
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	469b      	mov	fp, r3
 800bcca:	9301      	str	r3, [sp, #4]
 800bccc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bcd0:	f7ff fecd 	bl	800ba6e <__hexdig_fun>
 800bcd4:	9b01      	ldr	r3, [sp, #4]
 800bcd6:	f000 000f 	and.w	r0, r0, #15
 800bcda:	fa00 f00b 	lsl.w	r0, r0, fp
 800bcde:	4303      	orrs	r3, r0
 800bce0:	9301      	str	r3, [sp, #4]
 800bce2:	f10b 0b04 	add.w	fp, fp, #4
 800bce6:	9b07      	ldr	r3, [sp, #28]
 800bce8:	e00d      	b.n	800bd06 <__gethex+0x26e>
 800bcea:	9a08      	ldr	r2, [sp, #32]
 800bcec:	1e73      	subs	r3, r6, #1
 800bcee:	4413      	add	r3, r2
 800bcf0:	42bb      	cmp	r3, r7
 800bcf2:	d3e0      	bcc.n	800bcb6 <__gethex+0x21e>
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	4652      	mov	r2, sl
 800bcf8:	9903      	ldr	r1, [sp, #12]
 800bcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfc:	f001 fa56 	bl	800d1ac <strncmp>
 800bd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d1d7      	bne.n	800bcb6 <__gethex+0x21e>
 800bd06:	461e      	mov	r6, r3
 800bd08:	e78c      	b.n	800bc24 <__gethex+0x18c>
 800bd0a:	f04f 0a03 	mov.w	sl, #3
 800bd0e:	e7b9      	b.n	800bc84 <__gethex+0x1ec>
 800bd10:	da09      	bge.n	800bd26 <__gethex+0x28e>
 800bd12:	1bf7      	subs	r7, r6, r7
 800bd14:	4621      	mov	r1, r4
 800bd16:	463a      	mov	r2, r7
 800bd18:	9802      	ldr	r0, [sp, #8]
 800bd1a:	f000 fc33 	bl	800c584 <__lshift>
 800bd1e:	4604      	mov	r4, r0
 800bd20:	1bed      	subs	r5, r5, r7
 800bd22:	f100 0914 	add.w	r9, r0, #20
 800bd26:	f04f 0a00 	mov.w	sl, #0
 800bd2a:	e7b0      	b.n	800bc8e <__gethex+0x1f6>
 800bd2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bd30:	42a8      	cmp	r0, r5
 800bd32:	dd72      	ble.n	800be1a <__gethex+0x382>
 800bd34:	1b45      	subs	r5, r0, r5
 800bd36:	42ae      	cmp	r6, r5
 800bd38:	dc35      	bgt.n	800bda6 <__gethex+0x30e>
 800bd3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd3e:	2b02      	cmp	r3, #2
 800bd40:	d029      	beq.n	800bd96 <__gethex+0x2fe>
 800bd42:	2b03      	cmp	r3, #3
 800bd44:	d02b      	beq.n	800bd9e <__gethex+0x306>
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d11c      	bne.n	800bd84 <__gethex+0x2ec>
 800bd4a:	42ae      	cmp	r6, r5
 800bd4c:	d11a      	bne.n	800bd84 <__gethex+0x2ec>
 800bd4e:	2e01      	cmp	r6, #1
 800bd50:	d112      	bne.n	800bd78 <__gethex+0x2e0>
 800bd52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd56:	9a05      	ldr	r2, [sp, #20]
 800bd58:	2762      	movs	r7, #98	; 0x62
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	6123      	str	r3, [r4, #16]
 800bd60:	f8c9 3000 	str.w	r3, [r9]
 800bd64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd66:	601c      	str	r4, [r3, #0]
 800bd68:	e728      	b.n	800bbbc <__gethex+0x124>
 800bd6a:	bf00      	nop
 800bd6c:	0800e1a0 	.word	0x0800e1a0
 800bd70:	0800e129 	.word	0x0800e129
 800bd74:	0800e13a 	.word	0x0800e13a
 800bd78:	4620      	mov	r0, r4
 800bd7a:	1e71      	subs	r1, r6, #1
 800bd7c:	f000 fe41 	bl	800ca02 <__any_on>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d1e6      	bne.n	800bd52 <__gethex+0x2ba>
 800bd84:	4621      	mov	r1, r4
 800bd86:	9802      	ldr	r0, [sp, #8]
 800bd88:	f000 f9e4 	bl	800c154 <_Bfree>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd90:	2750      	movs	r7, #80	; 0x50
 800bd92:	6013      	str	r3, [r2, #0]
 800bd94:	e712      	b.n	800bbbc <__gethex+0x124>
 800bd96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1f3      	bne.n	800bd84 <__gethex+0x2ec>
 800bd9c:	e7d9      	b.n	800bd52 <__gethex+0x2ba>
 800bd9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1d6      	bne.n	800bd52 <__gethex+0x2ba>
 800bda4:	e7ee      	b.n	800bd84 <__gethex+0x2ec>
 800bda6:	1e6f      	subs	r7, r5, #1
 800bda8:	f1ba 0f00 	cmp.w	sl, #0
 800bdac:	d132      	bne.n	800be14 <__gethex+0x37c>
 800bdae:	b127      	cbz	r7, 800bdba <__gethex+0x322>
 800bdb0:	4639      	mov	r1, r7
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f000 fe25 	bl	800ca02 <__any_on>
 800bdb8:	4682      	mov	sl, r0
 800bdba:	2101      	movs	r1, #1
 800bdbc:	117b      	asrs	r3, r7, #5
 800bdbe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bdc2:	f007 071f 	and.w	r7, r7, #31
 800bdc6:	fa01 f707 	lsl.w	r7, r1, r7
 800bdca:	421f      	tst	r7, r3
 800bdcc:	f04f 0702 	mov.w	r7, #2
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	bf18      	it	ne
 800bdd6:	f04a 0a02 	orrne.w	sl, sl, #2
 800bdda:	1b76      	subs	r6, r6, r5
 800bddc:	f7ff fdf4 	bl	800b9c8 <rshift>
 800bde0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bde4:	f1ba 0f00 	cmp.w	sl, #0
 800bde8:	d048      	beq.n	800be7c <__gethex+0x3e4>
 800bdea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d015      	beq.n	800be1e <__gethex+0x386>
 800bdf2:	2b03      	cmp	r3, #3
 800bdf4:	d017      	beq.n	800be26 <__gethex+0x38e>
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d109      	bne.n	800be0e <__gethex+0x376>
 800bdfa:	f01a 0f02 	tst.w	sl, #2
 800bdfe:	d006      	beq.n	800be0e <__gethex+0x376>
 800be00:	f8d9 0000 	ldr.w	r0, [r9]
 800be04:	ea4a 0a00 	orr.w	sl, sl, r0
 800be08:	f01a 0f01 	tst.w	sl, #1
 800be0c:	d10e      	bne.n	800be2c <__gethex+0x394>
 800be0e:	f047 0710 	orr.w	r7, r7, #16
 800be12:	e033      	b.n	800be7c <__gethex+0x3e4>
 800be14:	f04f 0a01 	mov.w	sl, #1
 800be18:	e7cf      	b.n	800bdba <__gethex+0x322>
 800be1a:	2701      	movs	r7, #1
 800be1c:	e7e2      	b.n	800bde4 <__gethex+0x34c>
 800be1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be20:	f1c3 0301 	rsb	r3, r3, #1
 800be24:	9315      	str	r3, [sp, #84]	; 0x54
 800be26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0f0      	beq.n	800be0e <__gethex+0x376>
 800be2c:	f04f 0c00 	mov.w	ip, #0
 800be30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be34:	f104 0314 	add.w	r3, r4, #20
 800be38:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be3c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be40:	4618      	mov	r0, r3
 800be42:	f853 2b04 	ldr.w	r2, [r3], #4
 800be46:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be4a:	d01c      	beq.n	800be86 <__gethex+0x3ee>
 800be4c:	3201      	adds	r2, #1
 800be4e:	6002      	str	r2, [r0, #0]
 800be50:	2f02      	cmp	r7, #2
 800be52:	f104 0314 	add.w	r3, r4, #20
 800be56:	d13d      	bne.n	800bed4 <__gethex+0x43c>
 800be58:	f8d8 2000 	ldr.w	r2, [r8]
 800be5c:	3a01      	subs	r2, #1
 800be5e:	42b2      	cmp	r2, r6
 800be60:	d10a      	bne.n	800be78 <__gethex+0x3e0>
 800be62:	2201      	movs	r2, #1
 800be64:	1171      	asrs	r1, r6, #5
 800be66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be6a:	f006 061f 	and.w	r6, r6, #31
 800be6e:	fa02 f606 	lsl.w	r6, r2, r6
 800be72:	421e      	tst	r6, r3
 800be74:	bf18      	it	ne
 800be76:	4617      	movne	r7, r2
 800be78:	f047 0720 	orr.w	r7, r7, #32
 800be7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be7e:	601c      	str	r4, [r3, #0]
 800be80:	9b05      	ldr	r3, [sp, #20]
 800be82:	601d      	str	r5, [r3, #0]
 800be84:	e69a      	b.n	800bbbc <__gethex+0x124>
 800be86:	4299      	cmp	r1, r3
 800be88:	f843 cc04 	str.w	ip, [r3, #-4]
 800be8c:	d8d8      	bhi.n	800be40 <__gethex+0x3a8>
 800be8e:	68a3      	ldr	r3, [r4, #8]
 800be90:	459b      	cmp	fp, r3
 800be92:	db17      	blt.n	800bec4 <__gethex+0x42c>
 800be94:	6861      	ldr	r1, [r4, #4]
 800be96:	9802      	ldr	r0, [sp, #8]
 800be98:	3101      	adds	r1, #1
 800be9a:	f000 f91b 	bl	800c0d4 <_Balloc>
 800be9e:	4681      	mov	r9, r0
 800bea0:	b918      	cbnz	r0, 800beaa <__gethex+0x412>
 800bea2:	4602      	mov	r2, r0
 800bea4:	2184      	movs	r1, #132	; 0x84
 800bea6:	4b19      	ldr	r3, [pc, #100]	; (800bf0c <__gethex+0x474>)
 800bea8:	e6ab      	b.n	800bc02 <__gethex+0x16a>
 800beaa:	6922      	ldr	r2, [r4, #16]
 800beac:	f104 010c 	add.w	r1, r4, #12
 800beb0:	3202      	adds	r2, #2
 800beb2:	0092      	lsls	r2, r2, #2
 800beb4:	300c      	adds	r0, #12
 800beb6:	f000 f8ff 	bl	800c0b8 <memcpy>
 800beba:	4621      	mov	r1, r4
 800bebc:	9802      	ldr	r0, [sp, #8]
 800bebe:	f000 f949 	bl	800c154 <_Bfree>
 800bec2:	464c      	mov	r4, r9
 800bec4:	6923      	ldr	r3, [r4, #16]
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	6122      	str	r2, [r4, #16]
 800beca:	2201      	movs	r2, #1
 800becc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bed0:	615a      	str	r2, [r3, #20]
 800bed2:	e7bd      	b.n	800be50 <__gethex+0x3b8>
 800bed4:	6922      	ldr	r2, [r4, #16]
 800bed6:	455a      	cmp	r2, fp
 800bed8:	dd0b      	ble.n	800bef2 <__gethex+0x45a>
 800beda:	2101      	movs	r1, #1
 800bedc:	4620      	mov	r0, r4
 800bede:	f7ff fd73 	bl	800b9c8 <rshift>
 800bee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bee6:	3501      	adds	r5, #1
 800bee8:	42ab      	cmp	r3, r5
 800beea:	f6ff aed4 	blt.w	800bc96 <__gethex+0x1fe>
 800beee:	2701      	movs	r7, #1
 800bef0:	e7c2      	b.n	800be78 <__gethex+0x3e0>
 800bef2:	f016 061f 	ands.w	r6, r6, #31
 800bef6:	d0fa      	beq.n	800beee <__gethex+0x456>
 800bef8:	4453      	add	r3, sl
 800befa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800befe:	f000 f9db 	bl	800c2b8 <__hi0bits>
 800bf02:	f1c6 0620 	rsb	r6, r6, #32
 800bf06:	42b0      	cmp	r0, r6
 800bf08:	dbe7      	blt.n	800beda <__gethex+0x442>
 800bf0a:	e7f0      	b.n	800beee <__gethex+0x456>
 800bf0c:	0800e129 	.word	0x0800e129

0800bf10 <L_shift>:
 800bf10:	f1c2 0208 	rsb	r2, r2, #8
 800bf14:	0092      	lsls	r2, r2, #2
 800bf16:	b570      	push	{r4, r5, r6, lr}
 800bf18:	f1c2 0620 	rsb	r6, r2, #32
 800bf1c:	6843      	ldr	r3, [r0, #4]
 800bf1e:	6804      	ldr	r4, [r0, #0]
 800bf20:	fa03 f506 	lsl.w	r5, r3, r6
 800bf24:	432c      	orrs	r4, r5
 800bf26:	40d3      	lsrs	r3, r2
 800bf28:	6004      	str	r4, [r0, #0]
 800bf2a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf2e:	4288      	cmp	r0, r1
 800bf30:	d3f4      	bcc.n	800bf1c <L_shift+0xc>
 800bf32:	bd70      	pop	{r4, r5, r6, pc}

0800bf34 <__match>:
 800bf34:	b530      	push	{r4, r5, lr}
 800bf36:	6803      	ldr	r3, [r0, #0]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf3e:	b914      	cbnz	r4, 800bf46 <__match+0x12>
 800bf40:	6003      	str	r3, [r0, #0]
 800bf42:	2001      	movs	r0, #1
 800bf44:	bd30      	pop	{r4, r5, pc}
 800bf46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf4e:	2d19      	cmp	r5, #25
 800bf50:	bf98      	it	ls
 800bf52:	3220      	addls	r2, #32
 800bf54:	42a2      	cmp	r2, r4
 800bf56:	d0f0      	beq.n	800bf3a <__match+0x6>
 800bf58:	2000      	movs	r0, #0
 800bf5a:	e7f3      	b.n	800bf44 <__match+0x10>

0800bf5c <__hexnan>:
 800bf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf60:	2500      	movs	r5, #0
 800bf62:	680b      	ldr	r3, [r1, #0]
 800bf64:	4682      	mov	sl, r0
 800bf66:	115e      	asrs	r6, r3, #5
 800bf68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf6c:	f013 031f 	ands.w	r3, r3, #31
 800bf70:	bf18      	it	ne
 800bf72:	3604      	addne	r6, #4
 800bf74:	1f37      	subs	r7, r6, #4
 800bf76:	46b9      	mov	r9, r7
 800bf78:	463c      	mov	r4, r7
 800bf7a:	46ab      	mov	fp, r5
 800bf7c:	b087      	sub	sp, #28
 800bf7e:	4690      	mov	r8, r2
 800bf80:	6802      	ldr	r2, [r0, #0]
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf88:	9502      	str	r5, [sp, #8]
 800bf8a:	7851      	ldrb	r1, [r2, #1]
 800bf8c:	1c53      	adds	r3, r2, #1
 800bf8e:	9303      	str	r3, [sp, #12]
 800bf90:	b341      	cbz	r1, 800bfe4 <__hexnan+0x88>
 800bf92:	4608      	mov	r0, r1
 800bf94:	9205      	str	r2, [sp, #20]
 800bf96:	9104      	str	r1, [sp, #16]
 800bf98:	f7ff fd69 	bl	800ba6e <__hexdig_fun>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d14f      	bne.n	800c040 <__hexnan+0xe4>
 800bfa0:	9904      	ldr	r1, [sp, #16]
 800bfa2:	9a05      	ldr	r2, [sp, #20]
 800bfa4:	2920      	cmp	r1, #32
 800bfa6:	d818      	bhi.n	800bfda <__hexnan+0x7e>
 800bfa8:	9b02      	ldr	r3, [sp, #8]
 800bfaa:	459b      	cmp	fp, r3
 800bfac:	dd13      	ble.n	800bfd6 <__hexnan+0x7a>
 800bfae:	454c      	cmp	r4, r9
 800bfb0:	d206      	bcs.n	800bfc0 <__hexnan+0x64>
 800bfb2:	2d07      	cmp	r5, #7
 800bfb4:	dc04      	bgt.n	800bfc0 <__hexnan+0x64>
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	4649      	mov	r1, r9
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f7ff ffa8 	bl	800bf10 <L_shift>
 800bfc0:	4544      	cmp	r4, r8
 800bfc2:	d950      	bls.n	800c066 <__hexnan+0x10a>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	f1a4 0904 	sub.w	r9, r4, #4
 800bfca:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfce:	461d      	mov	r5, r3
 800bfd0:	464c      	mov	r4, r9
 800bfd2:	f8cd b008 	str.w	fp, [sp, #8]
 800bfd6:	9a03      	ldr	r2, [sp, #12]
 800bfd8:	e7d7      	b.n	800bf8a <__hexnan+0x2e>
 800bfda:	2929      	cmp	r1, #41	; 0x29
 800bfdc:	d156      	bne.n	800c08c <__hexnan+0x130>
 800bfde:	3202      	adds	r2, #2
 800bfe0:	f8ca 2000 	str.w	r2, [sl]
 800bfe4:	f1bb 0f00 	cmp.w	fp, #0
 800bfe8:	d050      	beq.n	800c08c <__hexnan+0x130>
 800bfea:	454c      	cmp	r4, r9
 800bfec:	d206      	bcs.n	800bffc <__hexnan+0xa0>
 800bfee:	2d07      	cmp	r5, #7
 800bff0:	dc04      	bgt.n	800bffc <__hexnan+0xa0>
 800bff2:	462a      	mov	r2, r5
 800bff4:	4649      	mov	r1, r9
 800bff6:	4620      	mov	r0, r4
 800bff8:	f7ff ff8a 	bl	800bf10 <L_shift>
 800bffc:	4544      	cmp	r4, r8
 800bffe:	d934      	bls.n	800c06a <__hexnan+0x10e>
 800c000:	4623      	mov	r3, r4
 800c002:	f1a8 0204 	sub.w	r2, r8, #4
 800c006:	f853 1b04 	ldr.w	r1, [r3], #4
 800c00a:	429f      	cmp	r7, r3
 800c00c:	f842 1f04 	str.w	r1, [r2, #4]!
 800c010:	d2f9      	bcs.n	800c006 <__hexnan+0xaa>
 800c012:	1b3b      	subs	r3, r7, r4
 800c014:	f023 0303 	bic.w	r3, r3, #3
 800c018:	3304      	adds	r3, #4
 800c01a:	3401      	adds	r4, #1
 800c01c:	3e03      	subs	r6, #3
 800c01e:	42b4      	cmp	r4, r6
 800c020:	bf88      	it	hi
 800c022:	2304      	movhi	r3, #4
 800c024:	2200      	movs	r2, #0
 800c026:	4443      	add	r3, r8
 800c028:	f843 2b04 	str.w	r2, [r3], #4
 800c02c:	429f      	cmp	r7, r3
 800c02e:	d2fb      	bcs.n	800c028 <__hexnan+0xcc>
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	b91b      	cbnz	r3, 800c03c <__hexnan+0xe0>
 800c034:	4547      	cmp	r7, r8
 800c036:	d127      	bne.n	800c088 <__hexnan+0x12c>
 800c038:	2301      	movs	r3, #1
 800c03a:	603b      	str	r3, [r7, #0]
 800c03c:	2005      	movs	r0, #5
 800c03e:	e026      	b.n	800c08e <__hexnan+0x132>
 800c040:	3501      	adds	r5, #1
 800c042:	2d08      	cmp	r5, #8
 800c044:	f10b 0b01 	add.w	fp, fp, #1
 800c048:	dd06      	ble.n	800c058 <__hexnan+0xfc>
 800c04a:	4544      	cmp	r4, r8
 800c04c:	d9c3      	bls.n	800bfd6 <__hexnan+0x7a>
 800c04e:	2300      	movs	r3, #0
 800c050:	2501      	movs	r5, #1
 800c052:	f844 3c04 	str.w	r3, [r4, #-4]
 800c056:	3c04      	subs	r4, #4
 800c058:	6822      	ldr	r2, [r4, #0]
 800c05a:	f000 000f 	and.w	r0, r0, #15
 800c05e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c062:	6022      	str	r2, [r4, #0]
 800c064:	e7b7      	b.n	800bfd6 <__hexnan+0x7a>
 800c066:	2508      	movs	r5, #8
 800c068:	e7b5      	b.n	800bfd6 <__hexnan+0x7a>
 800c06a:	9b01      	ldr	r3, [sp, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d0df      	beq.n	800c030 <__hexnan+0xd4>
 800c070:	f04f 32ff 	mov.w	r2, #4294967295
 800c074:	f1c3 0320 	rsb	r3, r3, #32
 800c078:	fa22 f303 	lsr.w	r3, r2, r3
 800c07c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c080:	401a      	ands	r2, r3
 800c082:	f846 2c04 	str.w	r2, [r6, #-4]
 800c086:	e7d3      	b.n	800c030 <__hexnan+0xd4>
 800c088:	3f04      	subs	r7, #4
 800c08a:	e7d1      	b.n	800c030 <__hexnan+0xd4>
 800c08c:	2004      	movs	r0, #4
 800c08e:	b007      	add	sp, #28
 800c090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c094 <__ascii_mbtowc>:
 800c094:	b082      	sub	sp, #8
 800c096:	b901      	cbnz	r1, 800c09a <__ascii_mbtowc+0x6>
 800c098:	a901      	add	r1, sp, #4
 800c09a:	b142      	cbz	r2, 800c0ae <__ascii_mbtowc+0x1a>
 800c09c:	b14b      	cbz	r3, 800c0b2 <__ascii_mbtowc+0x1e>
 800c09e:	7813      	ldrb	r3, [r2, #0]
 800c0a0:	600b      	str	r3, [r1, #0]
 800c0a2:	7812      	ldrb	r2, [r2, #0]
 800c0a4:	1e10      	subs	r0, r2, #0
 800c0a6:	bf18      	it	ne
 800c0a8:	2001      	movne	r0, #1
 800c0aa:	b002      	add	sp, #8
 800c0ac:	4770      	bx	lr
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	e7fb      	b.n	800c0aa <__ascii_mbtowc+0x16>
 800c0b2:	f06f 0001 	mvn.w	r0, #1
 800c0b6:	e7f8      	b.n	800c0aa <__ascii_mbtowc+0x16>

0800c0b8 <memcpy>:
 800c0b8:	440a      	add	r2, r1
 800c0ba:	4291      	cmp	r1, r2
 800c0bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0c0:	d100      	bne.n	800c0c4 <memcpy+0xc>
 800c0c2:	4770      	bx	lr
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0ca:	4291      	cmp	r1, r2
 800c0cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0d0:	d1f9      	bne.n	800c0c6 <memcpy+0xe>
 800c0d2:	bd10      	pop	{r4, pc}

0800c0d4 <_Balloc>:
 800c0d4:	b570      	push	{r4, r5, r6, lr}
 800c0d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c0d8:	4604      	mov	r4, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	b976      	cbnz	r6, 800c0fc <_Balloc+0x28>
 800c0de:	2010      	movs	r0, #16
 800c0e0:	f001 f8b6 	bl	800d250 <malloc>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	6260      	str	r0, [r4, #36]	; 0x24
 800c0e8:	b920      	cbnz	r0, 800c0f4 <_Balloc+0x20>
 800c0ea:	2166      	movs	r1, #102	; 0x66
 800c0ec:	4b17      	ldr	r3, [pc, #92]	; (800c14c <_Balloc+0x78>)
 800c0ee:	4818      	ldr	r0, [pc, #96]	; (800c150 <_Balloc+0x7c>)
 800c0f0:	f001 f87e 	bl	800d1f0 <__assert_func>
 800c0f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0f8:	6006      	str	r6, [r0, #0]
 800c0fa:	60c6      	str	r6, [r0, #12]
 800c0fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c0fe:	68f3      	ldr	r3, [r6, #12]
 800c100:	b183      	cbz	r3, 800c124 <_Balloc+0x50>
 800c102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c10a:	b9b8      	cbnz	r0, 800c13c <_Balloc+0x68>
 800c10c:	2101      	movs	r1, #1
 800c10e:	fa01 f605 	lsl.w	r6, r1, r5
 800c112:	1d72      	adds	r2, r6, #5
 800c114:	4620      	mov	r0, r4
 800c116:	0092      	lsls	r2, r2, #2
 800c118:	f000 fc94 	bl	800ca44 <_calloc_r>
 800c11c:	b160      	cbz	r0, 800c138 <_Balloc+0x64>
 800c11e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c122:	e00e      	b.n	800c142 <_Balloc+0x6e>
 800c124:	2221      	movs	r2, #33	; 0x21
 800c126:	2104      	movs	r1, #4
 800c128:	4620      	mov	r0, r4
 800c12a:	f000 fc8b 	bl	800ca44 <_calloc_r>
 800c12e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c130:	60f0      	str	r0, [r6, #12]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1e4      	bne.n	800c102 <_Balloc+0x2e>
 800c138:	2000      	movs	r0, #0
 800c13a:	bd70      	pop	{r4, r5, r6, pc}
 800c13c:	6802      	ldr	r2, [r0, #0]
 800c13e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c142:	2300      	movs	r3, #0
 800c144:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c148:	e7f7      	b.n	800c13a <_Balloc+0x66>
 800c14a:	bf00      	nop
 800c14c:	0800e1b2 	.word	0x0800e1b2
 800c150:	0800e1c9 	.word	0x0800e1c9

0800c154 <_Bfree>:
 800c154:	b570      	push	{r4, r5, r6, lr}
 800c156:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c158:	4605      	mov	r5, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	b976      	cbnz	r6, 800c17c <_Bfree+0x28>
 800c15e:	2010      	movs	r0, #16
 800c160:	f001 f876 	bl	800d250 <malloc>
 800c164:	4602      	mov	r2, r0
 800c166:	6268      	str	r0, [r5, #36]	; 0x24
 800c168:	b920      	cbnz	r0, 800c174 <_Bfree+0x20>
 800c16a:	218a      	movs	r1, #138	; 0x8a
 800c16c:	4b08      	ldr	r3, [pc, #32]	; (800c190 <_Bfree+0x3c>)
 800c16e:	4809      	ldr	r0, [pc, #36]	; (800c194 <_Bfree+0x40>)
 800c170:	f001 f83e 	bl	800d1f0 <__assert_func>
 800c174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c178:	6006      	str	r6, [r0, #0]
 800c17a:	60c6      	str	r6, [r0, #12]
 800c17c:	b13c      	cbz	r4, 800c18e <_Bfree+0x3a>
 800c17e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c180:	6862      	ldr	r2, [r4, #4]
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c188:	6021      	str	r1, [r4, #0]
 800c18a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
 800c190:	0800e1b2 	.word	0x0800e1b2
 800c194:	0800e1c9 	.word	0x0800e1c9

0800c198 <__multadd>:
 800c198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c19c:	4607      	mov	r7, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	461e      	mov	r6, r3
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	690d      	ldr	r5, [r1, #16]
 800c1a6:	f101 0c14 	add.w	ip, r1, #20
 800c1aa:	f8dc 3000 	ldr.w	r3, [ip]
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	b299      	uxth	r1, r3
 800c1b2:	fb02 6101 	mla	r1, r2, r1, r6
 800c1b6:	0c1e      	lsrs	r6, r3, #16
 800c1b8:	0c0b      	lsrs	r3, r1, #16
 800c1ba:	fb02 3306 	mla	r3, r2, r6, r3
 800c1be:	b289      	uxth	r1, r1
 800c1c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1c4:	4285      	cmp	r5, r0
 800c1c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1ca:	f84c 1b04 	str.w	r1, [ip], #4
 800c1ce:	dcec      	bgt.n	800c1aa <__multadd+0x12>
 800c1d0:	b30e      	cbz	r6, 800c216 <__multadd+0x7e>
 800c1d2:	68a3      	ldr	r3, [r4, #8]
 800c1d4:	42ab      	cmp	r3, r5
 800c1d6:	dc19      	bgt.n	800c20c <__multadd+0x74>
 800c1d8:	6861      	ldr	r1, [r4, #4]
 800c1da:	4638      	mov	r0, r7
 800c1dc:	3101      	adds	r1, #1
 800c1de:	f7ff ff79 	bl	800c0d4 <_Balloc>
 800c1e2:	4680      	mov	r8, r0
 800c1e4:	b928      	cbnz	r0, 800c1f2 <__multadd+0x5a>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	21b5      	movs	r1, #181	; 0xb5
 800c1ea:	4b0c      	ldr	r3, [pc, #48]	; (800c21c <__multadd+0x84>)
 800c1ec:	480c      	ldr	r0, [pc, #48]	; (800c220 <__multadd+0x88>)
 800c1ee:	f000 ffff 	bl	800d1f0 <__assert_func>
 800c1f2:	6922      	ldr	r2, [r4, #16]
 800c1f4:	f104 010c 	add.w	r1, r4, #12
 800c1f8:	3202      	adds	r2, #2
 800c1fa:	0092      	lsls	r2, r2, #2
 800c1fc:	300c      	adds	r0, #12
 800c1fe:	f7ff ff5b 	bl	800c0b8 <memcpy>
 800c202:	4621      	mov	r1, r4
 800c204:	4638      	mov	r0, r7
 800c206:	f7ff ffa5 	bl	800c154 <_Bfree>
 800c20a:	4644      	mov	r4, r8
 800c20c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c210:	3501      	adds	r5, #1
 800c212:	615e      	str	r6, [r3, #20]
 800c214:	6125      	str	r5, [r4, #16]
 800c216:	4620      	mov	r0, r4
 800c218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c21c:	0800e129 	.word	0x0800e129
 800c220:	0800e1c9 	.word	0x0800e1c9

0800c224 <__s2b>:
 800c224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c228:	4615      	mov	r5, r2
 800c22a:	2209      	movs	r2, #9
 800c22c:	461f      	mov	r7, r3
 800c22e:	3308      	adds	r3, #8
 800c230:	460c      	mov	r4, r1
 800c232:	fb93 f3f2 	sdiv	r3, r3, r2
 800c236:	4606      	mov	r6, r0
 800c238:	2201      	movs	r2, #1
 800c23a:	2100      	movs	r1, #0
 800c23c:	429a      	cmp	r2, r3
 800c23e:	db09      	blt.n	800c254 <__s2b+0x30>
 800c240:	4630      	mov	r0, r6
 800c242:	f7ff ff47 	bl	800c0d4 <_Balloc>
 800c246:	b940      	cbnz	r0, 800c25a <__s2b+0x36>
 800c248:	4602      	mov	r2, r0
 800c24a:	21ce      	movs	r1, #206	; 0xce
 800c24c:	4b18      	ldr	r3, [pc, #96]	; (800c2b0 <__s2b+0x8c>)
 800c24e:	4819      	ldr	r0, [pc, #100]	; (800c2b4 <__s2b+0x90>)
 800c250:	f000 ffce 	bl	800d1f0 <__assert_func>
 800c254:	0052      	lsls	r2, r2, #1
 800c256:	3101      	adds	r1, #1
 800c258:	e7f0      	b.n	800c23c <__s2b+0x18>
 800c25a:	9b08      	ldr	r3, [sp, #32]
 800c25c:	2d09      	cmp	r5, #9
 800c25e:	6143      	str	r3, [r0, #20]
 800c260:	f04f 0301 	mov.w	r3, #1
 800c264:	6103      	str	r3, [r0, #16]
 800c266:	dd16      	ble.n	800c296 <__s2b+0x72>
 800c268:	f104 0909 	add.w	r9, r4, #9
 800c26c:	46c8      	mov	r8, r9
 800c26e:	442c      	add	r4, r5
 800c270:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c274:	4601      	mov	r1, r0
 800c276:	220a      	movs	r2, #10
 800c278:	4630      	mov	r0, r6
 800c27a:	3b30      	subs	r3, #48	; 0x30
 800c27c:	f7ff ff8c 	bl	800c198 <__multadd>
 800c280:	45a0      	cmp	r8, r4
 800c282:	d1f5      	bne.n	800c270 <__s2b+0x4c>
 800c284:	f1a5 0408 	sub.w	r4, r5, #8
 800c288:	444c      	add	r4, r9
 800c28a:	1b2d      	subs	r5, r5, r4
 800c28c:	1963      	adds	r3, r4, r5
 800c28e:	42bb      	cmp	r3, r7
 800c290:	db04      	blt.n	800c29c <__s2b+0x78>
 800c292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c296:	2509      	movs	r5, #9
 800c298:	340a      	adds	r4, #10
 800c29a:	e7f6      	b.n	800c28a <__s2b+0x66>
 800c29c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2a0:	4601      	mov	r1, r0
 800c2a2:	220a      	movs	r2, #10
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	3b30      	subs	r3, #48	; 0x30
 800c2a8:	f7ff ff76 	bl	800c198 <__multadd>
 800c2ac:	e7ee      	b.n	800c28c <__s2b+0x68>
 800c2ae:	bf00      	nop
 800c2b0:	0800e129 	.word	0x0800e129
 800c2b4:	0800e1c9 	.word	0x0800e1c9

0800c2b8 <__hi0bits>:
 800c2b8:	0c02      	lsrs	r2, r0, #16
 800c2ba:	0412      	lsls	r2, r2, #16
 800c2bc:	4603      	mov	r3, r0
 800c2be:	b9ca      	cbnz	r2, 800c2f4 <__hi0bits+0x3c>
 800c2c0:	0403      	lsls	r3, r0, #16
 800c2c2:	2010      	movs	r0, #16
 800c2c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c2c8:	bf04      	itt	eq
 800c2ca:	021b      	lsleq	r3, r3, #8
 800c2cc:	3008      	addeq	r0, #8
 800c2ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c2d2:	bf04      	itt	eq
 800c2d4:	011b      	lsleq	r3, r3, #4
 800c2d6:	3004      	addeq	r0, #4
 800c2d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c2dc:	bf04      	itt	eq
 800c2de:	009b      	lsleq	r3, r3, #2
 800c2e0:	3002      	addeq	r0, #2
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	db05      	blt.n	800c2f2 <__hi0bits+0x3a>
 800c2e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c2ea:	f100 0001 	add.w	r0, r0, #1
 800c2ee:	bf08      	it	eq
 800c2f0:	2020      	moveq	r0, #32
 800c2f2:	4770      	bx	lr
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	e7e5      	b.n	800c2c4 <__hi0bits+0xc>

0800c2f8 <__lo0bits>:
 800c2f8:	6803      	ldr	r3, [r0, #0]
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	f013 0007 	ands.w	r0, r3, #7
 800c300:	d00b      	beq.n	800c31a <__lo0bits+0x22>
 800c302:	07d9      	lsls	r1, r3, #31
 800c304:	d421      	bmi.n	800c34a <__lo0bits+0x52>
 800c306:	0798      	lsls	r0, r3, #30
 800c308:	bf49      	itett	mi
 800c30a:	085b      	lsrmi	r3, r3, #1
 800c30c:	089b      	lsrpl	r3, r3, #2
 800c30e:	2001      	movmi	r0, #1
 800c310:	6013      	strmi	r3, [r2, #0]
 800c312:	bf5c      	itt	pl
 800c314:	2002      	movpl	r0, #2
 800c316:	6013      	strpl	r3, [r2, #0]
 800c318:	4770      	bx	lr
 800c31a:	b299      	uxth	r1, r3
 800c31c:	b909      	cbnz	r1, 800c322 <__lo0bits+0x2a>
 800c31e:	2010      	movs	r0, #16
 800c320:	0c1b      	lsrs	r3, r3, #16
 800c322:	b2d9      	uxtb	r1, r3
 800c324:	b909      	cbnz	r1, 800c32a <__lo0bits+0x32>
 800c326:	3008      	adds	r0, #8
 800c328:	0a1b      	lsrs	r3, r3, #8
 800c32a:	0719      	lsls	r1, r3, #28
 800c32c:	bf04      	itt	eq
 800c32e:	091b      	lsreq	r3, r3, #4
 800c330:	3004      	addeq	r0, #4
 800c332:	0799      	lsls	r1, r3, #30
 800c334:	bf04      	itt	eq
 800c336:	089b      	lsreq	r3, r3, #2
 800c338:	3002      	addeq	r0, #2
 800c33a:	07d9      	lsls	r1, r3, #31
 800c33c:	d403      	bmi.n	800c346 <__lo0bits+0x4e>
 800c33e:	085b      	lsrs	r3, r3, #1
 800c340:	f100 0001 	add.w	r0, r0, #1
 800c344:	d003      	beq.n	800c34e <__lo0bits+0x56>
 800c346:	6013      	str	r3, [r2, #0]
 800c348:	4770      	bx	lr
 800c34a:	2000      	movs	r0, #0
 800c34c:	4770      	bx	lr
 800c34e:	2020      	movs	r0, #32
 800c350:	4770      	bx	lr
	...

0800c354 <__i2b>:
 800c354:	b510      	push	{r4, lr}
 800c356:	460c      	mov	r4, r1
 800c358:	2101      	movs	r1, #1
 800c35a:	f7ff febb 	bl	800c0d4 <_Balloc>
 800c35e:	4602      	mov	r2, r0
 800c360:	b928      	cbnz	r0, 800c36e <__i2b+0x1a>
 800c362:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c366:	4b04      	ldr	r3, [pc, #16]	; (800c378 <__i2b+0x24>)
 800c368:	4804      	ldr	r0, [pc, #16]	; (800c37c <__i2b+0x28>)
 800c36a:	f000 ff41 	bl	800d1f0 <__assert_func>
 800c36e:	2301      	movs	r3, #1
 800c370:	6144      	str	r4, [r0, #20]
 800c372:	6103      	str	r3, [r0, #16]
 800c374:	bd10      	pop	{r4, pc}
 800c376:	bf00      	nop
 800c378:	0800e129 	.word	0x0800e129
 800c37c:	0800e1c9 	.word	0x0800e1c9

0800c380 <__multiply>:
 800c380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c384:	4691      	mov	r9, r2
 800c386:	690a      	ldr	r2, [r1, #16]
 800c388:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c38c:	460c      	mov	r4, r1
 800c38e:	429a      	cmp	r2, r3
 800c390:	bfbe      	ittt	lt
 800c392:	460b      	movlt	r3, r1
 800c394:	464c      	movlt	r4, r9
 800c396:	4699      	movlt	r9, r3
 800c398:	6927      	ldr	r7, [r4, #16]
 800c39a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c39e:	68a3      	ldr	r3, [r4, #8]
 800c3a0:	6861      	ldr	r1, [r4, #4]
 800c3a2:	eb07 060a 	add.w	r6, r7, sl
 800c3a6:	42b3      	cmp	r3, r6
 800c3a8:	b085      	sub	sp, #20
 800c3aa:	bfb8      	it	lt
 800c3ac:	3101      	addlt	r1, #1
 800c3ae:	f7ff fe91 	bl	800c0d4 <_Balloc>
 800c3b2:	b930      	cbnz	r0, 800c3c2 <__multiply+0x42>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	f240 115d 	movw	r1, #349	; 0x15d
 800c3ba:	4b43      	ldr	r3, [pc, #268]	; (800c4c8 <__multiply+0x148>)
 800c3bc:	4843      	ldr	r0, [pc, #268]	; (800c4cc <__multiply+0x14c>)
 800c3be:	f000 ff17 	bl	800d1f0 <__assert_func>
 800c3c2:	f100 0514 	add.w	r5, r0, #20
 800c3c6:	462b      	mov	r3, r5
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3ce:	4543      	cmp	r3, r8
 800c3d0:	d321      	bcc.n	800c416 <__multiply+0x96>
 800c3d2:	f104 0314 	add.w	r3, r4, #20
 800c3d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c3da:	f109 0314 	add.w	r3, r9, #20
 800c3de:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c3e2:	9202      	str	r2, [sp, #8]
 800c3e4:	1b3a      	subs	r2, r7, r4
 800c3e6:	3a15      	subs	r2, #21
 800c3e8:	f022 0203 	bic.w	r2, r2, #3
 800c3ec:	3204      	adds	r2, #4
 800c3ee:	f104 0115 	add.w	r1, r4, #21
 800c3f2:	428f      	cmp	r7, r1
 800c3f4:	bf38      	it	cc
 800c3f6:	2204      	movcc	r2, #4
 800c3f8:	9201      	str	r2, [sp, #4]
 800c3fa:	9a02      	ldr	r2, [sp, #8]
 800c3fc:	9303      	str	r3, [sp, #12]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d80c      	bhi.n	800c41c <__multiply+0x9c>
 800c402:	2e00      	cmp	r6, #0
 800c404:	dd03      	ble.n	800c40e <__multiply+0x8e>
 800c406:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d059      	beq.n	800c4c2 <__multiply+0x142>
 800c40e:	6106      	str	r6, [r0, #16]
 800c410:	b005      	add	sp, #20
 800c412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c416:	f843 2b04 	str.w	r2, [r3], #4
 800c41a:	e7d8      	b.n	800c3ce <__multiply+0x4e>
 800c41c:	f8b3 a000 	ldrh.w	sl, [r3]
 800c420:	f1ba 0f00 	cmp.w	sl, #0
 800c424:	d023      	beq.n	800c46e <__multiply+0xee>
 800c426:	46a9      	mov	r9, r5
 800c428:	f04f 0c00 	mov.w	ip, #0
 800c42c:	f104 0e14 	add.w	lr, r4, #20
 800c430:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c434:	f8d9 1000 	ldr.w	r1, [r9]
 800c438:	fa1f fb82 	uxth.w	fp, r2
 800c43c:	b289      	uxth	r1, r1
 800c43e:	fb0a 110b 	mla	r1, sl, fp, r1
 800c442:	4461      	add	r1, ip
 800c444:	f8d9 c000 	ldr.w	ip, [r9]
 800c448:	0c12      	lsrs	r2, r2, #16
 800c44a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c44e:	fb0a c202 	mla	r2, sl, r2, ip
 800c452:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c456:	b289      	uxth	r1, r1
 800c458:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c45c:	4577      	cmp	r7, lr
 800c45e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c462:	f849 1b04 	str.w	r1, [r9], #4
 800c466:	d8e3      	bhi.n	800c430 <__multiply+0xb0>
 800c468:	9a01      	ldr	r2, [sp, #4]
 800c46a:	f845 c002 	str.w	ip, [r5, r2]
 800c46e:	9a03      	ldr	r2, [sp, #12]
 800c470:	3304      	adds	r3, #4
 800c472:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c476:	f1b9 0f00 	cmp.w	r9, #0
 800c47a:	d020      	beq.n	800c4be <__multiply+0x13e>
 800c47c:	46ae      	mov	lr, r5
 800c47e:	f04f 0a00 	mov.w	sl, #0
 800c482:	6829      	ldr	r1, [r5, #0]
 800c484:	f104 0c14 	add.w	ip, r4, #20
 800c488:	f8bc b000 	ldrh.w	fp, [ip]
 800c48c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c490:	b289      	uxth	r1, r1
 800c492:	fb09 220b 	mla	r2, r9, fp, r2
 800c496:	4492      	add	sl, r2
 800c498:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c49c:	f84e 1b04 	str.w	r1, [lr], #4
 800c4a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c4a4:	f8be 1000 	ldrh.w	r1, [lr]
 800c4a8:	0c12      	lsrs	r2, r2, #16
 800c4aa:	fb09 1102 	mla	r1, r9, r2, r1
 800c4ae:	4567      	cmp	r7, ip
 800c4b0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c4b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c4b8:	d8e6      	bhi.n	800c488 <__multiply+0x108>
 800c4ba:	9a01      	ldr	r2, [sp, #4]
 800c4bc:	50a9      	str	r1, [r5, r2]
 800c4be:	3504      	adds	r5, #4
 800c4c0:	e79b      	b.n	800c3fa <__multiply+0x7a>
 800c4c2:	3e01      	subs	r6, #1
 800c4c4:	e79d      	b.n	800c402 <__multiply+0x82>
 800c4c6:	bf00      	nop
 800c4c8:	0800e129 	.word	0x0800e129
 800c4cc:	0800e1c9 	.word	0x0800e1c9

0800c4d0 <__pow5mult>:
 800c4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d4:	4615      	mov	r5, r2
 800c4d6:	f012 0203 	ands.w	r2, r2, #3
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460f      	mov	r7, r1
 800c4de:	d007      	beq.n	800c4f0 <__pow5mult+0x20>
 800c4e0:	4c25      	ldr	r4, [pc, #148]	; (800c578 <__pow5mult+0xa8>)
 800c4e2:	3a01      	subs	r2, #1
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4ea:	f7ff fe55 	bl	800c198 <__multadd>
 800c4ee:	4607      	mov	r7, r0
 800c4f0:	10ad      	asrs	r5, r5, #2
 800c4f2:	d03d      	beq.n	800c570 <__pow5mult+0xa0>
 800c4f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c4f6:	b97c      	cbnz	r4, 800c518 <__pow5mult+0x48>
 800c4f8:	2010      	movs	r0, #16
 800c4fa:	f000 fea9 	bl	800d250 <malloc>
 800c4fe:	4602      	mov	r2, r0
 800c500:	6270      	str	r0, [r6, #36]	; 0x24
 800c502:	b928      	cbnz	r0, 800c510 <__pow5mult+0x40>
 800c504:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c508:	4b1c      	ldr	r3, [pc, #112]	; (800c57c <__pow5mult+0xac>)
 800c50a:	481d      	ldr	r0, [pc, #116]	; (800c580 <__pow5mult+0xb0>)
 800c50c:	f000 fe70 	bl	800d1f0 <__assert_func>
 800c510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c514:	6004      	str	r4, [r0, #0]
 800c516:	60c4      	str	r4, [r0, #12]
 800c518:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c51c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c520:	b94c      	cbnz	r4, 800c536 <__pow5mult+0x66>
 800c522:	f240 2171 	movw	r1, #625	; 0x271
 800c526:	4630      	mov	r0, r6
 800c528:	f7ff ff14 	bl	800c354 <__i2b>
 800c52c:	2300      	movs	r3, #0
 800c52e:	4604      	mov	r4, r0
 800c530:	f8c8 0008 	str.w	r0, [r8, #8]
 800c534:	6003      	str	r3, [r0, #0]
 800c536:	f04f 0900 	mov.w	r9, #0
 800c53a:	07eb      	lsls	r3, r5, #31
 800c53c:	d50a      	bpl.n	800c554 <__pow5mult+0x84>
 800c53e:	4639      	mov	r1, r7
 800c540:	4622      	mov	r2, r4
 800c542:	4630      	mov	r0, r6
 800c544:	f7ff ff1c 	bl	800c380 <__multiply>
 800c548:	4680      	mov	r8, r0
 800c54a:	4639      	mov	r1, r7
 800c54c:	4630      	mov	r0, r6
 800c54e:	f7ff fe01 	bl	800c154 <_Bfree>
 800c552:	4647      	mov	r7, r8
 800c554:	106d      	asrs	r5, r5, #1
 800c556:	d00b      	beq.n	800c570 <__pow5mult+0xa0>
 800c558:	6820      	ldr	r0, [r4, #0]
 800c55a:	b938      	cbnz	r0, 800c56c <__pow5mult+0x9c>
 800c55c:	4622      	mov	r2, r4
 800c55e:	4621      	mov	r1, r4
 800c560:	4630      	mov	r0, r6
 800c562:	f7ff ff0d 	bl	800c380 <__multiply>
 800c566:	6020      	str	r0, [r4, #0]
 800c568:	f8c0 9000 	str.w	r9, [r0]
 800c56c:	4604      	mov	r4, r0
 800c56e:	e7e4      	b.n	800c53a <__pow5mult+0x6a>
 800c570:	4638      	mov	r0, r7
 800c572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c576:	bf00      	nop
 800c578:	0800e318 	.word	0x0800e318
 800c57c:	0800e1b2 	.word	0x0800e1b2
 800c580:	0800e1c9 	.word	0x0800e1c9

0800c584 <__lshift>:
 800c584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c588:	460c      	mov	r4, r1
 800c58a:	4607      	mov	r7, r0
 800c58c:	4691      	mov	r9, r2
 800c58e:	6923      	ldr	r3, [r4, #16]
 800c590:	6849      	ldr	r1, [r1, #4]
 800c592:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c596:	68a3      	ldr	r3, [r4, #8]
 800c598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c59c:	f108 0601 	add.w	r6, r8, #1
 800c5a0:	42b3      	cmp	r3, r6
 800c5a2:	db0b      	blt.n	800c5bc <__lshift+0x38>
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	f7ff fd95 	bl	800c0d4 <_Balloc>
 800c5aa:	4605      	mov	r5, r0
 800c5ac:	b948      	cbnz	r0, 800c5c2 <__lshift+0x3e>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c5b4:	4b29      	ldr	r3, [pc, #164]	; (800c65c <__lshift+0xd8>)
 800c5b6:	482a      	ldr	r0, [pc, #168]	; (800c660 <__lshift+0xdc>)
 800c5b8:	f000 fe1a 	bl	800d1f0 <__assert_func>
 800c5bc:	3101      	adds	r1, #1
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	e7ee      	b.n	800c5a0 <__lshift+0x1c>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f100 0114 	add.w	r1, r0, #20
 800c5c8:	f100 0210 	add.w	r2, r0, #16
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	4553      	cmp	r3, sl
 800c5d0:	db37      	blt.n	800c642 <__lshift+0xbe>
 800c5d2:	6920      	ldr	r0, [r4, #16]
 800c5d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5d8:	f104 0314 	add.w	r3, r4, #20
 800c5dc:	f019 091f 	ands.w	r9, r9, #31
 800c5e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c5e8:	d02f      	beq.n	800c64a <__lshift+0xc6>
 800c5ea:	468a      	mov	sl, r1
 800c5ec:	f04f 0c00 	mov.w	ip, #0
 800c5f0:	f1c9 0e20 	rsb	lr, r9, #32
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	fa02 f209 	lsl.w	r2, r2, r9
 800c5fa:	ea42 020c 	orr.w	r2, r2, ip
 800c5fe:	f84a 2b04 	str.w	r2, [sl], #4
 800c602:	f853 2b04 	ldr.w	r2, [r3], #4
 800c606:	4298      	cmp	r0, r3
 800c608:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c60c:	d8f2      	bhi.n	800c5f4 <__lshift+0x70>
 800c60e:	1b03      	subs	r3, r0, r4
 800c610:	3b15      	subs	r3, #21
 800c612:	f023 0303 	bic.w	r3, r3, #3
 800c616:	3304      	adds	r3, #4
 800c618:	f104 0215 	add.w	r2, r4, #21
 800c61c:	4290      	cmp	r0, r2
 800c61e:	bf38      	it	cc
 800c620:	2304      	movcc	r3, #4
 800c622:	f841 c003 	str.w	ip, [r1, r3]
 800c626:	f1bc 0f00 	cmp.w	ip, #0
 800c62a:	d001      	beq.n	800c630 <__lshift+0xac>
 800c62c:	f108 0602 	add.w	r6, r8, #2
 800c630:	3e01      	subs	r6, #1
 800c632:	4638      	mov	r0, r7
 800c634:	4621      	mov	r1, r4
 800c636:	612e      	str	r6, [r5, #16]
 800c638:	f7ff fd8c 	bl	800c154 <_Bfree>
 800c63c:	4628      	mov	r0, r5
 800c63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c642:	f842 0f04 	str.w	r0, [r2, #4]!
 800c646:	3301      	adds	r3, #1
 800c648:	e7c1      	b.n	800c5ce <__lshift+0x4a>
 800c64a:	3904      	subs	r1, #4
 800c64c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c650:	4298      	cmp	r0, r3
 800c652:	f841 2f04 	str.w	r2, [r1, #4]!
 800c656:	d8f9      	bhi.n	800c64c <__lshift+0xc8>
 800c658:	e7ea      	b.n	800c630 <__lshift+0xac>
 800c65a:	bf00      	nop
 800c65c:	0800e129 	.word	0x0800e129
 800c660:	0800e1c9 	.word	0x0800e1c9

0800c664 <__mcmp>:
 800c664:	4603      	mov	r3, r0
 800c666:	690a      	ldr	r2, [r1, #16]
 800c668:	6900      	ldr	r0, [r0, #16]
 800c66a:	b530      	push	{r4, r5, lr}
 800c66c:	1a80      	subs	r0, r0, r2
 800c66e:	d10d      	bne.n	800c68c <__mcmp+0x28>
 800c670:	3314      	adds	r3, #20
 800c672:	3114      	adds	r1, #20
 800c674:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c678:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c67c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c680:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c684:	4295      	cmp	r5, r2
 800c686:	d002      	beq.n	800c68e <__mcmp+0x2a>
 800c688:	d304      	bcc.n	800c694 <__mcmp+0x30>
 800c68a:	2001      	movs	r0, #1
 800c68c:	bd30      	pop	{r4, r5, pc}
 800c68e:	42a3      	cmp	r3, r4
 800c690:	d3f4      	bcc.n	800c67c <__mcmp+0x18>
 800c692:	e7fb      	b.n	800c68c <__mcmp+0x28>
 800c694:	f04f 30ff 	mov.w	r0, #4294967295
 800c698:	e7f8      	b.n	800c68c <__mcmp+0x28>
	...

0800c69c <__mdiff>:
 800c69c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a0:	460d      	mov	r5, r1
 800c6a2:	4607      	mov	r7, r0
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	4614      	mov	r4, r2
 800c6aa:	f7ff ffdb 	bl	800c664 <__mcmp>
 800c6ae:	1e06      	subs	r6, r0, #0
 800c6b0:	d111      	bne.n	800c6d6 <__mdiff+0x3a>
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	4638      	mov	r0, r7
 800c6b6:	f7ff fd0d 	bl	800c0d4 <_Balloc>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	b928      	cbnz	r0, 800c6ca <__mdiff+0x2e>
 800c6be:	f240 2132 	movw	r1, #562	; 0x232
 800c6c2:	4b3a      	ldr	r3, [pc, #232]	; (800c7ac <__mdiff+0x110>)
 800c6c4:	483a      	ldr	r0, [pc, #232]	; (800c7b0 <__mdiff+0x114>)
 800c6c6:	f000 fd93 	bl	800d1f0 <__assert_func>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d6:	bfa4      	itt	ge
 800c6d8:	4623      	movge	r3, r4
 800c6da:	462c      	movge	r4, r5
 800c6dc:	4638      	mov	r0, r7
 800c6de:	6861      	ldr	r1, [r4, #4]
 800c6e0:	bfa6      	itte	ge
 800c6e2:	461d      	movge	r5, r3
 800c6e4:	2600      	movge	r6, #0
 800c6e6:	2601      	movlt	r6, #1
 800c6e8:	f7ff fcf4 	bl	800c0d4 <_Balloc>
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	b918      	cbnz	r0, 800c6f8 <__mdiff+0x5c>
 800c6f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c6f4:	4b2d      	ldr	r3, [pc, #180]	; (800c7ac <__mdiff+0x110>)
 800c6f6:	e7e5      	b.n	800c6c4 <__mdiff+0x28>
 800c6f8:	f102 0814 	add.w	r8, r2, #20
 800c6fc:	46c2      	mov	sl, r8
 800c6fe:	f04f 0c00 	mov.w	ip, #0
 800c702:	6927      	ldr	r7, [r4, #16]
 800c704:	60c6      	str	r6, [r0, #12]
 800c706:	692e      	ldr	r6, [r5, #16]
 800c708:	f104 0014 	add.w	r0, r4, #20
 800c70c:	f105 0914 	add.w	r9, r5, #20
 800c710:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c714:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c718:	3410      	adds	r4, #16
 800c71a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c71e:	f859 3b04 	ldr.w	r3, [r9], #4
 800c722:	fa1f f18b 	uxth.w	r1, fp
 800c726:	448c      	add	ip, r1
 800c728:	b299      	uxth	r1, r3
 800c72a:	0c1b      	lsrs	r3, r3, #16
 800c72c:	ebac 0101 	sub.w	r1, ip, r1
 800c730:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c734:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c738:	b289      	uxth	r1, r1
 800c73a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c73e:	454e      	cmp	r6, r9
 800c740:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c744:	f84a 3b04 	str.w	r3, [sl], #4
 800c748:	d8e7      	bhi.n	800c71a <__mdiff+0x7e>
 800c74a:	1b73      	subs	r3, r6, r5
 800c74c:	3b15      	subs	r3, #21
 800c74e:	f023 0303 	bic.w	r3, r3, #3
 800c752:	3515      	adds	r5, #21
 800c754:	3304      	adds	r3, #4
 800c756:	42ae      	cmp	r6, r5
 800c758:	bf38      	it	cc
 800c75a:	2304      	movcc	r3, #4
 800c75c:	4418      	add	r0, r3
 800c75e:	4443      	add	r3, r8
 800c760:	461e      	mov	r6, r3
 800c762:	4605      	mov	r5, r0
 800c764:	4575      	cmp	r5, lr
 800c766:	d30e      	bcc.n	800c786 <__mdiff+0xea>
 800c768:	f10e 0103 	add.w	r1, lr, #3
 800c76c:	1a09      	subs	r1, r1, r0
 800c76e:	f021 0103 	bic.w	r1, r1, #3
 800c772:	3803      	subs	r0, #3
 800c774:	4586      	cmp	lr, r0
 800c776:	bf38      	it	cc
 800c778:	2100      	movcc	r1, #0
 800c77a:	4419      	add	r1, r3
 800c77c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c780:	b18b      	cbz	r3, 800c7a6 <__mdiff+0x10a>
 800c782:	6117      	str	r7, [r2, #16]
 800c784:	e7a4      	b.n	800c6d0 <__mdiff+0x34>
 800c786:	f855 8b04 	ldr.w	r8, [r5], #4
 800c78a:	fa1f f188 	uxth.w	r1, r8
 800c78e:	4461      	add	r1, ip
 800c790:	140c      	asrs	r4, r1, #16
 800c792:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c796:	b289      	uxth	r1, r1
 800c798:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c79c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c7a0:	f846 1b04 	str.w	r1, [r6], #4
 800c7a4:	e7de      	b.n	800c764 <__mdiff+0xc8>
 800c7a6:	3f01      	subs	r7, #1
 800c7a8:	e7e8      	b.n	800c77c <__mdiff+0xe0>
 800c7aa:	bf00      	nop
 800c7ac:	0800e129 	.word	0x0800e129
 800c7b0:	0800e1c9 	.word	0x0800e1c9

0800c7b4 <__ulp>:
 800c7b4:	4b11      	ldr	r3, [pc, #68]	; (800c7fc <__ulp+0x48>)
 800c7b6:	400b      	ands	r3, r1
 800c7b8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dd02      	ble.n	800c7c6 <__ulp+0x12>
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4770      	bx	lr
 800c7c6:	425b      	negs	r3, r3
 800c7c8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c7cc:	f04f 0000 	mov.w	r0, #0
 800c7d0:	f04f 0100 	mov.w	r1, #0
 800c7d4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7d8:	da04      	bge.n	800c7e4 <__ulp+0x30>
 800c7da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c7de:	fa43 f102 	asr.w	r1, r3, r2
 800c7e2:	4770      	bx	lr
 800c7e4:	f1a2 0314 	sub.w	r3, r2, #20
 800c7e8:	2b1e      	cmp	r3, #30
 800c7ea:	bfd6      	itet	le
 800c7ec:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c7f0:	2301      	movgt	r3, #1
 800c7f2:	fa22 f303 	lsrle.w	r3, r2, r3
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	7ff00000 	.word	0x7ff00000

0800c800 <__b2d>:
 800c800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c804:	6907      	ldr	r7, [r0, #16]
 800c806:	f100 0914 	add.w	r9, r0, #20
 800c80a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c80e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c812:	f1a7 0804 	sub.w	r8, r7, #4
 800c816:	4630      	mov	r0, r6
 800c818:	f7ff fd4e 	bl	800c2b8 <__hi0bits>
 800c81c:	f1c0 0320 	rsb	r3, r0, #32
 800c820:	280a      	cmp	r0, #10
 800c822:	600b      	str	r3, [r1, #0]
 800c824:	491f      	ldr	r1, [pc, #124]	; (800c8a4 <__b2d+0xa4>)
 800c826:	dc17      	bgt.n	800c858 <__b2d+0x58>
 800c828:	45c1      	cmp	r9, r8
 800c82a:	bf28      	it	cs
 800c82c:	2200      	movcs	r2, #0
 800c82e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c832:	fa26 f30c 	lsr.w	r3, r6, ip
 800c836:	bf38      	it	cc
 800c838:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c83c:	ea43 0501 	orr.w	r5, r3, r1
 800c840:	f100 0315 	add.w	r3, r0, #21
 800c844:	fa06 f303 	lsl.w	r3, r6, r3
 800c848:	fa22 f20c 	lsr.w	r2, r2, ip
 800c84c:	ea43 0402 	orr.w	r4, r3, r2
 800c850:	4620      	mov	r0, r4
 800c852:	4629      	mov	r1, r5
 800c854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c858:	45c1      	cmp	r9, r8
 800c85a:	bf2e      	itee	cs
 800c85c:	2200      	movcs	r2, #0
 800c85e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c862:	f1a7 0808 	subcc.w	r8, r7, #8
 800c866:	f1b0 030b 	subs.w	r3, r0, #11
 800c86a:	d016      	beq.n	800c89a <__b2d+0x9a>
 800c86c:	f1c3 0720 	rsb	r7, r3, #32
 800c870:	fa22 f107 	lsr.w	r1, r2, r7
 800c874:	45c8      	cmp	r8, r9
 800c876:	fa06 f603 	lsl.w	r6, r6, r3
 800c87a:	ea46 0601 	orr.w	r6, r6, r1
 800c87e:	bf94      	ite	ls
 800c880:	2100      	movls	r1, #0
 800c882:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c886:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c88a:	fa02 f003 	lsl.w	r0, r2, r3
 800c88e:	40f9      	lsrs	r1, r7
 800c890:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c894:	ea40 0401 	orr.w	r4, r0, r1
 800c898:	e7da      	b.n	800c850 <__b2d+0x50>
 800c89a:	4614      	mov	r4, r2
 800c89c:	ea46 0501 	orr.w	r5, r6, r1
 800c8a0:	e7d6      	b.n	800c850 <__b2d+0x50>
 800c8a2:	bf00      	nop
 800c8a4:	3ff00000 	.word	0x3ff00000

0800c8a8 <__d2b>:
 800c8a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c8b2:	4690      	mov	r8, r2
 800c8b4:	461d      	mov	r5, r3
 800c8b6:	f7ff fc0d 	bl	800c0d4 <_Balloc>
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	b930      	cbnz	r0, 800c8cc <__d2b+0x24>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	f240 310a 	movw	r1, #778	; 0x30a
 800c8c4:	4b24      	ldr	r3, [pc, #144]	; (800c958 <__d2b+0xb0>)
 800c8c6:	4825      	ldr	r0, [pc, #148]	; (800c95c <__d2b+0xb4>)
 800c8c8:	f000 fc92 	bl	800d1f0 <__assert_func>
 800c8cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c8d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c8d4:	bb2d      	cbnz	r5, 800c922 <__d2b+0x7a>
 800c8d6:	9301      	str	r3, [sp, #4]
 800c8d8:	f1b8 0300 	subs.w	r3, r8, #0
 800c8dc:	d026      	beq.n	800c92c <__d2b+0x84>
 800c8de:	4668      	mov	r0, sp
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	f7ff fd09 	bl	800c2f8 <__lo0bits>
 800c8e6:	9900      	ldr	r1, [sp, #0]
 800c8e8:	b1f0      	cbz	r0, 800c928 <__d2b+0x80>
 800c8ea:	9a01      	ldr	r2, [sp, #4]
 800c8ec:	f1c0 0320 	rsb	r3, r0, #32
 800c8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8f4:	430b      	orrs	r3, r1
 800c8f6:	40c2      	lsrs	r2, r0
 800c8f8:	6163      	str	r3, [r4, #20]
 800c8fa:	9201      	str	r2, [sp, #4]
 800c8fc:	9b01      	ldr	r3, [sp, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	bf14      	ite	ne
 800c902:	2102      	movne	r1, #2
 800c904:	2101      	moveq	r1, #1
 800c906:	61a3      	str	r3, [r4, #24]
 800c908:	6121      	str	r1, [r4, #16]
 800c90a:	b1c5      	cbz	r5, 800c93e <__d2b+0x96>
 800c90c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c910:	4405      	add	r5, r0
 800c912:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c916:	603d      	str	r5, [r7, #0]
 800c918:	6030      	str	r0, [r6, #0]
 800c91a:	4620      	mov	r0, r4
 800c91c:	b002      	add	sp, #8
 800c91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c926:	e7d6      	b.n	800c8d6 <__d2b+0x2e>
 800c928:	6161      	str	r1, [r4, #20]
 800c92a:	e7e7      	b.n	800c8fc <__d2b+0x54>
 800c92c:	a801      	add	r0, sp, #4
 800c92e:	f7ff fce3 	bl	800c2f8 <__lo0bits>
 800c932:	2101      	movs	r1, #1
 800c934:	9b01      	ldr	r3, [sp, #4]
 800c936:	6121      	str	r1, [r4, #16]
 800c938:	6163      	str	r3, [r4, #20]
 800c93a:	3020      	adds	r0, #32
 800c93c:	e7e5      	b.n	800c90a <__d2b+0x62>
 800c93e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c942:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c946:	6038      	str	r0, [r7, #0]
 800c948:	6918      	ldr	r0, [r3, #16]
 800c94a:	f7ff fcb5 	bl	800c2b8 <__hi0bits>
 800c94e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c952:	6031      	str	r1, [r6, #0]
 800c954:	e7e1      	b.n	800c91a <__d2b+0x72>
 800c956:	bf00      	nop
 800c958:	0800e129 	.word	0x0800e129
 800c95c:	0800e1c9 	.word	0x0800e1c9

0800c960 <__ratio>:
 800c960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	4688      	mov	r8, r1
 800c966:	4669      	mov	r1, sp
 800c968:	4681      	mov	r9, r0
 800c96a:	f7ff ff49 	bl	800c800 <__b2d>
 800c96e:	460f      	mov	r7, r1
 800c970:	4604      	mov	r4, r0
 800c972:	460d      	mov	r5, r1
 800c974:	4640      	mov	r0, r8
 800c976:	a901      	add	r1, sp, #4
 800c978:	f7ff ff42 	bl	800c800 <__b2d>
 800c97c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c980:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c984:	468b      	mov	fp, r1
 800c986:	eba3 0c02 	sub.w	ip, r3, r2
 800c98a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c98e:	1a9b      	subs	r3, r3, r2
 800c990:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c994:	2b00      	cmp	r3, #0
 800c996:	bfd5      	itete	le
 800c998:	460a      	movle	r2, r1
 800c99a:	462a      	movgt	r2, r5
 800c99c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c9a0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c9a4:	bfd8      	it	le
 800c9a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c9aa:	465b      	mov	r3, fp
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f7f8 fec5 	bl	8005740 <__aeabi_ddiv>
 800c9b6:	b003      	add	sp, #12
 800c9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9bc <__copybits>:
 800c9bc:	3901      	subs	r1, #1
 800c9be:	b570      	push	{r4, r5, r6, lr}
 800c9c0:	1149      	asrs	r1, r1, #5
 800c9c2:	6914      	ldr	r4, [r2, #16]
 800c9c4:	3101      	adds	r1, #1
 800c9c6:	f102 0314 	add.w	r3, r2, #20
 800c9ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c9ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c9d2:	1f05      	subs	r5, r0, #4
 800c9d4:	42a3      	cmp	r3, r4
 800c9d6:	d30c      	bcc.n	800c9f2 <__copybits+0x36>
 800c9d8:	1aa3      	subs	r3, r4, r2
 800c9da:	3b11      	subs	r3, #17
 800c9dc:	f023 0303 	bic.w	r3, r3, #3
 800c9e0:	3211      	adds	r2, #17
 800c9e2:	42a2      	cmp	r2, r4
 800c9e4:	bf88      	it	hi
 800c9e6:	2300      	movhi	r3, #0
 800c9e8:	4418      	add	r0, r3
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4288      	cmp	r0, r1
 800c9ee:	d305      	bcc.n	800c9fc <__copybits+0x40>
 800c9f0:	bd70      	pop	{r4, r5, r6, pc}
 800c9f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9fa:	e7eb      	b.n	800c9d4 <__copybits+0x18>
 800c9fc:	f840 3b04 	str.w	r3, [r0], #4
 800ca00:	e7f4      	b.n	800c9ec <__copybits+0x30>

0800ca02 <__any_on>:
 800ca02:	f100 0214 	add.w	r2, r0, #20
 800ca06:	6900      	ldr	r0, [r0, #16]
 800ca08:	114b      	asrs	r3, r1, #5
 800ca0a:	4298      	cmp	r0, r3
 800ca0c:	b510      	push	{r4, lr}
 800ca0e:	db11      	blt.n	800ca34 <__any_on+0x32>
 800ca10:	dd0a      	ble.n	800ca28 <__any_on+0x26>
 800ca12:	f011 011f 	ands.w	r1, r1, #31
 800ca16:	d007      	beq.n	800ca28 <__any_on+0x26>
 800ca18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca1c:	fa24 f001 	lsr.w	r0, r4, r1
 800ca20:	fa00 f101 	lsl.w	r1, r0, r1
 800ca24:	428c      	cmp	r4, r1
 800ca26:	d10b      	bne.n	800ca40 <__any_on+0x3e>
 800ca28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d803      	bhi.n	800ca38 <__any_on+0x36>
 800ca30:	2000      	movs	r0, #0
 800ca32:	bd10      	pop	{r4, pc}
 800ca34:	4603      	mov	r3, r0
 800ca36:	e7f7      	b.n	800ca28 <__any_on+0x26>
 800ca38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca3c:	2900      	cmp	r1, #0
 800ca3e:	d0f5      	beq.n	800ca2c <__any_on+0x2a>
 800ca40:	2001      	movs	r0, #1
 800ca42:	e7f6      	b.n	800ca32 <__any_on+0x30>

0800ca44 <_calloc_r>:
 800ca44:	b570      	push	{r4, r5, r6, lr}
 800ca46:	fba1 5402 	umull	r5, r4, r1, r2
 800ca4a:	b934      	cbnz	r4, 800ca5a <_calloc_r+0x16>
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	f000 f82d 	bl	800caac <_malloc_r>
 800ca52:	4606      	mov	r6, r0
 800ca54:	b928      	cbnz	r0, 800ca62 <_calloc_r+0x1e>
 800ca56:	4630      	mov	r0, r6
 800ca58:	bd70      	pop	{r4, r5, r6, pc}
 800ca5a:	220c      	movs	r2, #12
 800ca5c:	2600      	movs	r6, #0
 800ca5e:	6002      	str	r2, [r0, #0]
 800ca60:	e7f9      	b.n	800ca56 <_calloc_r+0x12>
 800ca62:	462a      	mov	r2, r5
 800ca64:	4621      	mov	r1, r4
 800ca66:	f7fe f85f 	bl	800ab28 <memset>
 800ca6a:	e7f4      	b.n	800ca56 <_calloc_r+0x12>

0800ca6c <sbrk_aligned>:
 800ca6c:	b570      	push	{r4, r5, r6, lr}
 800ca6e:	4e0e      	ldr	r6, [pc, #56]	; (800caa8 <sbrk_aligned+0x3c>)
 800ca70:	460c      	mov	r4, r1
 800ca72:	6831      	ldr	r1, [r6, #0]
 800ca74:	4605      	mov	r5, r0
 800ca76:	b911      	cbnz	r1, 800ca7e <sbrk_aligned+0x12>
 800ca78:	f000 fb84 	bl	800d184 <_sbrk_r>
 800ca7c:	6030      	str	r0, [r6, #0]
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4628      	mov	r0, r5
 800ca82:	f000 fb7f 	bl	800d184 <_sbrk_r>
 800ca86:	1c43      	adds	r3, r0, #1
 800ca88:	d00a      	beq.n	800caa0 <sbrk_aligned+0x34>
 800ca8a:	1cc4      	adds	r4, r0, #3
 800ca8c:	f024 0403 	bic.w	r4, r4, #3
 800ca90:	42a0      	cmp	r0, r4
 800ca92:	d007      	beq.n	800caa4 <sbrk_aligned+0x38>
 800ca94:	1a21      	subs	r1, r4, r0
 800ca96:	4628      	mov	r0, r5
 800ca98:	f000 fb74 	bl	800d184 <_sbrk_r>
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	d101      	bne.n	800caa4 <sbrk_aligned+0x38>
 800caa0:	f04f 34ff 	mov.w	r4, #4294967295
 800caa4:	4620      	mov	r0, r4
 800caa6:	bd70      	pop	{r4, r5, r6, pc}
 800caa8:	20001ae0 	.word	0x20001ae0

0800caac <_malloc_r>:
 800caac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab0:	1ccd      	adds	r5, r1, #3
 800cab2:	f025 0503 	bic.w	r5, r5, #3
 800cab6:	3508      	adds	r5, #8
 800cab8:	2d0c      	cmp	r5, #12
 800caba:	bf38      	it	cc
 800cabc:	250c      	movcc	r5, #12
 800cabe:	2d00      	cmp	r5, #0
 800cac0:	4607      	mov	r7, r0
 800cac2:	db01      	blt.n	800cac8 <_malloc_r+0x1c>
 800cac4:	42a9      	cmp	r1, r5
 800cac6:	d905      	bls.n	800cad4 <_malloc_r+0x28>
 800cac8:	230c      	movs	r3, #12
 800caca:	2600      	movs	r6, #0
 800cacc:	603b      	str	r3, [r7, #0]
 800cace:	4630      	mov	r0, r6
 800cad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cad4:	4e2e      	ldr	r6, [pc, #184]	; (800cb90 <_malloc_r+0xe4>)
 800cad6:	f000 fbd1 	bl	800d27c <__malloc_lock>
 800cada:	6833      	ldr	r3, [r6, #0]
 800cadc:	461c      	mov	r4, r3
 800cade:	bb34      	cbnz	r4, 800cb2e <_malloc_r+0x82>
 800cae0:	4629      	mov	r1, r5
 800cae2:	4638      	mov	r0, r7
 800cae4:	f7ff ffc2 	bl	800ca6c <sbrk_aligned>
 800cae8:	1c43      	adds	r3, r0, #1
 800caea:	4604      	mov	r4, r0
 800caec:	d14d      	bne.n	800cb8a <_malloc_r+0xde>
 800caee:	6834      	ldr	r4, [r6, #0]
 800caf0:	4626      	mov	r6, r4
 800caf2:	2e00      	cmp	r6, #0
 800caf4:	d140      	bne.n	800cb78 <_malloc_r+0xcc>
 800caf6:	6823      	ldr	r3, [r4, #0]
 800caf8:	4631      	mov	r1, r6
 800cafa:	4638      	mov	r0, r7
 800cafc:	eb04 0803 	add.w	r8, r4, r3
 800cb00:	f000 fb40 	bl	800d184 <_sbrk_r>
 800cb04:	4580      	cmp	r8, r0
 800cb06:	d13a      	bne.n	800cb7e <_malloc_r+0xd2>
 800cb08:	6821      	ldr	r1, [r4, #0]
 800cb0a:	3503      	adds	r5, #3
 800cb0c:	1a6d      	subs	r5, r5, r1
 800cb0e:	f025 0503 	bic.w	r5, r5, #3
 800cb12:	3508      	adds	r5, #8
 800cb14:	2d0c      	cmp	r5, #12
 800cb16:	bf38      	it	cc
 800cb18:	250c      	movcc	r5, #12
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	f7ff ffa5 	bl	800ca6c <sbrk_aligned>
 800cb22:	3001      	adds	r0, #1
 800cb24:	d02b      	beq.n	800cb7e <_malloc_r+0xd2>
 800cb26:	6823      	ldr	r3, [r4, #0]
 800cb28:	442b      	add	r3, r5
 800cb2a:	6023      	str	r3, [r4, #0]
 800cb2c:	e00e      	b.n	800cb4c <_malloc_r+0xa0>
 800cb2e:	6822      	ldr	r2, [r4, #0]
 800cb30:	1b52      	subs	r2, r2, r5
 800cb32:	d41e      	bmi.n	800cb72 <_malloc_r+0xc6>
 800cb34:	2a0b      	cmp	r2, #11
 800cb36:	d916      	bls.n	800cb66 <_malloc_r+0xba>
 800cb38:	1961      	adds	r1, r4, r5
 800cb3a:	42a3      	cmp	r3, r4
 800cb3c:	6025      	str	r5, [r4, #0]
 800cb3e:	bf18      	it	ne
 800cb40:	6059      	strne	r1, [r3, #4]
 800cb42:	6863      	ldr	r3, [r4, #4]
 800cb44:	bf08      	it	eq
 800cb46:	6031      	streq	r1, [r6, #0]
 800cb48:	5162      	str	r2, [r4, r5]
 800cb4a:	604b      	str	r3, [r1, #4]
 800cb4c:	4638      	mov	r0, r7
 800cb4e:	f104 060b 	add.w	r6, r4, #11
 800cb52:	f000 fb99 	bl	800d288 <__malloc_unlock>
 800cb56:	f026 0607 	bic.w	r6, r6, #7
 800cb5a:	1d23      	adds	r3, r4, #4
 800cb5c:	1af2      	subs	r2, r6, r3
 800cb5e:	d0b6      	beq.n	800cace <_malloc_r+0x22>
 800cb60:	1b9b      	subs	r3, r3, r6
 800cb62:	50a3      	str	r3, [r4, r2]
 800cb64:	e7b3      	b.n	800cace <_malloc_r+0x22>
 800cb66:	6862      	ldr	r2, [r4, #4]
 800cb68:	42a3      	cmp	r3, r4
 800cb6a:	bf0c      	ite	eq
 800cb6c:	6032      	streq	r2, [r6, #0]
 800cb6e:	605a      	strne	r2, [r3, #4]
 800cb70:	e7ec      	b.n	800cb4c <_malloc_r+0xa0>
 800cb72:	4623      	mov	r3, r4
 800cb74:	6864      	ldr	r4, [r4, #4]
 800cb76:	e7b2      	b.n	800cade <_malloc_r+0x32>
 800cb78:	4634      	mov	r4, r6
 800cb7a:	6876      	ldr	r6, [r6, #4]
 800cb7c:	e7b9      	b.n	800caf2 <_malloc_r+0x46>
 800cb7e:	230c      	movs	r3, #12
 800cb80:	4638      	mov	r0, r7
 800cb82:	603b      	str	r3, [r7, #0]
 800cb84:	f000 fb80 	bl	800d288 <__malloc_unlock>
 800cb88:	e7a1      	b.n	800cace <_malloc_r+0x22>
 800cb8a:	6025      	str	r5, [r4, #0]
 800cb8c:	e7de      	b.n	800cb4c <_malloc_r+0xa0>
 800cb8e:	bf00      	nop
 800cb90:	20001adc 	.word	0x20001adc

0800cb94 <__ssputs_r>:
 800cb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb98:	688e      	ldr	r6, [r1, #8]
 800cb9a:	4682      	mov	sl, r0
 800cb9c:	429e      	cmp	r6, r3
 800cb9e:	460c      	mov	r4, r1
 800cba0:	4690      	mov	r8, r2
 800cba2:	461f      	mov	r7, r3
 800cba4:	d838      	bhi.n	800cc18 <__ssputs_r+0x84>
 800cba6:	898a      	ldrh	r2, [r1, #12]
 800cba8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbac:	d032      	beq.n	800cc14 <__ssputs_r+0x80>
 800cbae:	6825      	ldr	r5, [r4, #0]
 800cbb0:	6909      	ldr	r1, [r1, #16]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	eba5 0901 	sub.w	r9, r5, r1
 800cbb8:	6965      	ldr	r5, [r4, #20]
 800cbba:	444b      	add	r3, r9
 800cbbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbc4:	106d      	asrs	r5, r5, #1
 800cbc6:	429d      	cmp	r5, r3
 800cbc8:	bf38      	it	cc
 800cbca:	461d      	movcc	r5, r3
 800cbcc:	0553      	lsls	r3, r2, #21
 800cbce:	d531      	bpl.n	800cc34 <__ssputs_r+0xa0>
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	f7ff ff6b 	bl	800caac <_malloc_r>
 800cbd6:	4606      	mov	r6, r0
 800cbd8:	b950      	cbnz	r0, 800cbf0 <__ssputs_r+0x5c>
 800cbda:	230c      	movs	r3, #12
 800cbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe0:	f8ca 3000 	str.w	r3, [sl]
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbea:	81a3      	strh	r3, [r4, #12]
 800cbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf0:	464a      	mov	r2, r9
 800cbf2:	6921      	ldr	r1, [r4, #16]
 800cbf4:	f7ff fa60 	bl	800c0b8 <memcpy>
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc02:	81a3      	strh	r3, [r4, #12]
 800cc04:	6126      	str	r6, [r4, #16]
 800cc06:	444e      	add	r6, r9
 800cc08:	6026      	str	r6, [r4, #0]
 800cc0a:	463e      	mov	r6, r7
 800cc0c:	6165      	str	r5, [r4, #20]
 800cc0e:	eba5 0509 	sub.w	r5, r5, r9
 800cc12:	60a5      	str	r5, [r4, #8]
 800cc14:	42be      	cmp	r6, r7
 800cc16:	d900      	bls.n	800cc1a <__ssputs_r+0x86>
 800cc18:	463e      	mov	r6, r7
 800cc1a:	4632      	mov	r2, r6
 800cc1c:	4641      	mov	r1, r8
 800cc1e:	6820      	ldr	r0, [r4, #0]
 800cc20:	f7fd ff68 	bl	800aaf4 <memmove>
 800cc24:	68a3      	ldr	r3, [r4, #8]
 800cc26:	2000      	movs	r0, #0
 800cc28:	1b9b      	subs	r3, r3, r6
 800cc2a:	60a3      	str	r3, [r4, #8]
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	4433      	add	r3, r6
 800cc30:	6023      	str	r3, [r4, #0]
 800cc32:	e7db      	b.n	800cbec <__ssputs_r+0x58>
 800cc34:	462a      	mov	r2, r5
 800cc36:	f000 fb75 	bl	800d324 <_realloc_r>
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d1e1      	bne.n	800cc04 <__ssputs_r+0x70>
 800cc40:	4650      	mov	r0, sl
 800cc42:	6921      	ldr	r1, [r4, #16]
 800cc44:	f000 fb26 	bl	800d294 <_free_r>
 800cc48:	e7c7      	b.n	800cbda <__ssputs_r+0x46>
	...

0800cc4c <_svfiprintf_r>:
 800cc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc50:	4698      	mov	r8, r3
 800cc52:	898b      	ldrh	r3, [r1, #12]
 800cc54:	4607      	mov	r7, r0
 800cc56:	061b      	lsls	r3, r3, #24
 800cc58:	460d      	mov	r5, r1
 800cc5a:	4614      	mov	r4, r2
 800cc5c:	b09d      	sub	sp, #116	; 0x74
 800cc5e:	d50e      	bpl.n	800cc7e <_svfiprintf_r+0x32>
 800cc60:	690b      	ldr	r3, [r1, #16]
 800cc62:	b963      	cbnz	r3, 800cc7e <_svfiprintf_r+0x32>
 800cc64:	2140      	movs	r1, #64	; 0x40
 800cc66:	f7ff ff21 	bl	800caac <_malloc_r>
 800cc6a:	6028      	str	r0, [r5, #0]
 800cc6c:	6128      	str	r0, [r5, #16]
 800cc6e:	b920      	cbnz	r0, 800cc7a <_svfiprintf_r+0x2e>
 800cc70:	230c      	movs	r3, #12
 800cc72:	603b      	str	r3, [r7, #0]
 800cc74:	f04f 30ff 	mov.w	r0, #4294967295
 800cc78:	e0d1      	b.n	800ce1e <_svfiprintf_r+0x1d2>
 800cc7a:	2340      	movs	r3, #64	; 0x40
 800cc7c:	616b      	str	r3, [r5, #20]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	9309      	str	r3, [sp, #36]	; 0x24
 800cc82:	2320      	movs	r3, #32
 800cc84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc88:	2330      	movs	r3, #48	; 0x30
 800cc8a:	f04f 0901 	mov.w	r9, #1
 800cc8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce38 <_svfiprintf_r+0x1ec>
 800cc96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc9a:	4623      	mov	r3, r4
 800cc9c:	469a      	mov	sl, r3
 800cc9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cca2:	b10a      	cbz	r2, 800cca8 <_svfiprintf_r+0x5c>
 800cca4:	2a25      	cmp	r2, #37	; 0x25
 800cca6:	d1f9      	bne.n	800cc9c <_svfiprintf_r+0x50>
 800cca8:	ebba 0b04 	subs.w	fp, sl, r4
 800ccac:	d00b      	beq.n	800ccc6 <_svfiprintf_r+0x7a>
 800ccae:	465b      	mov	r3, fp
 800ccb0:	4622      	mov	r2, r4
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	f7ff ff6d 	bl	800cb94 <__ssputs_r>
 800ccba:	3001      	adds	r0, #1
 800ccbc:	f000 80aa 	beq.w	800ce14 <_svfiprintf_r+0x1c8>
 800ccc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccc2:	445a      	add	r2, fp
 800ccc4:	9209      	str	r2, [sp, #36]	; 0x24
 800ccc6:	f89a 3000 	ldrb.w	r3, [sl]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f000 80a2 	beq.w	800ce14 <_svfiprintf_r+0x1c8>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccda:	f10a 0a01 	add.w	sl, sl, #1
 800ccde:	9304      	str	r3, [sp, #16]
 800cce0:	9307      	str	r3, [sp, #28]
 800cce2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cce6:	931a      	str	r3, [sp, #104]	; 0x68
 800cce8:	4654      	mov	r4, sl
 800ccea:	2205      	movs	r2, #5
 800ccec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccf0:	4851      	ldr	r0, [pc, #324]	; (800ce38 <_svfiprintf_r+0x1ec>)
 800ccf2:	f000 fab5 	bl	800d260 <memchr>
 800ccf6:	9a04      	ldr	r2, [sp, #16]
 800ccf8:	b9d8      	cbnz	r0, 800cd32 <_svfiprintf_r+0xe6>
 800ccfa:	06d0      	lsls	r0, r2, #27
 800ccfc:	bf44      	itt	mi
 800ccfe:	2320      	movmi	r3, #32
 800cd00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd04:	0711      	lsls	r1, r2, #28
 800cd06:	bf44      	itt	mi
 800cd08:	232b      	movmi	r3, #43	; 0x2b
 800cd0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd0e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd12:	2b2a      	cmp	r3, #42	; 0x2a
 800cd14:	d015      	beq.n	800cd42 <_svfiprintf_r+0xf6>
 800cd16:	4654      	mov	r4, sl
 800cd18:	2000      	movs	r0, #0
 800cd1a:	f04f 0c0a 	mov.w	ip, #10
 800cd1e:	9a07      	ldr	r2, [sp, #28]
 800cd20:	4621      	mov	r1, r4
 800cd22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd26:	3b30      	subs	r3, #48	; 0x30
 800cd28:	2b09      	cmp	r3, #9
 800cd2a:	d94e      	bls.n	800cdca <_svfiprintf_r+0x17e>
 800cd2c:	b1b0      	cbz	r0, 800cd5c <_svfiprintf_r+0x110>
 800cd2e:	9207      	str	r2, [sp, #28]
 800cd30:	e014      	b.n	800cd5c <_svfiprintf_r+0x110>
 800cd32:	eba0 0308 	sub.w	r3, r0, r8
 800cd36:	fa09 f303 	lsl.w	r3, r9, r3
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	46a2      	mov	sl, r4
 800cd3e:	9304      	str	r3, [sp, #16]
 800cd40:	e7d2      	b.n	800cce8 <_svfiprintf_r+0x9c>
 800cd42:	9b03      	ldr	r3, [sp, #12]
 800cd44:	1d19      	adds	r1, r3, #4
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	9103      	str	r1, [sp, #12]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	bfbb      	ittet	lt
 800cd4e:	425b      	neglt	r3, r3
 800cd50:	f042 0202 	orrlt.w	r2, r2, #2
 800cd54:	9307      	strge	r3, [sp, #28]
 800cd56:	9307      	strlt	r3, [sp, #28]
 800cd58:	bfb8      	it	lt
 800cd5a:	9204      	strlt	r2, [sp, #16]
 800cd5c:	7823      	ldrb	r3, [r4, #0]
 800cd5e:	2b2e      	cmp	r3, #46	; 0x2e
 800cd60:	d10c      	bne.n	800cd7c <_svfiprintf_r+0x130>
 800cd62:	7863      	ldrb	r3, [r4, #1]
 800cd64:	2b2a      	cmp	r3, #42	; 0x2a
 800cd66:	d135      	bne.n	800cdd4 <_svfiprintf_r+0x188>
 800cd68:	9b03      	ldr	r3, [sp, #12]
 800cd6a:	3402      	adds	r4, #2
 800cd6c:	1d1a      	adds	r2, r3, #4
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	9203      	str	r2, [sp, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	bfb8      	it	lt
 800cd76:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd7a:	9305      	str	r3, [sp, #20]
 800cd7c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ce3c <_svfiprintf_r+0x1f0>
 800cd80:	2203      	movs	r2, #3
 800cd82:	4650      	mov	r0, sl
 800cd84:	7821      	ldrb	r1, [r4, #0]
 800cd86:	f000 fa6b 	bl	800d260 <memchr>
 800cd8a:	b140      	cbz	r0, 800cd9e <_svfiprintf_r+0x152>
 800cd8c:	2340      	movs	r3, #64	; 0x40
 800cd8e:	eba0 000a 	sub.w	r0, r0, sl
 800cd92:	fa03 f000 	lsl.w	r0, r3, r0
 800cd96:	9b04      	ldr	r3, [sp, #16]
 800cd98:	3401      	adds	r4, #1
 800cd9a:	4303      	orrs	r3, r0
 800cd9c:	9304      	str	r3, [sp, #16]
 800cd9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda2:	2206      	movs	r2, #6
 800cda4:	4826      	ldr	r0, [pc, #152]	; (800ce40 <_svfiprintf_r+0x1f4>)
 800cda6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdaa:	f000 fa59 	bl	800d260 <memchr>
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d038      	beq.n	800ce24 <_svfiprintf_r+0x1d8>
 800cdb2:	4b24      	ldr	r3, [pc, #144]	; (800ce44 <_svfiprintf_r+0x1f8>)
 800cdb4:	bb1b      	cbnz	r3, 800cdfe <_svfiprintf_r+0x1b2>
 800cdb6:	9b03      	ldr	r3, [sp, #12]
 800cdb8:	3307      	adds	r3, #7
 800cdba:	f023 0307 	bic.w	r3, r3, #7
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	9303      	str	r3, [sp, #12]
 800cdc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc4:	4433      	add	r3, r6
 800cdc6:	9309      	str	r3, [sp, #36]	; 0x24
 800cdc8:	e767      	b.n	800cc9a <_svfiprintf_r+0x4e>
 800cdca:	460c      	mov	r4, r1
 800cdcc:	2001      	movs	r0, #1
 800cdce:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdd2:	e7a5      	b.n	800cd20 <_svfiprintf_r+0xd4>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f04f 0c0a 	mov.w	ip, #10
 800cdda:	4619      	mov	r1, r3
 800cddc:	3401      	adds	r4, #1
 800cdde:	9305      	str	r3, [sp, #20]
 800cde0:	4620      	mov	r0, r4
 800cde2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cde6:	3a30      	subs	r2, #48	; 0x30
 800cde8:	2a09      	cmp	r2, #9
 800cdea:	d903      	bls.n	800cdf4 <_svfiprintf_r+0x1a8>
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d0c5      	beq.n	800cd7c <_svfiprintf_r+0x130>
 800cdf0:	9105      	str	r1, [sp, #20]
 800cdf2:	e7c3      	b.n	800cd7c <_svfiprintf_r+0x130>
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdfc:	e7f0      	b.n	800cde0 <_svfiprintf_r+0x194>
 800cdfe:	ab03      	add	r3, sp, #12
 800ce00:	9300      	str	r3, [sp, #0]
 800ce02:	462a      	mov	r2, r5
 800ce04:	4638      	mov	r0, r7
 800ce06:	4b10      	ldr	r3, [pc, #64]	; (800ce48 <_svfiprintf_r+0x1fc>)
 800ce08:	a904      	add	r1, sp, #16
 800ce0a:	f3af 8000 	nop.w
 800ce0e:	1c42      	adds	r2, r0, #1
 800ce10:	4606      	mov	r6, r0
 800ce12:	d1d6      	bne.n	800cdc2 <_svfiprintf_r+0x176>
 800ce14:	89ab      	ldrh	r3, [r5, #12]
 800ce16:	065b      	lsls	r3, r3, #25
 800ce18:	f53f af2c 	bmi.w	800cc74 <_svfiprintf_r+0x28>
 800ce1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce1e:	b01d      	add	sp, #116	; 0x74
 800ce20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce24:	ab03      	add	r3, sp, #12
 800ce26:	9300      	str	r3, [sp, #0]
 800ce28:	462a      	mov	r2, r5
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	4b06      	ldr	r3, [pc, #24]	; (800ce48 <_svfiprintf_r+0x1fc>)
 800ce2e:	a904      	add	r1, sp, #16
 800ce30:	f000 f87c 	bl	800cf2c <_printf_i>
 800ce34:	e7eb      	b.n	800ce0e <_svfiprintf_r+0x1c2>
 800ce36:	bf00      	nop
 800ce38:	0800e324 	.word	0x0800e324
 800ce3c:	0800e32a 	.word	0x0800e32a
 800ce40:	0800e32e 	.word	0x0800e32e
 800ce44:	00000000 	.word	0x00000000
 800ce48:	0800cb95 	.word	0x0800cb95

0800ce4c <_printf_common>:
 800ce4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce50:	4616      	mov	r6, r2
 800ce52:	4699      	mov	r9, r3
 800ce54:	688a      	ldr	r2, [r1, #8]
 800ce56:	690b      	ldr	r3, [r1, #16]
 800ce58:	4607      	mov	r7, r0
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	bfb8      	it	lt
 800ce5e:	4613      	movlt	r3, r2
 800ce60:	6033      	str	r3, [r6, #0]
 800ce62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce66:	460c      	mov	r4, r1
 800ce68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce6c:	b10a      	cbz	r2, 800ce72 <_printf_common+0x26>
 800ce6e:	3301      	adds	r3, #1
 800ce70:	6033      	str	r3, [r6, #0]
 800ce72:	6823      	ldr	r3, [r4, #0]
 800ce74:	0699      	lsls	r1, r3, #26
 800ce76:	bf42      	ittt	mi
 800ce78:	6833      	ldrmi	r3, [r6, #0]
 800ce7a:	3302      	addmi	r3, #2
 800ce7c:	6033      	strmi	r3, [r6, #0]
 800ce7e:	6825      	ldr	r5, [r4, #0]
 800ce80:	f015 0506 	ands.w	r5, r5, #6
 800ce84:	d106      	bne.n	800ce94 <_printf_common+0x48>
 800ce86:	f104 0a19 	add.w	sl, r4, #25
 800ce8a:	68e3      	ldr	r3, [r4, #12]
 800ce8c:	6832      	ldr	r2, [r6, #0]
 800ce8e:	1a9b      	subs	r3, r3, r2
 800ce90:	42ab      	cmp	r3, r5
 800ce92:	dc28      	bgt.n	800cee6 <_printf_common+0x9a>
 800ce94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce98:	1e13      	subs	r3, r2, #0
 800ce9a:	6822      	ldr	r2, [r4, #0]
 800ce9c:	bf18      	it	ne
 800ce9e:	2301      	movne	r3, #1
 800cea0:	0692      	lsls	r2, r2, #26
 800cea2:	d42d      	bmi.n	800cf00 <_printf_common+0xb4>
 800cea4:	4649      	mov	r1, r9
 800cea6:	4638      	mov	r0, r7
 800cea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ceac:	47c0      	blx	r8
 800ceae:	3001      	adds	r0, #1
 800ceb0:	d020      	beq.n	800cef4 <_printf_common+0xa8>
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	68e5      	ldr	r5, [r4, #12]
 800ceb6:	f003 0306 	and.w	r3, r3, #6
 800ceba:	2b04      	cmp	r3, #4
 800cebc:	bf18      	it	ne
 800cebe:	2500      	movne	r5, #0
 800cec0:	6832      	ldr	r2, [r6, #0]
 800cec2:	f04f 0600 	mov.w	r6, #0
 800cec6:	68a3      	ldr	r3, [r4, #8]
 800cec8:	bf08      	it	eq
 800ceca:	1aad      	subeq	r5, r5, r2
 800cecc:	6922      	ldr	r2, [r4, #16]
 800cece:	bf08      	it	eq
 800ced0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ced4:	4293      	cmp	r3, r2
 800ced6:	bfc4      	itt	gt
 800ced8:	1a9b      	subgt	r3, r3, r2
 800ceda:	18ed      	addgt	r5, r5, r3
 800cedc:	341a      	adds	r4, #26
 800cede:	42b5      	cmp	r5, r6
 800cee0:	d11a      	bne.n	800cf18 <_printf_common+0xcc>
 800cee2:	2000      	movs	r0, #0
 800cee4:	e008      	b.n	800cef8 <_printf_common+0xac>
 800cee6:	2301      	movs	r3, #1
 800cee8:	4652      	mov	r2, sl
 800ceea:	4649      	mov	r1, r9
 800ceec:	4638      	mov	r0, r7
 800ceee:	47c0      	blx	r8
 800cef0:	3001      	adds	r0, #1
 800cef2:	d103      	bne.n	800cefc <_printf_common+0xb0>
 800cef4:	f04f 30ff 	mov.w	r0, #4294967295
 800cef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cefc:	3501      	adds	r5, #1
 800cefe:	e7c4      	b.n	800ce8a <_printf_common+0x3e>
 800cf00:	2030      	movs	r0, #48	; 0x30
 800cf02:	18e1      	adds	r1, r4, r3
 800cf04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf08:	1c5a      	adds	r2, r3, #1
 800cf0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf0e:	4422      	add	r2, r4
 800cf10:	3302      	adds	r3, #2
 800cf12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf16:	e7c5      	b.n	800cea4 <_printf_common+0x58>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	4622      	mov	r2, r4
 800cf1c:	4649      	mov	r1, r9
 800cf1e:	4638      	mov	r0, r7
 800cf20:	47c0      	blx	r8
 800cf22:	3001      	adds	r0, #1
 800cf24:	d0e6      	beq.n	800cef4 <_printf_common+0xa8>
 800cf26:	3601      	adds	r6, #1
 800cf28:	e7d9      	b.n	800cede <_printf_common+0x92>
	...

0800cf2c <_printf_i>:
 800cf2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf30:	7e0f      	ldrb	r7, [r1, #24]
 800cf32:	4691      	mov	r9, r2
 800cf34:	2f78      	cmp	r7, #120	; 0x78
 800cf36:	4680      	mov	r8, r0
 800cf38:	460c      	mov	r4, r1
 800cf3a:	469a      	mov	sl, r3
 800cf3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf42:	d807      	bhi.n	800cf54 <_printf_i+0x28>
 800cf44:	2f62      	cmp	r7, #98	; 0x62
 800cf46:	d80a      	bhi.n	800cf5e <_printf_i+0x32>
 800cf48:	2f00      	cmp	r7, #0
 800cf4a:	f000 80d9 	beq.w	800d100 <_printf_i+0x1d4>
 800cf4e:	2f58      	cmp	r7, #88	; 0x58
 800cf50:	f000 80a4 	beq.w	800d09c <_printf_i+0x170>
 800cf54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf5c:	e03a      	b.n	800cfd4 <_printf_i+0xa8>
 800cf5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf62:	2b15      	cmp	r3, #21
 800cf64:	d8f6      	bhi.n	800cf54 <_printf_i+0x28>
 800cf66:	a101      	add	r1, pc, #4	; (adr r1, 800cf6c <_printf_i+0x40>)
 800cf68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf6c:	0800cfc5 	.word	0x0800cfc5
 800cf70:	0800cfd9 	.word	0x0800cfd9
 800cf74:	0800cf55 	.word	0x0800cf55
 800cf78:	0800cf55 	.word	0x0800cf55
 800cf7c:	0800cf55 	.word	0x0800cf55
 800cf80:	0800cf55 	.word	0x0800cf55
 800cf84:	0800cfd9 	.word	0x0800cfd9
 800cf88:	0800cf55 	.word	0x0800cf55
 800cf8c:	0800cf55 	.word	0x0800cf55
 800cf90:	0800cf55 	.word	0x0800cf55
 800cf94:	0800cf55 	.word	0x0800cf55
 800cf98:	0800d0e7 	.word	0x0800d0e7
 800cf9c:	0800d009 	.word	0x0800d009
 800cfa0:	0800d0c9 	.word	0x0800d0c9
 800cfa4:	0800cf55 	.word	0x0800cf55
 800cfa8:	0800cf55 	.word	0x0800cf55
 800cfac:	0800d109 	.word	0x0800d109
 800cfb0:	0800cf55 	.word	0x0800cf55
 800cfb4:	0800d009 	.word	0x0800d009
 800cfb8:	0800cf55 	.word	0x0800cf55
 800cfbc:	0800cf55 	.word	0x0800cf55
 800cfc0:	0800d0d1 	.word	0x0800d0d1
 800cfc4:	682b      	ldr	r3, [r5, #0]
 800cfc6:	1d1a      	adds	r2, r3, #4
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	602a      	str	r2, [r5, #0]
 800cfcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e0a4      	b.n	800d122 <_printf_i+0x1f6>
 800cfd8:	6820      	ldr	r0, [r4, #0]
 800cfda:	6829      	ldr	r1, [r5, #0]
 800cfdc:	0606      	lsls	r6, r0, #24
 800cfde:	f101 0304 	add.w	r3, r1, #4
 800cfe2:	d50a      	bpl.n	800cffa <_printf_i+0xce>
 800cfe4:	680e      	ldr	r6, [r1, #0]
 800cfe6:	602b      	str	r3, [r5, #0]
 800cfe8:	2e00      	cmp	r6, #0
 800cfea:	da03      	bge.n	800cff4 <_printf_i+0xc8>
 800cfec:	232d      	movs	r3, #45	; 0x2d
 800cfee:	4276      	negs	r6, r6
 800cff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cff4:	230a      	movs	r3, #10
 800cff6:	485e      	ldr	r0, [pc, #376]	; (800d170 <_printf_i+0x244>)
 800cff8:	e019      	b.n	800d02e <_printf_i+0x102>
 800cffa:	680e      	ldr	r6, [r1, #0]
 800cffc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d000:	602b      	str	r3, [r5, #0]
 800d002:	bf18      	it	ne
 800d004:	b236      	sxthne	r6, r6
 800d006:	e7ef      	b.n	800cfe8 <_printf_i+0xbc>
 800d008:	682b      	ldr	r3, [r5, #0]
 800d00a:	6820      	ldr	r0, [r4, #0]
 800d00c:	1d19      	adds	r1, r3, #4
 800d00e:	6029      	str	r1, [r5, #0]
 800d010:	0601      	lsls	r1, r0, #24
 800d012:	d501      	bpl.n	800d018 <_printf_i+0xec>
 800d014:	681e      	ldr	r6, [r3, #0]
 800d016:	e002      	b.n	800d01e <_printf_i+0xf2>
 800d018:	0646      	lsls	r6, r0, #25
 800d01a:	d5fb      	bpl.n	800d014 <_printf_i+0xe8>
 800d01c:	881e      	ldrh	r6, [r3, #0]
 800d01e:	2f6f      	cmp	r7, #111	; 0x6f
 800d020:	bf0c      	ite	eq
 800d022:	2308      	moveq	r3, #8
 800d024:	230a      	movne	r3, #10
 800d026:	4852      	ldr	r0, [pc, #328]	; (800d170 <_printf_i+0x244>)
 800d028:	2100      	movs	r1, #0
 800d02a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d02e:	6865      	ldr	r5, [r4, #4]
 800d030:	2d00      	cmp	r5, #0
 800d032:	bfa8      	it	ge
 800d034:	6821      	ldrge	r1, [r4, #0]
 800d036:	60a5      	str	r5, [r4, #8]
 800d038:	bfa4      	itt	ge
 800d03a:	f021 0104 	bicge.w	r1, r1, #4
 800d03e:	6021      	strge	r1, [r4, #0]
 800d040:	b90e      	cbnz	r6, 800d046 <_printf_i+0x11a>
 800d042:	2d00      	cmp	r5, #0
 800d044:	d04d      	beq.n	800d0e2 <_printf_i+0x1b6>
 800d046:	4615      	mov	r5, r2
 800d048:	fbb6 f1f3 	udiv	r1, r6, r3
 800d04c:	fb03 6711 	mls	r7, r3, r1, r6
 800d050:	5dc7      	ldrb	r7, [r0, r7]
 800d052:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d056:	4637      	mov	r7, r6
 800d058:	42bb      	cmp	r3, r7
 800d05a:	460e      	mov	r6, r1
 800d05c:	d9f4      	bls.n	800d048 <_printf_i+0x11c>
 800d05e:	2b08      	cmp	r3, #8
 800d060:	d10b      	bne.n	800d07a <_printf_i+0x14e>
 800d062:	6823      	ldr	r3, [r4, #0]
 800d064:	07de      	lsls	r6, r3, #31
 800d066:	d508      	bpl.n	800d07a <_printf_i+0x14e>
 800d068:	6923      	ldr	r3, [r4, #16]
 800d06a:	6861      	ldr	r1, [r4, #4]
 800d06c:	4299      	cmp	r1, r3
 800d06e:	bfde      	ittt	le
 800d070:	2330      	movle	r3, #48	; 0x30
 800d072:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d076:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d07a:	1b52      	subs	r2, r2, r5
 800d07c:	6122      	str	r2, [r4, #16]
 800d07e:	464b      	mov	r3, r9
 800d080:	4621      	mov	r1, r4
 800d082:	4640      	mov	r0, r8
 800d084:	f8cd a000 	str.w	sl, [sp]
 800d088:	aa03      	add	r2, sp, #12
 800d08a:	f7ff fedf 	bl	800ce4c <_printf_common>
 800d08e:	3001      	adds	r0, #1
 800d090:	d14c      	bne.n	800d12c <_printf_i+0x200>
 800d092:	f04f 30ff 	mov.w	r0, #4294967295
 800d096:	b004      	add	sp, #16
 800d098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d09c:	4834      	ldr	r0, [pc, #208]	; (800d170 <_printf_i+0x244>)
 800d09e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d0a2:	6829      	ldr	r1, [r5, #0]
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	f851 6b04 	ldr.w	r6, [r1], #4
 800d0aa:	6029      	str	r1, [r5, #0]
 800d0ac:	061d      	lsls	r5, r3, #24
 800d0ae:	d514      	bpl.n	800d0da <_printf_i+0x1ae>
 800d0b0:	07df      	lsls	r7, r3, #31
 800d0b2:	bf44      	itt	mi
 800d0b4:	f043 0320 	orrmi.w	r3, r3, #32
 800d0b8:	6023      	strmi	r3, [r4, #0]
 800d0ba:	b91e      	cbnz	r6, 800d0c4 <_printf_i+0x198>
 800d0bc:	6823      	ldr	r3, [r4, #0]
 800d0be:	f023 0320 	bic.w	r3, r3, #32
 800d0c2:	6023      	str	r3, [r4, #0]
 800d0c4:	2310      	movs	r3, #16
 800d0c6:	e7af      	b.n	800d028 <_printf_i+0xfc>
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	f043 0320 	orr.w	r3, r3, #32
 800d0ce:	6023      	str	r3, [r4, #0]
 800d0d0:	2378      	movs	r3, #120	; 0x78
 800d0d2:	4828      	ldr	r0, [pc, #160]	; (800d174 <_printf_i+0x248>)
 800d0d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d0d8:	e7e3      	b.n	800d0a2 <_printf_i+0x176>
 800d0da:	0659      	lsls	r1, r3, #25
 800d0dc:	bf48      	it	mi
 800d0de:	b2b6      	uxthmi	r6, r6
 800d0e0:	e7e6      	b.n	800d0b0 <_printf_i+0x184>
 800d0e2:	4615      	mov	r5, r2
 800d0e4:	e7bb      	b.n	800d05e <_printf_i+0x132>
 800d0e6:	682b      	ldr	r3, [r5, #0]
 800d0e8:	6826      	ldr	r6, [r4, #0]
 800d0ea:	1d18      	adds	r0, r3, #4
 800d0ec:	6961      	ldr	r1, [r4, #20]
 800d0ee:	6028      	str	r0, [r5, #0]
 800d0f0:	0635      	lsls	r5, r6, #24
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	d501      	bpl.n	800d0fa <_printf_i+0x1ce>
 800d0f6:	6019      	str	r1, [r3, #0]
 800d0f8:	e002      	b.n	800d100 <_printf_i+0x1d4>
 800d0fa:	0670      	lsls	r0, r6, #25
 800d0fc:	d5fb      	bpl.n	800d0f6 <_printf_i+0x1ca>
 800d0fe:	8019      	strh	r1, [r3, #0]
 800d100:	2300      	movs	r3, #0
 800d102:	4615      	mov	r5, r2
 800d104:	6123      	str	r3, [r4, #16]
 800d106:	e7ba      	b.n	800d07e <_printf_i+0x152>
 800d108:	682b      	ldr	r3, [r5, #0]
 800d10a:	2100      	movs	r1, #0
 800d10c:	1d1a      	adds	r2, r3, #4
 800d10e:	602a      	str	r2, [r5, #0]
 800d110:	681d      	ldr	r5, [r3, #0]
 800d112:	6862      	ldr	r2, [r4, #4]
 800d114:	4628      	mov	r0, r5
 800d116:	f000 f8a3 	bl	800d260 <memchr>
 800d11a:	b108      	cbz	r0, 800d120 <_printf_i+0x1f4>
 800d11c:	1b40      	subs	r0, r0, r5
 800d11e:	6060      	str	r0, [r4, #4]
 800d120:	6863      	ldr	r3, [r4, #4]
 800d122:	6123      	str	r3, [r4, #16]
 800d124:	2300      	movs	r3, #0
 800d126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d12a:	e7a8      	b.n	800d07e <_printf_i+0x152>
 800d12c:	462a      	mov	r2, r5
 800d12e:	4649      	mov	r1, r9
 800d130:	4640      	mov	r0, r8
 800d132:	6923      	ldr	r3, [r4, #16]
 800d134:	47d0      	blx	sl
 800d136:	3001      	adds	r0, #1
 800d138:	d0ab      	beq.n	800d092 <_printf_i+0x166>
 800d13a:	6823      	ldr	r3, [r4, #0]
 800d13c:	079b      	lsls	r3, r3, #30
 800d13e:	d413      	bmi.n	800d168 <_printf_i+0x23c>
 800d140:	68e0      	ldr	r0, [r4, #12]
 800d142:	9b03      	ldr	r3, [sp, #12]
 800d144:	4298      	cmp	r0, r3
 800d146:	bfb8      	it	lt
 800d148:	4618      	movlt	r0, r3
 800d14a:	e7a4      	b.n	800d096 <_printf_i+0x16a>
 800d14c:	2301      	movs	r3, #1
 800d14e:	4632      	mov	r2, r6
 800d150:	4649      	mov	r1, r9
 800d152:	4640      	mov	r0, r8
 800d154:	47d0      	blx	sl
 800d156:	3001      	adds	r0, #1
 800d158:	d09b      	beq.n	800d092 <_printf_i+0x166>
 800d15a:	3501      	adds	r5, #1
 800d15c:	68e3      	ldr	r3, [r4, #12]
 800d15e:	9903      	ldr	r1, [sp, #12]
 800d160:	1a5b      	subs	r3, r3, r1
 800d162:	42ab      	cmp	r3, r5
 800d164:	dcf2      	bgt.n	800d14c <_printf_i+0x220>
 800d166:	e7eb      	b.n	800d140 <_printf_i+0x214>
 800d168:	2500      	movs	r5, #0
 800d16a:	f104 0619 	add.w	r6, r4, #25
 800d16e:	e7f5      	b.n	800d15c <_printf_i+0x230>
 800d170:	0800e335 	.word	0x0800e335
 800d174:	0800e346 	.word	0x0800e346

0800d178 <nan>:
 800d178:	2000      	movs	r0, #0
 800d17a:	4901      	ldr	r1, [pc, #4]	; (800d180 <nan+0x8>)
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	7ff80000 	.word	0x7ff80000

0800d184 <_sbrk_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	2300      	movs	r3, #0
 800d188:	4d05      	ldr	r5, [pc, #20]	; (800d1a0 <_sbrk_r+0x1c>)
 800d18a:	4604      	mov	r4, r0
 800d18c:	4608      	mov	r0, r1
 800d18e:	602b      	str	r3, [r5, #0]
 800d190:	f7f8 fed8 	bl	8005f44 <_sbrk>
 800d194:	1c43      	adds	r3, r0, #1
 800d196:	d102      	bne.n	800d19e <_sbrk_r+0x1a>
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	b103      	cbz	r3, 800d19e <_sbrk_r+0x1a>
 800d19c:	6023      	str	r3, [r4, #0]
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	20001ae4 	.word	0x20001ae4

0800d1a4 <nanf>:
 800d1a4:	4800      	ldr	r0, [pc, #0]	; (800d1a8 <nanf+0x4>)
 800d1a6:	4770      	bx	lr
 800d1a8:	7fc00000 	.word	0x7fc00000

0800d1ac <strncmp>:
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	b510      	push	{r4, lr}
 800d1b0:	b172      	cbz	r2, 800d1d0 <strncmp+0x24>
 800d1b2:	3901      	subs	r1, #1
 800d1b4:	1884      	adds	r4, r0, r2
 800d1b6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d1ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d1be:	4290      	cmp	r0, r2
 800d1c0:	d101      	bne.n	800d1c6 <strncmp+0x1a>
 800d1c2:	42a3      	cmp	r3, r4
 800d1c4:	d101      	bne.n	800d1ca <strncmp+0x1e>
 800d1c6:	1a80      	subs	r0, r0, r2
 800d1c8:	bd10      	pop	{r4, pc}
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	d1f3      	bne.n	800d1b6 <strncmp+0xa>
 800d1ce:	e7fa      	b.n	800d1c6 <strncmp+0x1a>
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	e7f9      	b.n	800d1c8 <strncmp+0x1c>

0800d1d4 <__ascii_wctomb>:
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	4608      	mov	r0, r1
 800d1d8:	b141      	cbz	r1, 800d1ec <__ascii_wctomb+0x18>
 800d1da:	2aff      	cmp	r2, #255	; 0xff
 800d1dc:	d904      	bls.n	800d1e8 <__ascii_wctomb+0x14>
 800d1de:	228a      	movs	r2, #138	; 0x8a
 800d1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e4:	601a      	str	r2, [r3, #0]
 800d1e6:	4770      	bx	lr
 800d1e8:	2001      	movs	r0, #1
 800d1ea:	700a      	strb	r2, [r1, #0]
 800d1ec:	4770      	bx	lr
	...

0800d1f0 <__assert_func>:
 800d1f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1f2:	4614      	mov	r4, r2
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	4b09      	ldr	r3, [pc, #36]	; (800d21c <__assert_func+0x2c>)
 800d1f8:	4605      	mov	r5, r0
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68d8      	ldr	r0, [r3, #12]
 800d1fe:	b14c      	cbz	r4, 800d214 <__assert_func+0x24>
 800d200:	4b07      	ldr	r3, [pc, #28]	; (800d220 <__assert_func+0x30>)
 800d202:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d206:	9100      	str	r1, [sp, #0]
 800d208:	462b      	mov	r3, r5
 800d20a:	4906      	ldr	r1, [pc, #24]	; (800d224 <__assert_func+0x34>)
 800d20c:	f000 f80e 	bl	800d22c <fiprintf>
 800d210:	f000 face 	bl	800d7b0 <abort>
 800d214:	4b04      	ldr	r3, [pc, #16]	; (800d228 <__assert_func+0x38>)
 800d216:	461c      	mov	r4, r3
 800d218:	e7f3      	b.n	800d202 <__assert_func+0x12>
 800d21a:	bf00      	nop
 800d21c:	200001a0 	.word	0x200001a0
 800d220:	0800e357 	.word	0x0800e357
 800d224:	0800e364 	.word	0x0800e364
 800d228:	0800debf 	.word	0x0800debf

0800d22c <fiprintf>:
 800d22c:	b40e      	push	{r1, r2, r3}
 800d22e:	b503      	push	{r0, r1, lr}
 800d230:	4601      	mov	r1, r0
 800d232:	ab03      	add	r3, sp, #12
 800d234:	4805      	ldr	r0, [pc, #20]	; (800d24c <fiprintf+0x20>)
 800d236:	f853 2b04 	ldr.w	r2, [r3], #4
 800d23a:	6800      	ldr	r0, [r0, #0]
 800d23c:	9301      	str	r3, [sp, #4]
 800d23e:	f000 f8c7 	bl	800d3d0 <_vfiprintf_r>
 800d242:	b002      	add	sp, #8
 800d244:	f85d eb04 	ldr.w	lr, [sp], #4
 800d248:	b003      	add	sp, #12
 800d24a:	4770      	bx	lr
 800d24c:	200001a0 	.word	0x200001a0

0800d250 <malloc>:
 800d250:	4b02      	ldr	r3, [pc, #8]	; (800d25c <malloc+0xc>)
 800d252:	4601      	mov	r1, r0
 800d254:	6818      	ldr	r0, [r3, #0]
 800d256:	f7ff bc29 	b.w	800caac <_malloc_r>
 800d25a:	bf00      	nop
 800d25c:	200001a0 	.word	0x200001a0

0800d260 <memchr>:
 800d260:	4603      	mov	r3, r0
 800d262:	b510      	push	{r4, lr}
 800d264:	b2c9      	uxtb	r1, r1
 800d266:	4402      	add	r2, r0
 800d268:	4293      	cmp	r3, r2
 800d26a:	4618      	mov	r0, r3
 800d26c:	d101      	bne.n	800d272 <memchr+0x12>
 800d26e:	2000      	movs	r0, #0
 800d270:	e003      	b.n	800d27a <memchr+0x1a>
 800d272:	7804      	ldrb	r4, [r0, #0]
 800d274:	3301      	adds	r3, #1
 800d276:	428c      	cmp	r4, r1
 800d278:	d1f6      	bne.n	800d268 <memchr+0x8>
 800d27a:	bd10      	pop	{r4, pc}

0800d27c <__malloc_lock>:
 800d27c:	4801      	ldr	r0, [pc, #4]	; (800d284 <__malloc_lock+0x8>)
 800d27e:	f000 bc53 	b.w	800db28 <__retarget_lock_acquire_recursive>
 800d282:	bf00      	nop
 800d284:	20001ae8 	.word	0x20001ae8

0800d288 <__malloc_unlock>:
 800d288:	4801      	ldr	r0, [pc, #4]	; (800d290 <__malloc_unlock+0x8>)
 800d28a:	f000 bc4e 	b.w	800db2a <__retarget_lock_release_recursive>
 800d28e:	bf00      	nop
 800d290:	20001ae8 	.word	0x20001ae8

0800d294 <_free_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4605      	mov	r5, r0
 800d298:	2900      	cmp	r1, #0
 800d29a:	d040      	beq.n	800d31e <_free_r+0x8a>
 800d29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2a0:	1f0c      	subs	r4, r1, #4
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	bfb8      	it	lt
 800d2a6:	18e4      	addlt	r4, r4, r3
 800d2a8:	f7ff ffe8 	bl	800d27c <__malloc_lock>
 800d2ac:	4a1c      	ldr	r2, [pc, #112]	; (800d320 <_free_r+0x8c>)
 800d2ae:	6813      	ldr	r3, [r2, #0]
 800d2b0:	b933      	cbnz	r3, 800d2c0 <_free_r+0x2c>
 800d2b2:	6063      	str	r3, [r4, #4]
 800d2b4:	6014      	str	r4, [r2, #0]
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2bc:	f7ff bfe4 	b.w	800d288 <__malloc_unlock>
 800d2c0:	42a3      	cmp	r3, r4
 800d2c2:	d908      	bls.n	800d2d6 <_free_r+0x42>
 800d2c4:	6820      	ldr	r0, [r4, #0]
 800d2c6:	1821      	adds	r1, r4, r0
 800d2c8:	428b      	cmp	r3, r1
 800d2ca:	bf01      	itttt	eq
 800d2cc:	6819      	ldreq	r1, [r3, #0]
 800d2ce:	685b      	ldreq	r3, [r3, #4]
 800d2d0:	1809      	addeq	r1, r1, r0
 800d2d2:	6021      	streq	r1, [r4, #0]
 800d2d4:	e7ed      	b.n	800d2b2 <_free_r+0x1e>
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	b10b      	cbz	r3, 800d2e0 <_free_r+0x4c>
 800d2dc:	42a3      	cmp	r3, r4
 800d2de:	d9fa      	bls.n	800d2d6 <_free_r+0x42>
 800d2e0:	6811      	ldr	r1, [r2, #0]
 800d2e2:	1850      	adds	r0, r2, r1
 800d2e4:	42a0      	cmp	r0, r4
 800d2e6:	d10b      	bne.n	800d300 <_free_r+0x6c>
 800d2e8:	6820      	ldr	r0, [r4, #0]
 800d2ea:	4401      	add	r1, r0
 800d2ec:	1850      	adds	r0, r2, r1
 800d2ee:	4283      	cmp	r3, r0
 800d2f0:	6011      	str	r1, [r2, #0]
 800d2f2:	d1e0      	bne.n	800d2b6 <_free_r+0x22>
 800d2f4:	6818      	ldr	r0, [r3, #0]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	4401      	add	r1, r0
 800d2fa:	6011      	str	r1, [r2, #0]
 800d2fc:	6053      	str	r3, [r2, #4]
 800d2fe:	e7da      	b.n	800d2b6 <_free_r+0x22>
 800d300:	d902      	bls.n	800d308 <_free_r+0x74>
 800d302:	230c      	movs	r3, #12
 800d304:	602b      	str	r3, [r5, #0]
 800d306:	e7d6      	b.n	800d2b6 <_free_r+0x22>
 800d308:	6820      	ldr	r0, [r4, #0]
 800d30a:	1821      	adds	r1, r4, r0
 800d30c:	428b      	cmp	r3, r1
 800d30e:	bf01      	itttt	eq
 800d310:	6819      	ldreq	r1, [r3, #0]
 800d312:	685b      	ldreq	r3, [r3, #4]
 800d314:	1809      	addeq	r1, r1, r0
 800d316:	6021      	streq	r1, [r4, #0]
 800d318:	6063      	str	r3, [r4, #4]
 800d31a:	6054      	str	r4, [r2, #4]
 800d31c:	e7cb      	b.n	800d2b6 <_free_r+0x22>
 800d31e:	bd38      	pop	{r3, r4, r5, pc}
 800d320:	20001adc 	.word	0x20001adc

0800d324 <_realloc_r>:
 800d324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d328:	4680      	mov	r8, r0
 800d32a:	4614      	mov	r4, r2
 800d32c:	460e      	mov	r6, r1
 800d32e:	b921      	cbnz	r1, 800d33a <_realloc_r+0x16>
 800d330:	4611      	mov	r1, r2
 800d332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d336:	f7ff bbb9 	b.w	800caac <_malloc_r>
 800d33a:	b92a      	cbnz	r2, 800d348 <_realloc_r+0x24>
 800d33c:	f7ff ffaa 	bl	800d294 <_free_r>
 800d340:	4625      	mov	r5, r4
 800d342:	4628      	mov	r0, r5
 800d344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d348:	f000 fc56 	bl	800dbf8 <_malloc_usable_size_r>
 800d34c:	4284      	cmp	r4, r0
 800d34e:	4607      	mov	r7, r0
 800d350:	d802      	bhi.n	800d358 <_realloc_r+0x34>
 800d352:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d356:	d812      	bhi.n	800d37e <_realloc_r+0x5a>
 800d358:	4621      	mov	r1, r4
 800d35a:	4640      	mov	r0, r8
 800d35c:	f7ff fba6 	bl	800caac <_malloc_r>
 800d360:	4605      	mov	r5, r0
 800d362:	2800      	cmp	r0, #0
 800d364:	d0ed      	beq.n	800d342 <_realloc_r+0x1e>
 800d366:	42bc      	cmp	r4, r7
 800d368:	4622      	mov	r2, r4
 800d36a:	4631      	mov	r1, r6
 800d36c:	bf28      	it	cs
 800d36e:	463a      	movcs	r2, r7
 800d370:	f7fe fea2 	bl	800c0b8 <memcpy>
 800d374:	4631      	mov	r1, r6
 800d376:	4640      	mov	r0, r8
 800d378:	f7ff ff8c 	bl	800d294 <_free_r>
 800d37c:	e7e1      	b.n	800d342 <_realloc_r+0x1e>
 800d37e:	4635      	mov	r5, r6
 800d380:	e7df      	b.n	800d342 <_realloc_r+0x1e>

0800d382 <__sfputc_r>:
 800d382:	6893      	ldr	r3, [r2, #8]
 800d384:	b410      	push	{r4}
 800d386:	3b01      	subs	r3, #1
 800d388:	2b00      	cmp	r3, #0
 800d38a:	6093      	str	r3, [r2, #8]
 800d38c:	da07      	bge.n	800d39e <__sfputc_r+0x1c>
 800d38e:	6994      	ldr	r4, [r2, #24]
 800d390:	42a3      	cmp	r3, r4
 800d392:	db01      	blt.n	800d398 <__sfputc_r+0x16>
 800d394:	290a      	cmp	r1, #10
 800d396:	d102      	bne.n	800d39e <__sfputc_r+0x1c>
 800d398:	bc10      	pop	{r4}
 800d39a:	f000 b949 	b.w	800d630 <__swbuf_r>
 800d39e:	6813      	ldr	r3, [r2, #0]
 800d3a0:	1c58      	adds	r0, r3, #1
 800d3a2:	6010      	str	r0, [r2, #0]
 800d3a4:	7019      	strb	r1, [r3, #0]
 800d3a6:	4608      	mov	r0, r1
 800d3a8:	bc10      	pop	{r4}
 800d3aa:	4770      	bx	lr

0800d3ac <__sfputs_r>:
 800d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	460f      	mov	r7, r1
 800d3b2:	4614      	mov	r4, r2
 800d3b4:	18d5      	adds	r5, r2, r3
 800d3b6:	42ac      	cmp	r4, r5
 800d3b8:	d101      	bne.n	800d3be <__sfputs_r+0x12>
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	e007      	b.n	800d3ce <__sfputs_r+0x22>
 800d3be:	463a      	mov	r2, r7
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c6:	f7ff ffdc 	bl	800d382 <__sfputc_r>
 800d3ca:	1c43      	adds	r3, r0, #1
 800d3cc:	d1f3      	bne.n	800d3b6 <__sfputs_r+0xa>
 800d3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d3d0 <_vfiprintf_r>:
 800d3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	4614      	mov	r4, r2
 800d3d8:	4698      	mov	r8, r3
 800d3da:	4606      	mov	r6, r0
 800d3dc:	b09d      	sub	sp, #116	; 0x74
 800d3de:	b118      	cbz	r0, 800d3e8 <_vfiprintf_r+0x18>
 800d3e0:	6983      	ldr	r3, [r0, #24]
 800d3e2:	b90b      	cbnz	r3, 800d3e8 <_vfiprintf_r+0x18>
 800d3e4:	f000 fb02 	bl	800d9ec <__sinit>
 800d3e8:	4b89      	ldr	r3, [pc, #548]	; (800d610 <_vfiprintf_r+0x240>)
 800d3ea:	429d      	cmp	r5, r3
 800d3ec:	d11b      	bne.n	800d426 <_vfiprintf_r+0x56>
 800d3ee:	6875      	ldr	r5, [r6, #4]
 800d3f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3f2:	07d9      	lsls	r1, r3, #31
 800d3f4:	d405      	bmi.n	800d402 <_vfiprintf_r+0x32>
 800d3f6:	89ab      	ldrh	r3, [r5, #12]
 800d3f8:	059a      	lsls	r2, r3, #22
 800d3fa:	d402      	bmi.n	800d402 <_vfiprintf_r+0x32>
 800d3fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3fe:	f000 fb93 	bl	800db28 <__retarget_lock_acquire_recursive>
 800d402:	89ab      	ldrh	r3, [r5, #12]
 800d404:	071b      	lsls	r3, r3, #28
 800d406:	d501      	bpl.n	800d40c <_vfiprintf_r+0x3c>
 800d408:	692b      	ldr	r3, [r5, #16]
 800d40a:	b9eb      	cbnz	r3, 800d448 <_vfiprintf_r+0x78>
 800d40c:	4629      	mov	r1, r5
 800d40e:	4630      	mov	r0, r6
 800d410:	f000 f960 	bl	800d6d4 <__swsetup_r>
 800d414:	b1c0      	cbz	r0, 800d448 <_vfiprintf_r+0x78>
 800d416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d418:	07dc      	lsls	r4, r3, #31
 800d41a:	d50e      	bpl.n	800d43a <_vfiprintf_r+0x6a>
 800d41c:	f04f 30ff 	mov.w	r0, #4294967295
 800d420:	b01d      	add	sp, #116	; 0x74
 800d422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d426:	4b7b      	ldr	r3, [pc, #492]	; (800d614 <_vfiprintf_r+0x244>)
 800d428:	429d      	cmp	r5, r3
 800d42a:	d101      	bne.n	800d430 <_vfiprintf_r+0x60>
 800d42c:	68b5      	ldr	r5, [r6, #8]
 800d42e:	e7df      	b.n	800d3f0 <_vfiprintf_r+0x20>
 800d430:	4b79      	ldr	r3, [pc, #484]	; (800d618 <_vfiprintf_r+0x248>)
 800d432:	429d      	cmp	r5, r3
 800d434:	bf08      	it	eq
 800d436:	68f5      	ldreq	r5, [r6, #12]
 800d438:	e7da      	b.n	800d3f0 <_vfiprintf_r+0x20>
 800d43a:	89ab      	ldrh	r3, [r5, #12]
 800d43c:	0598      	lsls	r0, r3, #22
 800d43e:	d4ed      	bmi.n	800d41c <_vfiprintf_r+0x4c>
 800d440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d442:	f000 fb72 	bl	800db2a <__retarget_lock_release_recursive>
 800d446:	e7e9      	b.n	800d41c <_vfiprintf_r+0x4c>
 800d448:	2300      	movs	r3, #0
 800d44a:	9309      	str	r3, [sp, #36]	; 0x24
 800d44c:	2320      	movs	r3, #32
 800d44e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d452:	2330      	movs	r3, #48	; 0x30
 800d454:	f04f 0901 	mov.w	r9, #1
 800d458:	f8cd 800c 	str.w	r8, [sp, #12]
 800d45c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d61c <_vfiprintf_r+0x24c>
 800d460:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d464:	4623      	mov	r3, r4
 800d466:	469a      	mov	sl, r3
 800d468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d46c:	b10a      	cbz	r2, 800d472 <_vfiprintf_r+0xa2>
 800d46e:	2a25      	cmp	r2, #37	; 0x25
 800d470:	d1f9      	bne.n	800d466 <_vfiprintf_r+0x96>
 800d472:	ebba 0b04 	subs.w	fp, sl, r4
 800d476:	d00b      	beq.n	800d490 <_vfiprintf_r+0xc0>
 800d478:	465b      	mov	r3, fp
 800d47a:	4622      	mov	r2, r4
 800d47c:	4629      	mov	r1, r5
 800d47e:	4630      	mov	r0, r6
 800d480:	f7ff ff94 	bl	800d3ac <__sfputs_r>
 800d484:	3001      	adds	r0, #1
 800d486:	f000 80aa 	beq.w	800d5de <_vfiprintf_r+0x20e>
 800d48a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d48c:	445a      	add	r2, fp
 800d48e:	9209      	str	r2, [sp, #36]	; 0x24
 800d490:	f89a 3000 	ldrb.w	r3, [sl]
 800d494:	2b00      	cmp	r3, #0
 800d496:	f000 80a2 	beq.w	800d5de <_vfiprintf_r+0x20e>
 800d49a:	2300      	movs	r3, #0
 800d49c:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4a4:	f10a 0a01 	add.w	sl, sl, #1
 800d4a8:	9304      	str	r3, [sp, #16]
 800d4aa:	9307      	str	r3, [sp, #28]
 800d4ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4b0:	931a      	str	r3, [sp, #104]	; 0x68
 800d4b2:	4654      	mov	r4, sl
 800d4b4:	2205      	movs	r2, #5
 800d4b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ba:	4858      	ldr	r0, [pc, #352]	; (800d61c <_vfiprintf_r+0x24c>)
 800d4bc:	f7ff fed0 	bl	800d260 <memchr>
 800d4c0:	9a04      	ldr	r2, [sp, #16]
 800d4c2:	b9d8      	cbnz	r0, 800d4fc <_vfiprintf_r+0x12c>
 800d4c4:	06d1      	lsls	r1, r2, #27
 800d4c6:	bf44      	itt	mi
 800d4c8:	2320      	movmi	r3, #32
 800d4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ce:	0713      	lsls	r3, r2, #28
 800d4d0:	bf44      	itt	mi
 800d4d2:	232b      	movmi	r3, #43	; 0x2b
 800d4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d4dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d4de:	d015      	beq.n	800d50c <_vfiprintf_r+0x13c>
 800d4e0:	4654      	mov	r4, sl
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	f04f 0c0a 	mov.w	ip, #10
 800d4e8:	9a07      	ldr	r2, [sp, #28]
 800d4ea:	4621      	mov	r1, r4
 800d4ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4f0:	3b30      	subs	r3, #48	; 0x30
 800d4f2:	2b09      	cmp	r3, #9
 800d4f4:	d94e      	bls.n	800d594 <_vfiprintf_r+0x1c4>
 800d4f6:	b1b0      	cbz	r0, 800d526 <_vfiprintf_r+0x156>
 800d4f8:	9207      	str	r2, [sp, #28]
 800d4fa:	e014      	b.n	800d526 <_vfiprintf_r+0x156>
 800d4fc:	eba0 0308 	sub.w	r3, r0, r8
 800d500:	fa09 f303 	lsl.w	r3, r9, r3
 800d504:	4313      	orrs	r3, r2
 800d506:	46a2      	mov	sl, r4
 800d508:	9304      	str	r3, [sp, #16]
 800d50a:	e7d2      	b.n	800d4b2 <_vfiprintf_r+0xe2>
 800d50c:	9b03      	ldr	r3, [sp, #12]
 800d50e:	1d19      	adds	r1, r3, #4
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	9103      	str	r1, [sp, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	bfbb      	ittet	lt
 800d518:	425b      	neglt	r3, r3
 800d51a:	f042 0202 	orrlt.w	r2, r2, #2
 800d51e:	9307      	strge	r3, [sp, #28]
 800d520:	9307      	strlt	r3, [sp, #28]
 800d522:	bfb8      	it	lt
 800d524:	9204      	strlt	r2, [sp, #16]
 800d526:	7823      	ldrb	r3, [r4, #0]
 800d528:	2b2e      	cmp	r3, #46	; 0x2e
 800d52a:	d10c      	bne.n	800d546 <_vfiprintf_r+0x176>
 800d52c:	7863      	ldrb	r3, [r4, #1]
 800d52e:	2b2a      	cmp	r3, #42	; 0x2a
 800d530:	d135      	bne.n	800d59e <_vfiprintf_r+0x1ce>
 800d532:	9b03      	ldr	r3, [sp, #12]
 800d534:	3402      	adds	r4, #2
 800d536:	1d1a      	adds	r2, r3, #4
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	9203      	str	r2, [sp, #12]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	bfb8      	it	lt
 800d540:	f04f 33ff 	movlt.w	r3, #4294967295
 800d544:	9305      	str	r3, [sp, #20]
 800d546:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d620 <_vfiprintf_r+0x250>
 800d54a:	2203      	movs	r2, #3
 800d54c:	4650      	mov	r0, sl
 800d54e:	7821      	ldrb	r1, [r4, #0]
 800d550:	f7ff fe86 	bl	800d260 <memchr>
 800d554:	b140      	cbz	r0, 800d568 <_vfiprintf_r+0x198>
 800d556:	2340      	movs	r3, #64	; 0x40
 800d558:	eba0 000a 	sub.w	r0, r0, sl
 800d55c:	fa03 f000 	lsl.w	r0, r3, r0
 800d560:	9b04      	ldr	r3, [sp, #16]
 800d562:	3401      	adds	r4, #1
 800d564:	4303      	orrs	r3, r0
 800d566:	9304      	str	r3, [sp, #16]
 800d568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d56c:	2206      	movs	r2, #6
 800d56e:	482d      	ldr	r0, [pc, #180]	; (800d624 <_vfiprintf_r+0x254>)
 800d570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d574:	f7ff fe74 	bl	800d260 <memchr>
 800d578:	2800      	cmp	r0, #0
 800d57a:	d03f      	beq.n	800d5fc <_vfiprintf_r+0x22c>
 800d57c:	4b2a      	ldr	r3, [pc, #168]	; (800d628 <_vfiprintf_r+0x258>)
 800d57e:	bb1b      	cbnz	r3, 800d5c8 <_vfiprintf_r+0x1f8>
 800d580:	9b03      	ldr	r3, [sp, #12]
 800d582:	3307      	adds	r3, #7
 800d584:	f023 0307 	bic.w	r3, r3, #7
 800d588:	3308      	adds	r3, #8
 800d58a:	9303      	str	r3, [sp, #12]
 800d58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d58e:	443b      	add	r3, r7
 800d590:	9309      	str	r3, [sp, #36]	; 0x24
 800d592:	e767      	b.n	800d464 <_vfiprintf_r+0x94>
 800d594:	460c      	mov	r4, r1
 800d596:	2001      	movs	r0, #1
 800d598:	fb0c 3202 	mla	r2, ip, r2, r3
 800d59c:	e7a5      	b.n	800d4ea <_vfiprintf_r+0x11a>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	f04f 0c0a 	mov.w	ip, #10
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	3401      	adds	r4, #1
 800d5a8:	9305      	str	r3, [sp, #20]
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5b0:	3a30      	subs	r2, #48	; 0x30
 800d5b2:	2a09      	cmp	r2, #9
 800d5b4:	d903      	bls.n	800d5be <_vfiprintf_r+0x1ee>
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d0c5      	beq.n	800d546 <_vfiprintf_r+0x176>
 800d5ba:	9105      	str	r1, [sp, #20]
 800d5bc:	e7c3      	b.n	800d546 <_vfiprintf_r+0x176>
 800d5be:	4604      	mov	r4, r0
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5c6:	e7f0      	b.n	800d5aa <_vfiprintf_r+0x1da>
 800d5c8:	ab03      	add	r3, sp, #12
 800d5ca:	9300      	str	r3, [sp, #0]
 800d5cc:	462a      	mov	r2, r5
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	4b16      	ldr	r3, [pc, #88]	; (800d62c <_vfiprintf_r+0x25c>)
 800d5d2:	a904      	add	r1, sp, #16
 800d5d4:	f3af 8000 	nop.w
 800d5d8:	4607      	mov	r7, r0
 800d5da:	1c78      	adds	r0, r7, #1
 800d5dc:	d1d6      	bne.n	800d58c <_vfiprintf_r+0x1bc>
 800d5de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5e0:	07d9      	lsls	r1, r3, #31
 800d5e2:	d405      	bmi.n	800d5f0 <_vfiprintf_r+0x220>
 800d5e4:	89ab      	ldrh	r3, [r5, #12]
 800d5e6:	059a      	lsls	r2, r3, #22
 800d5e8:	d402      	bmi.n	800d5f0 <_vfiprintf_r+0x220>
 800d5ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5ec:	f000 fa9d 	bl	800db2a <__retarget_lock_release_recursive>
 800d5f0:	89ab      	ldrh	r3, [r5, #12]
 800d5f2:	065b      	lsls	r3, r3, #25
 800d5f4:	f53f af12 	bmi.w	800d41c <_vfiprintf_r+0x4c>
 800d5f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5fa:	e711      	b.n	800d420 <_vfiprintf_r+0x50>
 800d5fc:	ab03      	add	r3, sp, #12
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	462a      	mov	r2, r5
 800d602:	4630      	mov	r0, r6
 800d604:	4b09      	ldr	r3, [pc, #36]	; (800d62c <_vfiprintf_r+0x25c>)
 800d606:	a904      	add	r1, sp, #16
 800d608:	f7ff fc90 	bl	800cf2c <_printf_i>
 800d60c:	e7e4      	b.n	800d5d8 <_vfiprintf_r+0x208>
 800d60e:	bf00      	nop
 800d610:	0800e3b4 	.word	0x0800e3b4
 800d614:	0800e3d4 	.word	0x0800e3d4
 800d618:	0800e394 	.word	0x0800e394
 800d61c:	0800e324 	.word	0x0800e324
 800d620:	0800e32a 	.word	0x0800e32a
 800d624:	0800e32e 	.word	0x0800e32e
 800d628:	00000000 	.word	0x00000000
 800d62c:	0800d3ad 	.word	0x0800d3ad

0800d630 <__swbuf_r>:
 800d630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d632:	460e      	mov	r6, r1
 800d634:	4614      	mov	r4, r2
 800d636:	4605      	mov	r5, r0
 800d638:	b118      	cbz	r0, 800d642 <__swbuf_r+0x12>
 800d63a:	6983      	ldr	r3, [r0, #24]
 800d63c:	b90b      	cbnz	r3, 800d642 <__swbuf_r+0x12>
 800d63e:	f000 f9d5 	bl	800d9ec <__sinit>
 800d642:	4b21      	ldr	r3, [pc, #132]	; (800d6c8 <__swbuf_r+0x98>)
 800d644:	429c      	cmp	r4, r3
 800d646:	d12b      	bne.n	800d6a0 <__swbuf_r+0x70>
 800d648:	686c      	ldr	r4, [r5, #4]
 800d64a:	69a3      	ldr	r3, [r4, #24]
 800d64c:	60a3      	str	r3, [r4, #8]
 800d64e:	89a3      	ldrh	r3, [r4, #12]
 800d650:	071a      	lsls	r2, r3, #28
 800d652:	d52f      	bpl.n	800d6b4 <__swbuf_r+0x84>
 800d654:	6923      	ldr	r3, [r4, #16]
 800d656:	b36b      	cbz	r3, 800d6b4 <__swbuf_r+0x84>
 800d658:	6923      	ldr	r3, [r4, #16]
 800d65a:	6820      	ldr	r0, [r4, #0]
 800d65c:	b2f6      	uxtb	r6, r6
 800d65e:	1ac0      	subs	r0, r0, r3
 800d660:	6963      	ldr	r3, [r4, #20]
 800d662:	4637      	mov	r7, r6
 800d664:	4283      	cmp	r3, r0
 800d666:	dc04      	bgt.n	800d672 <__swbuf_r+0x42>
 800d668:	4621      	mov	r1, r4
 800d66a:	4628      	mov	r0, r5
 800d66c:	f000 f92a 	bl	800d8c4 <_fflush_r>
 800d670:	bb30      	cbnz	r0, 800d6c0 <__swbuf_r+0x90>
 800d672:	68a3      	ldr	r3, [r4, #8]
 800d674:	3001      	adds	r0, #1
 800d676:	3b01      	subs	r3, #1
 800d678:	60a3      	str	r3, [r4, #8]
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	1c5a      	adds	r2, r3, #1
 800d67e:	6022      	str	r2, [r4, #0]
 800d680:	701e      	strb	r6, [r3, #0]
 800d682:	6963      	ldr	r3, [r4, #20]
 800d684:	4283      	cmp	r3, r0
 800d686:	d004      	beq.n	800d692 <__swbuf_r+0x62>
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	07db      	lsls	r3, r3, #31
 800d68c:	d506      	bpl.n	800d69c <__swbuf_r+0x6c>
 800d68e:	2e0a      	cmp	r6, #10
 800d690:	d104      	bne.n	800d69c <__swbuf_r+0x6c>
 800d692:	4621      	mov	r1, r4
 800d694:	4628      	mov	r0, r5
 800d696:	f000 f915 	bl	800d8c4 <_fflush_r>
 800d69a:	b988      	cbnz	r0, 800d6c0 <__swbuf_r+0x90>
 800d69c:	4638      	mov	r0, r7
 800d69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6a0:	4b0a      	ldr	r3, [pc, #40]	; (800d6cc <__swbuf_r+0x9c>)
 800d6a2:	429c      	cmp	r4, r3
 800d6a4:	d101      	bne.n	800d6aa <__swbuf_r+0x7a>
 800d6a6:	68ac      	ldr	r4, [r5, #8]
 800d6a8:	e7cf      	b.n	800d64a <__swbuf_r+0x1a>
 800d6aa:	4b09      	ldr	r3, [pc, #36]	; (800d6d0 <__swbuf_r+0xa0>)
 800d6ac:	429c      	cmp	r4, r3
 800d6ae:	bf08      	it	eq
 800d6b0:	68ec      	ldreq	r4, [r5, #12]
 800d6b2:	e7ca      	b.n	800d64a <__swbuf_r+0x1a>
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	f000 f80c 	bl	800d6d4 <__swsetup_r>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d0cb      	beq.n	800d658 <__swbuf_r+0x28>
 800d6c0:	f04f 37ff 	mov.w	r7, #4294967295
 800d6c4:	e7ea      	b.n	800d69c <__swbuf_r+0x6c>
 800d6c6:	bf00      	nop
 800d6c8:	0800e3b4 	.word	0x0800e3b4
 800d6cc:	0800e3d4 	.word	0x0800e3d4
 800d6d0:	0800e394 	.word	0x0800e394

0800d6d4 <__swsetup_r>:
 800d6d4:	4b32      	ldr	r3, [pc, #200]	; (800d7a0 <__swsetup_r+0xcc>)
 800d6d6:	b570      	push	{r4, r5, r6, lr}
 800d6d8:	681d      	ldr	r5, [r3, #0]
 800d6da:	4606      	mov	r6, r0
 800d6dc:	460c      	mov	r4, r1
 800d6de:	b125      	cbz	r5, 800d6ea <__swsetup_r+0x16>
 800d6e0:	69ab      	ldr	r3, [r5, #24]
 800d6e2:	b913      	cbnz	r3, 800d6ea <__swsetup_r+0x16>
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	f000 f981 	bl	800d9ec <__sinit>
 800d6ea:	4b2e      	ldr	r3, [pc, #184]	; (800d7a4 <__swsetup_r+0xd0>)
 800d6ec:	429c      	cmp	r4, r3
 800d6ee:	d10f      	bne.n	800d710 <__swsetup_r+0x3c>
 800d6f0:	686c      	ldr	r4, [r5, #4]
 800d6f2:	89a3      	ldrh	r3, [r4, #12]
 800d6f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6f8:	0719      	lsls	r1, r3, #28
 800d6fa:	d42c      	bmi.n	800d756 <__swsetup_r+0x82>
 800d6fc:	06dd      	lsls	r5, r3, #27
 800d6fe:	d411      	bmi.n	800d724 <__swsetup_r+0x50>
 800d700:	2309      	movs	r3, #9
 800d702:	6033      	str	r3, [r6, #0]
 800d704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d708:	f04f 30ff 	mov.w	r0, #4294967295
 800d70c:	81a3      	strh	r3, [r4, #12]
 800d70e:	e03e      	b.n	800d78e <__swsetup_r+0xba>
 800d710:	4b25      	ldr	r3, [pc, #148]	; (800d7a8 <__swsetup_r+0xd4>)
 800d712:	429c      	cmp	r4, r3
 800d714:	d101      	bne.n	800d71a <__swsetup_r+0x46>
 800d716:	68ac      	ldr	r4, [r5, #8]
 800d718:	e7eb      	b.n	800d6f2 <__swsetup_r+0x1e>
 800d71a:	4b24      	ldr	r3, [pc, #144]	; (800d7ac <__swsetup_r+0xd8>)
 800d71c:	429c      	cmp	r4, r3
 800d71e:	bf08      	it	eq
 800d720:	68ec      	ldreq	r4, [r5, #12]
 800d722:	e7e6      	b.n	800d6f2 <__swsetup_r+0x1e>
 800d724:	0758      	lsls	r0, r3, #29
 800d726:	d512      	bpl.n	800d74e <__swsetup_r+0x7a>
 800d728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d72a:	b141      	cbz	r1, 800d73e <__swsetup_r+0x6a>
 800d72c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d730:	4299      	cmp	r1, r3
 800d732:	d002      	beq.n	800d73a <__swsetup_r+0x66>
 800d734:	4630      	mov	r0, r6
 800d736:	f7ff fdad 	bl	800d294 <_free_r>
 800d73a:	2300      	movs	r3, #0
 800d73c:	6363      	str	r3, [r4, #52]	; 0x34
 800d73e:	89a3      	ldrh	r3, [r4, #12]
 800d740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d744:	81a3      	strh	r3, [r4, #12]
 800d746:	2300      	movs	r3, #0
 800d748:	6063      	str	r3, [r4, #4]
 800d74a:	6923      	ldr	r3, [r4, #16]
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	89a3      	ldrh	r3, [r4, #12]
 800d750:	f043 0308 	orr.w	r3, r3, #8
 800d754:	81a3      	strh	r3, [r4, #12]
 800d756:	6923      	ldr	r3, [r4, #16]
 800d758:	b94b      	cbnz	r3, 800d76e <__swsetup_r+0x9a>
 800d75a:	89a3      	ldrh	r3, [r4, #12]
 800d75c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d764:	d003      	beq.n	800d76e <__swsetup_r+0x9a>
 800d766:	4621      	mov	r1, r4
 800d768:	4630      	mov	r0, r6
 800d76a:	f000 fa05 	bl	800db78 <__smakebuf_r>
 800d76e:	89a0      	ldrh	r0, [r4, #12]
 800d770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d774:	f010 0301 	ands.w	r3, r0, #1
 800d778:	d00a      	beq.n	800d790 <__swsetup_r+0xbc>
 800d77a:	2300      	movs	r3, #0
 800d77c:	60a3      	str	r3, [r4, #8]
 800d77e:	6963      	ldr	r3, [r4, #20]
 800d780:	425b      	negs	r3, r3
 800d782:	61a3      	str	r3, [r4, #24]
 800d784:	6923      	ldr	r3, [r4, #16]
 800d786:	b943      	cbnz	r3, 800d79a <__swsetup_r+0xc6>
 800d788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d78c:	d1ba      	bne.n	800d704 <__swsetup_r+0x30>
 800d78e:	bd70      	pop	{r4, r5, r6, pc}
 800d790:	0781      	lsls	r1, r0, #30
 800d792:	bf58      	it	pl
 800d794:	6963      	ldrpl	r3, [r4, #20]
 800d796:	60a3      	str	r3, [r4, #8]
 800d798:	e7f4      	b.n	800d784 <__swsetup_r+0xb0>
 800d79a:	2000      	movs	r0, #0
 800d79c:	e7f7      	b.n	800d78e <__swsetup_r+0xba>
 800d79e:	bf00      	nop
 800d7a0:	200001a0 	.word	0x200001a0
 800d7a4:	0800e3b4 	.word	0x0800e3b4
 800d7a8:	0800e3d4 	.word	0x0800e3d4
 800d7ac:	0800e394 	.word	0x0800e394

0800d7b0 <abort>:
 800d7b0:	2006      	movs	r0, #6
 800d7b2:	b508      	push	{r3, lr}
 800d7b4:	f000 fa50 	bl	800dc58 <raise>
 800d7b8:	2001      	movs	r0, #1
 800d7ba:	f7f8 fb95 	bl	8005ee8 <_exit>
	...

0800d7c0 <__sflush_r>:
 800d7c0:	898a      	ldrh	r2, [r1, #12]
 800d7c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c4:	4605      	mov	r5, r0
 800d7c6:	0710      	lsls	r0, r2, #28
 800d7c8:	460c      	mov	r4, r1
 800d7ca:	d457      	bmi.n	800d87c <__sflush_r+0xbc>
 800d7cc:	684b      	ldr	r3, [r1, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	dc04      	bgt.n	800d7dc <__sflush_r+0x1c>
 800d7d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	dc01      	bgt.n	800d7dc <__sflush_r+0x1c>
 800d7d8:	2000      	movs	r0, #0
 800d7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7de:	2e00      	cmp	r6, #0
 800d7e0:	d0fa      	beq.n	800d7d8 <__sflush_r+0x18>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7e8:	682f      	ldr	r7, [r5, #0]
 800d7ea:	602b      	str	r3, [r5, #0]
 800d7ec:	d032      	beq.n	800d854 <__sflush_r+0x94>
 800d7ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7f0:	89a3      	ldrh	r3, [r4, #12]
 800d7f2:	075a      	lsls	r2, r3, #29
 800d7f4:	d505      	bpl.n	800d802 <__sflush_r+0x42>
 800d7f6:	6863      	ldr	r3, [r4, #4]
 800d7f8:	1ac0      	subs	r0, r0, r3
 800d7fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7fc:	b10b      	cbz	r3, 800d802 <__sflush_r+0x42>
 800d7fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d800:	1ac0      	subs	r0, r0, r3
 800d802:	2300      	movs	r3, #0
 800d804:	4602      	mov	r2, r0
 800d806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d808:	4628      	mov	r0, r5
 800d80a:	6a21      	ldr	r1, [r4, #32]
 800d80c:	47b0      	blx	r6
 800d80e:	1c43      	adds	r3, r0, #1
 800d810:	89a3      	ldrh	r3, [r4, #12]
 800d812:	d106      	bne.n	800d822 <__sflush_r+0x62>
 800d814:	6829      	ldr	r1, [r5, #0]
 800d816:	291d      	cmp	r1, #29
 800d818:	d82c      	bhi.n	800d874 <__sflush_r+0xb4>
 800d81a:	4a29      	ldr	r2, [pc, #164]	; (800d8c0 <__sflush_r+0x100>)
 800d81c:	40ca      	lsrs	r2, r1
 800d81e:	07d6      	lsls	r6, r2, #31
 800d820:	d528      	bpl.n	800d874 <__sflush_r+0xb4>
 800d822:	2200      	movs	r2, #0
 800d824:	6062      	str	r2, [r4, #4]
 800d826:	6922      	ldr	r2, [r4, #16]
 800d828:	04d9      	lsls	r1, r3, #19
 800d82a:	6022      	str	r2, [r4, #0]
 800d82c:	d504      	bpl.n	800d838 <__sflush_r+0x78>
 800d82e:	1c42      	adds	r2, r0, #1
 800d830:	d101      	bne.n	800d836 <__sflush_r+0x76>
 800d832:	682b      	ldr	r3, [r5, #0]
 800d834:	b903      	cbnz	r3, 800d838 <__sflush_r+0x78>
 800d836:	6560      	str	r0, [r4, #84]	; 0x54
 800d838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d83a:	602f      	str	r7, [r5, #0]
 800d83c:	2900      	cmp	r1, #0
 800d83e:	d0cb      	beq.n	800d7d8 <__sflush_r+0x18>
 800d840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d844:	4299      	cmp	r1, r3
 800d846:	d002      	beq.n	800d84e <__sflush_r+0x8e>
 800d848:	4628      	mov	r0, r5
 800d84a:	f7ff fd23 	bl	800d294 <_free_r>
 800d84e:	2000      	movs	r0, #0
 800d850:	6360      	str	r0, [r4, #52]	; 0x34
 800d852:	e7c2      	b.n	800d7da <__sflush_r+0x1a>
 800d854:	6a21      	ldr	r1, [r4, #32]
 800d856:	2301      	movs	r3, #1
 800d858:	4628      	mov	r0, r5
 800d85a:	47b0      	blx	r6
 800d85c:	1c41      	adds	r1, r0, #1
 800d85e:	d1c7      	bne.n	800d7f0 <__sflush_r+0x30>
 800d860:	682b      	ldr	r3, [r5, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d0c4      	beq.n	800d7f0 <__sflush_r+0x30>
 800d866:	2b1d      	cmp	r3, #29
 800d868:	d001      	beq.n	800d86e <__sflush_r+0xae>
 800d86a:	2b16      	cmp	r3, #22
 800d86c:	d101      	bne.n	800d872 <__sflush_r+0xb2>
 800d86e:	602f      	str	r7, [r5, #0]
 800d870:	e7b2      	b.n	800d7d8 <__sflush_r+0x18>
 800d872:	89a3      	ldrh	r3, [r4, #12]
 800d874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d878:	81a3      	strh	r3, [r4, #12]
 800d87a:	e7ae      	b.n	800d7da <__sflush_r+0x1a>
 800d87c:	690f      	ldr	r7, [r1, #16]
 800d87e:	2f00      	cmp	r7, #0
 800d880:	d0aa      	beq.n	800d7d8 <__sflush_r+0x18>
 800d882:	0793      	lsls	r3, r2, #30
 800d884:	bf18      	it	ne
 800d886:	2300      	movne	r3, #0
 800d888:	680e      	ldr	r6, [r1, #0]
 800d88a:	bf08      	it	eq
 800d88c:	694b      	ldreq	r3, [r1, #20]
 800d88e:	1bf6      	subs	r6, r6, r7
 800d890:	600f      	str	r7, [r1, #0]
 800d892:	608b      	str	r3, [r1, #8]
 800d894:	2e00      	cmp	r6, #0
 800d896:	dd9f      	ble.n	800d7d8 <__sflush_r+0x18>
 800d898:	4633      	mov	r3, r6
 800d89a:	463a      	mov	r2, r7
 800d89c:	4628      	mov	r0, r5
 800d89e:	6a21      	ldr	r1, [r4, #32]
 800d8a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d8a4:	47e0      	blx	ip
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	dc06      	bgt.n	800d8b8 <__sflush_r+0xf8>
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8b4:	81a3      	strh	r3, [r4, #12]
 800d8b6:	e790      	b.n	800d7da <__sflush_r+0x1a>
 800d8b8:	4407      	add	r7, r0
 800d8ba:	1a36      	subs	r6, r6, r0
 800d8bc:	e7ea      	b.n	800d894 <__sflush_r+0xd4>
 800d8be:	bf00      	nop
 800d8c0:	20400001 	.word	0x20400001

0800d8c4 <_fflush_r>:
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	690b      	ldr	r3, [r1, #16]
 800d8c8:	4605      	mov	r5, r0
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	b913      	cbnz	r3, 800d8d4 <_fflush_r+0x10>
 800d8ce:	2500      	movs	r5, #0
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	bd38      	pop	{r3, r4, r5, pc}
 800d8d4:	b118      	cbz	r0, 800d8de <_fflush_r+0x1a>
 800d8d6:	6983      	ldr	r3, [r0, #24]
 800d8d8:	b90b      	cbnz	r3, 800d8de <_fflush_r+0x1a>
 800d8da:	f000 f887 	bl	800d9ec <__sinit>
 800d8de:	4b14      	ldr	r3, [pc, #80]	; (800d930 <_fflush_r+0x6c>)
 800d8e0:	429c      	cmp	r4, r3
 800d8e2:	d11b      	bne.n	800d91c <_fflush_r+0x58>
 800d8e4:	686c      	ldr	r4, [r5, #4]
 800d8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d0ef      	beq.n	800d8ce <_fflush_r+0xa>
 800d8ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8f0:	07d0      	lsls	r0, r2, #31
 800d8f2:	d404      	bmi.n	800d8fe <_fflush_r+0x3a>
 800d8f4:	0599      	lsls	r1, r3, #22
 800d8f6:	d402      	bmi.n	800d8fe <_fflush_r+0x3a>
 800d8f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8fa:	f000 f915 	bl	800db28 <__retarget_lock_acquire_recursive>
 800d8fe:	4628      	mov	r0, r5
 800d900:	4621      	mov	r1, r4
 800d902:	f7ff ff5d 	bl	800d7c0 <__sflush_r>
 800d906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d908:	4605      	mov	r5, r0
 800d90a:	07da      	lsls	r2, r3, #31
 800d90c:	d4e0      	bmi.n	800d8d0 <_fflush_r+0xc>
 800d90e:	89a3      	ldrh	r3, [r4, #12]
 800d910:	059b      	lsls	r3, r3, #22
 800d912:	d4dd      	bmi.n	800d8d0 <_fflush_r+0xc>
 800d914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d916:	f000 f908 	bl	800db2a <__retarget_lock_release_recursive>
 800d91a:	e7d9      	b.n	800d8d0 <_fflush_r+0xc>
 800d91c:	4b05      	ldr	r3, [pc, #20]	; (800d934 <_fflush_r+0x70>)
 800d91e:	429c      	cmp	r4, r3
 800d920:	d101      	bne.n	800d926 <_fflush_r+0x62>
 800d922:	68ac      	ldr	r4, [r5, #8]
 800d924:	e7df      	b.n	800d8e6 <_fflush_r+0x22>
 800d926:	4b04      	ldr	r3, [pc, #16]	; (800d938 <_fflush_r+0x74>)
 800d928:	429c      	cmp	r4, r3
 800d92a:	bf08      	it	eq
 800d92c:	68ec      	ldreq	r4, [r5, #12]
 800d92e:	e7da      	b.n	800d8e6 <_fflush_r+0x22>
 800d930:	0800e3b4 	.word	0x0800e3b4
 800d934:	0800e3d4 	.word	0x0800e3d4
 800d938:	0800e394 	.word	0x0800e394

0800d93c <std>:
 800d93c:	2300      	movs	r3, #0
 800d93e:	b510      	push	{r4, lr}
 800d940:	4604      	mov	r4, r0
 800d942:	e9c0 3300 	strd	r3, r3, [r0]
 800d946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d94a:	6083      	str	r3, [r0, #8]
 800d94c:	8181      	strh	r1, [r0, #12]
 800d94e:	6643      	str	r3, [r0, #100]	; 0x64
 800d950:	81c2      	strh	r2, [r0, #14]
 800d952:	6183      	str	r3, [r0, #24]
 800d954:	4619      	mov	r1, r3
 800d956:	2208      	movs	r2, #8
 800d958:	305c      	adds	r0, #92	; 0x5c
 800d95a:	f7fd f8e5 	bl	800ab28 <memset>
 800d95e:	4b05      	ldr	r3, [pc, #20]	; (800d974 <std+0x38>)
 800d960:	6224      	str	r4, [r4, #32]
 800d962:	6263      	str	r3, [r4, #36]	; 0x24
 800d964:	4b04      	ldr	r3, [pc, #16]	; (800d978 <std+0x3c>)
 800d966:	62a3      	str	r3, [r4, #40]	; 0x28
 800d968:	4b04      	ldr	r3, [pc, #16]	; (800d97c <std+0x40>)
 800d96a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d96c:	4b04      	ldr	r3, [pc, #16]	; (800d980 <std+0x44>)
 800d96e:	6323      	str	r3, [r4, #48]	; 0x30
 800d970:	bd10      	pop	{r4, pc}
 800d972:	bf00      	nop
 800d974:	0800dc91 	.word	0x0800dc91
 800d978:	0800dcb3 	.word	0x0800dcb3
 800d97c:	0800dceb 	.word	0x0800dceb
 800d980:	0800dd0f 	.word	0x0800dd0f

0800d984 <_cleanup_r>:
 800d984:	4901      	ldr	r1, [pc, #4]	; (800d98c <_cleanup_r+0x8>)
 800d986:	f000 b8af 	b.w	800dae8 <_fwalk_reent>
 800d98a:	bf00      	nop
 800d98c:	0800d8c5 	.word	0x0800d8c5

0800d990 <__sfmoreglue>:
 800d990:	2268      	movs	r2, #104	; 0x68
 800d992:	b570      	push	{r4, r5, r6, lr}
 800d994:	1e4d      	subs	r5, r1, #1
 800d996:	4355      	muls	r5, r2
 800d998:	460e      	mov	r6, r1
 800d99a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d99e:	f7ff f885 	bl	800caac <_malloc_r>
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	b140      	cbz	r0, 800d9b8 <__sfmoreglue+0x28>
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	e9c0 1600 	strd	r1, r6, [r0]
 800d9ac:	300c      	adds	r0, #12
 800d9ae:	60a0      	str	r0, [r4, #8]
 800d9b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d9b4:	f7fd f8b8 	bl	800ab28 <memset>
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	bd70      	pop	{r4, r5, r6, pc}

0800d9bc <__sfp_lock_acquire>:
 800d9bc:	4801      	ldr	r0, [pc, #4]	; (800d9c4 <__sfp_lock_acquire+0x8>)
 800d9be:	f000 b8b3 	b.w	800db28 <__retarget_lock_acquire_recursive>
 800d9c2:	bf00      	nop
 800d9c4:	20001ae9 	.word	0x20001ae9

0800d9c8 <__sfp_lock_release>:
 800d9c8:	4801      	ldr	r0, [pc, #4]	; (800d9d0 <__sfp_lock_release+0x8>)
 800d9ca:	f000 b8ae 	b.w	800db2a <__retarget_lock_release_recursive>
 800d9ce:	bf00      	nop
 800d9d0:	20001ae9 	.word	0x20001ae9

0800d9d4 <__sinit_lock_acquire>:
 800d9d4:	4801      	ldr	r0, [pc, #4]	; (800d9dc <__sinit_lock_acquire+0x8>)
 800d9d6:	f000 b8a7 	b.w	800db28 <__retarget_lock_acquire_recursive>
 800d9da:	bf00      	nop
 800d9dc:	20001aea 	.word	0x20001aea

0800d9e0 <__sinit_lock_release>:
 800d9e0:	4801      	ldr	r0, [pc, #4]	; (800d9e8 <__sinit_lock_release+0x8>)
 800d9e2:	f000 b8a2 	b.w	800db2a <__retarget_lock_release_recursive>
 800d9e6:	bf00      	nop
 800d9e8:	20001aea 	.word	0x20001aea

0800d9ec <__sinit>:
 800d9ec:	b510      	push	{r4, lr}
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	f7ff fff0 	bl	800d9d4 <__sinit_lock_acquire>
 800d9f4:	69a3      	ldr	r3, [r4, #24]
 800d9f6:	b11b      	cbz	r3, 800da00 <__sinit+0x14>
 800d9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fc:	f7ff bff0 	b.w	800d9e0 <__sinit_lock_release>
 800da00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da04:	6523      	str	r3, [r4, #80]	; 0x50
 800da06:	4b13      	ldr	r3, [pc, #76]	; (800da54 <__sinit+0x68>)
 800da08:	4a13      	ldr	r2, [pc, #76]	; (800da58 <__sinit+0x6c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800da0e:	42a3      	cmp	r3, r4
 800da10:	bf08      	it	eq
 800da12:	2301      	moveq	r3, #1
 800da14:	4620      	mov	r0, r4
 800da16:	bf08      	it	eq
 800da18:	61a3      	streq	r3, [r4, #24]
 800da1a:	f000 f81f 	bl	800da5c <__sfp>
 800da1e:	6060      	str	r0, [r4, #4]
 800da20:	4620      	mov	r0, r4
 800da22:	f000 f81b 	bl	800da5c <__sfp>
 800da26:	60a0      	str	r0, [r4, #8]
 800da28:	4620      	mov	r0, r4
 800da2a:	f000 f817 	bl	800da5c <__sfp>
 800da2e:	2200      	movs	r2, #0
 800da30:	2104      	movs	r1, #4
 800da32:	60e0      	str	r0, [r4, #12]
 800da34:	6860      	ldr	r0, [r4, #4]
 800da36:	f7ff ff81 	bl	800d93c <std>
 800da3a:	2201      	movs	r2, #1
 800da3c:	2109      	movs	r1, #9
 800da3e:	68a0      	ldr	r0, [r4, #8]
 800da40:	f7ff ff7c 	bl	800d93c <std>
 800da44:	2202      	movs	r2, #2
 800da46:	2112      	movs	r1, #18
 800da48:	68e0      	ldr	r0, [r4, #12]
 800da4a:	f7ff ff77 	bl	800d93c <std>
 800da4e:	2301      	movs	r3, #1
 800da50:	61a3      	str	r3, [r4, #24]
 800da52:	e7d1      	b.n	800d9f8 <__sinit+0xc>
 800da54:	0800dfc8 	.word	0x0800dfc8
 800da58:	0800d985 	.word	0x0800d985

0800da5c <__sfp>:
 800da5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5e:	4607      	mov	r7, r0
 800da60:	f7ff ffac 	bl	800d9bc <__sfp_lock_acquire>
 800da64:	4b1e      	ldr	r3, [pc, #120]	; (800dae0 <__sfp+0x84>)
 800da66:	681e      	ldr	r6, [r3, #0]
 800da68:	69b3      	ldr	r3, [r6, #24]
 800da6a:	b913      	cbnz	r3, 800da72 <__sfp+0x16>
 800da6c:	4630      	mov	r0, r6
 800da6e:	f7ff ffbd 	bl	800d9ec <__sinit>
 800da72:	3648      	adds	r6, #72	; 0x48
 800da74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800da78:	3b01      	subs	r3, #1
 800da7a:	d503      	bpl.n	800da84 <__sfp+0x28>
 800da7c:	6833      	ldr	r3, [r6, #0]
 800da7e:	b30b      	cbz	r3, 800dac4 <__sfp+0x68>
 800da80:	6836      	ldr	r6, [r6, #0]
 800da82:	e7f7      	b.n	800da74 <__sfp+0x18>
 800da84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800da88:	b9d5      	cbnz	r5, 800dac0 <__sfp+0x64>
 800da8a:	4b16      	ldr	r3, [pc, #88]	; (800dae4 <__sfp+0x88>)
 800da8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da90:	60e3      	str	r3, [r4, #12]
 800da92:	6665      	str	r5, [r4, #100]	; 0x64
 800da94:	f000 f847 	bl	800db26 <__retarget_lock_init_recursive>
 800da98:	f7ff ff96 	bl	800d9c8 <__sfp_lock_release>
 800da9c:	2208      	movs	r2, #8
 800da9e:	4629      	mov	r1, r5
 800daa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800daa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800daa8:	6025      	str	r5, [r4, #0]
 800daaa:	61a5      	str	r5, [r4, #24]
 800daac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dab0:	f7fd f83a 	bl	800ab28 <memset>
 800dab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dabc:	4620      	mov	r0, r4
 800dabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dac0:	3468      	adds	r4, #104	; 0x68
 800dac2:	e7d9      	b.n	800da78 <__sfp+0x1c>
 800dac4:	2104      	movs	r1, #4
 800dac6:	4638      	mov	r0, r7
 800dac8:	f7ff ff62 	bl	800d990 <__sfmoreglue>
 800dacc:	4604      	mov	r4, r0
 800dace:	6030      	str	r0, [r6, #0]
 800dad0:	2800      	cmp	r0, #0
 800dad2:	d1d5      	bne.n	800da80 <__sfp+0x24>
 800dad4:	f7ff ff78 	bl	800d9c8 <__sfp_lock_release>
 800dad8:	230c      	movs	r3, #12
 800dada:	603b      	str	r3, [r7, #0]
 800dadc:	e7ee      	b.n	800dabc <__sfp+0x60>
 800dade:	bf00      	nop
 800dae0:	0800dfc8 	.word	0x0800dfc8
 800dae4:	ffff0001 	.word	0xffff0001

0800dae8 <_fwalk_reent>:
 800dae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daec:	4606      	mov	r6, r0
 800daee:	4688      	mov	r8, r1
 800daf0:	2700      	movs	r7, #0
 800daf2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800daf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dafa:	f1b9 0901 	subs.w	r9, r9, #1
 800dafe:	d505      	bpl.n	800db0c <_fwalk_reent+0x24>
 800db00:	6824      	ldr	r4, [r4, #0]
 800db02:	2c00      	cmp	r4, #0
 800db04:	d1f7      	bne.n	800daf6 <_fwalk_reent+0xe>
 800db06:	4638      	mov	r0, r7
 800db08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db0c:	89ab      	ldrh	r3, [r5, #12]
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d907      	bls.n	800db22 <_fwalk_reent+0x3a>
 800db12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db16:	3301      	adds	r3, #1
 800db18:	d003      	beq.n	800db22 <_fwalk_reent+0x3a>
 800db1a:	4629      	mov	r1, r5
 800db1c:	4630      	mov	r0, r6
 800db1e:	47c0      	blx	r8
 800db20:	4307      	orrs	r7, r0
 800db22:	3568      	adds	r5, #104	; 0x68
 800db24:	e7e9      	b.n	800dafa <_fwalk_reent+0x12>

0800db26 <__retarget_lock_init_recursive>:
 800db26:	4770      	bx	lr

0800db28 <__retarget_lock_acquire_recursive>:
 800db28:	4770      	bx	lr

0800db2a <__retarget_lock_release_recursive>:
 800db2a:	4770      	bx	lr

0800db2c <__swhatbuf_r>:
 800db2c:	b570      	push	{r4, r5, r6, lr}
 800db2e:	460e      	mov	r6, r1
 800db30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db34:	4614      	mov	r4, r2
 800db36:	2900      	cmp	r1, #0
 800db38:	461d      	mov	r5, r3
 800db3a:	b096      	sub	sp, #88	; 0x58
 800db3c:	da08      	bge.n	800db50 <__swhatbuf_r+0x24>
 800db3e:	2200      	movs	r2, #0
 800db40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800db44:	602a      	str	r2, [r5, #0]
 800db46:	061a      	lsls	r2, r3, #24
 800db48:	d410      	bmi.n	800db6c <__swhatbuf_r+0x40>
 800db4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db4e:	e00e      	b.n	800db6e <__swhatbuf_r+0x42>
 800db50:	466a      	mov	r2, sp
 800db52:	f000 f903 	bl	800dd5c <_fstat_r>
 800db56:	2800      	cmp	r0, #0
 800db58:	dbf1      	blt.n	800db3e <__swhatbuf_r+0x12>
 800db5a:	9a01      	ldr	r2, [sp, #4]
 800db5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db64:	425a      	negs	r2, r3
 800db66:	415a      	adcs	r2, r3
 800db68:	602a      	str	r2, [r5, #0]
 800db6a:	e7ee      	b.n	800db4a <__swhatbuf_r+0x1e>
 800db6c:	2340      	movs	r3, #64	; 0x40
 800db6e:	2000      	movs	r0, #0
 800db70:	6023      	str	r3, [r4, #0]
 800db72:	b016      	add	sp, #88	; 0x58
 800db74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800db78 <__smakebuf_r>:
 800db78:	898b      	ldrh	r3, [r1, #12]
 800db7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db7c:	079d      	lsls	r5, r3, #30
 800db7e:	4606      	mov	r6, r0
 800db80:	460c      	mov	r4, r1
 800db82:	d507      	bpl.n	800db94 <__smakebuf_r+0x1c>
 800db84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	6123      	str	r3, [r4, #16]
 800db8c:	2301      	movs	r3, #1
 800db8e:	6163      	str	r3, [r4, #20]
 800db90:	b002      	add	sp, #8
 800db92:	bd70      	pop	{r4, r5, r6, pc}
 800db94:	466a      	mov	r2, sp
 800db96:	ab01      	add	r3, sp, #4
 800db98:	f7ff ffc8 	bl	800db2c <__swhatbuf_r>
 800db9c:	9900      	ldr	r1, [sp, #0]
 800db9e:	4605      	mov	r5, r0
 800dba0:	4630      	mov	r0, r6
 800dba2:	f7fe ff83 	bl	800caac <_malloc_r>
 800dba6:	b948      	cbnz	r0, 800dbbc <__smakebuf_r+0x44>
 800dba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbac:	059a      	lsls	r2, r3, #22
 800dbae:	d4ef      	bmi.n	800db90 <__smakebuf_r+0x18>
 800dbb0:	f023 0303 	bic.w	r3, r3, #3
 800dbb4:	f043 0302 	orr.w	r3, r3, #2
 800dbb8:	81a3      	strh	r3, [r4, #12]
 800dbba:	e7e3      	b.n	800db84 <__smakebuf_r+0xc>
 800dbbc:	4b0d      	ldr	r3, [pc, #52]	; (800dbf4 <__smakebuf_r+0x7c>)
 800dbbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800dbc0:	89a3      	ldrh	r3, [r4, #12]
 800dbc2:	6020      	str	r0, [r4, #0]
 800dbc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbc8:	81a3      	strh	r3, [r4, #12]
 800dbca:	9b00      	ldr	r3, [sp, #0]
 800dbcc:	6120      	str	r0, [r4, #16]
 800dbce:	6163      	str	r3, [r4, #20]
 800dbd0:	9b01      	ldr	r3, [sp, #4]
 800dbd2:	b15b      	cbz	r3, 800dbec <__smakebuf_r+0x74>
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbda:	f000 f8d1 	bl	800dd80 <_isatty_r>
 800dbde:	b128      	cbz	r0, 800dbec <__smakebuf_r+0x74>
 800dbe0:	89a3      	ldrh	r3, [r4, #12]
 800dbe2:	f023 0303 	bic.w	r3, r3, #3
 800dbe6:	f043 0301 	orr.w	r3, r3, #1
 800dbea:	81a3      	strh	r3, [r4, #12]
 800dbec:	89a0      	ldrh	r0, [r4, #12]
 800dbee:	4305      	orrs	r5, r0
 800dbf0:	81a5      	strh	r5, [r4, #12]
 800dbf2:	e7cd      	b.n	800db90 <__smakebuf_r+0x18>
 800dbf4:	0800d985 	.word	0x0800d985

0800dbf8 <_malloc_usable_size_r>:
 800dbf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbfc:	1f18      	subs	r0, r3, #4
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	bfbc      	itt	lt
 800dc02:	580b      	ldrlt	r3, [r1, r0]
 800dc04:	18c0      	addlt	r0, r0, r3
 800dc06:	4770      	bx	lr

0800dc08 <_raise_r>:
 800dc08:	291f      	cmp	r1, #31
 800dc0a:	b538      	push	{r3, r4, r5, lr}
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	460d      	mov	r5, r1
 800dc10:	d904      	bls.n	800dc1c <_raise_r+0x14>
 800dc12:	2316      	movs	r3, #22
 800dc14:	6003      	str	r3, [r0, #0]
 800dc16:	f04f 30ff 	mov.w	r0, #4294967295
 800dc1a:	bd38      	pop	{r3, r4, r5, pc}
 800dc1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc1e:	b112      	cbz	r2, 800dc26 <_raise_r+0x1e>
 800dc20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc24:	b94b      	cbnz	r3, 800dc3a <_raise_r+0x32>
 800dc26:	4620      	mov	r0, r4
 800dc28:	f000 f830 	bl	800dc8c <_getpid_r>
 800dc2c:	462a      	mov	r2, r5
 800dc2e:	4601      	mov	r1, r0
 800dc30:	4620      	mov	r0, r4
 800dc32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc36:	f000 b817 	b.w	800dc68 <_kill_r>
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d00a      	beq.n	800dc54 <_raise_r+0x4c>
 800dc3e:	1c59      	adds	r1, r3, #1
 800dc40:	d103      	bne.n	800dc4a <_raise_r+0x42>
 800dc42:	2316      	movs	r3, #22
 800dc44:	6003      	str	r3, [r0, #0]
 800dc46:	2001      	movs	r0, #1
 800dc48:	e7e7      	b.n	800dc1a <_raise_r+0x12>
 800dc4a:	2400      	movs	r4, #0
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc52:	4798      	blx	r3
 800dc54:	2000      	movs	r0, #0
 800dc56:	e7e0      	b.n	800dc1a <_raise_r+0x12>

0800dc58 <raise>:
 800dc58:	4b02      	ldr	r3, [pc, #8]	; (800dc64 <raise+0xc>)
 800dc5a:	4601      	mov	r1, r0
 800dc5c:	6818      	ldr	r0, [r3, #0]
 800dc5e:	f7ff bfd3 	b.w	800dc08 <_raise_r>
 800dc62:	bf00      	nop
 800dc64:	200001a0 	.word	0x200001a0

0800dc68 <_kill_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	4d06      	ldr	r5, [pc, #24]	; (800dc88 <_kill_r+0x20>)
 800dc6e:	4604      	mov	r4, r0
 800dc70:	4608      	mov	r0, r1
 800dc72:	4611      	mov	r1, r2
 800dc74:	602b      	str	r3, [r5, #0]
 800dc76:	f7f8 f92f 	bl	8005ed8 <_kill>
 800dc7a:	1c43      	adds	r3, r0, #1
 800dc7c:	d102      	bne.n	800dc84 <_kill_r+0x1c>
 800dc7e:	682b      	ldr	r3, [r5, #0]
 800dc80:	b103      	cbz	r3, 800dc84 <_kill_r+0x1c>
 800dc82:	6023      	str	r3, [r4, #0]
 800dc84:	bd38      	pop	{r3, r4, r5, pc}
 800dc86:	bf00      	nop
 800dc88:	20001ae4 	.word	0x20001ae4

0800dc8c <_getpid_r>:
 800dc8c:	f7f8 b922 	b.w	8005ed4 <_getpid>

0800dc90 <__sread>:
 800dc90:	b510      	push	{r4, lr}
 800dc92:	460c      	mov	r4, r1
 800dc94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc98:	f000 f894 	bl	800ddc4 <_read_r>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	bfab      	itete	ge
 800dca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dca2:	89a3      	ldrhlt	r3, [r4, #12]
 800dca4:	181b      	addge	r3, r3, r0
 800dca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcaa:	bfac      	ite	ge
 800dcac:	6563      	strge	r3, [r4, #84]	; 0x54
 800dcae:	81a3      	strhlt	r3, [r4, #12]
 800dcb0:	bd10      	pop	{r4, pc}

0800dcb2 <__swrite>:
 800dcb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb6:	461f      	mov	r7, r3
 800dcb8:	898b      	ldrh	r3, [r1, #12]
 800dcba:	4605      	mov	r5, r0
 800dcbc:	05db      	lsls	r3, r3, #23
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	4616      	mov	r6, r2
 800dcc2:	d505      	bpl.n	800dcd0 <__swrite+0x1e>
 800dcc4:	2302      	movs	r3, #2
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dccc:	f000 f868 	bl	800dda0 <_lseek_r>
 800dcd0:	89a3      	ldrh	r3, [r4, #12]
 800dcd2:	4632      	mov	r2, r6
 800dcd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcd8:	81a3      	strh	r3, [r4, #12]
 800dcda:	4628      	mov	r0, r5
 800dcdc:	463b      	mov	r3, r7
 800dcde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dce6:	f000 b817 	b.w	800dd18 <_write_r>

0800dcea <__sseek>:
 800dcea:	b510      	push	{r4, lr}
 800dcec:	460c      	mov	r4, r1
 800dcee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcf2:	f000 f855 	bl	800dda0 <_lseek_r>
 800dcf6:	1c43      	adds	r3, r0, #1
 800dcf8:	89a3      	ldrh	r3, [r4, #12]
 800dcfa:	bf15      	itete	ne
 800dcfc:	6560      	strne	r0, [r4, #84]	; 0x54
 800dcfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd06:	81a3      	strheq	r3, [r4, #12]
 800dd08:	bf18      	it	ne
 800dd0a:	81a3      	strhne	r3, [r4, #12]
 800dd0c:	bd10      	pop	{r4, pc}

0800dd0e <__sclose>:
 800dd0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd12:	f000 b813 	b.w	800dd3c <_close_r>
	...

0800dd18 <_write_r>:
 800dd18:	b538      	push	{r3, r4, r5, lr}
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	4608      	mov	r0, r1
 800dd1e:	4611      	mov	r1, r2
 800dd20:	2200      	movs	r2, #0
 800dd22:	4d05      	ldr	r5, [pc, #20]	; (800dd38 <_write_r+0x20>)
 800dd24:	602a      	str	r2, [r5, #0]
 800dd26:	461a      	mov	r2, r3
 800dd28:	f7f8 f8f2 	bl	8005f10 <_write>
 800dd2c:	1c43      	adds	r3, r0, #1
 800dd2e:	d102      	bne.n	800dd36 <_write_r+0x1e>
 800dd30:	682b      	ldr	r3, [r5, #0]
 800dd32:	b103      	cbz	r3, 800dd36 <_write_r+0x1e>
 800dd34:	6023      	str	r3, [r4, #0]
 800dd36:	bd38      	pop	{r3, r4, r5, pc}
 800dd38:	20001ae4 	.word	0x20001ae4

0800dd3c <_close_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	2300      	movs	r3, #0
 800dd40:	4d05      	ldr	r5, [pc, #20]	; (800dd58 <_close_r+0x1c>)
 800dd42:	4604      	mov	r4, r0
 800dd44:	4608      	mov	r0, r1
 800dd46:	602b      	str	r3, [r5, #0]
 800dd48:	f7f8 f8f0 	bl	8005f2c <_close>
 800dd4c:	1c43      	adds	r3, r0, #1
 800dd4e:	d102      	bne.n	800dd56 <_close_r+0x1a>
 800dd50:	682b      	ldr	r3, [r5, #0]
 800dd52:	b103      	cbz	r3, 800dd56 <_close_r+0x1a>
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	bd38      	pop	{r3, r4, r5, pc}
 800dd58:	20001ae4 	.word	0x20001ae4

0800dd5c <_fstat_r>:
 800dd5c:	b538      	push	{r3, r4, r5, lr}
 800dd5e:	2300      	movs	r3, #0
 800dd60:	4d06      	ldr	r5, [pc, #24]	; (800dd7c <_fstat_r+0x20>)
 800dd62:	4604      	mov	r4, r0
 800dd64:	4608      	mov	r0, r1
 800dd66:	4611      	mov	r1, r2
 800dd68:	602b      	str	r3, [r5, #0]
 800dd6a:	f7f8 f8e2 	bl	8005f32 <_fstat>
 800dd6e:	1c43      	adds	r3, r0, #1
 800dd70:	d102      	bne.n	800dd78 <_fstat_r+0x1c>
 800dd72:	682b      	ldr	r3, [r5, #0]
 800dd74:	b103      	cbz	r3, 800dd78 <_fstat_r+0x1c>
 800dd76:	6023      	str	r3, [r4, #0]
 800dd78:	bd38      	pop	{r3, r4, r5, pc}
 800dd7a:	bf00      	nop
 800dd7c:	20001ae4 	.word	0x20001ae4

0800dd80 <_isatty_r>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	2300      	movs	r3, #0
 800dd84:	4d05      	ldr	r5, [pc, #20]	; (800dd9c <_isatty_r+0x1c>)
 800dd86:	4604      	mov	r4, r0
 800dd88:	4608      	mov	r0, r1
 800dd8a:	602b      	str	r3, [r5, #0]
 800dd8c:	f7f8 f8d6 	bl	8005f3c <_isatty>
 800dd90:	1c43      	adds	r3, r0, #1
 800dd92:	d102      	bne.n	800dd9a <_isatty_r+0x1a>
 800dd94:	682b      	ldr	r3, [r5, #0]
 800dd96:	b103      	cbz	r3, 800dd9a <_isatty_r+0x1a>
 800dd98:	6023      	str	r3, [r4, #0]
 800dd9a:	bd38      	pop	{r3, r4, r5, pc}
 800dd9c:	20001ae4 	.word	0x20001ae4

0800dda0 <_lseek_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	4604      	mov	r4, r0
 800dda4:	4608      	mov	r0, r1
 800dda6:	4611      	mov	r1, r2
 800dda8:	2200      	movs	r2, #0
 800ddaa:	4d05      	ldr	r5, [pc, #20]	; (800ddc0 <_lseek_r+0x20>)
 800ddac:	602a      	str	r2, [r5, #0]
 800ddae:	461a      	mov	r2, r3
 800ddb0:	f7f8 f8c6 	bl	8005f40 <_lseek>
 800ddb4:	1c43      	adds	r3, r0, #1
 800ddb6:	d102      	bne.n	800ddbe <_lseek_r+0x1e>
 800ddb8:	682b      	ldr	r3, [r5, #0]
 800ddba:	b103      	cbz	r3, 800ddbe <_lseek_r+0x1e>
 800ddbc:	6023      	str	r3, [r4, #0]
 800ddbe:	bd38      	pop	{r3, r4, r5, pc}
 800ddc0:	20001ae4 	.word	0x20001ae4

0800ddc4 <_read_r>:
 800ddc4:	b538      	push	{r3, r4, r5, lr}
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	4608      	mov	r0, r1
 800ddca:	4611      	mov	r1, r2
 800ddcc:	2200      	movs	r2, #0
 800ddce:	4d05      	ldr	r5, [pc, #20]	; (800dde4 <_read_r+0x20>)
 800ddd0:	602a      	str	r2, [r5, #0]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	f7f8 f88e 	bl	8005ef4 <_read>
 800ddd8:	1c43      	adds	r3, r0, #1
 800ddda:	d102      	bne.n	800dde2 <_read_r+0x1e>
 800dddc:	682b      	ldr	r3, [r5, #0]
 800ddde:	b103      	cbz	r3, 800dde2 <_read_r+0x1e>
 800dde0:	6023      	str	r3, [r4, #0]
 800dde2:	bd38      	pop	{r3, r4, r5, pc}
 800dde4:	20001ae4 	.word	0x20001ae4

0800dde8 <_init>:
 800dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddea:	bf00      	nop
 800ddec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddee:	bc08      	pop	{r3}
 800ddf0:	469e      	mov	lr, r3
 800ddf2:	4770      	bx	lr

0800ddf4 <_fini>:
 800ddf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf6:	bf00      	nop
 800ddf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddfa:	bc08      	pop	{r3}
 800ddfc:	469e      	mov	lr, r3
 800ddfe:	4770      	bx	lr
