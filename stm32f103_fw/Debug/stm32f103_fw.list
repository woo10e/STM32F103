
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08009d6c  08009d6c  00019d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e40  08009e40  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  08009e40  08009e40  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e40  08009e40  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e40  08009e40  00019e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e44  08009e44  00019e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001194  20000204  0800a04c  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  0800a04c  00021398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012484  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f33  00000000  00000000  000326b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  000365e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00037728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ceb1  00000000  00000000  00038660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc96  00000000  00000000  00055511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1d4  00000000  00000000  000711a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb37b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004624  00000000  00000000  000fb3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000204 	.word	0x20000204
 8000128:	00000000 	.word	0x00000000
 800012c:	08009d54 	.word	0x08009d54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000208 	.word	0x20000208
 8000148:	08009d54 	.word	0x08009d54

0800014c <apInit>:




void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);
 8000150:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fbb5 	bl	80008c4 <uartOpen>
  uartOpen(_DEF_UART2, 115200);
 800015a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800015e:	2001      	movs	r0, #1
 8000160:	f000 fbb0 	bl	80008c4 <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apMain>:

void apMain(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b084      	sub	sp, #16
 800016c:	af00      	add	r7, sp, #0
  uint32_t pre_time;
//  uint32_t pre_baud;
  uint32_t led_blink_time = 500;
 800016e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000172:	60bb      	str	r3, [r7, #8]
  {
    led_blink_time = 100;
  }
*/
//  pre_baud = uartGetBaud(_DEF_UART1);
  pre_time = millis();
 8000174:	f000 f885 	bl	8000282 <millis>
 8000178:	60f8      	str	r0, [r7, #12]

  while(1)
  {
    if ( millis()-pre_time >= led_blink_time)
 800017a:	f000 f882 	bl	8000282 <millis>
 800017e:	4602      	mov	r2, r0
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	68ba      	ldr	r2, [r7, #8]
 8000186:	429a      	cmp	r2, r3
 8000188:	d80b      	bhi.n	80001a2 <apMain+0x3a>
    {
      pre_time = millis();
 800018a:	f000 f87a 	bl	8000282 <millis>
 800018e:	60f8      	str	r0, [r7, #12]
      ledToggle(_DEF_LED1);
 8000190:	2000      	movs	r0, #0
 8000192:	f000 fac1 	bl	8000718 <ledToggle>
      //delay(500);
      ledToggle(_DEF_LED2);
 8000196:	2001      	movs	r0, #1
 8000198:	f000 fabe 	bl	8000718 <ledToggle>
      ledToggle(_DEF_LED3);
 800019c:	2002      	movs	r0, #2
 800019e:	f000 fabb 	bl	8000718 <ledToggle>
//      uartPrintf(_DEF_UART1, "ResetCount : %d\n", resetGetCount());
//      uartPrintf(_DEF_UART2, "Uart1 %d\n", millis());
    }

    if (uartAvailable(_DEF_UART1) > 0)
 80001a2:	2000      	movs	r0, #0
 80001a4:	f000 fbee 	bl	8000984 <uartAvailable>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d00a      	beq.n	80001c4 <apMain+0x5c>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 80001ae:	2000      	movs	r0, #0
 80001b0:	f000 fc06 	bl	80009c0 <uartRead>
 80001b4:	4603      	mov	r3, r0
 80001b6:	71fb      	strb	r3, [r7, #7]
      uartPrintf(_DEF_UART1, "USB Rx %c %X\n", rx_data, rx_data);
 80001b8:	79fa      	ldrb	r2, [r7, #7]
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	490a      	ldr	r1, [pc, #40]	; (80001e8 <apMain+0x80>)
 80001be:	2000      	movs	r0, #0
 80001c0:	f000 fc4c 	bl	8000a5c <uartPrintf>
    }

    if (uartAvailable(_DEF_UART2) > 0)
 80001c4:	2001      	movs	r0, #1
 80001c6:	f000 fbdd 	bl	8000984 <uartAvailable>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d0d4      	beq.n	800017a <apMain+0x12>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART2);
 80001d0:	2001      	movs	r0, #1
 80001d2:	f000 fbf5 	bl	80009c0 <uartRead>
 80001d6:	4603      	mov	r3, r0
 80001d8:	71bb      	strb	r3, [r7, #6]
      uartPrintf(_DEF_UART2, "Uart1 Rx %c %X\n", rx_data, rx_data);
 80001da:	79ba      	ldrb	r2, [r7, #6]
 80001dc:	79bb      	ldrb	r3, [r7, #6]
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <apMain+0x84>)
 80001e0:	2001      	movs	r0, #1
 80001e2:	f000 fc3b 	bl	8000a5c <uartPrintf>
    if ( millis()-pre_time >= led_blink_time)
 80001e6:	e7c8      	b.n	800017a <apMain+0x12>
 80001e8:	08009d6c 	.word	0x08009d6c
 80001ec:	08009d7c 	.word	0x08009d7c

080001f0 <bspInit>:
void SystemClock_Config(void);



void bspInit(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
  HAL_Init();
 80001f6:	f000 fd2f 	bl	8000c58 <HAL_Init>
  SystemClock_Config();
 80001fa:	f000 f849 	bl	8000290 <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <bspInit+0x78>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	4a19      	ldr	r2, [pc, #100]	; (8000268 <bspInit+0x78>)
 8000204:	f043 0320 	orr.w	r3, r3, #32
 8000208:	6193      	str	r3, [r2, #24]
 800020a:	4b17      	ldr	r3, [pc, #92]	; (8000268 <bspInit+0x78>)
 800020c:	699b      	ldr	r3, [r3, #24]
 800020e:	f003 0320 	and.w	r3, r3, #32
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000216:	4b14      	ldr	r3, [pc, #80]	; (8000268 <bspInit+0x78>)
 8000218:	699b      	ldr	r3, [r3, #24]
 800021a:	4a13      	ldr	r2, [pc, #76]	; (8000268 <bspInit+0x78>)
 800021c:	f043 0304 	orr.w	r3, r3, #4
 8000220:	6193      	str	r3, [r2, #24]
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <bspInit+0x78>)
 8000224:	699b      	ldr	r3, [r3, #24]
 8000226:	f003 0304 	and.w	r3, r3, #4
 800022a:	60bb      	str	r3, [r7, #8]
 800022c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <bspInit+0x78>)
 8000230:	699b      	ldr	r3, [r3, #24]
 8000232:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <bspInit+0x78>)
 8000234:	f043 0308 	orr.w	r3, r3, #8
 8000238:	6193      	str	r3, [r2, #24]
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <bspInit+0x78>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	f003 0308 	and.w	r3, r3, #8
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <bspInit+0x78>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	4a07      	ldr	r2, [pc, #28]	; (8000268 <bspInit+0x78>)
 800024c:	f043 0310 	orr.w	r3, r3, #16
 8000250:	6193      	str	r3, [r2, #24]
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <bspInit+0x78>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	f003 0310 	and.w	r3, r3, #16
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


  MX_USB_DEVICE_Init();
*/
}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000

0800026c <delay>:

void delay(uint32_t ms)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 HAL_Delay(ms);
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f000 fd51 	bl	8000d1c <HAL_Delay>
}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}

08000282 <millis>:
uint32_t millis(void)
{
 8000282:	b580      	push	{r7, lr}
 8000284:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000286:	f000 fd3f 	bl	8000d08 <HAL_GetTick>
 800028a:	4603      	mov	r3, r0
}
 800028c:	4618      	mov	r0, r3
 800028e:	bd80      	pop	{r7, pc}

08000290 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b094      	sub	sp, #80	; 0x50
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800029a:	2228      	movs	r2, #40	; 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f009 f8bc 	bl	800941c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002c0:	2305      	movs	r3, #5
 80002c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 fd7c 	bl	8002de8 <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002f6:	f000 f82a 	bl	800034e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	230f      	movs	r3, #15
 80002fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fe:	2302      	movs	r3, #2
 8000300:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000310:	f107 0314 	add.w	r3, r7, #20
 8000314:	2102      	movs	r1, #2
 8000316:	4618      	mov	r0, r3
 8000318:	f002 ffe8 	bl	80032ec <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000322:	f000 f814 	bl	800034e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000326:	2311      	movs	r3, #17
 8000328:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800032a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4618      	mov	r0, r3
 8000338:	f003 f970 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000342:	f000 f804 	bl	800034e <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3750      	adds	r7, #80	; 0x50
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000352:	b672      	cpsid	i
}
 8000354:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000356:	e7fe      	b.n	8000356 <Error_Handler+0x8>

08000358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <HAL_MspInit+0x5c>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <HAL_MspInit+0x5c>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <HAL_MspInit+0x5c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_MspInit+0x5c>)
 8000378:	69db      	ldr	r3, [r3, #28]
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <HAL_MspInit+0x5c>)
 800037c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000380:	61d3      	str	r3, [r2, #28]
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_MspInit+0x5c>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <HAL_MspInit+0x60>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <HAL_MspInit+0x60>)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010000 	.word	0x40010000

080003bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <NMI_Handler+0x4>

080003c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <HardFault_Handler+0x4>

080003c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <MemManage_Handler+0x4>

080003ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <BusFault_Handler+0x4>

080003d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <UsageFault_Handler+0x4>

080003da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr

080003e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr

080003f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr

080003fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000402:	f000 fc6f 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000410:	4802      	ldr	r0, [pc, #8]	; (800041c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000412:	f001 f94b 	bl	80016ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000e7c 	.word	0x20000e7c

08000420 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000424:	4802      	ldr	r0, [pc, #8]	; (8000430 <USART1_IRQHandler+0x10>)
 8000426:	f003 fcc9 	bl	8003dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000364 	.word	0x20000364

08000434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800043c:	4a14      	ldr	r2, [pc, #80]	; (8000490 <_sbrk+0x5c>)
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <_sbrk+0x60>)
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000448:	4b13      	ldr	r3, [pc, #76]	; (8000498 <_sbrk+0x64>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d102      	bne.n	8000456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <_sbrk+0x64>)
 8000452:	4a12      	ldr	r2, [pc, #72]	; (800049c <_sbrk+0x68>)
 8000454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <_sbrk+0x64>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	693a      	ldr	r2, [r7, #16]
 8000460:	429a      	cmp	r2, r3
 8000462:	d207      	bcs.n	8000474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000464:	f008 ffb0 	bl	80093c8 <__errno>
 8000468:	4603      	mov	r3, r0
 800046a:	220c      	movs	r2, #12
 800046c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800046e:	f04f 33ff 	mov.w	r3, #4294967295
 8000472:	e009      	b.n	8000488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <_sbrk+0x64>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800047a:	4b07      	ldr	r3, [pc, #28]	; (8000498 <_sbrk+0x64>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4413      	add	r3, r2
 8000482:	4a05      	ldr	r2, [pc, #20]	; (8000498 <_sbrk+0x64>)
 8000484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000486:	68fb      	ldr	r3, [r7, #12]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20005000 	.word	0x20005000
 8000494:	00000400 	.word	0x00000400
 8000498:	20000220 	.word	0x20000220
 800049c:	20001398 	.word	0x20001398

080004a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004ae:	490d      	ldr	r1, [pc, #52]	; (80004e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b4:	e002      	b.n	80004bc <LoopCopyDataInit>

080004b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ba:	3304      	adds	r3, #4

080004bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c0:	d3f9      	bcc.n	80004b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004c4:	4c0a      	ldr	r4, [pc, #40]	; (80004f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c8:	e001      	b.n	80004ce <LoopFillZerobss>

080004ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004cc:	3204      	adds	r2, #4

080004ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d0:	d3fb      	bcc.n	80004ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004d2:	f7ff ffe5 	bl	80004a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004d6:	f008 ff7d 	bl	80093d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f008 ff69 	bl	80093b0 <main>
  bx lr
 80004de:	4770      	bx	lr
  ldr r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80004e8:	08009e48 	.word	0x08009e48
  ldr r2, =_sbss
 80004ec:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80004f0:	20001398 	.word	0x20001398

080004f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC1_2_IRQHandler>

080004f6 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b087      	sub	sp, #28
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	60f8      	str	r0, [r7, #12]
 80004fe:	60b9      	str	r1, [r7, #8]
 8000500:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000502:	2301      	movs	r3, #1
 8000504:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	60da      	str	r2, [r3, #12]
    p_node->len = 0;
    p_node->p_buf = NULL;
    ret = false;
  }
*/
  return ret;
 800051e:	7dfb      	ldrb	r3, [r7, #23]

}
 8000520:	4618      	mov	r0, r3
 8000522:	371c      	adds	r7, #28
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800052a:	b480      	push	{r7}
 800052c:	b089      	sub	sp, #36	; 0x24
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000536:	2301      	movs	r3, #1
 8000538:	77fb      	strb	r3, [r7, #31]
  uint32_t next_in;

  for (int i=0; i<length; i++)
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
 800053e:	e027      	b.n	8000590 <qbufferWrite+0x66>
  {
    next_in = (p_node->in + 1) % p_node->len;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	6892      	ldr	r2, [r2, #8]
 800054a:	fbb3 f1f2 	udiv	r1, r3, r2
 800054e:	fb01 f202 	mul.w	r2, r1, r2
 8000552:	1a9b      	subs	r3, r3, r2
 8000554:	617b      	str	r3, [r7, #20]

    if (next_in != p_node->out)
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	697a      	ldr	r2, [r7, #20]
 800055c:	429a      	cmp	r2, r3
 800055e:	d011      	beq.n	8000584 <qbufferWrite+0x5a>
    {
      if (p_node->p_buf != NULL)
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d009      	beq.n	800057c <qbufferWrite+0x52>
      {
        p_node->p_buf[p_node->in] = p_data[i];
 8000568:	69bb      	ldr	r3, [r7, #24]
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	441a      	add	r2, r3
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	68d9      	ldr	r1, [r3, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	440b      	add	r3, r1
 8000578:	7812      	ldrb	r2, [r2, #0]
 800057a:	701a      	strb	r2, [r3, #0]
      }

      p_node->in = next_in;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	e002      	b.n	800058a <qbufferWrite+0x60>
    }
    else
    {
      ret = false;
 8000584:	2300      	movs	r3, #0
 8000586:	77fb      	strb	r3, [r7, #31]
      break;
 8000588:	e006      	b.n	8000598 <qbufferWrite+0x6e>
  for (int i=0; i<length; i++)
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	3301      	adds	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	429a      	cmp	r2, r3
 8000596:	d8d3      	bhi.n	8000540 <qbufferWrite+0x16>
    }
  }

  return ret;
 8000598:	7ffb      	ldrb	r3, [r7, #31]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3724      	adds	r7, #36	; 0x24
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b087      	sub	sp, #28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80005b0:	2301      	movs	r3, #1
 80005b2:	75fb      	strb	r3, [r7, #23]

  for ( int i=0; i<length; i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	e026      	b.n	8000608 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d009      	beq.n	80005d6 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	441a      	add	r2, r3
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	68b9      	ldr	r1, [r7, #8]
 80005d0:	440b      	add	r3, r1
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d00c      	beq.n	80005fc <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	3301      	adds	r3, #1
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	6892      	ldr	r2, [r2, #8]
 80005ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80005f0:	fb01 f202 	mul.w	r2, r1, r2
 80005f4:	1a9a      	subs	r2, r3, r2
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	e002      	b.n	8000602 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80005fc:	2300      	movs	r3, #0
 80005fe:	75fb      	strb	r3, [r7, #23]
      break;
 8000600:	e006      	b.n	8000610 <qbufferRead+0x6c>
  for ( int i=0; i<length; i++)
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	3301      	adds	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	d8d4      	bhi.n	80005ba <qbufferRead+0x16>
    }
  }

  return ret;
 8000610:	7dfb      	ldrb	r3, [r7, #23]
}
 8000612:	4618      	mov	r0, r3
 8000614:	371c      	adds	r7, #28
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	6892      	ldr	r2, [r2, #8]
 8000632:	fbb3 f1f2 	udiv	r1, r3, r2
 8000636:	fb01 f202 	mul.w	r2, r1, r2
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	60fb      	str	r3, [r7, #12]

  return ret;
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
	...

0800064c <ledInit>:
    };



bool ledInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  bool ret = true;
 8000652:	2301      	movs	r3, #1
 8000654:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <ledInit+0x84>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <ledInit+0x84>)
 800066a:	f043 0308 	orr.w	r3, r3, #8
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <ledInit+0x84>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0308 	and.w	r3, r3, #8
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);


  /*Configure GPIO pin : PB12 */
  //GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2302      	movs	r3, #2
 8000686:	617b      	str	r3, [r7, #20]
  //HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  for (int i=0; i<LED_MAX_CH; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
 800068c:	e017      	b.n	80006be <ledInit+0x72>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800068e:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <ledInit+0x88>)
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4413      	add	r3, r2
 8000696:	889b      	ldrh	r3, [r3, #4]
 8000698:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <ledInit+0x88>)
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006a2:	f107 0208 	add.w	r2, r7, #8
 80006a6:	4611      	mov	r1, r2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fd19 	bl	80010e0 <HAL_GPIO_Init>

    ledOff(i);
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f810 	bl	80006d8 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	3301      	adds	r3, #1
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	dde4      	ble.n	800068e <ledInit+0x42>

  }

  return ret;
 80006c4:	7efb      	ldrb	r3, [r7, #27]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3720      	adds	r7, #32
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	20000004 	.word	0x20000004

080006d8 <ledOff>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}


void ledOff(uint8_t ch)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d811      	bhi.n	800070c <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <ledOff+0x3c>)
 80006ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <ledOff+0x3c>)
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	4413      	add	r3, r2
 80006f8:	8899      	ldrh	r1, [r3, #4]
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <ledOff+0x3c>)
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	4413      	add	r3, r2
 8000702:	79db      	ldrb	r3, [r3, #7]
 8000704:	461a      	mov	r2, r3
 8000706:	f000 fe6f 	bl	80013e8 <HAL_GPIO_WritePin>
 800070a:	e000      	b.n	800070e <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 800070c:	bf00      	nop
}
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000004 	.word	0x20000004

08000718 <ledToggle>:


void ledToggle(uint8_t ch)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d80d      	bhi.n	8000744 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <ledToggle+0x34>)
 800072c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4906      	ldr	r1, [pc, #24]	; (800074c <ledToggle+0x34>)
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	440b      	add	r3, r1
 8000738:	889b      	ldrh	r3, [r3, #4]
 800073a:	4619      	mov	r1, r3
 800073c:	4610      	mov	r0, r2
 800073e:	f000 fe6b 	bl	8001418 <HAL_GPIO_TogglePin>
 8000742:	e000      	b.n	8000746 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8000744:	bf00      	nop
}
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000004 	.word	0x20000004

08000750 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
	bool ret = true;
 8000756:	2301      	movs	r3, #1
 8000758:	71fb      	strb	r3, [r7, #7]


	//만약 Reset 핀이 눌렸다면
	if (RCC->CSR & (1<<26))
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <resetInit+0x50>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000762:	2b00      	cmp	r3, #0
 8000764:	d012      	beq.n	800078c <resetInit+0x3c>
	{
	  rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8000766:	2001      	movs	r0, #1
 8000768:	f000 f84e 	bl	8000808 <rtcBackupRegRead>
 800076c:	4603      	mov	r3, r0
 800076e:	3301      	adds	r3, #1
 8000770:	4619      	mov	r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	f000 f858 	bl	8000828 <rtcBackupRegWrite>
	  delay(500);
 8000778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077c:	f7ff fd76 	bl	800026c <delay>
	  reset_count = rtcBackupRegRead(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f000 f841 	bl	8000808 <rtcBackupRegRead>
 8000786:	4603      	mov	r3, r0
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <resetInit+0x54>)
 800078a:	6013      	str	r3, [r2, #0]
	}

	rtcBackupRegWrite(1, 0);
 800078c:	2100      	movs	r1, #0
 800078e:	2001      	movs	r0, #1
 8000790:	f000 f84a 	bl	8000828 <rtcBackupRegWrite>

	return ret;
 8000794:	79fb      	ldrb	r3, [r7, #7]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	20000224 	.word	0x20000224

080007a8 <rtcInit>:

static RTC_HandleTypeDef hrtc;


bool rtcInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
	bool ret = true;
 80007ae:	2301      	movs	r3, #1
 80007b0:	71fb      	strb	r3, [r7, #7]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <rtcInit+0x54>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <rtcInit+0x54>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6193      	str	r3, [r2, #24]
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <rtcInit+0x54>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

	/** Initialize RTC Only	  */
	hrtc.Instance 			= RTC;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <rtcInit+0x58>)
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <rtcInit+0x5c>)
 80007ce:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv 	= RTC_AUTO_1_SECOND;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <rtcInit+0x58>)
 80007d2:	f04f 32ff 	mov.w	r2, #4294967295
 80007d6:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut 		= RTC_OUTPUTSOURCE_ALARM;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <rtcInit+0x58>)
 80007da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007de:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <rtcInit+0x58>)
 80007e2:	f003 f891 	bl	8003908 <HAL_RTC_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <rtcInit+0x48>
	{
	  Error_Handler();
 80007ec:	f7ff fdaf 	bl	800034e <Error_Handler>
	}

	return ret;
 80007f0:	79fb      	ldrb	r3, [r7, #7]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	20000228 	.word	0x20000228
 8000804:	40002800 	.word	0x40002800

08000808 <rtcBackupRegRead>:


uint32_t rtcBackupRegRead(uint32_t index)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <rtcBackupRegRead+0x1c>)
 8000814:	f003 f9a6 	bl	8003b64 <HAL_RTCEx_BKUPRead>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000228 	.word	0x20000228

08000828 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <rtcBackupRegWrite+0x1c>)
 8000838:	f003 f97a 	bl	8003b30 <HAL_RTCEx_BKUPWrite>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000228 	.word	0x20000228

08000848 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <HAL_RTC_MspInit+0x3c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d110      	bne.n	800087c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800085a:	f002 fab9 	bl	8002dd0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_RTC_MspInit+0x40>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a09      	ldr	r2, [pc, #36]	; (8000888 <HAL_RTC_MspInit+0x40>)
 8000864:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <HAL_RTC_MspInit+0x40>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_RTC_MspInit+0x44>)
 8000878:	2201      	movs	r2, #1
 800087a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40002800 	.word	0x40002800
 8000888:	40021000 	.word	0x40021000
 800088c:	4242043c 	.word	0x4242043c

08000890 <uartInit>:
*/

UART_HandleTypeDef huart1;

bool uartInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	e007      	b.n	80008ac <uartInit+0x1c>
  {
    is_open[i] = false;
 800089c:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <uartInit+0x30>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3301      	adds	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	ddf4      	ble.n	800089c <uartInit+0xc>
  }

  return true;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000023c 	.word	0x2000023c

080008c4 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <uartOpen+0x1c>
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d007      	beq.n	80008ee <uartOpen+0x2a>
 80008de:	e03f      	b.n	8000960 <uartOpen+0x9c>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4a22      	ldr	r2, [pc, #136]	; (800096c <uartOpen+0xa8>)
 80008e4:	2101      	movs	r1, #1
 80008e6:	54d1      	strb	r1, [r2, r3]
      ret = true;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
      break;
 80008ec:	e038      	b.n	8000960 <uartOpen+0x9c>

    case _DEF_UART2:
      huart1.Instance            = USART1;
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <uartOpen+0xac>)
 80008f0:	4a20      	ldr	r2, [pc, #128]	; (8000974 <uartOpen+0xb0>)
 80008f2:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate       = 115200;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <uartOpen+0xac>)
 80008f6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fa:	605a      	str	r2, [r3, #4]
      huart1.Init.WordLength     = UART_WORDLENGTH_8B;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <uartOpen+0xac>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits       = UART_STOPBITS_1;
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <uartOpen+0xac>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity         = UART_PARITY_NONE;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <uartOpen+0xac>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode           = UART_MODE_TX_RX;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <uartOpen+0xac>)
 8000910:	220c      	movs	r2, #12
 8000912:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <uartOpen+0xac>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling   = UART_OVERSAMPLING_16;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <uartOpen+0xac>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]

      qbufferCreate(&qbuffer[_DEF_UART2], &rx_buf[0], 256);
 8000920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000924:	4914      	ldr	r1, [pc, #80]	; (8000978 <uartOpen+0xb4>)
 8000926:	4815      	ldr	r0, [pc, #84]	; (800097c <uartOpen+0xb8>)
 8000928:	f7ff fde5 	bl	80004f6 <qbufferCreate>



      if (HAL_UART_Init(&huart1) != HAL_OK)
 800092c:	4810      	ldr	r0, [pc, #64]	; (8000970 <uartOpen+0xac>)
 800092e:	f003 f935 	bl	8003b9c <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <uartOpen+0x7a>
      {
        //Error_Handler();
        ret = false;
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
          //Error_Handler();
          ret = false;
        }
      }

      break;
 800093c:	e00f      	b.n	800095e <uartOpen+0x9a>
        ret = true;
 800093e:	2301      	movs	r3, #1
 8000940:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a09      	ldr	r2, [pc, #36]	; (800096c <uartOpen+0xa8>)
 8000946:	2101      	movs	r1, #1
 8000948:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1) != HAL_OK)
 800094a:	2201      	movs	r2, #1
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <uartOpen+0xbc>)
 800094e:	4808      	ldr	r0, [pc, #32]	; (8000970 <uartOpen+0xac>)
 8000950:	f003 fa03 	bl	8003d5a <HAL_UART_Receive_IT>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <uartOpen+0x9a>
          ret = false;
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]
      break;
 800095e:	bf00      	nop
  }

  return ret;
 8000960:	7bfb      	ldrb	r3, [r7, #15]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000023c 	.word	0x2000023c
 8000970:	20000364 	.word	0x20000364
 8000974:	40013800 	.word	0x40013800
 8000978:	20000260 	.word	0x20000260
 800097c:	20000250 	.word	0x20000250
 8000980:	20000361 	.word	0x20000361

08000984 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <uartAvailable+0x1a>
 8000998:	2b01      	cmp	r3, #1
 800099a:	d004      	beq.n	80009a6 <uartAvailable+0x22>
 800099c:	e008      	b.n	80009b0 <uartAvailable+0x2c>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 800099e:	f007 ff99 	bl	80088d4 <cdcAvailable>
 80009a2:	60f8      	str	r0, [r7, #12]
      break;
 80009a4:	e004      	b.n	80009b0 <uartAvailable+0x2c>

    case _DEF_UART2:
      ret = qbufferAvailable(&qbuffer[_DEF_UART2]);
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <uartAvailable+0x38>)
 80009a8:	f7ff fe38 	bl	800061c <qbufferAvailable>
 80009ac:	60f8      	str	r0, [r7, #12]
      break;
 80009ae:	bf00      	nop
  }

  return ret;
 80009b0:	68fb      	ldr	r3, [r7, #12]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000250 	.word	0x20000250

080009c0 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret  = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <uartRead+0x1a>
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d006      	beq.n	80009e6 <uartRead+0x26>
 80009d8:	e00d      	b.n	80009f6 <uartRead+0x36>
  {
    case _DEF_UART1:
      ret = cdcRead();
 80009da:	f007 ff97 	bl	800890c <cdcRead>
 80009de:	4603      	mov	r3, r0
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
      break;
 80009e4:	e007      	b.n	80009f6 <uartRead+0x36>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80009e6:	f107 030f 	add.w	r3, r7, #15
 80009ea:	2201      	movs	r2, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	4804      	ldr	r0, [pc, #16]	; (8000a00 <uartRead+0x40>)
 80009f0:	f7ff fdd8 	bl	80005a4 <qbufferRead>
      break;
 80009f4:	bf00      	nop
  }

  return ret;
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000250 	.word	0x20000250

08000a04 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
 8000a10:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d002      	beq.n	8000a22 <uartWrite+0x1e>
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d006      	beq.n	8000a2e <uartWrite+0x2a>
 8000a20:	e014      	b.n	8000a4c <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	68b8      	ldr	r0, [r7, #8]
 8000a26:	f007 ffc3 	bl	80089b0 <cdcWrite>
 8000a2a:	6178      	str	r0, [r7, #20]
      break;
 8000a2c:	e00e      	b.n	8000a4c <uartWrite+0x48>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	4808      	ldr	r0, [pc, #32]	; (8000a58 <uartWrite+0x54>)
 8000a38:	f003 f8fd 	bl	8003c36 <HAL_UART_Transmit>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	74fb      	strb	r3, [r7, #19]
      if ( status == HAL_OK)
 8000a40:	7cfb      	ldrb	r3, [r7, #19]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d101      	bne.n	8000a4a <uartWrite+0x46>
      {
        ret = length;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	617b      	str	r3, [r7, #20]
      }
      break;
 8000a4a:	bf00      	nop
  }

  return ret;
 8000a4c:	697b      	ldr	r3, [r7, #20]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000364 	.word	0x20000364

08000a5c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8000a5c:	b40e      	push	{r1, r2, r3}
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b0c7      	sub	sp, #284	; 0x11c
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4602      	mov	r2, r0
 8000a66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a6a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000a6e:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8000a70:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000a74:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a7c:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8000a7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a86:	f107 0010 	add.w	r0, r7, #16
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a94:	f008 fcf6 	bl	8009484 <vsniprintf>
 8000a98:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8000a9c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000aa0:	f107 0110 	add.w	r1, r7, #16
 8000aa4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000aa8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ffa8 	bl	8000a04 <uartWrite>
 8000ab4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8000ab8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110

}
 8000abc:	4618      	mov	r0, r3
 8000abe:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ac8:	b003      	add	sp, #12
 8000aca:	4770      	bx	lr

08000acc <HAL_UART_ErrorCallback>:
  return ret;

}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {

  }
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
	...

08000ae0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_UART_RxCpltCallback+0x30>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d109      	bne.n	8000b06 <HAL_UART_RxCpltCallback+0x26>
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <HAL_UART_RxCpltCallback+0x34>)
 8000af6:	4808      	ldr	r0, [pc, #32]	; (8000b18 <HAL_UART_RxCpltCallback+0x38>)
 8000af8:	f7ff fd17 	bl	800052a <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
 8000afc:	2201      	movs	r2, #1
 8000afe:	4905      	ldr	r1, [pc, #20]	; (8000b14 <HAL_UART_RxCpltCallback+0x34>)
 8000b00:	4806      	ldr	r0, [pc, #24]	; (8000b1c <HAL_UART_RxCpltCallback+0x3c>)
 8000b02:	f003 f92a 	bl	8003d5a <HAL_UART_Receive_IT>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40013800 	.word	0x40013800
 8000b14:	20000361 	.word	0x20000361
 8000b18:	20000250 	.word	0x20000250
 8000b1c:	20000364 	.word	0x20000364

08000b20 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <HAL_UART_MspInit+0x9c>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d139      	bne.n	8000bb4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <HAL_UART_MspInit+0xa0>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <HAL_UART_MspInit+0xa0>)
 8000b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_UART_MspInit+0xa0>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_UART_MspInit+0xa0>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <HAL_UART_MspInit+0xa0>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_UART_MspInit+0xa0>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	4619      	mov	r1, r3
 8000b84:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <HAL_UART_MspInit+0xa4>)
 8000b86:	f000 faab 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <HAL_UART_MspInit+0xa4>)
 8000ba0:	f000 fa9e 	bl	80010e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2025      	movs	r0, #37	; 0x25
 8000baa:	f000 f9b2 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bae:	2025      	movs	r0, #37	; 0x25
 8000bb0:	f000 f9cb 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40013800 	.word	0x40013800
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010800 	.word	0x40010800

08000bc8 <usbInit>:

#include "usb.h"
#include "usb_device.h"

bool usbInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
	bool ret = true;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000be4:	2311      	movs	r3, #17
 8000be6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2302      	movs	r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480f      	ldr	r0, [pc, #60]	; (8000c34 <usbInit+0x6c>)
 8000bf6:	f000 fa73 	bl	80010e0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <usbInit+0x6c>)
 8000c02:	f000 fbf1 	bl	80013e8 <HAL_GPIO_WritePin>
	delay(100);
 8000c06:	2064      	movs	r0, #100	; 0x64
 8000c08:	f7ff fb30 	bl	800026c <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c12:	4808      	ldr	r0, [pc, #32]	; (8000c34 <usbInit+0x6c>)
 8000c14:	f000 fbe8 	bl	80013e8 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <usbInit+0x6c>)
 8000c22:	f000 fa5d 	bl	80010e0 <HAL_GPIO_Init>


	MX_USB_DEVICE_Init();
 8000c26:	f007 fe25 	bl	8008874 <MX_USB_DEVICE_Init>

	return ret;
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]

}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40010800 	.word	0x40010800

08000c38 <hwInit>:




void hwInit(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  bspInit();
 8000c3c:	f7ff fad8 	bl	80001f0 <bspInit>
  rtcInit();
 8000c40:	f7ff fdb2 	bl	80007a8 <rtcInit>

  resetInit();
 8000c44:	f7ff fd84 	bl	8000750 <resetInit>
  ledInit();
 8000c48:	f7ff fd00 	bl	800064c <ledInit>
  usbInit();
 8000c4c:	f7ff ffbc 	bl	8000bc8 <usbInit>
  uartInit();
 8000c50:	f7ff fe1e 	bl	8000890 <uartInit>

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_Init+0x28>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_Init+0x28>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f947 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f000 f808 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fb70 	bl	8000358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x54>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x58>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f95f 	bl	8000f66 <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 f927 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_InitTick+0x5c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000020 	.word	0x20000020
 8000ce0:	2000001c 	.word	0x2000001c

08000ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x1c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x20>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <HAL_IncTick+0x20>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	20000020 	.word	0x20000020
 8000d04:	200003a8 	.word	0x200003a8

08000d08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b02      	ldr	r3, [pc, #8]	; (8000d18 <HAL_GetTick+0x10>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	200003a8 	.word	0x200003a8

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff fff0 	bl	8000d08 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffe0 	bl	8000d08 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000020 	.word	0x20000020

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4906      	ldr	r1, [pc, #24]	; (8000dfc <__NVIC_EnableIRQ+0x34>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff90 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff2d 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff42 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff90 	bl	8000e54 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5f 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff35 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d008      	beq.n	8000fa6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2204      	movs	r2, #4
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e020      	b.n	8000fe8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 020e 	bic.w	r2, r2, #14
 8000fb4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0201 	bic.w	r2, r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fce:	2101      	movs	r1, #1
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
	...

08000ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001006:	2b02      	cmp	r3, #2
 8001008:	d005      	beq.n	8001016 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2204      	movs	r2, #4
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e051      	b.n	80010ba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 020e 	bic.w	r2, r2, #14
 8001024:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <HAL_DMA_Abort_IT+0xd0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d029      	beq.n	8001094 <HAL_DMA_Abort_IT+0xa0>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <HAL_DMA_Abort_IT+0xd4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d022      	beq.n	8001090 <HAL_DMA_Abort_IT+0x9c>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <HAL_DMA_Abort_IT+0xd8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d01a      	beq.n	800108a <HAL_DMA_Abort_IT+0x96>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <HAL_DMA_Abort_IT+0xdc>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d012      	beq.n	8001084 <HAL_DMA_Abort_IT+0x90>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <HAL_DMA_Abort_IT+0xe0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d00a      	beq.n	800107e <HAL_DMA_Abort_IT+0x8a>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <HAL_DMA_Abort_IT+0xe4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d102      	bne.n	8001078 <HAL_DMA_Abort_IT+0x84>
 8001072:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001076:	e00e      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 8001078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800107c:	e00b      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 800107e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001082:	e008      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	e005      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 800108a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108e:	e002      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 8001090:	2310      	movs	r3, #16
 8001092:	e000      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 8001094:	2301      	movs	r3, #1
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_DMA_Abort_IT+0xe8>)
 8001098:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	4798      	blx	r3
    } 
  }
  return status;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40020008 	.word	0x40020008
 80010c8:	4002001c 	.word	0x4002001c
 80010cc:	40020030 	.word	0x40020030
 80010d0:	40020044 	.word	0x40020044
 80010d4:	40020058 	.word	0x40020058
 80010d8:	4002006c 	.word	0x4002006c
 80010dc:	40020000 	.word	0x40020000

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b08b      	sub	sp, #44	; 0x2c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f2:	e169      	b.n	80013c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f4:	2201      	movs	r2, #1
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	429a      	cmp	r2, r3
 800110e:	f040 8158 	bne.w	80013c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4a9a      	ldr	r2, [pc, #616]	; (8001380 <HAL_GPIO_Init+0x2a0>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d05e      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 800111c:	4a98      	ldr	r2, [pc, #608]	; (8001380 <HAL_GPIO_Init+0x2a0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d875      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001122:	4a98      	ldr	r2, [pc, #608]	; (8001384 <HAL_GPIO_Init+0x2a4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d058      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001128:	4a96      	ldr	r2, [pc, #600]	; (8001384 <HAL_GPIO_Init+0x2a4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d86f      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800112e:	4a96      	ldr	r2, [pc, #600]	; (8001388 <HAL_GPIO_Init+0x2a8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d052      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001134:	4a94      	ldr	r2, [pc, #592]	; (8001388 <HAL_GPIO_Init+0x2a8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d869      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800113a:	4a94      	ldr	r2, [pc, #592]	; (800138c <HAL_GPIO_Init+0x2ac>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d04c      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001140:	4a92      	ldr	r2, [pc, #584]	; (800138c <HAL_GPIO_Init+0x2ac>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d863      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001146:	4a92      	ldr	r2, [pc, #584]	; (8001390 <HAL_GPIO_Init+0x2b0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d046      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 800114c:	4a90      	ldr	r2, [pc, #576]	; (8001390 <HAL_GPIO_Init+0x2b0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d85d      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001152:	2b12      	cmp	r3, #18
 8001154:	d82a      	bhi.n	80011ac <HAL_GPIO_Init+0xcc>
 8001156:	2b12      	cmp	r3, #18
 8001158:	d859      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800115a:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <HAL_GPIO_Init+0x80>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	080011db 	.word	0x080011db
 8001164:	080011b5 	.word	0x080011b5
 8001168:	080011c7 	.word	0x080011c7
 800116c:	08001209 	.word	0x08001209
 8001170:	0800120f 	.word	0x0800120f
 8001174:	0800120f 	.word	0x0800120f
 8001178:	0800120f 	.word	0x0800120f
 800117c:	0800120f 	.word	0x0800120f
 8001180:	0800120f 	.word	0x0800120f
 8001184:	0800120f 	.word	0x0800120f
 8001188:	0800120f 	.word	0x0800120f
 800118c:	0800120f 	.word	0x0800120f
 8001190:	0800120f 	.word	0x0800120f
 8001194:	0800120f 	.word	0x0800120f
 8001198:	0800120f 	.word	0x0800120f
 800119c:	0800120f 	.word	0x0800120f
 80011a0:	0800120f 	.word	0x0800120f
 80011a4:	080011bd 	.word	0x080011bd
 80011a8:	080011d1 	.word	0x080011d1
 80011ac:	4a79      	ldr	r2, [pc, #484]	; (8001394 <HAL_GPIO_Init+0x2b4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011b2:	e02c      	b.n	800120e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	623b      	str	r3, [r7, #32]
          break;
 80011ba:	e029      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	e024      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	3308      	adds	r3, #8
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e01f      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	330c      	adds	r3, #12
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e01a      	b.n	8001210 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011e2:	2304      	movs	r3, #4
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e013      	b.n	8001210 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d105      	bne.n	80011fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f0:	2308      	movs	r3, #8
 80011f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	611a      	str	r2, [r3, #16]
          break;
 80011fa:	e009      	b.n	8001210 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011fc:	2308      	movs	r3, #8
 80011fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	615a      	str	r2, [r3, #20]
          break;
 8001206:	e003      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x130>
          break;
 800120e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d801      	bhi.n	800121a <HAL_GPIO_Init+0x13a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	e001      	b.n	800121e <HAL_GPIO_Init+0x13e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3304      	adds	r3, #4
 800121e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2bff      	cmp	r3, #255	; 0xff
 8001224:	d802      	bhi.n	800122c <HAL_GPIO_Init+0x14c>
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x152>
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	3b08      	subs	r3, #8
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	210f      	movs	r1, #15
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	6a39      	ldr	r1, [r7, #32]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80b1 	beq.w	80013c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001260:	4b4d      	ldr	r3, [pc, #308]	; (8001398 <HAL_GPIO_Init+0x2b8>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a4c      	ldr	r2, [pc, #304]	; (8001398 <HAL_GPIO_Init+0x2b8>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b4a      	ldr	r3, [pc, #296]	; (8001398 <HAL_GPIO_Init+0x2b8>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001278:	4a48      	ldr	r2, [pc, #288]	; (800139c <HAL_GPIO_Init+0x2bc>)
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a40      	ldr	r2, [pc, #256]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d013      	beq.n	80012cc <HAL_GPIO_Init+0x1ec>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3f      	ldr	r2, [pc, #252]	; (80013a4 <HAL_GPIO_Init+0x2c4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d00d      	beq.n	80012c8 <HAL_GPIO_Init+0x1e8>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3e      	ldr	r2, [pc, #248]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d007      	beq.n	80012c4 <HAL_GPIO_Init+0x1e4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a3d      	ldr	r2, [pc, #244]	; (80013ac <HAL_GPIO_Init+0x2cc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d101      	bne.n	80012c0 <HAL_GPIO_Init+0x1e0>
 80012bc:	2303      	movs	r3, #3
 80012be:	e006      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012c0:	2304      	movs	r3, #4
 80012c2:	e004      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e002      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012cc:	2300      	movs	r3, #0
 80012ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d0:	f002 0203 	and.w	r2, r2, #3
 80012d4:	0092      	lsls	r2, r2, #2
 80012d6:	4093      	lsls	r3, r2
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012de:	492f      	ldr	r1, [pc, #188]	; (800139c <HAL_GPIO_Init+0x2bc>)
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	492c      	ldr	r1, [pc, #176]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	43db      	mvns	r3, r3
 800130e:	4928      	ldr	r1, [pc, #160]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001310:	4013      	ands	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001320:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	4922      	ldr	r1, [pc, #136]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	43db      	mvns	r3, r3
 8001336:	491e      	ldr	r1, [pc, #120]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001338:	4013      	ands	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	4918      	ldr	r1, [pc, #96]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	608b      	str	r3, [r1, #8]
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	43db      	mvns	r3, r3
 800135e:	4914      	ldr	r1, [pc, #80]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001360:	4013      	ands	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d021      	beq.n	80013b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	490e      	ldr	r1, [pc, #56]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	60cb      	str	r3, [r1, #12]
 800137c:	e021      	b.n	80013c2 <HAL_GPIO_Init+0x2e2>
 800137e:	bf00      	nop
 8001380:	10320000 	.word	0x10320000
 8001384:	10310000 	.word	0x10310000
 8001388:	10220000 	.word	0x10220000
 800138c:	10210000 	.word	0x10210000
 8001390:	10120000 	.word	0x10120000
 8001394:	10110000 	.word	0x10110000
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000
 80013a0:	40010800 	.word	0x40010800
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40011400 	.word	0x40011400
 80013b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_GPIO_Init+0x304>)
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	4909      	ldr	r1, [pc, #36]	; (80013e4 <HAL_GPIO_Init+0x304>)
 80013be:	4013      	ands	r3, r2
 80013c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	3301      	adds	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	fa22 f303 	lsr.w	r3, r2, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f47f ae8e 	bne.w	80010f4 <HAL_GPIO_Init+0x14>
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	372c      	adds	r7, #44	; 0x2c
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40010400 	.word	0x40010400

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001404:	e003      	b.n	800140e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	041a      	lsls	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	611a      	str	r2, [r3, #16]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4013      	ands	r3, r2
 8001430:	041a      	lsls	r2, r3, #16
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	43d9      	mvns	r1, r3
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	400b      	ands	r3, r1
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	611a      	str	r2, [r3, #16]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800144a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144c:	b08b      	sub	sp, #44	; 0x2c
 800144e:	af06      	add	r7, sp, #24
 8001450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0fd      	b.n	8001658 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d106      	bne.n	8001476 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f007 fcf3 	bl	8008e5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2203      	movs	r2, #3
 800147a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f003 f8e0 	bl	8004648 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	687e      	ldr	r6, [r7, #4]
 8001490:	466d      	mov	r5, sp
 8001492:	f106 0410 	add.w	r4, r6, #16
 8001496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	602b      	str	r3, [r5, #0]
 800149e:	1d33      	adds	r3, r6, #4
 80014a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a2:	6838      	ldr	r0, [r7, #0]
 80014a4:	f003 f8aa 	bl	80045fc <USB_CoreInit>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2202      	movs	r2, #2
 80014b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0ce      	b.n	8001658 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 f8db 	bl	800467c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e04c      	b.n	8001566 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	440b      	add	r3, r1
 80014dc:	3301      	adds	r3, #1
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	b298      	uxth	r0, r3
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	3336      	adds	r3, #54	; 0x36
 800150a:	4602      	mov	r2, r0
 800150c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	440b      	add	r3, r1
 800151e:	3303      	adds	r3, #3
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	3338      	adds	r3, #56	; 0x38
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	333c      	adds	r3, #60	; 0x3c
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	3340      	adds	r3, #64	; 0x40
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	3301      	adds	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	d3ad      	bcc.n	80014cc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	e044      	b.n	8001600 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	440b      	add	r3, r1
 800159a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	440b      	add	r3, r1
 80015b0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	3301      	adds	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	d3b5      	bcc.n	8001576 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	687e      	ldr	r6, [r7, #4]
 8001612:	466d      	mov	r5, sp
 8001614:	f106 0410 	add.w	r4, r6, #16
 8001618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	602b      	str	r3, [r5, #0]
 8001620:	1d33      	adds	r3, r6, #4
 8001622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f003 f835 	bl	8004694 <USB_DevInit>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e00d      	b.n	8001658 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f005 fce7 	bl	8007024 <USB_DevDisconnect>

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001660 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_PCD_Start+0x16>
 8001672:	2302      	movs	r3, #2
 8001674:	e016      	b.n	80016a4 <HAL_PCD_Start+0x44>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f002 ffca 	bl	800461c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001688:	2101      	movs	r1, #1
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f007 fe59 	bl	8009342 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f005 fcbb 	bl	8007010 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f005 fcbd 	bl	8007038 <USB_ReadInterrupts>
 80016be:	4603      	mov	r3, r0
 80016c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016c8:	d102      	bne.n	80016d0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fb5f 	bl	8001d8e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f005 fcaf 	bl	8007038 <USB_ReadInterrupts>
 80016da:	4603      	mov	r3, r0
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e4:	d112      	bne.n	800170c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f8:	b292      	uxth	r2, r2
 80016fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f007 fc27 	bl	8008f52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001704:	2100      	movs	r1, #0
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f923 	bl	8001952 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f005 fc91 	bl	8007038 <USB_ReadInterrupts>
 8001716:	4603      	mov	r3, r0
 8001718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001720:	d10b      	bne.n	800173a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001734:	b292      	uxth	r2, r2
 8001736:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f005 fc7a 	bl	8007038 <USB_ReadInterrupts>
 8001744:	4603      	mov	r3, r0
 8001746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800174a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174e:	d10b      	bne.n	8001768 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001758:	b29a      	uxth	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001762:	b292      	uxth	r2, r2
 8001764:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f005 fc63 	bl	8007038 <USB_ReadInterrupts>
 8001772:	4603      	mov	r3, r0
 8001774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177c:	d126      	bne.n	80017cc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001786:	b29a      	uxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0204 	bic.w	r2, r2, #4
 8001790:	b292      	uxth	r2, r2
 8001792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800179e:	b29a      	uxth	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0208 	bic.w	r2, r2, #8
 80017a8:	b292      	uxth	r2, r2
 80017aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f007 fc08 	bl	8008fc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017bc:	b29a      	uxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017c6:	b292      	uxth	r2, r2
 80017c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 fc31 	bl	8007038 <USB_ReadInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017e0:	f040 8082 	bne.w	80018e8 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	77fb      	strb	r3, [r7, #31]
 80017e8:	e010      	b.n	800180c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	7ffb      	ldrb	r3, [r7, #31]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	441a      	add	r2, r3
 80017f6:	7ffb      	ldrb	r3, [r7, #31]
 80017f8:	8812      	ldrh	r2, [r2, #0]
 80017fa:	b292      	uxth	r2, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	3320      	adds	r3, #32
 8001800:	443b      	add	r3, r7
 8001802:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001806:	7ffb      	ldrb	r3, [r7, #31]
 8001808:	3301      	adds	r3, #1
 800180a:	77fb      	strb	r3, [r7, #31]
 800180c:	7ffb      	ldrb	r3, [r7, #31]
 800180e:	2b07      	cmp	r3, #7
 8001810:	d9eb      	bls.n	80017ea <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800181a:	b29a      	uxth	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	b292      	uxth	r2, r2
 8001826:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	b292      	uxth	r2, r2
 800183e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001842:	bf00      	nop
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184c:	b29b      	uxth	r3, r3
 800184e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f6      	beq.n	8001844 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800185e:	b29a      	uxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001868:	b292      	uxth	r2, r2
 800186a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800186e:	2300      	movs	r3, #0
 8001870:	77fb      	strb	r3, [r7, #31]
 8001872:	e00f      	b.n	8001894 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001874:	7ffb      	ldrb	r3, [r7, #31]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	4611      	mov	r1, r2
 800187c:	7ffa      	ldrb	r2, [r7, #31]
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	440a      	add	r2, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	3320      	adds	r3, #32
 8001886:	443b      	add	r3, r7
 8001888:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800188c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800188e:	7ffb      	ldrb	r3, [r7, #31]
 8001890:	3301      	adds	r3, #1
 8001892:	77fb      	strb	r3, [r7, #31]
 8001894:	7ffb      	ldrb	r3, [r7, #31]
 8001896:	2b07      	cmp	r3, #7
 8001898:	d9ec      	bls.n	8001874 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f042 0208 	orr.w	r2, r2, #8
 80018ac:	b292      	uxth	r2, r2
 80018ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c4:	b292      	uxth	r2, r2
 80018c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0204 	orr.w	r2, r2, #4
 80018dc:	b292      	uxth	r2, r2
 80018de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f007 fb54 	bl	8008f90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f005 fba3 	bl	8007038 <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018fc:	d10e      	bne.n	800191c <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001910:	b292      	uxth	r2, r2
 8001912:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f007 fb0d 	bl	8008f36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f005 fb89 	bl	8007038 <USB_ReadInterrupts>
 8001926:	4603      	mov	r3, r0
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001930:	d10b      	bne.n	800194a <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001944:	b292      	uxth	r2, r2
 8001946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800194a:	bf00      	nop
 800194c:	3720      	adds	r7, #32
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_PCD_SetAddress+0x1a>
 8001968:	2302      	movs	r3, #2
 800196a:	e013      	b.n	8001994 <HAL_PCD_SetAddress+0x42>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f005 fb30 	bl	8006fea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4603      	mov	r3, r0
 80019ac:	70fb      	strb	r3, [r7, #3]
 80019ae:	460b      	mov	r3, r1
 80019b0:	803b      	strh	r3, [r7, #0]
 80019b2:	4613      	mov	r3, r2
 80019b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	da0e      	bge.n	80019e0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2201      	movs	r2, #1
 80019dc:	705a      	strb	r2, [r3, #1]
 80019de:	e00e      	b.n	80019fe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	f003 0207 	and.w	r2, r3, #7
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a0a:	883a      	ldrh	r2, [r7, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	78ba      	ldrb	r2, [r7, #2]
 8001a14:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	785b      	ldrb	r3, [r3, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a28:	78bb      	ldrb	r3, [r7, #2]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d102      	bne.n	8001a34 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_PCD_EP_Open+0xa6>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e00e      	b.n	8001a60 <HAL_PCD_EP_Open+0xc4>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fe3f 	bl	80046d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da0e      	bge.n	8001a9a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	705a      	strb	r2, [r3, #1]
 8001a98:	e00e      	b.n	8001ab8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	f003 0207 	and.w	r2, r3, #7
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_PCD_EP_Close+0x6a>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e00e      	b.n	8001af0 <HAL_PCD_EP_Close+0x88>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68f9      	ldr	r1, [r7, #12]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 f961 	bl	8004da8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	460b      	mov	r3, r1
 8001b06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	f003 0207 	and.w	r2, r3, #7
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2200      	movs	r2, #0
 8001b36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b38:	7afb      	ldrb	r3, [r7, #11]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6979      	ldr	r1, [r7, #20]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fb13 	bl	8005180 <USB_EPStartXfer>
 8001b5a:	e005      	b.n	8001b68 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6979      	ldr	r1, [r7, #20]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fb0c 	bl	8005180 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	f003 0207 	and.w	r2, r3, #7
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b94:	681b      	ldr	r3, [r3, #0]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	460b      	mov	r3, r1
 8001bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2201      	movs	r2, #1
 8001bea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bec:	7afb      	ldrb	r3, [r7, #11]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6979      	ldr	r1, [r7, #20]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 fab9 	bl	8005180 <USB_EPStartXfer>
 8001c0e:	e005      	b.n	8001c1c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fab2 	bl	8005180 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	f003 0207 	and.w	r2, r3, #7
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d901      	bls.n	8001c44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e04c      	b.n	8001cde <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	da0e      	bge.n	8001c6a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	705a      	strb	r2, [r3, #1]
 8001c68:	e00c      	b.n	8001c84 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_PCD_EP_SetStall+0x7e>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e01c      	b.n	8001cde <HAL_PCD_EP_SetStall+0xb8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f005 f89c 	bl	8006df0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d108      	bne.n	8001cd4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4610      	mov	r0, r2
 8001cd0:	f005 f9c1 	bl	8007056 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d901      	bls.n	8001d04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e040      	b.n	8001d86 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da0e      	bge.n	8001d2a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	705a      	strb	r2, [r3, #1]
 8001d28:	e00e      	b.n	8001d48 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	f003 0207 	and.w	r2, r3, #7
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_EP_ClrStall+0x82>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e00e      	b.n	8001d86 <HAL_PCD_EP_ClrStall+0xa0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f005 f88a 	bl	8006e90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b08e      	sub	sp, #56	; 0x38
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d96:	e2ec      	b.n	8002372 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001da2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001dae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f040 8161 	bne.w	800207a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001db8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d152      	bne.n	8001e68 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd2:	81fb      	strh	r3, [r7, #14]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	89fb      	ldrh	r3, [r7, #14]
 8001dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3328      	adds	r3, #40	; 0x28
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	3302      	adds	r3, #2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	441a      	add	r2, r3
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e26:	2100      	movs	r1, #0
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f007 f86a 	bl	8008f02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 829b 	beq.w	8002372 <PCD_EP_ISR_Handler+0x5e4>
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f040 8296 	bne.w	8002372 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e66:	e284      	b.n	8002372 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d034      	beq.n	8001eec <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	3306      	adds	r3, #6
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	f005 f918 	bl	80070f6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	823b      	strh	r3, [r7, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	8a3a      	ldrh	r2, [r7, #16]
 8001edc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f006 ffdf 	bl	8008ea8 <HAL_PCD_SetupStageCallback>
 8001eea:	e242      	b.n	8002372 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f280 823e 	bge.w	8002372 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f02:	4013      	ands	r3, r2
 8001f04:	83bb      	strh	r3, [r7, #28]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	8bba      	ldrh	r2, [r7, #28]
 8001f0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f10:	b292      	uxth	r2, r2
 8001f12:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	3306      	adds	r3, #6
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d019      	beq.n	8001f7c <PCD_EP_ISR_Handler+0x1ee>
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d015      	beq.n	8001f7c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	6959      	ldr	r1, [r3, #20]
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f005 f8c8 	bl	80070f6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	441a      	add	r2, r3
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f74:	2100      	movs	r1, #0
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f006 ffa8 	bl	8008ecc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f040 81f2 	bne.w	8002372 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d112      	bne.n	8001fdc <PCD_EP_ISR_Handler+0x24e>
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	801a      	strh	r2, [r3, #0]
 8001fda:	e02f      	b.n	800203c <PCD_EP_ISR_Handler+0x2ae>
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b3e      	cmp	r3, #62	; 0x3e
 8001fe2:	d813      	bhi.n	800200c <PCD_EP_ISR_Handler+0x27e>
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <PCD_EP_ISR_Handler+0x270>
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	b29b      	uxth	r3, r3
 8002002:	029b      	lsls	r3, r3, #10
 8002004:	b29a      	uxth	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	801a      	strh	r2, [r3, #0]
 800200a:	e017      	b.n	800203c <PCD_EP_ISR_Handler+0x2ae>
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <PCD_EP_ISR_Handler+0x298>
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	3b01      	subs	r3, #1
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
 8002026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002028:	b29b      	uxth	r3, r3
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	b29b      	uxth	r3, r3
 800202e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002036:	b29a      	uxth	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204c:	827b      	strh	r3, [r7, #18]
 800204e:	8a7b      	ldrh	r3, [r7, #18]
 8002050:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002054:	827b      	strh	r3, [r7, #18]
 8002056:	8a7b      	ldrh	r3, [r7, #18]
 8002058:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800205c:	827b      	strh	r3, [r7, #18]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	8a7b      	ldrh	r3, [r7, #18]
 8002064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800206c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002074:	b29b      	uxth	r3, r3
 8002076:	8013      	strh	r3, [r2, #0]
 8002078:	e17b      	b.n	8002372 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800208c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002090:	2b00      	cmp	r3, #0
 8002092:	f280 80ea 	bge.w	800226a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020ac:	4013      	ands	r3, r2
 80020ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020c4:	b292      	uxth	r2, r2
 80020c6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80020c8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	7b1b      	ldrb	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d122      	bne.n	800212c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	3306      	adds	r3, #6
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800210e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002110:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8087 	beq.w	8002226 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	6959      	ldr	r1, [r3, #20]
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	88da      	ldrh	r2, [r3, #6]
 8002124:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002126:	f004 ffe6 	bl	80070f6 <USB_ReadPMA>
 800212a:	e07c      	b.n	8002226 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	78db      	ldrb	r3, [r3, #3]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d108      	bne.n	8002146 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002134:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002136:	461a      	mov	r2, r3
 8002138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f927 	bl	800238e <HAL_PCD_EP_DB_Receive>
 8002140:	4603      	mov	r3, r0
 8002142:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002144:	e06f      	b.n	8002226 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800215c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002160:	847b      	strh	r3, [r7, #34]	; 0x22
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	441a      	add	r2, r3
 8002170:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800217a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002182:	b29b      	uxth	r3, r3
 8002184:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d021      	beq.n	80021e4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	3302      	adds	r3, #2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80021ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02a      	beq.n	8002226 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	6959      	ldr	r1, [r3, #20]
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	891a      	ldrh	r2, [r3, #8]
 80021dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021de:	f004 ff8a 	bl	80070f6 <USB_ReadPMA>
 80021e2:	e020      	b.n	8002226 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	3306      	adds	r3, #6
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800220e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	6959      	ldr	r1, [r3, #20]
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	895a      	ldrh	r2, [r3, #10]
 8002220:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002222:	f004 ff68 	bl	80070f6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800222c:	441a      	add	r2, r3
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002238:	441a      	add	r2, r3
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <PCD_EP_ISR_Handler+0x4c2>
 8002246:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d206      	bcs.n	800225e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f006 fe38 	bl	8008ecc <HAL_PCD_DataOutStageCallback>
 800225c:	e005      	b.n	800226a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002264:	4618      	mov	r0, r3
 8002266:	f002 ff8b 	bl	8005180 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800226a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	2b00      	cmp	r3, #0
 8002272:	d07e      	beq.n	8002372 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002274:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	843b      	strh	r3, [r7, #32]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	8c3b      	ldrh	r3, [r7, #32]
 80022b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022bc:	b29b      	uxth	r3, r3
 80022be:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	78db      	ldrb	r3, [r3, #3]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d00c      	beq.n	80022e2 <PCD_EP_ISR_Handler+0x554>
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	78db      	ldrb	r3, [r3, #3]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d146      	bne.n	8002366 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d141      	bne.n	8002366 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	3302      	adds	r3, #2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800230a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	8bfb      	ldrh	r3, [r7, #30]
 8002312:	429a      	cmp	r2, r3
 8002314:	d906      	bls.n	8002324 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	8bfb      	ldrh	r3, [r7, #30]
 800231c:	1ad2      	subs	r2, r2, r3
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	619a      	str	r2, [r3, #24]
 8002322:	e002      	b.n	800232a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	2200      	movs	r2, #0
 8002328:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f006 fde2 	bl	8008f02 <HAL_PCD_DataInStageCallback>
 800233e:	e018      	b.n	8002372 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	8bfb      	ldrh	r3, [r7, #30]
 8002346:	441a      	add	r2, r3
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	8bfb      	ldrh	r3, [r7, #30]
 8002352:	441a      	add	r2, r3
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800235e:	4618      	mov	r0, r3
 8002360:	f002 ff0e 	bl	8005180 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002364:	e005      	b.n	8002372 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002366:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002368:	461a      	mov	r2, r3
 800236a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f91b 	bl	80025a8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800237a:	b29b      	uxth	r3, r3
 800237c:	b21b      	sxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	f6ff ad0a 	blt.w	8001d98 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3738      	adds	r7, #56	; 0x38
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b088      	sub	sp, #32
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	4613      	mov	r3, r2
 800239a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d07e      	beq.n	80024a4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	3302      	adds	r3, #2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	8b7b      	ldrh	r3, [r7, #26]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d306      	bcc.n	80023e8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	8b7b      	ldrh	r3, [r7, #26]
 80023e0:	1ad2      	subs	r2, r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	619a      	str	r2, [r3, #24]
 80023e6:	e002      	b.n	80023ee <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d123      	bne.n	800243e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800240c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002410:	833b      	strh	r3, [r7, #24]
 8002412:	8b3b      	ldrh	r3, [r7, #24]
 8002414:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002418:	833b      	strh	r3, [r7, #24]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	441a      	add	r2, r3
 8002428:	8b3b      	ldrh	r3, [r7, #24]
 800242a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800242e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243a:	b29b      	uxth	r3, r3
 800243c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01f      	beq.n	8002488 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b29b      	uxth	r3, r3
 800245a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800245e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002462:	82fb      	strh	r3, [r7, #22]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	441a      	add	r2, r3
 8002472:	8afb      	ldrh	r3, [r7, #22]
 8002474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800247c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002480:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002484:	b29b      	uxth	r3, r3
 8002486:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002488:	8b7b      	ldrh	r3, [r7, #26]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8087 	beq.w	800259e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	6959      	ldr	r1, [r3, #20]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	891a      	ldrh	r2, [r3, #8]
 800249c:	8b7b      	ldrh	r3, [r7, #26]
 800249e:	f004 fe2a 	bl	80070f6 <USB_ReadPMA>
 80024a2:	e07c      	b.n	800259e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	3306      	adds	r3, #6
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	8b7b      	ldrh	r3, [r7, #26]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d306      	bcc.n	80024e6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	8b7b      	ldrh	r3, [r7, #26]
 80024de:	1ad2      	subs	r2, r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	619a      	str	r2, [r3, #24]
 80024e4:	e002      	b.n	80024ec <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d123      	bne.n	800253c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b29b      	uxth	r3, r3
 8002506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800250a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250e:	83fb      	strh	r3, [r7, #30]
 8002510:	8bfb      	ldrh	r3, [r7, #30]
 8002512:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002516:	83fb      	strh	r3, [r7, #30]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	441a      	add	r2, r3
 8002526:	8bfb      	ldrh	r3, [r7, #30]
 8002528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800252c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002538:	b29b      	uxth	r3, r3
 800253a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d11f      	bne.n	8002586 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002560:	83bb      	strh	r3, [r7, #28]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	441a      	add	r2, r3
 8002570:	8bbb      	ldrh	r3, [r7, #28]
 8002572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800257a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002582:	b29b      	uxth	r3, r3
 8002584:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002586:	8b7b      	ldrh	r3, [r7, #26]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	6959      	ldr	r1, [r3, #20]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	895a      	ldrh	r2, [r3, #10]
 8002598:	8b7b      	ldrh	r3, [r7, #26]
 800259a:	f004 fdac 	bl	80070f6 <USB_ReadPMA>
    }
  }

  return count;
 800259e:	8b7b      	ldrh	r3, [r7, #26]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0a2      	sub	sp, #136	; 0x88
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	4613      	mov	r3, r2
 80025b4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 81c7 	beq.w	8002950 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	3302      	adds	r3, #2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d907      	bls.n	800260a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002602:	1ad2      	subs	r2, r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	619a      	str	r2, [r3, #24]
 8002608:	e002      	b.n	8002610 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 80b9 	bne.w	800278c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	785b      	ldrb	r3, [r3, #1]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d126      	bne.n	8002670 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002630:	b29b      	uxth	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	4413      	add	r3, r2
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	011a      	lsls	r2, r3, #4
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	4413      	add	r3, r2
 8002644:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002654:	b29a      	uxth	r2, r3
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	801a      	strh	r2, [r3, #0]
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002668:	b29a      	uxth	r2, r3
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	801a      	strh	r2, [r3, #0]
 800266e:	e01a      	b.n	80026a6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	785b      	ldrb	r3, [r3, #1]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d116      	bne.n	80026a6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	4413      	add	r3, r2
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	011a      	lsls	r2, r3, #4
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	4413      	add	r3, r2
 800269a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	2200      	movs	r2, #0
 80026a4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	785b      	ldrb	r3, [r3, #1]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d126      	bne.n	8002702 <HAL_PCD_EP_DB_Transmit+0x15a>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	4413      	add	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	011a      	lsls	r2, r3, #4
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4413      	add	r3, r2
 80026d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	e017      	b.n	8002732 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d113      	bne.n	8002732 <HAL_PCD_EP_DB_Transmit+0x18a>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	4413      	add	r3, r2
 800271a:	623b      	str	r3, [r7, #32]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	011a      	lsls	r2, r3, #4
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	4413      	add	r3, r2
 8002726:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	4619      	mov	r1, r3
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f006 fbe2 	bl	8008f02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 82d4 	beq.w	8002cf2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002764:	827b      	strh	r3, [r7, #18]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	441a      	add	r2, r3
 8002774:	8a7b      	ldrh	r3, [r7, #18]
 8002776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800277e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002786:	b29b      	uxth	r3, r3
 8002788:	8013      	strh	r3, [r2, #0]
 800278a:	e2b2      	b.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d021      	beq.n	80027da <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	441a      	add	r2, r3
 80027c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80027c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	f040 8286 	bne.w	8002cf2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027ee:	441a      	add	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027fc:	441a      	add	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	6a1a      	ldr	r2, [r3, #32]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	429a      	cmp	r2, r3
 800280c:	d309      	bcc.n	8002822 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281a:	1ad2      	subs	r2, r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	621a      	str	r2, [r3, #32]
 8002820:	e015      	b.n	800284e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800282a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800282e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002838:	e009      	b.n	800284e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2200      	movs	r2, #0
 800284c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d155      	bne.n	8002902 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286a:	4413      	add	r3, r2
 800286c:	63bb      	str	r3, [r7, #56]	; 0x38
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	011a      	lsls	r2, r3, #4
 8002874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002876:	4413      	add	r3, r2
 8002878:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
 800287e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002880:	2b00      	cmp	r3, #0
 8002882:	d112      	bne.n	80028aa <HAL_PCD_EP_DB_Transmit+0x302>
 8002884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800288e:	b29a      	uxth	r2, r3
 8002890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002892:	801a      	strh	r2, [r3, #0]
 8002894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800289e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a6:	801a      	strh	r2, [r3, #0]
 80028a8:	e047      	b.n	800293a <HAL_PCD_EP_DB_Transmit+0x392>
 80028aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ac:	2b3e      	cmp	r3, #62	; 0x3e
 80028ae:	d811      	bhi.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80028b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80028b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80028c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c2:	3301      	adds	r3, #1
 80028c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80028c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	029b      	lsls	r3, r3, #10
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d0:	801a      	strh	r2, [r3, #0]
 80028d2:	e032      	b.n	800293a <HAL_PCD_EP_DB_Transmit+0x392>
 80028d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <HAL_PCD_EP_DB_Transmit+0x342>
 80028e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e6:	3b01      	subs	r3, #1
 80028e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	029b      	lsls	r3, r3, #10
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	e01b      	b.n	800293a <HAL_PCD_EP_DB_Transmit+0x392>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	785b      	ldrb	r3, [r3, #1]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d117      	bne.n	800293a <HAL_PCD_EP_DB_Transmit+0x392>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	643b      	str	r3, [r7, #64]	; 0x40
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002918:	b29b      	uxth	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291e:	4413      	add	r3, r2
 8002920:	643b      	str	r3, [r7, #64]	; 0x40
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	011a      	lsls	r2, r3, #4
 8002928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292a:	4413      	add	r3, r2
 800292c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002934:	b29a      	uxth	r2, r3
 8002936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002938:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	6959      	ldr	r1, [r3, #20]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	891a      	ldrh	r2, [r3, #8]
 8002946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002948:	b29b      	uxth	r3, r3
 800294a:	f004 fb8f 	bl	800706c <USB_WritePMA>
 800294e:	e1d0      	b.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002958:	b29b      	uxth	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	3306      	adds	r3, #6
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002978:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	699a      	ldr	r2, [r3, #24]
 8002980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002984:	429a      	cmp	r2, r3
 8002986:	d307      	bcc.n	8002998 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	699a      	ldr	r2, [r3, #24]
 800298c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	619a      	str	r2, [r3, #24]
 8002996:	e002      	b.n	800299e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 80c4 	bne.w	8002b30 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	785b      	ldrb	r3, [r3, #1]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d126      	bne.n	80029fe <HAL_PCD_EP_DB_Transmit+0x456>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c4:	4413      	add	r3, r2
 80029c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	011a      	lsls	r2, r3, #4
 80029ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d0:	4413      	add	r3, r2
 80029d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80029d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029e6:	801a      	strh	r2, [r3, #0]
 80029e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029fa:	801a      	strh	r2, [r3, #0]
 80029fc:	e01a      	b.n	8002a34 <HAL_PCD_EP_DB_Transmit+0x48c>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	785b      	ldrb	r3, [r3, #1]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d116      	bne.n	8002a34 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	677b      	str	r3, [r7, #116]	; 0x74
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a1a:	4413      	add	r3, r2
 8002a1c:	677b      	str	r3, [r7, #116]	; 0x74
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	011a      	lsls	r2, r3, #4
 8002a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a26:	4413      	add	r3, r2
 8002a28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a2c:	673b      	str	r3, [r7, #112]	; 0x70
 8002a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a30:	2200      	movs	r2, #0
 8002a32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	785b      	ldrb	r3, [r3, #1]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d12f      	bne.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	011a      	lsls	r2, r3, #4
 8002a66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a9e:	801a      	strh	r2, [r3, #0]
 8002aa0:	e017      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	785b      	ldrb	r3, [r3, #1]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d113      	bne.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab8:	4413      	add	r3, r2
 8002aba:	67bb      	str	r3, [r7, #120]	; 0x78
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	011a      	lsls	r2, r3, #4
 8002ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002aca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ace:	2200      	movs	r2, #0
 8002ad0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f006 fa12 	bl	8008f02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 8104 	bne.w	8002cf2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	441a      	add	r2, r3
 8002b16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	8013      	strh	r3, [r2, #0]
 8002b2e:	e0e0      	b.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d121      	bne.n	8002b7e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	441a      	add	r2, r3
 8002b66:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	f040 80b4 	bne.w	8002cf2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b92:	441a      	add	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ba0:	441a      	add	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d309      	bcc.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bbe:	1ad2      	subs	r2, r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	621a      	str	r2, [r3, #32]
 8002bc4:	e015      	b.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d107      	bne.n	8002bde <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002bce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bd2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bdc:	e009      	b.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2200      	movs	r2, #0
 8002be8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	667b      	str	r3, [r7, #100]	; 0x64
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	785b      	ldrb	r3, [r3, #1]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d155      	bne.n	8002cac <HAL_PCD_EP_DB_Transmit+0x704>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c14:	4413      	add	r3, r2
 8002c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	011a      	lsls	r2, r3, #4
 8002c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c20:	4413      	add	r3, r2
 8002c22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c26:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d112      	bne.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c50:	801a      	strh	r2, [r3, #0]
 8002c52:	e044      	b.n	8002cde <HAL_PCD_EP_DB_Transmit+0x736>
 8002c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c56:	2b3e      	cmp	r3, #62	; 0x3e
 8002c58:	d811      	bhi.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	029b      	lsls	r3, r3, #10
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	e02f      	b.n	8002cde <HAL_PCD_EP_DB_Transmit+0x736>
 8002c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	657b      	str	r3, [r7, #84]	; 0x54
 8002c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c90:	3b01      	subs	r3, #1
 8002c92:	657b      	str	r3, [r7, #84]	; 0x54
 8002c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	029b      	lsls	r3, r3, #10
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca8:	801a      	strh	r2, [r3, #0]
 8002caa:	e018      	b.n	8002cde <HAL_PCD_EP_DB_Transmit+0x736>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	785b      	ldrb	r3, [r3, #1]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d114      	bne.n	8002cde <HAL_PCD_EP_DB_Transmit+0x736>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cc2:	4413      	add	r3, r2
 8002cc4:	667b      	str	r3, [r7, #100]	; 0x64
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	011a      	lsls	r2, r3, #4
 8002ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cce:	4413      	add	r3, r2
 8002cd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8002cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cdc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	6959      	ldr	r1, [r3, #20]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	895a      	ldrh	r2, [r3, #10]
 8002cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f004 f9bd 	bl	800706c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d0c:	823b      	strh	r3, [r7, #16]
 8002d0e:	8a3b      	ldrh	r3, [r7, #16]
 8002d10:	f083 0310 	eor.w	r3, r3, #16
 8002d14:	823b      	strh	r3, [r7, #16]
 8002d16:	8a3b      	ldrh	r3, [r7, #16]
 8002d18:	f083 0320 	eor.w	r3, r3, #32
 8002d1c:	823b      	strh	r3, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	441a      	add	r2, r3
 8002d2c:	8a3b      	ldrh	r3, [r7, #16]
 8002d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3788      	adds	r7, #136	; 0x88
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d6a:	897b      	ldrh	r3, [r7, #10]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	e009      	b.n	8002d96 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d82:	897a      	ldrh	r2, [r7, #10]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d96:	893b      	ldrh	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d107      	bne.n	8002dac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	80da      	strh	r2, [r3, #6]
 8002daa:	e00b      	b.n	8002dc4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2201      	movs	r2, #1
 8002db0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	420e0020 	.word	0x420e0020

08002de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e272      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8087 	beq.w	8002f16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e08:	4b92      	ldr	r3, [pc, #584]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d00c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e14:	4b8f      	ldr	r3, [pc, #572]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d112      	bne.n	8002e46 <HAL_RCC_OscConfig+0x5e>
 8002e20:	4b8c      	ldr	r3, [pc, #560]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2c:	d10b      	bne.n	8002e46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2e:	4b89      	ldr	r3, [pc, #548]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d06c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x12c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d168      	bne.n	8002f14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e24c      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x76>
 8002e50:	4b80      	ldr	r3, [pc, #512]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a7f      	ldr	r2, [pc, #508]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	e02e      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x98>
 8002e66:	4b7b      	ldr	r3, [pc, #492]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7a      	ldr	r2, [pc, #488]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b78      	ldr	r3, [pc, #480]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a77      	ldr	r2, [pc, #476]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e01d      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xbc>
 8002e8a:	4b72      	ldr	r3, [pc, #456]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a71      	ldr	r2, [pc, #452]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b6f      	ldr	r3, [pc, #444]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a6e      	ldr	r2, [pc, #440]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002ea4:	4b6b      	ldr	r3, [pc, #428]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6a      	ldr	r2, [pc, #424]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b68      	ldr	r3, [pc, #416]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a67      	ldr	r2, [pc, #412]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fd ff20 	bl	8000d08 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fd ff1c 	bl	8000d08 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e200      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b5d      	ldr	r3, [pc, #372]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0xe4>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fd ff0c 	bl	8000d08 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fd ff08 	bl	8000d08 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1ec      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x10c>
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d063      	beq.n	8002fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f22:	4b4c      	ldr	r3, [pc, #304]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f2e:	4b49      	ldr	r3, [pc, #292]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d11c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x18c>
 8002f3a:	4b46      	ldr	r3, [pc, #280]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	4b43      	ldr	r3, [pc, #268]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_RCC_OscConfig+0x176>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e1c0      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4939      	ldr	r1, [pc, #228]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	e03a      	b.n	8002fea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f7c:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fd fec1 	bl	8000d08 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fd febd 	bl	8000d08 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1a1      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4927      	ldr	r1, [pc, #156]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	e015      	b.n	8002fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbe:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fd fea0 	bl	8000d08 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7fd fe9c 	bl	8000d08 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e180      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d03a      	beq.n	800306c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d019      	beq.n	8003032 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003004:	f7fd fe80 	bl	8000d08 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300c:	f7fd fe7c 	bl	8000d08 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e160      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800302a:	2001      	movs	r0, #1
 800302c:	f000 fad8 	bl	80035e0 <RCC_Delay>
 8003030:	e01c      	b.n	800306c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7fd fe66 	bl	8000d08 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303e:	e00f      	b.n	8003060 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7fd fe62 	bl	8000d08 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d908      	bls.n	8003060 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e146      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	42420000 	.word	0x42420000
 800305c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	4b92      	ldr	r3, [pc, #584]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e9      	bne.n	8003040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80a6 	beq.w	80031c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307e:	4b8b      	ldr	r3, [pc, #556]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10d      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4b88      	ldr	r3, [pc, #544]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4a87      	ldr	r2, [pc, #540]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	61d3      	str	r3, [r2, #28]
 8003096:	4b85      	ldr	r3, [pc, #532]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b82      	ldr	r3, [pc, #520]	; (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d118      	bne.n	80030e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b2:	4b7f      	ldr	r3, [pc, #508]	; (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7e      	ldr	r2, [pc, #504]	; (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7fd fe23 	bl	8000d08 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7fd fe1f 	bl	8000d08 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	; 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e103      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	4b75      	ldr	r3, [pc, #468]	; (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x312>
 80030ec:	4b6f      	ldr	r3, [pc, #444]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	4a6e      	ldr	r2, [pc, #440]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6213      	str	r3, [r2, #32]
 80030f8:	e02d      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x334>
 8003102:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a69      	ldr	r2, [pc, #420]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6213      	str	r3, [r2, #32]
 800310e:	4b67      	ldr	r3, [pc, #412]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4a66      	ldr	r2, [pc, #408]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	6213      	str	r3, [r2, #32]
 800311a:	e01c      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b05      	cmp	r3, #5
 8003122:	d10c      	bne.n	800313e <HAL_RCC_OscConfig+0x356>
 8003124:	4b61      	ldr	r3, [pc, #388]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4a60      	ldr	r2, [pc, #384]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	6213      	str	r3, [r2, #32]
 8003130:	4b5e      	ldr	r3, [pc, #376]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4a5d      	ldr	r2, [pc, #372]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6213      	str	r3, [r2, #32]
 800313c:	e00b      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 800313e:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4a5a      	ldr	r2, [pc, #360]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6213      	str	r3, [r2, #32]
 800314a:	4b58      	ldr	r3, [pc, #352]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4a57      	ldr	r2, [pc, #348]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f023 0304 	bic.w	r3, r3, #4
 8003154:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d015      	beq.n	800318a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7fd fdd3 	bl	8000d08 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7fd fdcf 	bl	8000d08 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	; 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0b1      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	4b4b      	ldr	r3, [pc, #300]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ee      	beq.n	8003166 <HAL_RCC_OscConfig+0x37e>
 8003188:	e014      	b.n	80031b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318a:	f7fd fdbd 	bl	8000d08 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fd fdb9 	bl	8000d08 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e09b      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	4b40      	ldr	r3, [pc, #256]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ee      	bne.n	8003192 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4a3b      	ldr	r2, [pc, #236]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8087 	beq.w	80032de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d0:	4b36      	ldr	r3, [pc, #216]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d061      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d146      	bne.n	8003272 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e4:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fd fd8d 	bl	8000d08 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fd fd89 	bl	8000d08 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e06d      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003204:	4b29      	ldr	r3, [pc, #164]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d108      	bne.n	800322c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	4921      	ldr	r1, [pc, #132]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322c:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a19      	ldr	r1, [r3, #32]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	430b      	orrs	r3, r1
 800323e:	491b      	ldr	r1, [pc, #108]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fd fd5d 	bl	8000d08 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003252:	f7fd fd59 	bl	8000d08 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e03d      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x46a>
 8003270:	e035      	b.n	80032de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fd fd46 	bl	8000d08 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fd fd42 	bl	8000d08 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e026      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x498>
 800329e:	e01e      	b.n	80032de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e019      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
 80032b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_OscConfig+0x500>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0d0      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d910      	bls.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b67      	ldr	r3, [pc, #412]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4965      	ldr	r1, [pc, #404]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800336a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d040      	beq.n	800340c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d115      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e073      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06b      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b39      	ldr	r3, [pc, #228]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4936      	ldr	r1, [pc, #216]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7fd fc94 	bl	8000d08 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fd fc90 	bl	8000d08 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e053      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d210      	bcs.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	4922      	ldr	r1, [pc, #136]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1d0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fbf2 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40021000 	.word	0x40021000
 80034b4:	08009df4 	.word	0x08009df4
 80034b8:	20000000 	.word	0x20000000
 80034bc:	2000001c 	.word	0x2000001c

080034c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b490      	push	{r4, r7}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034c6:	4b29      	ldr	r3, [pc, #164]	; (800356c <HAL_RCC_GetSysClockFreq+0xac>)
 80034c8:	1d3c      	adds	r4, r7, #4
 80034ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034d0:	f240 2301 	movw	r3, #513	; 0x201
 80034d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ea:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x40>
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x46>
 80034fe:	e02b      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003500:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003502:	623b      	str	r3, [r7, #32]
      break;
 8003504:	e02b      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	0c9b      	lsrs	r3, r3, #18
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	3328      	adds	r3, #40	; 0x28
 8003510:	443b      	add	r3, r7
 8003512:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003516:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	0c5b      	lsrs	r3, r3, #17
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	3328      	adds	r3, #40	; 0x28
 800352e:	443b      	add	r3, r7
 8003530:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003534:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	4a0e      	ldr	r2, [pc, #56]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 800353a:	fb03 f202 	mul.w	r2, r3, r2
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
 8003546:	e004      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	623b      	str	r3, [r7, #32]
      break;
 8003556:	e002      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 800355a:	623b      	str	r3, [r7, #32]
      break;
 800355c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800355e:	6a3b      	ldr	r3, [r7, #32]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3728      	adds	r7, #40	; 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bc90      	pop	{r4, r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	08009d8c 	.word	0x08009d8c
 8003570:	40021000 	.word	0x40021000
 8003574:	007a1200 	.word	0x007a1200
 8003578:	003d0900 	.word	0x003d0900

0800357c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003580:	4b02      	ldr	r3, [pc, #8]	; (800358c <HAL_RCC_GetHCLKFreq+0x10>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	20000000 	.word	0x20000000

08003590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003594:	f7ff fff2 	bl	800357c <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4903      	ldr	r1, [pc, #12]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	08009e04 	.word	0x08009e04

080035b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035bc:	f7ff ffde 	bl	800357c <HAL_RCC_GetHCLKFreq>
 80035c0:	4602      	mov	r2, r0
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	0adb      	lsrs	r3, r3, #11
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	4903      	ldr	r1, [pc, #12]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ce:	5ccb      	ldrb	r3, [r1, r3]
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08009e04 	.word	0x08009e04

080035e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <RCC_Delay+0x34>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <RCC_Delay+0x38>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	0a5b      	lsrs	r3, r3, #9
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035fc:	bf00      	nop
  }
  while (Delay --);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1e5a      	subs	r2, r3, #1
 8003602:	60fa      	str	r2, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f9      	bne.n	80035fc <RCC_Delay+0x1c>
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	20000000 	.word	0x20000000
 8003618:	10624dd3 	.word	0x10624dd3

0800361c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d07d      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003638:	2300      	movs	r3, #0
 800363a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363c:	4b4f      	ldr	r3, [pc, #316]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10d      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003648:	4b4c      	ldr	r3, [pc, #304]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	4a4b      	ldr	r2, [pc, #300]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003652:	61d3      	str	r3, [r2, #28]
 8003654:	4b49      	ldr	r3, [pc, #292]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003660:	2301      	movs	r3, #1
 8003662:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003664:	4b46      	ldr	r3, [pc, #280]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d118      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003670:	4b43      	ldr	r3, [pc, #268]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a42      	ldr	r2, [pc, #264]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367c:	f7fd fb44 	bl	8000d08 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	e008      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003684:	f7fd fb40 	bl	8000d08 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e06d      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036a2:	4b36      	ldr	r3, [pc, #216]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d02e      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d027      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036c0:	4b2e      	ldr	r3, [pc, #184]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d0:	4b2c      	ldr	r3, [pc, #176]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036d6:	4a29      	ldr	r2, [pc, #164]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d014      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fd fb0f 	bl	8000d08 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fd fb0b 	bl	8000d08 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e036      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ee      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003710:	4b1a      	ldr	r3, [pc, #104]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4917      	ldr	r1, [pc, #92]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	4313      	orrs	r3, r2
 8003720:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003728:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4a13      	ldr	r2, [pc, #76]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003732:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	490b      	ldr	r1, [pc, #44]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	4904      	ldr	r1, [pc, #16]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
 8003780:	40007000 	.word	0x40007000
 8003784:	42420440 	.word	0x42420440

08003788 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b08d      	sub	sp, #52	; 0x34
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003790:	4b58      	ldr	r3, [pc, #352]	; (80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003792:	f107 040c 	add.w	r4, r7, #12
 8003796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800379c:	f240 2301 	movw	r3, #513	; 0x201
 80037a0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	2300      	movs	r3, #0
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	2300      	movs	r3, #0
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b10      	cmp	r3, #16
 80037c0:	f200 808e 	bhi.w	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d049      	beq.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d079      	beq.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80037d0:	e086      	b.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80037d2:	4b49      	ldr	r3, [pc, #292]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80037d8:	4b47      	ldr	r3, [pc, #284]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d07f      	beq.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	0c9b      	lsrs	r3, r3, #18
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	3330      	adds	r3, #48	; 0x30
 80037ee:	443b      	add	r3, r7
 80037f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037f4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d017      	beq.n	8003830 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003800:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	0c5b      	lsrs	r3, r3, #17
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	3330      	adds	r3, #48	; 0x30
 800380c:	443b      	add	r3, r7
 800380e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00d      	beq.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800381e:	4a37      	ldr	r2, [pc, #220]	; (80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	fbb2 f2f3 	udiv	r2, r2, r3
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800382e:	e004      	b.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	4a33      	ldr	r2, [pc, #204]	; (8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003834:	fb02 f303 	mul.w	r3, r2, r3
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800383a:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003846:	d102      	bne.n	800384e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800384c:	e04a      	b.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4a2c      	ldr	r2, [pc, #176]	; (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800385c:	e042      	b.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800385e:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386e:	d108      	bne.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800387a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003880:	e01f      	b.n	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d109      	bne.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800388e:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800389a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a0:	e00f      	b.n	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80038ae:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d016      	beq.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80038ba:	f24f 4324 	movw	r3, #62500	; 0xf424
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038c0:	e012      	b.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80038c2:	e011      	b.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80038c4:	f7ff fe78 	bl	80035b8 <HAL_RCC_GetPCLK2Freq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0b9b      	lsrs	r3, r3, #14
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	3301      	adds	r3, #1
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038de:	e004      	b.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80038e0:	bf00      	nop
 80038e2:	e002      	b.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80038e4:	bf00      	nop
 80038e6:	e000      	b.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80038e8:	bf00      	nop
    }
  }
  return (frequency);
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3734      	adds	r7, #52	; 0x34
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd90      	pop	{r4, r7, pc}
 80038f4:	08009d9c 	.word	0x08009d9c
 80038f8:	40021000 	.word	0x40021000
 80038fc:	007a1200 	.word	0x007a1200
 8003900:	003d0900 	.word	0x003d0900
 8003904:	aaaaaaab 	.word	0xaaaaaaab

08003908 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e084      	b.n	8003a28 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7c5b      	ldrb	r3, [r3, #17]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fc ff8a 	bl	8000848 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f87a 	bl	8003a34 <HAL_RTC_WaitForSynchro>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d004      	beq.n	8003950 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2204      	movs	r2, #4
 800394a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e06b      	b.n	8003a28 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f89c 	bl	8003a8e <RTC_EnterInitMode>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2204      	movs	r2, #4
 8003960:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e060      	b.n	8003a28 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0207 	bic.w	r2, r2, #7
 8003974:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800397e:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HAL_RTC_Init+0x128>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4a2b      	ldr	r2, [pc, #172]	; (8003a30 <HAL_RTC_Init+0x128>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800398a:	4b29      	ldr	r3, [pc, #164]	; (8003a30 <HAL_RTC_Init+0x128>)
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4926      	ldr	r1, [pc, #152]	; (8003a30 <HAL_RTC_Init+0x128>)
 8003998:	4313      	orrs	r3, r2
 800399a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d003      	beq.n	80039ae <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e00e      	b.n	80039cc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80039ae:	2001      	movs	r0, #1
 80039b0:	f7ff feea 	bl	8003788 <HAL_RCCEx_GetPeriphCLKFreq>
 80039b4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d104      	bne.n	80039c6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2204      	movs	r2, #4
 80039c0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e030      	b.n	8003a28 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f023 010f 	bic.w	r1, r3, #15
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	0c1a      	lsrs	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	b291      	uxth	r1, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	430b      	orrs	r3, r1
 80039f6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f870 	bl	8003ade <RTC_ExitInitMode>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2204      	movs	r2, #4
 8003a08:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e00c      	b.n	8003a28 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003a26:	2300      	movs	r3, #0
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40006c00 	.word	0x40006c00

08003a34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e01d      	b.n	8003a86 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0208 	bic.w	r2, r2, #8
 8003a58:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003a5a:	f7fd f955 	bl	8000d08 <HAL_GetTick>
 8003a5e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003a60:	e009      	b.n	8003a76 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a62:	f7fd f951 	bl	8000d08 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a70:	d901      	bls.n	8003a76 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e007      	b.n	8003a86 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ee      	beq.n	8003a62 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003a9a:	f7fd f935 	bl	8000d08 <HAL_GetTick>
 8003a9e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003aa0:	e009      	b.n	8003ab6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003aa2:	f7fd f931 	bl	8000d08 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ab0:	d901      	bls.n	8003ab6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e00f      	b.n	8003ad6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ee      	beq.n	8003aa2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0210 	orr.w	r2, r2, #16
 8003ad2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0210 	bic.w	r2, r2, #16
 8003af8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003afa:	f7fd f905 	bl	8000d08 <HAL_GetTick>
 8003afe:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b00:	e009      	b.n	8003b16 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b02:	f7fd f901 	bl	8000d08 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b10:	d901      	bls.n	8003b16 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e007      	b.n	8003b26 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ee      	beq.n	8003b02 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <HAL_RTCEx_BKUPWrite+0x30>)
 8003b42:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	b292      	uxth	r2, r2
 8003b54:	601a      	str	r2, [r3, #0]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	40006c00 	.word	0x40006c00

08003b64 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <HAL_RTCEx_BKUPRead+0x34>)
 8003b78:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	40006c00 	.word	0x40006c00

08003b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e03f      	b.n	8003c2e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fc ffac 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	; 0x24
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fc7d 	bl	80044e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b08a      	sub	sp, #40	; 0x28
 8003c3a:	af02      	add	r7, sp, #8
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d17c      	bne.n	8003d50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_UART_Transmit+0x2c>
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e075      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Transmit+0x3e>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e06e      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2221      	movs	r2, #33	; 0x21
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8a:	f7fd f83d 	bl	8000d08 <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca4:	d108      	bne.n	8003cb8 <HAL_UART_Transmit+0x82>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e003      	b.n	8003cc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cc8:	e02a      	b.n	8003d20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fa2f 	bl	8004138 <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e036      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	e007      	b.n	8003d12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1cf      	bne.n	8003cca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2140      	movs	r1, #64	; 0x40
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f9ff 	bl	8004138 <UART_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e006      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e000      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
  }
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	4613      	mov	r3, r2
 8003d66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d11d      	bne.n	8003db0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Receive_IT+0x26>
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e016      	b.n	8003db2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Receive_IT+0x38>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e00f      	b.n	8003db2 <HAL_UART_Receive_IT+0x58>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	461a      	mov	r2, r3
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fa10 	bl	80041cc <UART_Start_Receive_IT>
 8003dac:	4603      	mov	r3, r0
 8003dae:	e000      	b.n	8003db2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_UART_IRQHandler+0x52>
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fac0 	bl	800438c <UART_Receive_IT>
      return;
 8003e0c:	e17b      	b.n	8004106 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80b1 	beq.w	8003f78 <HAL_UART_IRQHandler+0x1bc>
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <HAL_UART_IRQHandler+0x70>
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80a6 	beq.w	8003f78 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_UART_IRQHandler+0x90>
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f043 0201 	orr.w	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_UART_IRQHandler+0xb0>
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f043 0202 	orr.w	r2, r3, #2
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_UART_IRQHandler+0xd0>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	f043 0204 	orr.w	r2, r3, #4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00f      	beq.n	8003eb6 <HAL_UART_IRQHandler+0xfa>
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <HAL_UART_IRQHandler+0xee>
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f043 0208 	orr.w	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 811e 	beq.w	80040fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <HAL_UART_IRQHandler+0x11e>
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fa59 	bl	800438c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <HAL_UART_IRQHandler+0x146>
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d031      	beq.n	8003f66 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f99b 	bl	800423e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d023      	beq.n	8003f5e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f24:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d013      	beq.n	8003f56 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	4a76      	ldr	r2, [pc, #472]	; (800410c <HAL_UART_IRQHandler+0x350>)
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd f85a 	bl	8000ff4 <HAL_DMA_Abort_IT>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f50:	4610      	mov	r0, r2
 8003f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	e00e      	b.n	8003f74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fc fdb8 	bl	8000acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	e00a      	b.n	8003f74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fc fdb4 	bl	8000acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	e006      	b.n	8003f74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fc fdb0 	bl	8000acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f72:	e0c3      	b.n	80040fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	bf00      	nop
    return;
 8003f76:	e0c1      	b.n	80040fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	f040 80a1 	bne.w	80040c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 809b 	beq.w	80040c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8095 	beq.w	80040c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d04e      	beq.n	800405c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003fc8:	8a3b      	ldrh	r3, [r7, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8098 	beq.w	8004100 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fd4:	8a3a      	ldrh	r2, [r7, #16]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	f080 8092 	bcs.w	8004100 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8a3a      	ldrh	r2, [r7, #16]
 8003fe0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d02b      	beq.n	8004044 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ffa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800401a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0210 	bic.w	r2, r2, #16
 8004038:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc ff9d 	bl	8000f7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800404c:	b29b      	uxth	r3, r3
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	b29b      	uxth	r3, r3
 8004052:	4619      	mov	r1, r3
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f864 	bl	8004122 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800405a:	e051      	b.n	8004100 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004064:	b29b      	uxth	r3, r3
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d047      	beq.n	8004104 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004074:	8a7b      	ldrh	r3, [r7, #18]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d044      	beq.n	8004104 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004088:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0210 	bic.w	r2, r2, #16
 80040b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040b8:	8a7b      	ldrh	r3, [r7, #18]
 80040ba:	4619      	mov	r1, r3
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f830 	bl	8004122 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040c2:	e01f      	b.n	8004104 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <HAL_UART_IRQHandler+0x324>
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f8f0 	bl	80042be <UART_Transmit_IT>
    return;
 80040de:	e012      	b.n	8004106 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <HAL_UART_IRQHandler+0x34a>
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f931 	bl	800435c <UART_EndTransmit_IT>
    return;
 80040fa:	e004      	b.n	8004106 <HAL_UART_IRQHandler+0x34a>
    return;
 80040fc:	bf00      	nop
 80040fe:	e002      	b.n	8004106 <HAL_UART_IRQHandler+0x34a>
      return;
 8004100:	bf00      	nop
 8004102:	e000      	b.n	8004106 <HAL_UART_IRQHandler+0x34a>
      return;
 8004104:	bf00      	nop
  }
}
 8004106:	3728      	adds	r7, #40	; 0x28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	08004297 	.word	0x08004297

08004110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	460b      	mov	r3, r1
 800412c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004148:	e02c      	b.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d028      	beq.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <UART_WaitOnFlagUntilTimeout+0x30>
 8004158:	f7fc fdd6 	bl	8000d08 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	429a      	cmp	r2, r3
 8004166:	d21d      	bcs.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004176:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0201 	bic.w	r2, r2, #1
 8004186:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e00f      	b.n	80041c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d0c3      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	88fa      	ldrh	r2, [r7, #6]
 80041e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	88fa      	ldrh	r2, [r7, #6]
 80041ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2222      	movs	r2, #34	; 0x22
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004210:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0220 	orr.w	r2, r2, #32
 8004230:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr

0800423e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004254:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	2b01      	cmp	r3, #1
 800426c:	d107      	bne.n	800427e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0210 	bic.w	r2, r2, #16
 800427c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7fc fc0b 	bl	8000acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b21      	cmp	r3, #33	; 0x21
 80042d0:	d13e      	bne.n	8004350 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	d114      	bne.n	8004306 <UART_Transmit_IT+0x48>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d110      	bne.n	8004306 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	1c9a      	adds	r2, r3, #2
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	621a      	str	r2, [r3, #32]
 8004304:	e008      	b.n	8004318 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	1c59      	adds	r1, r3, #1
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6211      	str	r1, [r2, #32]
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29b      	uxth	r3, r3
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4619      	mov	r1, r3
 8004326:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10f      	bne.n	800434c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800433a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	e000      	b.n	8004352 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004350:	2302      	movs	r3, #2
  }
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004372:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fec7 	bl	8004110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b22      	cmp	r3, #34	; 0x22
 800439e:	f040 8099 	bne.w	80044d4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043aa:	d117      	bne.n	80043dc <UART_Receive_IT+0x50>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d113      	bne.n	80043dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	1c9a      	adds	r2, r3, #2
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	629a      	str	r2, [r3, #40]	; 0x28
 80043da:	e026      	b.n	800442a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ee:	d007      	beq.n	8004400 <UART_Receive_IT+0x74>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <UART_Receive_IT+0x82>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	e008      	b.n	8004420 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441a:	b2da      	uxtb	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29b      	uxth	r3, r3
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4619      	mov	r1, r3
 8004438:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800443a:	2b00      	cmp	r3, #0
 800443c:	d148      	bne.n	80044d0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0220 	bic.w	r2, r2, #32
 800444c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800445c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	2b01      	cmp	r3, #1
 800447c:	d123      	bne.n	80044c6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0210 	bic.w	r2, r2, #16
 8004492:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b10      	cmp	r3, #16
 80044a0:	d10a      	bne.n	80044b8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fe2f 	bl	8004122 <HAL_UARTEx_RxEventCallback>
 80044c4:	e002      	b.n	80044cc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fc fb0a 	bl	8000ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e002      	b.n	80044d6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800451a:	f023 030c 	bic.w	r3, r3, #12
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	430b      	orrs	r3, r1
 8004526:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2c      	ldr	r2, [pc, #176]	; (80045f4 <UART_SetConfig+0x114>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d103      	bne.n	8004550 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004548:	f7ff f836 	bl	80035b8 <HAL_RCC_GetPCLK2Freq>
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	e002      	b.n	8004556 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7ff f81e 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8004554:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009a      	lsls	r2, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <UART_SetConfig+0x118>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	0119      	lsls	r1, r3, #4
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	009a      	lsls	r2, r3, #2
 8004580:	441a      	add	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	fbb2 f2f3 	udiv	r2, r2, r3
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <UART_SetConfig+0x118>)
 800458e:	fba3 0302 	umull	r0, r3, r3, r2
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	2064      	movs	r0, #100	; 0x64
 8004596:	fb00 f303 	mul.w	r3, r0, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	3332      	adds	r3, #50	; 0x32
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <UART_SetConfig+0x118>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ac:	4419      	add	r1, r3
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	009a      	lsls	r2, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <UART_SetConfig+0x118>)
 80045c6:	fba3 0302 	umull	r0, r3, r3, r2
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	2064      	movs	r0, #100	; 0x64
 80045ce:	fb00 f303 	mul.w	r3, r0, r3
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	3332      	adds	r3, #50	; 0x32
 80045d8:	4a07      	ldr	r2, [pc, #28]	; (80045f8 <UART_SetConfig+0x118>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	f003 020f 	and.w	r2, r3, #15
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	440a      	add	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40013800 	.word	0x40013800
 80045f8:	51eb851f 	.word	0x51eb851f

080045fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045fc:	b084      	sub	sp, #16
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	f107 0014 	add.w	r0, r7, #20
 800460a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	b004      	add	sp, #16
 800461a:	4770      	bx	lr

0800461c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800462c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004630:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004650:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004654:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	b29b      	uxth	r3, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	b29b      	uxth	r3, r3
 8004666:	4013      	ands	r3, r2
 8004668:	b29a      	uxth	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004694:	b084      	sub	sp, #16
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	f107 0014 	add.w	r0, r7, #20
 80046a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	b004      	add	sp, #16
 80046d2:	4770      	bx	lr

080046d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b09b      	sub	sp, #108	; 0x6c
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80046f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	78db      	ldrb	r3, [r3, #3]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d81f      	bhi.n	8004746 <USB_ActivateEndpoint+0x72>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <USB_ActivateEndpoint+0x38>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	0800471d 	.word	0x0800471d
 8004710:	08004739 	.word	0x08004739
 8004714:	0800474f 	.word	0x0800474f
 8004718:	0800472b 	.word	0x0800472b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800471c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004724:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004728:	e012      	b.n	8004750 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800472a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800472e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004732:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004736:	e00b      	b.n	8004750 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004738:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800473c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004740:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004744:	e004      	b.n	8004750 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800474c:	e000      	b.n	8004750 <USB_ActivateEndpoint+0x7c>
      break;
 800474e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800475e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476e:	b29b      	uxth	r3, r3
 8004770:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004788:	b29a      	uxth	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	4313      	orrs	r3, r2
 8004792:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	441a      	add	r2, r3
 80047a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	7b1b      	ldrb	r3, [r3, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 8149 	bne.w	8004a54 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	785b      	ldrb	r3, [r3, #1]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8084 	beq.w	80048d4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	4413      	add	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	011a      	lsls	r2, r3, #4
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	88db      	ldrh	r3, [r3, #6]
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	81fb      	strh	r3, [r7, #14]
 800480e:	89fb      	ldrh	r3, [r7, #14]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01b      	beq.n	8004850 <USB_ActivateEndpoint+0x17c>
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	81bb      	strh	r3, [r7, #12]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	89bb      	ldrh	r3, [r7, #12]
 800483c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004848:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800484c:	b29b      	uxth	r3, r3
 800484e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	78db      	ldrb	r3, [r3, #3]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d020      	beq.n	800489a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486e:	813b      	strh	r3, [r7, #8]
 8004870:	893b      	ldrh	r3, [r7, #8]
 8004872:	f083 0320 	eor.w	r3, r3, #32
 8004876:	813b      	strh	r3, [r7, #8]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	893b      	ldrh	r3, [r7, #8]
 8004884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800488c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004894:	b29b      	uxth	r3, r3
 8004896:	8013      	strh	r3, [r2, #0]
 8004898:	e27f      	b.n	8004d9a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b0:	817b      	strh	r3, [r7, #10]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	441a      	add	r2, r3
 80048bc:	897b      	ldrh	r3, [r7, #10]
 80048be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8013      	strh	r3, [r2, #0]
 80048d2:	e262      	b.n	8004d9a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048de:	b29b      	uxth	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	4413      	add	r3, r2
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	011a      	lsls	r2, r3, #4
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	88db      	ldrh	r3, [r3, #6]
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004912:	b29b      	uxth	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	4413      	add	r3, r2
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	011a      	lsls	r2, r3, #4
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	4413      	add	r3, r2
 8004926:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d112      	bne.n	800495a <USB_ActivateEndpoint+0x286>
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800493e:	b29a      	uxth	r2, r3
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	801a      	strh	r2, [r3, #0]
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800494e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004952:	b29a      	uxth	r2, r3
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	801a      	strh	r2, [r3, #0]
 8004958:	e02f      	b.n	80049ba <USB_ActivateEndpoint+0x2e6>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b3e      	cmp	r3, #62	; 0x3e
 8004960:	d813      	bhi.n	800498a <USB_ActivateEndpoint+0x2b6>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	663b      	str	r3, [r7, #96]	; 0x60
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <USB_ActivateEndpoint+0x2a8>
 8004976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004978:	3301      	adds	r3, #1
 800497a:	663b      	str	r3, [r7, #96]	; 0x60
 800497c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800497e:	b29b      	uxth	r3, r3
 8004980:	029b      	lsls	r3, r3, #10
 8004982:	b29a      	uxth	r2, r3
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	e017      	b.n	80049ba <USB_ActivateEndpoint+0x2e6>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	663b      	str	r3, [r7, #96]	; 0x60
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <USB_ActivateEndpoint+0x2d0>
 800499e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049a0:	3b01      	subs	r3, #1
 80049a2:	663b      	str	r3, [r7, #96]	; 0x60
 80049a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	029b      	lsls	r3, r3, #10
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	83fb      	strh	r3, [r7, #30]
 80049c8:	8bfb      	ldrh	r3, [r7, #30]
 80049ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01b      	beq.n	8004a0a <USB_ActivateEndpoint+0x336>
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e8:	83bb      	strh	r3, [r7, #28]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	8bbb      	ldrh	r3, [r7, #28]
 80049f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a20:	837b      	strh	r3, [r7, #26]
 8004a22:	8b7b      	ldrh	r3, [r7, #26]
 8004a24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a28:	837b      	strh	r3, [r7, #26]
 8004a2a:	8b7b      	ldrh	r3, [r7, #26]
 8004a2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a30:	837b      	strh	r3, [r7, #26]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	441a      	add	r2, r3
 8004a3c:	8b7b      	ldrh	r3, [r7, #26]
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
 8004a52:	e1a2      	b.n	8004d9a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	441a      	add	r2, r3
 8004a78:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a84:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aa0:	4413      	add	r3, r2
 8004aa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	011a      	lsls	r2, r3, #4
 8004aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	891b      	ldrh	r3, [r3, #8]
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac2:	801a      	strh	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad4:	4413      	add	r3, r2
 8004ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	011a      	lsls	r2, r3, #4
 8004ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	895b      	ldrh	r3, [r3, #10]
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f040 8091 	bne.w	8004c24 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004b10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01b      	beq.n	8004b52 <USB_ActivateEndpoint+0x47e>
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b30:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	441a      	add	r2, r3
 8004b3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01b      	beq.n	8004ba2 <USB_ActivateEndpoint+0x4ce>
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b80:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	441a      	add	r2, r3
 8004b8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004bba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004bbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bc0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004bc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004bc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bc8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	441a      	add	r2, r3
 8004bd4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c00:	867b      	strh	r3, [r7, #50]	; 0x32
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	441a      	add	r2, r3
 8004c0c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	8013      	strh	r3, [r2, #0]
 8004c22:	e0ba      	b.n	8004d9a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01d      	beq.n	8004c7c <USB_ActivateEndpoint+0x5a8>
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01d      	beq.n	8004cd4 <USB_ActivateEndpoint+0x600>
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	441a      	add	r2, r3
 8004cbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ccc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	78db      	ldrb	r3, [r3, #3]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d024      	beq.n	8004d26 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004cf6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cfa:	f083 0320 	eor.w	r3, r3, #32
 8004cfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	441a      	add	r2, r3
 8004d0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]
 8004d24:	e01d      	b.n	8004d62 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	441a      	add	r2, r3
 8004d4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d78:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	441a      	add	r2, r3
 8004d84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004d9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	376c      	adds	r7, #108	; 0x6c
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr

08004da8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b08d      	sub	sp, #52	; 0x34
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	7b1b      	ldrb	r3, [r3, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 808e 	bne.w	8004ed8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d044      	beq.n	8004e4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	81bb      	strh	r3, [r7, #12]
 8004dd2:	89bb      	ldrh	r3, [r7, #12]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <USB_DeactivateEndpoint+0x6c>
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	817b      	strh	r3, [r7, #10]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	897b      	ldrh	r3, [r7, #10]
 8004e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2a:	813b      	strh	r3, [r7, #8]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	893b      	ldrh	r3, [r7, #8]
 8004e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	8013      	strh	r3, [r2, #0]
 8004e4c:	e192      	b.n	8005174 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	827b      	strh	r3, [r7, #18]
 8004e5c:	8a7b      	ldrh	r3, [r7, #18]
 8004e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01b      	beq.n	8004e9e <USB_DeactivateEndpoint+0xf6>
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7c:	823b      	strh	r3, [r7, #16]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	441a      	add	r2, r3
 8004e88:	8a3b      	ldrh	r3, [r7, #16]
 8004e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb4:	81fb      	strh	r3, [r7, #14]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	441a      	add	r2, r3
 8004ec0:	89fb      	ldrh	r3, [r7, #14]
 8004ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8013      	strh	r3, [r2, #0]
 8004ed6:	e14d      	b.n	8005174 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f040 80a5 	bne.w	800502c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	843b      	strh	r3, [r7, #32]
 8004ef0:	8c3b      	ldrh	r3, [r7, #32]
 8004ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01b      	beq.n	8004f32 <USB_DeactivateEndpoint+0x18a>
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f10:	83fb      	strh	r3, [r7, #30]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	441a      	add	r2, r3
 8004f1c:	8bfb      	ldrh	r3, [r7, #30]
 8004f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	83bb      	strh	r3, [r7, #28]
 8004f40:	8bbb      	ldrh	r3, [r7, #28]
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01b      	beq.n	8004f82 <USB_DeactivateEndpoint+0x1da>
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f60:	837b      	strh	r3, [r7, #26]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	441a      	add	r2, r3
 8004f6c:	8b7b      	ldrh	r3, [r7, #26]
 8004f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f98:	833b      	strh	r3, [r7, #24]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	441a      	add	r2, r3
 8004fa4:	8b3b      	ldrh	r3, [r7, #24]
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd0:	82fb      	strh	r3, [r7, #22]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	8afb      	ldrh	r3, [r7, #22]
 8004fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005008:	82bb      	strh	r3, [r7, #20]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	8abb      	ldrh	r3, [r7, #20]
 8005016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005026:	b29b      	uxth	r3, r3
 8005028:	8013      	strh	r3, [r2, #0]
 800502a:	e0a3      	b.n	8005174 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800503a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800503c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01b      	beq.n	800507c <USB_DeactivateEndpoint+0x2d4>
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	441a      	add	r2, r3
 8005066:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005078:	b29b      	uxth	r3, r3
 800507a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	857b      	strh	r3, [r7, #42]	; 0x2a
 800508a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01b      	beq.n	80050cc <USB_DeactivateEndpoint+0x324>
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	441a      	add	r2, r3
 80050b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80050b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	441a      	add	r2, r3
 80050ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005100:	b29b      	uxth	r3, r3
 8005102:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800511a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	441a      	add	r2, r3
 8005126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	847b      	strh	r3, [r7, #34]	; 0x22
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005170:	b29b      	uxth	r3, r3
 8005172:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3734      	adds	r7, #52	; 0x34
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b0cc      	sub	sp, #304	; 0x130
 8005184:	af00      	add	r7, sp, #0
 8005186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800518e:	6018      	str	r0, [r3, #0]
 8005190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005198:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800519a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	f041 817d 	bne.w	80064a6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d908      	bls.n	80051da <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80051c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80051d8:	e007      	b.n	80051ea <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80051ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	7b1b      	ldrb	r3, [r3, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d152      	bne.n	80052a0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80051fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6959      	ldr	r1, [r3, #20]
 8005206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	88da      	ldrh	r2, [r3, #6]
 8005212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005216:	b29b      	uxth	r3, r3
 8005218:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800521c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005220:	6800      	ldr	r0, [r0, #0]
 8005222:	f001 ff23 	bl	800706c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800522e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005232:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005248:	b29b      	uxth	r3, r3
 800524a:	4619      	mov	r1, r3
 800524c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005250:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005254:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005258:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	440a      	add	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	011a      	lsls	r2, r3, #4
 8005270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005274:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4413      	add	r3, r2
 800527c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005284:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800528e:	b29a      	uxth	r2, r3
 8005290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005294:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	f001 b8b5 	b.w	800640a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	78db      	ldrb	r3, [r3, #3]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	f040 84c6 	bne.w	8005c3e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80052b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6a1a      	ldr	r2, [r3, #32]
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	f240 8443 	bls.w	8005b56 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80052d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80052fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	441a      	add	r2, r3
 8005314:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800531c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005320:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005328:	b29b      	uxth	r3, r3
 800532a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800532c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6a1a      	ldr	r2, [r3, #32]
 8005338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533c:	1ad2      	subs	r2, r2, r3
 800533e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 823e 	beq.w	80057ee <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005376:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800537a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800537e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	785b      	ldrb	r3, [r3, #1]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f040 809a 	bne.w	80054cc <USB_EPStartXfer+0x34c>
 8005398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	4619      	mov	r1, r3
 80053be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053ca:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	440a      	add	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	011a      	lsls	r2, r3, #4
 80053e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80053f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d122      	bne.n	800544a <USB_EPStartXfer+0x2ca>
 8005404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005408:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005416:	b29a      	uxth	r2, r3
 8005418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	801a      	strh	r2, [r3, #0]
 8005424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005428:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543a:	b29a      	uxth	r2, r3
 800543c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005440:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	801a      	strh	r2, [r3, #0]
 8005448:	e079      	b.n	800553e <USB_EPStartXfer+0x3be>
 800544a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800544e:	2b3e      	cmp	r3, #62	; 0x3e
 8005450:	d81b      	bhi.n	800548a <USB_EPStartXfer+0x30a>
 8005452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800545c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <USB_EPStartXfer+0x2f2>
 8005468:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800546c:	3301      	adds	r3, #1
 800546e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005472:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005476:	b29b      	uxth	r3, r3
 8005478:	029b      	lsls	r3, r3, #10
 800547a:	b29a      	uxth	r2, r3
 800547c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005480:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	e059      	b.n	800553e <USB_EPStartXfer+0x3be>
 800548a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <USB_EPStartXfer+0x32a>
 80054a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054a4:	3b01      	subs	r3, #1
 80054a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	029b      	lsls	r3, r3, #10
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054bc:	b29a      	uxth	r2, r3
 80054be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	801a      	strh	r2, [r3, #0]
 80054ca:	e038      	b.n	800553e <USB_EPStartXfer+0x3be>
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	785b      	ldrb	r3, [r3, #1]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d130      	bne.n	800553e <USB_EPStartXfer+0x3be>
 80054dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	4619      	mov	r1, r3
 80054ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80054f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054fa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	440a      	add	r2, r1
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	011a      	lsls	r2, r3, #4
 8005512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005516:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4413      	add	r3, r2
 800551e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005530:	b29a      	uxth	r2, r3
 8005532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800553e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	895b      	ldrh	r3, [r3, #10]
 800554a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800554e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6959      	ldr	r1, [r3, #20]
 800555a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800555e:	b29b      	uxth	r3, r3
 8005560:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005564:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005568:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800556c:	6800      	ldr	r0, [r0, #0]
 800556e:	f001 fd7d 	bl	800706c <USB_WritePMA>
            ep->xfer_buff += len;
 8005572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005582:	441a      	add	r2, r3
 8005584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d90f      	bls.n	80055cc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80055ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a1a      	ldr	r2, [r3, #32]
 80055b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055bc:	1ad2      	subs	r2, r2, r3
 80055be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	621a      	str	r2, [r3, #32]
 80055ca:	e00e      	b.n	80055ea <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80055cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80055dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2200      	movs	r2, #0
 80055e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f040 809a 	bne.w	8005730 <USB_EPStartXfer+0x5b0>
 80055fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005600:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005604:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005608:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800560c:	6812      	ldr	r2, [r2, #0]
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561e:	b29b      	uxth	r3, r3
 8005620:	4619      	mov	r1, r3
 8005622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005626:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800562a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800562e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	440a      	add	r2, r1
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	011a      	lsls	r2, r3, #4
 8005646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4413      	add	r3, r2
 8005652:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d122      	bne.n	80056ae <USB_EPStartXfer+0x52e>
 8005668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800567a:	b29a      	uxth	r2, r3
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569e:	b29a      	uxth	r2, r3
 80056a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e083      	b.n	80057b6 <USB_EPStartXfer+0x636>
 80056ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b2:	2b3e      	cmp	r3, #62	; 0x3e
 80056b4:	d81b      	bhi.n	80056ee <USB_EPStartXfer+0x56e>
 80056b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80056c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <USB_EPStartXfer+0x556>
 80056cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056d0:	3301      	adds	r3, #1
 80056d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80056d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056da:	b29b      	uxth	r3, r3
 80056dc:	029b      	lsls	r3, r3, #10
 80056de:	b29a      	uxth	r2, r3
 80056e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	801a      	strh	r2, [r3, #0]
 80056ec:	e063      	b.n	80057b6 <USB_EPStartXfer+0x636>
 80056ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80056f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fc:	f003 031f 	and.w	r3, r3, #31
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <USB_EPStartXfer+0x58e>
 8005704:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005708:	3b01      	subs	r3, #1
 800570a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800570e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005712:	b29b      	uxth	r3, r3
 8005714:	029b      	lsls	r3, r3, #10
 8005716:	b29b      	uxth	r3, r3
 8005718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800571c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005720:	b29a      	uxth	r2, r3
 8005722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005726:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e042      	b.n	80057b6 <USB_EPStartXfer+0x636>
 8005730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d13a      	bne.n	80057b6 <USB_EPStartXfer+0x636>
 8005740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005744:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005748:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800574c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005762:	b29b      	uxth	r3, r3
 8005764:	4619      	mov	r1, r3
 8005766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800576e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005772:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	440a      	add	r2, r1
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	011a      	lsls	r2, r3, #4
 800578a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4413      	add	r3, r2
 8005796:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800579a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	891b      	ldrh	r3, [r3, #8]
 80057c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6959      	ldr	r1, [r3, #20]
 80057d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057e4:	6800      	ldr	r0, [r0, #0]
 80057e6:	f001 fc41 	bl	800706c <USB_WritePMA>
 80057ea:	f000 be0e 	b.w	800640a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d16d      	bne.n	80058da <USB_EPStartXfer+0x75a>
 80057fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005802:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	64bb      	str	r3, [r7, #72]	; 0x48
 800580a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005818:	b29b      	uxth	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800581e:	4413      	add	r3, r2
 8005820:	64bb      	str	r3, [r7, #72]	; 0x48
 8005822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	011a      	lsls	r2, r3, #4
 8005830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005832:	4413      	add	r3, r2
 8005834:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
 800583a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d112      	bne.n	8005868 <USB_EPStartXfer+0x6e8>
 8005842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800584c:	b29a      	uxth	r2, r3
 800584e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005860:	b29a      	uxth	r2, r3
 8005862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	e063      	b.n	8005930 <USB_EPStartXfer+0x7b0>
 8005868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800586c:	2b3e      	cmp	r3, #62	; 0x3e
 800586e:	d817      	bhi.n	80058a0 <USB_EPStartXfer+0x720>
 8005870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800587a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <USB_EPStartXfer+0x710>
 8005886:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800588a:	3301      	adds	r3, #1
 800588c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005890:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005894:	b29b      	uxth	r3, r3
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	b29a      	uxth	r2, r3
 800589a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	e047      	b.n	8005930 <USB_EPStartXfer+0x7b0>
 80058a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d104      	bne.n	80058c0 <USB_EPStartXfer+0x740>
 80058b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058ba:	3b01      	subs	r3, #1
 80058bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	029b      	lsls	r3, r3, #10
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	e02a      	b.n	8005930 <USB_EPStartXfer+0x7b0>
 80058da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d122      	bne.n	8005930 <USB_EPStartXfer+0x7b0>
 80058ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	653b      	str	r3, [r7, #80]	; 0x50
 80058f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005904:	b29b      	uxth	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590a:	4413      	add	r3, r2
 800590c:	653b      	str	r3, [r7, #80]	; 0x50
 800590e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	011a      	lsls	r2, r3, #4
 800591c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800591e:	4413      	add	r3, r2
 8005920:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005924:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592a:	b29a      	uxth	r2, r3
 800592c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	891b      	ldrh	r3, [r3, #8]
 800593c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6959      	ldr	r1, [r3, #20]
 800594c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005950:	b29b      	uxth	r3, r3
 8005952:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005956:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800595a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800595e:	6800      	ldr	r0, [r0, #0]
 8005960:	f001 fb84 	bl	800706c <USB_WritePMA>
            ep->xfer_buff += len;
 8005964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695a      	ldr	r2, [r3, #20]
 8005970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005974:	441a      	add	r2, r3
 8005976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a1a      	ldr	r2, [r3, #32]
 800598e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	429a      	cmp	r2, r3
 800599c:	d90f      	bls.n	80059be <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800599e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a1a      	ldr	r2, [r3, #32]
 80059aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	621a      	str	r2, [r3, #32]
 80059bc:	e00e      	b.n	80059dc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80059be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80059ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2200      	movs	r2, #0
 80059da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	643b      	str	r3, [r7, #64]	; 0x40
 80059e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d16d      	bne.n	8005ad4 <USB_EPStartXfer+0x954>
 80059f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	4413      	add	r3, r2
 8005a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	011a      	lsls	r2, r3, #4
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
 8005a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d112      	bne.n	8005a62 <USB_EPStartXfer+0x8e2>
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5e:	801a      	strh	r2, [r3, #0]
 8005a60:	e05d      	b.n	8005b1e <USB_EPStartXfer+0x99e>
 8005a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a66:	2b3e      	cmp	r3, #62	; 0x3e
 8005a68:	d817      	bhi.n	8005a9a <USB_EPStartXfer+0x91a>
 8005a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <USB_EPStartXfer+0x90a>
 8005a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a84:	3301      	adds	r3, #1
 8005a86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	029b      	lsls	r3, r3, #10
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	e041      	b.n	8005b1e <USB_EPStartXfer+0x99e>
 8005a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d104      	bne.n	8005aba <USB_EPStartXfer+0x93a>
 8005ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	801a      	strh	r2, [r3, #0]
 8005ad2:	e024      	b.n	8005b1e <USB_EPStartXfer+0x99e>
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d11c      	bne.n	8005b1e <USB_EPStartXfer+0x99e>
 8005ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af8:	4413      	add	r3, r2
 8005afa:	643b      	str	r3, [r7, #64]	; 0x40
 8005afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	011a      	lsls	r2, r3, #4
 8005b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	895b      	ldrh	r3, [r3, #10]
 8005b2a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6959      	ldr	r1, [r3, #20]
 8005b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b44:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b48:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b4c:	6800      	ldr	r0, [r0, #0]
 8005b4e:	f001 fa8d 	bl	800706c <USB_WritePMA>
 8005b52:	f000 bc5a 	b.w	800640a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	441a      	add	r2, r3
 8005baa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	461a      	mov	r2, r3
 8005be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005be2:	4413      	add	r3, r2
 8005be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	011a      	lsls	r2, r3, #4
 8005bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	891b      	ldrh	r3, [r3, #8]
 8005c14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6959      	ldr	r1, [r3, #20]
 8005c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c2e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c32:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c36:	6800      	ldr	r0, [r0, #0]
 8005c38:	f001 fa18 	bl	800706c <USB_WritePMA>
 8005c3c:	e3e5      	b.n	800640a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c64:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6a1a      	ldr	r2, [r3, #32]
 8005ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005caa:	1ad2      	subs	r2, r2, r3
 8005cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 81bc 	beq.w	8006058 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d16d      	bne.n	8005dda <USB_EPStartXfer+0xc5a>
 8005cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d1e:	4413      	add	r3, r2
 8005d20:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	011a      	lsls	r2, r3, #4
 8005d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d32:	4413      	add	r3, r2
 8005d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d38:	677b      	str	r3, [r7, #116]	; 0x74
 8005d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d112      	bne.n	8005d68 <USB_EPStartXfer+0xbe8>
 8005d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d64:	801a      	strh	r2, [r3, #0]
 8005d66:	e060      	b.n	8005e2a <USB_EPStartXfer+0xcaa>
 8005d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d6c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d6e:	d817      	bhi.n	8005da0 <USB_EPStartXfer+0xc20>
 8005d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d74:	085b      	lsrs	r3, r3, #1
 8005d76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <USB_EPStartXfer+0xc10>
 8005d86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	029b      	lsls	r3, r3, #10
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	e044      	b.n	8005e2a <USB_EPStartXfer+0xcaa>
 8005da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da4:	095b      	lsrs	r3, r3, #5
 8005da6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <USB_EPStartXfer+0xc40>
 8005db6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005dc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	029b      	lsls	r3, r3, #10
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	e027      	b.n	8005e2a <USB_EPStartXfer+0xcaa>
 8005dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d11f      	bne.n	8005e2a <USB_EPStartXfer+0xcaa>
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e00:	4413      	add	r3, r2
 8005e02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	011a      	lsls	r2, r3, #4
 8005e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e18:	4413      	add	r3, r2
 8005e1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e28:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	895b      	ldrh	r3, [r3, #10]
 8005e36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6959      	ldr	r1, [r3, #20]
 8005e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e50:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e54:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e58:	6800      	ldr	r0, [r0, #0]
 8005e5a:	f001 f907 	bl	800706c <USB_WritePMA>
          ep->xfer_buff += len;
 8005e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695a      	ldr	r2, [r3, #20]
 8005e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6e:	441a      	add	r2, r3
 8005e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6a1a      	ldr	r2, [r3, #32]
 8005e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d90f      	bls.n	8005eb8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a1a      	ldr	r2, [r3, #32]
 8005ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea8:	1ad2      	subs	r2, r2, r3
 8005eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	621a      	str	r2, [r3, #32]
 8005eb6:	e00e      	b.n	8005ed6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 8295 	beq.w	800640a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d16d      	bne.n	8005fcc <USB_EPStartXfer+0xe4c>
 8005ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f10:	4413      	add	r3, r2
 8005f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	011a      	lsls	r2, r3, #4
 8005f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f24:	4413      	add	r3, r2
 8005f26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f2a:	667b      	str	r3, [r7, #100]	; 0x64
 8005f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d112      	bne.n	8005f5a <USB_EPStartXfer+0xdda>
 8005f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	e063      	b.n	8006022 <USB_EPStartXfer+0xea2>
 8005f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f60:	d817      	bhi.n	8005f92 <USB_EPStartXfer+0xe12>
 8005f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f66:	085b      	lsrs	r3, r3, #1
 8005f68:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d004      	beq.n	8005f82 <USB_EPStartXfer+0xe02>
 8005f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	029b      	lsls	r3, r3, #10
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	e047      	b.n	8006022 <USB_EPStartXfer+0xea2>
 8005f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa0:	f003 031f 	and.w	r3, r3, #31
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d104      	bne.n	8005fb2 <USB_EPStartXfer+0xe32>
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fac:	3b01      	subs	r3, #1
 8005fae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	029b      	lsls	r3, r3, #10
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	e02a      	b.n	8006022 <USB_EPStartXfer+0xea2>
 8005fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	785b      	ldrb	r3, [r3, #1]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d122      	bne.n	8006022 <USB_EPStartXfer+0xea2>
 8005fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	673b      	str	r3, [r7, #112]	; 0x70
 8005fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ffc:	4413      	add	r3, r2
 8005ffe:	673b      	str	r3, [r7, #112]	; 0x70
 8006000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	011a      	lsls	r2, r3, #4
 800600e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006010:	4413      	add	r3, r2
 8006012:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006016:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601c:	b29a      	uxth	r2, r3
 800601e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006020:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	891b      	ldrh	r3, [r3, #8]
 800602e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6959      	ldr	r1, [r3, #20]
 800603e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006042:	b29b      	uxth	r3, r3
 8006044:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006048:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800604c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006050:	6800      	ldr	r0, [r0, #0]
 8006052:	f001 f80b 	bl	800706c <USB_WritePMA>
 8006056:	e1d8      	b.n	800640a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d178      	bne.n	800615a <USB_EPStartXfer+0xfda>
 8006068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006084:	b29b      	uxth	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800608c:	4413      	add	r3, r2
 800608e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	011a      	lsls	r2, r3, #4
 80060a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060a4:	4413      	add	r3, r2
 80060a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d116      	bne.n	80060e4 <USB_EPStartXfer+0xf64>
 80060b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060da:	b29a      	uxth	r2, r3
 80060dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	e06b      	b.n	80061bc <USB_EPStartXfer+0x103c>
 80060e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e8:	2b3e      	cmp	r3, #62	; 0x3e
 80060ea:	d818      	bhi.n	800611e <USB_EPStartXfer+0xf9e>
 80060ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f0:	085b      	lsrs	r3, r3, #1
 80060f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80060f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <USB_EPStartXfer+0xf8c>
 8006102:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006106:	3301      	adds	r3, #1
 8006108:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800610c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006110:	b29b      	uxth	r3, r3
 8006112:	029b      	lsls	r3, r3, #10
 8006114:	b29a      	uxth	r2, r3
 8006116:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	e04e      	b.n	80061bc <USB_EPStartXfer+0x103c>
 800611e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <USB_EPStartXfer+0xfbe>
 8006134:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006138:	3b01      	subs	r3, #1
 800613a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800613e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006142:	b29b      	uxth	r3, r3
 8006144:	029b      	lsls	r3, r3, #10
 8006146:	b29b      	uxth	r3, r3
 8006148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006150:	b29a      	uxth	r2, r3
 8006152:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006156:	801a      	strh	r2, [r3, #0]
 8006158:	e030      	b.n	80061bc <USB_EPStartXfer+0x103c>
 800615a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d128      	bne.n	80061bc <USB_EPStartXfer+0x103c>
 800616a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006186:	b29b      	uxth	r3, r3
 8006188:	461a      	mov	r2, r3
 800618a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800618e:	4413      	add	r3, r2
 8006190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	011a      	lsls	r2, r3, #4
 80061a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061a6:	4413      	add	r3, r2
 80061a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	891b      	ldrh	r3, [r3, #8]
 80061c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6959      	ldr	r1, [r3, #20]
 80061d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061e2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80061e6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80061ea:	6800      	ldr	r0, [r0, #0]
 80061ec:	f000 ff3e 	bl	800706c <USB_WritePMA>
          ep->xfer_buff += len;
 80061f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695a      	ldr	r2, [r3, #20]
 80061fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006200:	441a      	add	r2, r3
 8006202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800620e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6a1a      	ldr	r2, [r3, #32]
 800621a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	429a      	cmp	r2, r3
 8006228:	d90f      	bls.n	800624a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800622a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a1a      	ldr	r2, [r3, #32]
 8006236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623a:	1ad2      	subs	r2, r2, r3
 800623c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	621a      	str	r2, [r3, #32]
 8006248:	e00e      	b.n	8006268 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800625a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2200      	movs	r2, #0
 8006266:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80cc 	beq.w	800640a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d178      	bne.n	8006382 <USB_EPStartXfer+0x1202>
 8006290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800629e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062b4:	4413      	add	r3, r2
 80062b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	011a      	lsls	r2, r3, #4
 80062c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d116      	bne.n	800630c <USB_EPStartXfer+0x118c>
 80062de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006302:	b29a      	uxth	r2, r3
 8006304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	e064      	b.n	80063d6 <USB_EPStartXfer+0x1256>
 800630c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006310:	2b3e      	cmp	r3, #62	; 0x3e
 8006312:	d818      	bhi.n	8006346 <USB_EPStartXfer+0x11c6>
 8006314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006318:	085b      	lsrs	r3, r3, #1
 800631a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800631e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <USB_EPStartXfer+0x11b4>
 800632a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800632e:	3301      	adds	r3, #1
 8006330:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006338:	b29b      	uxth	r3, r3
 800633a:	029b      	lsls	r3, r3, #10
 800633c:	b29a      	uxth	r2, r3
 800633e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e047      	b.n	80063d6 <USB_EPStartXfer+0x1256>
 8006346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <USB_EPStartXfer+0x11e6>
 800635c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006360:	3b01      	subs	r3, #1
 8006362:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636a:	b29b      	uxth	r3, r3
 800636c:	029b      	lsls	r3, r3, #10
 800636e:	b29b      	uxth	r3, r3
 8006370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006378:	b29a      	uxth	r2, r3
 800637a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e029      	b.n	80063d6 <USB_EPStartXfer+0x1256>
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d121      	bne.n	80063d6 <USB_EPStartXfer+0x1256>
 8006392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006396:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063a8:	4413      	add	r3, r2
 80063aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	011a      	lsls	r2, r3, #4
 80063bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063c0:	4413      	add	r3, r2
 80063c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	895b      	ldrh	r3, [r3, #10]
 80063e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6959      	ldr	r1, [r3, #20]
 80063f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006400:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006404:	6800      	ldr	r0, [r0, #0]
 8006406:	f000 fe31 	bl	800706c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800640a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800642c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006438:	8013      	strh	r3, [r2, #0]
 800643a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006442:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006446:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800644a:	8812      	ldrh	r2, [r2, #0]
 800644c:	f082 0210 	eor.w	r2, r2, #16
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006456:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800645a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800645e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006462:	8812      	ldrh	r2, [r2, #0]
 8006464:	f082 0220 	eor.w	r2, r2, #32
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	441a      	add	r2, r3
 8006484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006488:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]
 80064a2:	f000 bc9f 	b.w	8006de4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80064a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	7b1b      	ldrb	r3, [r3, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f040 80ae 	bne.w	8006614 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d917      	bls.n	8006504 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80064d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80064e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699a      	ldr	r2, [r3, #24]
 80064f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f4:	1ad2      	subs	r2, r2, r3
 80064f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	619a      	str	r2, [r3, #24]
 8006502:	e00e      	b.n	8006522 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653e:	b29b      	uxth	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006546:	4413      	add	r3, r2
 8006548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800654c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	011a      	lsls	r2, r3, #4
 800655a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800655e:	4413      	add	r3, r2
 8006560:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006564:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d116      	bne.n	800659e <USB_EPStartXfer+0x141e>
 8006570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800657c:	b29a      	uxth	r2, r3
 800657e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006594:	b29a      	uxth	r2, r3
 8006596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	e3e8      	b.n	8006d70 <USB_EPStartXfer+0x1bf0>
 800659e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a2:	2b3e      	cmp	r3, #62	; 0x3e
 80065a4:	d818      	bhi.n	80065d8 <USB_EPStartXfer+0x1458>
 80065a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <USB_EPStartXfer+0x1446>
 80065bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c0:	3301      	adds	r3, #1
 80065c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	029b      	lsls	r3, r3, #10
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	e3cb      	b.n	8006d70 <USB_EPStartXfer+0x1bf0>
 80065d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <USB_EPStartXfer+0x1478>
 80065ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065f2:	3b01      	subs	r3, #1
 80065f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	029b      	lsls	r3, r3, #10
 8006600:	b29b      	uxth	r3, r3
 8006602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660a:	b29a      	uxth	r2, r3
 800660c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e3ad      	b.n	8006d70 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	78db      	ldrb	r3, [r3, #3]
 8006620:	2b02      	cmp	r3, #2
 8006622:	f040 8200 	bne.w	8006a26 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 8091 	bne.w	800675a <USB_EPStartXfer+0x15da>
 8006638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800663c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006654:	b29b      	uxth	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800665c:	4413      	add	r3, r2
 800665e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	011a      	lsls	r2, r3, #4
 8006670:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006674:	4413      	add	r3, r2
 8006676:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800667a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800667e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d116      	bne.n	80066bc <USB_EPStartXfer+0x153c>
 800668e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800669a:	b29a      	uxth	r2, r3
 800669c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	e083      	b.n	80067c4 <USB_EPStartXfer+0x1644>
 80066bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b3e      	cmp	r3, #62	; 0x3e
 80066ca:	d820      	bhi.n	800670e <USB_EPStartXfer+0x158e>
 80066cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	085b      	lsrs	r3, r3, #1
 80066da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d004      	beq.n	80066fc <USB_EPStartXfer+0x157c>
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f6:	3301      	adds	r3, #1
 80066f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006700:	b29b      	uxth	r3, r3
 8006702:	029b      	lsls	r3, r3, #10
 8006704:	b29a      	uxth	r2, r3
 8006706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800670a:	801a      	strh	r2, [r3, #0]
 800670c:	e05a      	b.n	80067c4 <USB_EPStartXfer+0x1644>
 800670e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <USB_EPStartXfer+0x15be>
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006738:	3b01      	subs	r3, #1
 800673a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800673e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006742:	b29b      	uxth	r3, r3
 8006744:	029b      	lsls	r3, r3, #10
 8006746:	b29b      	uxth	r3, r3
 8006748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800674c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e034      	b.n	80067c4 <USB_EPStartXfer+0x1644>
 800675a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d12c      	bne.n	80067c4 <USB_EPStartXfer+0x1644>
 800676a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006786:	b29b      	uxth	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800678e:	4413      	add	r3, r2
 8006790:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	011a      	lsls	r2, r3, #4
 80067a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067a6:	4413      	add	r3, r2
 80067a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	b29a      	uxth	r2, r3
 80067be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f040 8091 	bne.w	8006906 <USB_EPStartXfer+0x1786>
 80067e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80067f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006800:	b29b      	uxth	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006808:	4413      	add	r3, r2
 800680a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800680e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	011a      	lsls	r2, r3, #4
 800681c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006820:	4413      	add	r3, r2
 8006822:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800682a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d116      	bne.n	8006868 <USB_EPStartXfer+0x16e8>
 800683a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006846:	b29a      	uxth	r2, r3
 8006848:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800684c:	801a      	strh	r2, [r3, #0]
 800684e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685e:	b29a      	uxth	r2, r3
 8006860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006864:	801a      	strh	r2, [r3, #0]
 8006866:	e07c      	b.n	8006962 <USB_EPStartXfer+0x17e2>
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	2b3e      	cmp	r3, #62	; 0x3e
 8006876:	d820      	bhi.n	80068ba <USB_EPStartXfer+0x173a>
 8006878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800688a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <USB_EPStartXfer+0x1728>
 800689e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068a2:	3301      	adds	r3, #1
 80068a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	029b      	lsls	r3, r3, #10
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068b6:	801a      	strh	r2, [r3, #0]
 80068b8:	e053      	b.n	8006962 <USB_EPStartXfer+0x17e2>
 80068ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d104      	bne.n	80068ea <USB_EPStartXfer+0x176a>
 80068e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068e4:	3b01      	subs	r3, #1
 80068e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	029b      	lsls	r3, r3, #10
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006902:	801a      	strh	r2, [r3, #0]
 8006904:	e02d      	b.n	8006962 <USB_EPStartXfer+0x17e2>
 8006906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	785b      	ldrb	r3, [r3, #1]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d125      	bne.n	8006962 <USB_EPStartXfer+0x17e2>
 8006916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006924:	b29b      	uxth	r3, r3
 8006926:	461a      	mov	r2, r3
 8006928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800692c:	4413      	add	r3, r2
 800692e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	011a      	lsls	r2, r3, #4
 8006940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006944:	4413      	add	r3, r2
 8006946:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800694a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800694e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	b29a      	uxth	r2, r3
 800695c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006960:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 81fe 	beq.w	8006d70 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006994:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <USB_EPStartXfer+0x182c>
 80069a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10d      	bne.n	80069c8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f040 81db 	bne.w	8006d70 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f040 81d4 	bne.w	8006d70 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80069c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80069f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	441a      	add	r2, r3
 8006a0c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	8013      	strh	r3, [r2, #0]
 8006a24:	e1a4      	b.n	8006d70 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	78db      	ldrb	r3, [r3, #3]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	f040 819a 	bne.w	8006d6c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d917      	bls.n	8006a84 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	619a      	str	r2, [r3, #24]
 8006a82:	e00e      	b.n	8006aa2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d178      	bne.n	8006ba4 <USB_EPStartXfer+0x1a24>
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	011a      	lsls	r2, r3, #4
 8006aea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006aee:	4413      	add	r3, r2
 8006af0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006af4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d116      	bne.n	8006b2e <USB_EPStartXfer+0x19ae>
 8006b00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b12:	801a      	strh	r2, [r3, #0]
 8006b14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e06b      	b.n	8006c06 <USB_EPStartXfer+0x1a86>
 8006b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b32:	2b3e      	cmp	r3, #62	; 0x3e
 8006b34:	d818      	bhi.n	8006b68 <USB_EPStartXfer+0x19e8>
 8006b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d004      	beq.n	8006b56 <USB_EPStartXfer+0x19d6>
 8006b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b50:	3301      	adds	r3, #1
 8006b52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	029b      	lsls	r3, r3, #10
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b64:	801a      	strh	r2, [r3, #0]
 8006b66:	e04e      	b.n	8006c06 <USB_EPStartXfer+0x1a86>
 8006b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d104      	bne.n	8006b88 <USB_EPStartXfer+0x1a08>
 8006b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b82:	3b01      	subs	r3, #1
 8006b84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	029b      	lsls	r3, r3, #10
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	e030      	b.n	8006c06 <USB_EPStartXfer+0x1a86>
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d128      	bne.n	8006c06 <USB_EPStartXfer+0x1a86>
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	4413      	add	r3, r2
 8006bda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	011a      	lsls	r2, r3, #4
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bf6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c04:	801a      	strh	r2, [r3, #0]
 8006c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	785b      	ldrb	r3, [r3, #1]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d178      	bne.n	8006d16 <USB_EPStartXfer+0x1b96>
 8006c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c48:	4413      	add	r3, r2
 8006c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	011a      	lsls	r2, r3, #4
 8006c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c60:	4413      	add	r3, r2
 8006c62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d116      	bne.n	8006ca0 <USB_EPStartXfer+0x1b20>
 8006c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c84:	801a      	strh	r2, [r3, #0]
 8006c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c9c:	801a      	strh	r2, [r3, #0]
 8006c9e:	e067      	b.n	8006d70 <USB_EPStartXfer+0x1bf0>
 8006ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca6:	d818      	bhi.n	8006cda <USB_EPStartXfer+0x1b5a>
 8006ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cac:	085b      	lsrs	r3, r3, #1
 8006cae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <USB_EPStartXfer+0x1b48>
 8006cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	029b      	lsls	r3, r3, #10
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cd6:	801a      	strh	r2, [r3, #0]
 8006cd8:	e04a      	b.n	8006d70 <USB_EPStartXfer+0x1bf0>
 8006cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce8:	f003 031f 	and.w	r3, r3, #31
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <USB_EPStartXfer+0x1b7a>
 8006cf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	029b      	lsls	r3, r3, #10
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d12:	801a      	strh	r2, [r3, #0]
 8006d14:	e02c      	b.n	8006d70 <USB_EPStartXfer+0x1bf0>
 8006d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d124      	bne.n	8006d70 <USB_EPStartXfer+0x1bf0>
 8006d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	011a      	lsls	r2, r3, #4
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d54:	4413      	add	r3, r2
 8006d56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d68:	801a      	strh	r2, [r3, #0]
 8006d6a:	e001      	b.n	8006d70 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e03a      	b.n	8006de6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d96:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006d9a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006da2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006da6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006daa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d020      	beq.n	8006e44 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e18:	81bb      	strh	r3, [r7, #12]
 8006e1a:	89bb      	ldrh	r3, [r7, #12]
 8006e1c:	f083 0310 	eor.w	r3, r3, #16
 8006e20:	81bb      	strh	r3, [r7, #12]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	441a      	add	r2, r3
 8006e2c:	89bb      	ldrh	r3, [r7, #12]
 8006e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	8013      	strh	r3, [r2, #0]
 8006e42:	e01f      	b.n	8006e84 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5a:	81fb      	strh	r3, [r7, #14]
 8006e5c:	89fb      	ldrh	r3, [r7, #14]
 8006e5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e62:	81fb      	strh	r3, [r7, #14]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	441a      	add	r2, r3
 8006e6e:	89fb      	ldrh	r3, [r7, #14]
 8006e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr

08006e90 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	7b1b      	ldrb	r3, [r3, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f040 809d 	bne.w	8006fde <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	785b      	ldrb	r3, [r3, #1]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d04c      	beq.n	8006f46 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	823b      	strh	r3, [r7, #16]
 8006eba:	8a3b      	ldrh	r3, [r7, #16]
 8006ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01b      	beq.n	8006efc <USB_EPClearStall+0x6c>
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eda:	81fb      	strh	r3, [r7, #14]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	441a      	add	r2, r3
 8006ee6:	89fb      	ldrh	r3, [r7, #14]
 8006ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	78db      	ldrb	r3, [r3, #3]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d06c      	beq.n	8006fde <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f1a:	81bb      	strh	r3, [r7, #12]
 8006f1c:	89bb      	ldrh	r3, [r7, #12]
 8006f1e:	f083 0320 	eor.w	r3, r3, #32
 8006f22:	81bb      	strh	r3, [r7, #12]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	89bb      	ldrh	r3, [r7, #12]
 8006f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	8013      	strh	r3, [r2, #0]
 8006f44:	e04b      	b.n	8006fde <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	82fb      	strh	r3, [r7, #22]
 8006f54:	8afb      	ldrh	r3, [r7, #22]
 8006f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d01b      	beq.n	8006f96 <USB_EPClearStall+0x106>
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f74:	82bb      	strh	r3, [r7, #20]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	441a      	add	r2, r3
 8006f80:	8abb      	ldrh	r3, [r7, #20]
 8006f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fac:	827b      	strh	r3, [r7, #18]
 8006fae:	8a7b      	ldrh	r3, [r7, #18]
 8006fb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fb4:	827b      	strh	r3, [r7, #18]
 8006fb6:	8a7b      	ldrh	r3, [r7, #18]
 8006fb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fbc:	827b      	strh	r3, [r7, #18]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	441a      	add	r2, r3
 8006fc8:	8a7b      	ldrh	r3, [r7, #18]
 8006fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr

08006fea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ff6:	78fb      	ldrb	r3, [r7, #3]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d103      	bne.n	8007004 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2280      	movs	r2, #128	; 0x80
 8007000:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr

08007010 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr

08007038 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007046:	b29b      	uxth	r3, r3
 8007048:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800704a:	68fb      	ldr	r3, [r7, #12]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr

08007056 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr

0800706c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800706c:	b480      	push	{r7}
 800706e:	b08d      	sub	sp, #52	; 0x34
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4611      	mov	r1, r2
 8007078:	461a      	mov	r2, r3
 800707a:	460b      	mov	r3, r1
 800707c:	80fb      	strh	r3, [r7, #6]
 800707e:	4613      	mov	r3, r2
 8007080:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007082:	88bb      	ldrh	r3, [r7, #4]
 8007084:	3301      	adds	r3, #1
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	005a      	lsls	r2, r3, #1
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070a4:	e01e      	b.n	80070e4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	3301      	adds	r3, #1
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	3302      	adds	r3, #2
 80070d0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	3302      	adds	r3, #2
 80070d6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	3301      	adds	r3, #1
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	3b01      	subs	r3, #1
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1dd      	bne.n	80070a6 <USB_WritePMA+0x3a>
  }
}
 80070ea:	bf00      	nop
 80070ec:	bf00      	nop
 80070ee:	3734      	adds	r7, #52	; 0x34
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bc80      	pop	{r7}
 80070f4:	4770      	bx	lr

080070f6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b08b      	sub	sp, #44	; 0x2c
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	4611      	mov	r1, r2
 8007102:	461a      	mov	r2, r3
 8007104:	460b      	mov	r3, r1
 8007106:	80fb      	strh	r3, [r7, #6]
 8007108:	4613      	mov	r3, r2
 800710a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800710c:	88bb      	ldrh	r3, [r7, #4]
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	b29b      	uxth	r3, r3
 8007112:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	005a      	lsls	r2, r3, #1
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007128:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
 800712e:	e01b      	b.n	8007168 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	3302      	adds	r3, #2
 800713c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	3301      	adds	r3, #1
 800714a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	0a1b      	lsrs	r3, r3, #8
 8007150:	b2da      	uxtb	r2, r3
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	3301      	adds	r3, #1
 800715a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	3302      	adds	r3, #2
 8007160:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	3b01      	subs	r3, #1
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e0      	bne.n	8007130 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800716e:	88bb      	ldrh	r3, [r7, #4]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	b29b      	uxth	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d007      	beq.n	800718a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	b2da      	uxtb	r2, r3
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	701a      	strb	r2, [r3, #0]
  }
}
 800718a:	bf00      	nop
 800718c:	372c      	adds	r7, #44	; 0x2c
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr

08007194 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7c1b      	ldrb	r3, [r3, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d115      	bne.n	80071d8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071b0:	2202      	movs	r2, #2
 80071b2:	2181      	movs	r1, #129	; 0x81
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 ff88 	bl	80090ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071c4:	2202      	movs	r2, #2
 80071c6:	2101      	movs	r1, #1
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 ff7e 	bl	80090ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80071d6:	e012      	b.n	80071fe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071d8:	2340      	movs	r3, #64	; 0x40
 80071da:	2202      	movs	r2, #2
 80071dc:	2181      	movs	r1, #129	; 0x81
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f001 ff73 	bl	80090ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071ea:	2340      	movs	r3, #64	; 0x40
 80071ec:	2202      	movs	r2, #2
 80071ee:	2101      	movs	r1, #1
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 ff6a 	bl	80090ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071fe:	2308      	movs	r3, #8
 8007200:	2203      	movs	r2, #3
 8007202:	2182      	movs	r1, #130	; 0x82
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 ff60 	bl	80090ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007210:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007214:	f002 f880 	bl	8009318 <USBD_static_malloc>
 8007218:	4602      	mov	r2, r0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800722a:	2301      	movs	r3, #1
 800722c:	73fb      	strb	r3, [r7, #15]
 800722e:	e026      	b.n	800727e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007236:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2200      	movs	r2, #0
 8007246:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2200      	movs	r2, #0
 800724e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	7c1b      	ldrb	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007264:	2101      	movs	r1, #1
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f002 f820 	bl	80092ac <USBD_LL_PrepareReceive>
 800726c:	e007      	b.n	800727e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007274:	2340      	movs	r3, #64	; 0x40
 8007276:	2101      	movs	r1, #1
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f002 f817 	bl	80092ac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800727e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007298:	2181      	movs	r1, #129	; 0x81
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 ff3b 	bl	8009116 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80072a6:	2101      	movs	r1, #1
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 ff34 	bl	8009116 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80072b6:	2182      	movs	r1, #130	; 0x82
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 ff2c 	bl	8009116 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00e      	beq.n	80072ec <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072de:	4618      	mov	r0, r3
 80072e0:	f002 f826 	bl	8009330 <USBD_static_free>
    pdev->pClassData = NULL;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b086      	sub	sp, #24
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007306:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800731c:	2b00      	cmp	r3, #0
 800731e:	d039      	beq.n	8007394 <USBD_CDC_Setup+0x9e>
 8007320:	2b20      	cmp	r3, #32
 8007322:	d17f      	bne.n	8007424 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	88db      	ldrh	r3, [r3, #6]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d029      	beq.n	8007380 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	b25b      	sxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	da11      	bge.n	800735a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007342:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	88d2      	ldrh	r2, [r2, #6]
 8007348:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800734a:	6939      	ldr	r1, [r7, #16]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	88db      	ldrh	r3, [r3, #6]
 8007350:	461a      	mov	r2, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 fa09 	bl	800876a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007358:	e06b      	b.n	8007432 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	785a      	ldrb	r2, [r3, #1]
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	88db      	ldrh	r3, [r3, #6]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007370:	6939      	ldr	r1, [r7, #16]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	88db      	ldrh	r3, [r3, #6]
 8007376:	461a      	mov	r2, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f001 fa24 	bl	80087c6 <USBD_CtlPrepareRx>
      break;
 800737e:	e058      	b.n	8007432 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	7850      	ldrb	r0, [r2, #1]
 800738c:	2200      	movs	r2, #0
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	4798      	blx	r3
      break;
 8007392:	e04e      	b.n	8007432 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	785b      	ldrb	r3, [r3, #1]
 8007398:	2b0b      	cmp	r3, #11
 800739a:	d02e      	beq.n	80073fa <USBD_CDC_Setup+0x104>
 800739c:	2b0b      	cmp	r3, #11
 800739e:	dc38      	bgt.n	8007412 <USBD_CDC_Setup+0x11c>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <USBD_CDC_Setup+0xb4>
 80073a4:	2b0a      	cmp	r3, #10
 80073a6:	d014      	beq.n	80073d2 <USBD_CDC_Setup+0xdc>
 80073a8:	e033      	b.n	8007412 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d107      	bne.n	80073c4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80073b4:	f107 030c 	add.w	r3, r7, #12
 80073b8:	2202      	movs	r2, #2
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 f9d4 	bl	800876a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073c2:	e02e      	b.n	8007422 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 f965 	bl	8008696 <USBD_CtlError>
            ret = USBD_FAIL;
 80073cc:	2302      	movs	r3, #2
 80073ce:	75fb      	strb	r3, [r7, #23]
          break;
 80073d0:	e027      	b.n	8007422 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d107      	bne.n	80073ec <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80073dc:	f107 030f 	add.w	r3, r7, #15
 80073e0:	2201      	movs	r2, #1
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 f9c0 	bl	800876a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073ea:	e01a      	b.n	8007422 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f001 f951 	bl	8008696 <USBD_CtlError>
            ret = USBD_FAIL;
 80073f4:	2302      	movs	r3, #2
 80073f6:	75fb      	strb	r3, [r7, #23]
          break;
 80073f8:	e013      	b.n	8007422 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007400:	2b03      	cmp	r3, #3
 8007402:	d00d      	beq.n	8007420 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 f945 	bl	8008696 <USBD_CtlError>
            ret = USBD_FAIL;
 800740c:	2302      	movs	r3, #2
 800740e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007410:	e006      	b.n	8007420 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 f93e 	bl	8008696 <USBD_CtlError>
          ret = USBD_FAIL;
 800741a:	2302      	movs	r3, #2
 800741c:	75fb      	strb	r3, [r7, #23]
          break;
 800741e:	e000      	b.n	8007422 <USBD_CDC_Setup+0x12c>
          break;
 8007420:	bf00      	nop
      }
      break;
 8007422:	e006      	b.n	8007432 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 f935 	bl	8008696 <USBD_CtlError>
      ret = USBD_FAIL;
 800742c:	2302      	movs	r3, #2
 800742e:	75fb      	strb	r3, [r7, #23]
      break;
 8007430:	bf00      	nop
  }

  return ret;
 8007432:	7dfb      	ldrb	r3, [r7, #23]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007456:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745e:	2b00      	cmp	r3, #0
 8007460:	d03a      	beq.n	80074d8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007462:	78fa      	ldrb	r2, [r7, #3]
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	331c      	adds	r3, #28
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d029      	beq.n	80074cc <USBD_CDC_DataIn+0x90>
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	6879      	ldr	r1, [r7, #4]
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	440b      	add	r3, r1
 8007486:	331c      	adds	r3, #28
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	78f9      	ldrb	r1, [r7, #3]
 800748c:	68b8      	ldr	r0, [r7, #8]
 800748e:	460b      	mov	r3, r1
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	440b      	add	r3, r1
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	4403      	add	r3, r0
 8007498:	3338      	adds	r3, #56	; 0x38
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	fbb2 f1f3 	udiv	r1, r2, r3
 80074a0:	fb01 f303 	mul.w	r3, r1, r3
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d110      	bne.n	80074cc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80074aa:	78fa      	ldrb	r2, [r7, #3]
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	440b      	add	r3, r1
 80074b8:	331c      	adds	r3, #28
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074be:	78f9      	ldrb	r1, [r7, #3]
 80074c0:	2300      	movs	r3, #0
 80074c2:	2200      	movs	r2, #0
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 fece 	bl	8009266 <USBD_LL_Transmit>
 80074ca:	e003      	b.n	80074d4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	e000      	b.n	80074da <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80074d8:	2302      	movs	r3, #2
  }
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 fef9 	bl	80092f2 <USBD_LL_GetRxDataSize>
 8007500:	4602      	mov	r2, r0
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00d      	beq.n	800752e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007526:	4611      	mov	r1, r2
 8007528:	4798      	blx	r3

    return USBD_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	e000      	b.n	8007530 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800752e:	2302      	movs	r3, #2
  }
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007546:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800754e:	2b00      	cmp	r3, #0
 8007550:	d015      	beq.n	800757e <USBD_CDC_EP0_RxReady+0x46>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007558:	2bff      	cmp	r3, #255	; 0xff
 800755a:	d010      	beq.n	800757e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800756a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007572:	b292      	uxth	r2, r2
 8007574:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	22ff      	movs	r2, #255	; 0xff
 800757a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2243      	movs	r2, #67	; 0x43
 8007594:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007596:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	200000ac 	.word	0x200000ac

080075a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2243      	movs	r2, #67	; 0x43
 80075b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80075b6:	4b03      	ldr	r3, [pc, #12]	; (80075c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000068 	.word	0x20000068

080075c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2243      	movs	r2, #67	; 0x43
 80075d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80075d6:	4b03      	ldr	r3, [pc, #12]	; (80075e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	200000f0 	.word	0x200000f0

080075e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	220a      	movs	r2, #10
 80075f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80075f6:	4b03      	ldr	r3, [pc, #12]	; (8007604 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	20000024 	.word	0x20000024

08007608 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007612:	2302      	movs	r3, #2
 8007614:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	bc80      	pop	{r7}
 8007632:	4770      	bx	lr

08007634 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007648:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007652:	88fa      	ldrh	r2, [r7, #6]
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	bc80      	pop	{r7}
 8007664:	4770      	bx	lr

08007666 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007676:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr

0800768c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d01c      	beq.n	80076e0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d115      	bne.n	80076dc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2181      	movs	r1, #129	; 0x81
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 fdc7 	bl	8009266 <USBD_LL_Transmit>

      return USBD_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	e002      	b.n	80076e2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80076e0:	2302      	movs	r3, #2
  }
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007700:	2b00      	cmp	r3, #0
 8007702:	d017      	beq.n	8007734 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	7c1b      	ldrb	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d109      	bne.n	8007720 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007716:	2101      	movs	r1, #1
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 fdc7 	bl	80092ac <USBD_LL_PrepareReceive>
 800771e:	e007      	b.n	8007730 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007726:	2340      	movs	r3, #64	; 0x40
 8007728:	2101      	movs	r1, #1
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 fdbe 	bl	80092ac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	e000      	b.n	8007736 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007734:	2302      	movs	r3, #2
  }
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	4613      	mov	r3, r2
 800774a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007752:	2302      	movs	r3, #2
 8007754:	e01a      	b.n	800778c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	79fa      	ldrb	r2, [r7, #7]
 8007782:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f001 fc2b 	bl	8008fe0 <USBD_LL_Init>

  return USBD_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d006      	beq.n	80077b6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
 80077b4:	e001      	b.n	80077ba <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80077b6:	2302      	movs	r3, #2
 80077b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr

080077c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 fc60 	bl	8009094 <USBD_LL_Start>

  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr

080077f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	460b      	mov	r3, r1
 80077fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80077fe:	2302      	movs	r3, #2
 8007800:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00c      	beq.n	8007826 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	78fa      	ldrb	r2, [r7, #3]
 8007816:	4611      	mov	r1, r2
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	4798      	blx	r3
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	78fa      	ldrb	r2, [r7, #3]
 8007846:	4611      	mov	r1, r2
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	4798      	blx	r3

  return USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fed8 	bl	800861e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800787c:	461a      	mov	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800788a:	f003 031f 	and.w	r3, r3, #31
 800788e:	2b02      	cmp	r3, #2
 8007890:	d016      	beq.n	80078c0 <USBD_LL_SetupStage+0x6a>
 8007892:	2b02      	cmp	r3, #2
 8007894:	d81c      	bhi.n	80078d0 <USBD_LL_SetupStage+0x7a>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <USBD_LL_SetupStage+0x4a>
 800789a:	2b01      	cmp	r3, #1
 800789c:	d008      	beq.n	80078b0 <USBD_LL_SetupStage+0x5a>
 800789e:	e017      	b.n	80078d0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f9cb 	bl	8007c44 <USBD_StdDevReq>
      break;
 80078ae:	e01a      	b.n	80078e6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fa2d 	bl	8007d18 <USBD_StdItfReq>
      break;
 80078be:	e012      	b.n	80078e6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fa6d 	bl	8007da8 <USBD_StdEPReq>
      break;
 80078ce:	e00a      	b.n	80078e6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80078d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 fc38 	bl	8009154 <USBD_LL_StallEP>
      break;
 80078e4:	bf00      	nop
  }

  return USBD_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	460b      	mov	r3, r1
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80078fe:	7afb      	ldrb	r3, [r7, #11]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d14b      	bne.n	800799c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800790a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007912:	2b03      	cmp	r3, #3
 8007914:	d134      	bne.n	8007980 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	429a      	cmp	r2, r3
 8007920:	d919      	bls.n	8007956 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	1ad2      	subs	r2, r2, r3
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007938:	429a      	cmp	r2, r3
 800793a:	d203      	bcs.n	8007944 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007940:	b29b      	uxth	r3, r3
 8007942:	e002      	b.n	800794a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007948:	b29b      	uxth	r3, r3
 800794a:	461a      	mov	r2, r3
 800794c:	6879      	ldr	r1, [r7, #4]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 ff57 	bl	8008802 <USBD_CtlContinueRx>
 8007954:	e038      	b.n	80079c8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007968:	2b03      	cmp	r3, #3
 800796a:	d105      	bne.n	8007978 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 ff54 	bl	8008826 <USBD_CtlSendStatus>
 800797e:	e023      	b.n	80079c8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007986:	2b05      	cmp	r3, #5
 8007988:	d11e      	bne.n	80079c8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007992:	2100      	movs	r1, #0
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f001 fbdd 	bl	8009154 <USBD_LL_StallEP>
 800799a:	e015      	b.n	80079c8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00d      	beq.n	80079c4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d108      	bne.n	80079c4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	7afa      	ldrb	r2, [r7, #11]
 80079bc:	4611      	mov	r1, r2
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	4798      	blx	r3
 80079c2:	e001      	b.n	80079c8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079c4:	2302      	movs	r3, #2
 80079c6:	e000      	b.n	80079ca <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b086      	sub	sp, #24
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	460b      	mov	r3, r1
 80079dc:	607a      	str	r2, [r7, #4]
 80079de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80079e0:	7afb      	ldrb	r3, [r7, #11]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d17f      	bne.n	8007ae6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3314      	adds	r3, #20
 80079ea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d15c      	bne.n	8007ab0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d915      	bls.n	8007a2e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	1ad2      	subs	r2, r2, r3
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	461a      	mov	r2, r3
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 fec1 	bl	80087a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a20:	2300      	movs	r3, #0
 8007a22:	2200      	movs	r2, #0
 8007a24:	2100      	movs	r1, #0
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f001 fc40 	bl	80092ac <USBD_LL_PrepareReceive>
 8007a2c:	e04e      	b.n	8007acc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	6912      	ldr	r2, [r2, #16]
 8007a36:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a3a:	fb01 f202 	mul.w	r2, r1, r2
 8007a3e:	1a9b      	subs	r3, r3, r2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11c      	bne.n	8007a7e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d316      	bcc.n	8007a7e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d20f      	bcs.n	8007a7e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2100      	movs	r1, #0
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 fe9d 	bl	80087a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a70:	2300      	movs	r3, #0
 8007a72:	2200      	movs	r2, #0
 8007a74:	2100      	movs	r1, #0
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f001 fc18 	bl	80092ac <USBD_LL_PrepareReceive>
 8007a7c:	e026      	b.n	8007acc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d105      	bne.n	8007aa0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007aa0:	2180      	movs	r1, #128	; 0x80
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f001 fb56 	bl	8009154 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 fecf 	bl	800884c <USBD_CtlReceiveStatus>
 8007aae:	e00d      	b.n	8007acc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d004      	beq.n	8007ac4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007ac4:	2180      	movs	r1, #128	; 0x80
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f001 fb44 	bl	8009154 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d11d      	bne.n	8007b12 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f7ff fe81 	bl	80077de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ae4:	e015      	b.n	8007b12 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00d      	beq.n	8007b0e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d108      	bne.n	8007b0e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	7afa      	ldrb	r2, [r7, #11]
 8007b06:	4611      	mov	r1, r2
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	4798      	blx	r3
 8007b0c:	e001      	b.n	8007b12 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e000      	b.n	8007b14 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b24:	2340      	movs	r3, #64	; 0x40
 8007b26:	2200      	movs	r2, #0
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 facd 	bl	80090ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2240      	movs	r2, #64	; 0x40
 8007b3c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b40:	2340      	movs	r3, #64	; 0x40
 8007b42:	2200      	movs	r2, #0
 8007b44:	2180      	movs	r1, #128	; 0x80
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 fabf 	bl	80090ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2240      	movs	r2, #64	; 0x40
 8007b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d009      	beq.n	8007b94 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6852      	ldr	r2, [r2, #4]
 8007b8c:	b2d2      	uxtb	r2, r2
 8007b8e:	4611      	mov	r1, r2
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
  }

  return USBD_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	78fa      	ldrb	r2, [r7, #3]
 8007bae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bc80      	pop	{r7}
 8007bba:	4770      	bx	lr

08007bbc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2204      	movs	r2, #4
 8007bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bc80      	pop	{r7}
 8007be2:	4770      	bx	lr

08007be4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf2:	2b04      	cmp	r3, #4
 8007bf4:	d105      	bne.n	8007c02 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bc80      	pop	{r7}
 8007c0c:	4770      	bx	lr

08007c0e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d10b      	bne.n	8007c38 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	d005      	beq.n	8007c6a <USBD_StdDevReq+0x26>
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d84f      	bhi.n	8007d02 <USBD_StdDevReq+0xbe>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <USBD_StdDevReq+0x36>
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d14b      	bne.n	8007d02 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4798      	blx	r3
      break;
 8007c78:	e048      	b.n	8007d0c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	2b09      	cmp	r3, #9
 8007c80:	d839      	bhi.n	8007cf6 <USBD_StdDevReq+0xb2>
 8007c82:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <USBD_StdDevReq+0x44>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007cd9 	.word	0x08007cd9
 8007c8c:	08007ced 	.word	0x08007ced
 8007c90:	08007cf7 	.word	0x08007cf7
 8007c94:	08007ce3 	.word	0x08007ce3
 8007c98:	08007cf7 	.word	0x08007cf7
 8007c9c:	08007cbb 	.word	0x08007cbb
 8007ca0:	08007cb1 	.word	0x08007cb1
 8007ca4:	08007cf7 	.word	0x08007cf7
 8007ca8:	08007ccf 	.word	0x08007ccf
 8007cac:	08007cc5 	.word	0x08007cc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f9dc 	bl	8008070 <USBD_GetDescriptor>
          break;
 8007cb8:	e022      	b.n	8007d00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fb3f 	bl	8008340 <USBD_SetAddress>
          break;
 8007cc2:	e01d      	b.n	8007d00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fb7e 	bl	80083c8 <USBD_SetConfig>
          break;
 8007ccc:	e018      	b.n	8007d00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fc07 	bl	80084e4 <USBD_GetConfig>
          break;
 8007cd6:	e013      	b.n	8007d00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fc37 	bl	800854e <USBD_GetStatus>
          break;
 8007ce0:	e00e      	b.n	8007d00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fc65 	bl	80085b4 <USBD_SetFeature>
          break;
 8007cea:	e009      	b.n	8007d00 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fc74 	bl	80085dc <USBD_ClrFeature>
          break;
 8007cf4:	e004      	b.n	8007d00 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fccc 	bl	8008696 <USBD_CtlError>
          break;
 8007cfe:	bf00      	nop
      }
      break;
 8007d00:	e004      	b.n	8007d0c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fcc6 	bl	8008696 <USBD_CtlError>
      break;
 8007d0a:	bf00      	nop
  }

  return ret;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop

08007d18 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d2e:	2b40      	cmp	r3, #64	; 0x40
 8007d30:	d005      	beq.n	8007d3e <USBD_StdItfReq+0x26>
 8007d32:	2b40      	cmp	r3, #64	; 0x40
 8007d34:	d82e      	bhi.n	8007d94 <USBD_StdItfReq+0x7c>
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <USBD_StdItfReq+0x26>
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d12a      	bne.n	8007d94 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d44:	3b01      	subs	r3, #1
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d81d      	bhi.n	8007d86 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	889b      	ldrh	r3, [r3, #4]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d813      	bhi.n	8007d7c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	88db      	ldrh	r3, [r3, #6]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d110      	bne.n	8007d90 <USBD_StdItfReq+0x78>
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10d      	bne.n	8007d90 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fd56 	bl	8008826 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d7a:	e009      	b.n	8007d90 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fc89 	bl	8008696 <USBD_CtlError>
          break;
 8007d84:	e004      	b.n	8007d90 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fc84 	bl	8008696 <USBD_CtlError>
          break;
 8007d8e:	e000      	b.n	8007d92 <USBD_StdItfReq+0x7a>
          break;
 8007d90:	bf00      	nop
      }
      break;
 8007d92:	e004      	b.n	8007d9e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fc7d 	bl	8008696 <USBD_CtlError>
      break;
 8007d9c:	bf00      	nop
  }

  return USBD_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	889b      	ldrh	r3, [r3, #4]
 8007dba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dc4:	2b40      	cmp	r3, #64	; 0x40
 8007dc6:	d007      	beq.n	8007dd8 <USBD_StdEPReq+0x30>
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	f200 8146 	bhi.w	800805a <USBD_StdEPReq+0x2b2>
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <USBD_StdEPReq+0x40>
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	f040 8141 	bne.w	800805a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
      break;
 8007de6:	e13d      	b.n	8008064 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	d10a      	bne.n	8007e0a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
 8007e02:	4603      	mov	r3, r0
 8007e04:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	e12d      	b.n	8008066 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d007      	beq.n	8007e22 <USBD_StdEPReq+0x7a>
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	f300 811b 	bgt.w	800804e <USBD_StdEPReq+0x2a6>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d072      	beq.n	8007f02 <USBD_StdEPReq+0x15a>
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d03a      	beq.n	8007e96 <USBD_StdEPReq+0xee>
 8007e20:	e115      	b.n	800804e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d002      	beq.n	8007e32 <USBD_StdEPReq+0x8a>
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d015      	beq.n	8007e5c <USBD_StdEPReq+0xb4>
 8007e30:	e02b      	b.n	8007e8a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00c      	beq.n	8007e52 <USBD_StdEPReq+0xaa>
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	2b80      	cmp	r3, #128	; 0x80
 8007e3c:	d009      	beq.n	8007e52 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f001 f986 	bl	8009154 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e48:	2180      	movs	r1, #128	; 0x80
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 f982 	bl	8009154 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e50:	e020      	b.n	8007e94 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fc1e 	bl	8008696 <USBD_CtlError>
              break;
 8007e5a:	e01b      	b.n	8007e94 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	885b      	ldrh	r3, [r3, #2]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10e      	bne.n	8007e82 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00b      	beq.n	8007e82 <USBD_StdEPReq+0xda>
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b80      	cmp	r3, #128	; 0x80
 8007e6e:	d008      	beq.n	8007e82 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	88db      	ldrh	r3, [r3, #6]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 f969 	bl	8009154 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fccf 	bl	8008826 <USBD_CtlSendStatus>

              break;
 8007e88:	e004      	b.n	8007e94 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fc02 	bl	8008696 <USBD_CtlError>
              break;
 8007e92:	bf00      	nop
          }
          break;
 8007e94:	e0e0      	b.n	8008058 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d002      	beq.n	8007ea6 <USBD_StdEPReq+0xfe>
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d015      	beq.n	8007ed0 <USBD_StdEPReq+0x128>
 8007ea4:	e026      	b.n	8007ef4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00c      	beq.n	8007ec6 <USBD_StdEPReq+0x11e>
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	2b80      	cmp	r3, #128	; 0x80
 8007eb0:	d009      	beq.n	8007ec6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 f94c 	bl	8009154 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ebc:	2180      	movs	r1, #128	; 0x80
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f001 f948 	bl	8009154 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ec4:	e01c      	b.n	8007f00 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fbe4 	bl	8008696 <USBD_CtlError>
              break;
 8007ece:	e017      	b.n	8007f00 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	885b      	ldrh	r3, [r3, #2]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d112      	bne.n	8007efe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d004      	beq.n	8007eec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 f953 	bl	8009192 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fc9a 	bl	8008826 <USBD_CtlSendStatus>
              }
              break;
 8007ef2:	e004      	b.n	8007efe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fbcd 	bl	8008696 <USBD_CtlError>
              break;
 8007efc:	e000      	b.n	8007f00 <USBD_StdEPReq+0x158>
              break;
 8007efe:	bf00      	nop
          }
          break;
 8007f00:	e0aa      	b.n	8008058 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d002      	beq.n	8007f12 <USBD_StdEPReq+0x16a>
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	d032      	beq.n	8007f76 <USBD_StdEPReq+0x1ce>
 8007f10:	e097      	b.n	8008042 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d007      	beq.n	8007f28 <USBD_StdEPReq+0x180>
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b80      	cmp	r3, #128	; 0x80
 8007f1c:	d004      	beq.n	8007f28 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fbb8 	bl	8008696 <USBD_CtlError>
                break;
 8007f26:	e091      	b.n	800804c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	da0b      	bge.n	8007f48 <USBD_StdEPReq+0x1a0>
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	3310      	adds	r3, #16
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	4413      	add	r3, r2
 8007f44:	3304      	adds	r3, #4
 8007f46:	e00b      	b.n	8007f60 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	3304      	adds	r3, #4
 8007f60:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fbfb 	bl	800876a <USBD_CtlSendData>
              break;
 8007f74:	e06a      	b.n	800804c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	da11      	bge.n	8007fa2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	f003 020f 	and.w	r2, r3, #15
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	4613      	mov	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	440b      	add	r3, r1
 8007f90:	3318      	adds	r3, #24
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d117      	bne.n	8007fc8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fb7b 	bl	8008696 <USBD_CtlError>
                  break;
 8007fa0:	e054      	b.n	800804c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	f003 020f 	and.w	r2, r3, #15
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d104      	bne.n	8007fc8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fb68 	bl	8008696 <USBD_CtlError>
                  break;
 8007fc6:	e041      	b.n	800804c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	da0b      	bge.n	8007fe8 <USBD_StdEPReq+0x240>
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	3310      	adds	r3, #16
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	e00b      	b.n	8008000 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3304      	adds	r3, #4
 8008000:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <USBD_StdEPReq+0x266>
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b80      	cmp	r3, #128	; 0x80
 800800c:	d103      	bne.n	8008016 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	e00e      	b.n	8008034 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 f8d8 	bl	80091d0 <USBD_LL_IsStallEP>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2201      	movs	r2, #1
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	e002      	b.n	8008034 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2202      	movs	r2, #2
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fb95 	bl	800876a <USBD_CtlSendData>
              break;
 8008040:	e004      	b.n	800804c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fb26 	bl	8008696 <USBD_CtlError>
              break;
 800804a:	bf00      	nop
          }
          break;
 800804c:	e004      	b.n	8008058 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fb20 	bl	8008696 <USBD_CtlError>
          break;
 8008056:	bf00      	nop
      }
      break;
 8008058:	e004      	b.n	8008064 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fb1a 	bl	8008696 <USBD_CtlError>
      break;
 8008062:	bf00      	nop
  }

  return ret;
 8008064:	7bfb      	ldrb	r3, [r7, #15]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	885b      	ldrh	r3, [r3, #2]
 800808a:	0a1b      	lsrs	r3, r3, #8
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	2b06      	cmp	r3, #6
 8008092:	f200 8128 	bhi.w	80082e6 <USBD_GetDescriptor+0x276>
 8008096:	a201      	add	r2, pc, #4	; (adr r2, 800809c <USBD_GetDescriptor+0x2c>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	080080b9 	.word	0x080080b9
 80080a0:	080080d1 	.word	0x080080d1
 80080a4:	08008111 	.word	0x08008111
 80080a8:	080082e7 	.word	0x080082e7
 80080ac:	080082e7 	.word	0x080082e7
 80080b0:	08008287 	.word	0x08008287
 80080b4:	080082b3 	.word	0x080082b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7c12      	ldrb	r2, [r2, #16]
 80080c4:	f107 0108 	add.w	r1, r7, #8
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
      break;
 80080ce:	e112      	b.n	80082f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	7c1b      	ldrb	r3, [r3, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10d      	bne.n	80080f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	f107 0208 	add.w	r2, r7, #8
 80080e4:	4610      	mov	r0, r2
 80080e6:	4798      	blx	r3
 80080e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3301      	adds	r3, #1
 80080ee:	2202      	movs	r2, #2
 80080f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080f2:	e100      	b.n	80082f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fc:	f107 0208 	add.w	r2, r7, #8
 8008100:	4610      	mov	r0, r2
 8008102:	4798      	blx	r3
 8008104:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3301      	adds	r3, #1
 800810a:	2202      	movs	r2, #2
 800810c:	701a      	strb	r2, [r3, #0]
      break;
 800810e:	e0f2      	b.n	80082f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	885b      	ldrh	r3, [r3, #2]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b05      	cmp	r3, #5
 8008118:	f200 80ac 	bhi.w	8008274 <USBD_GetDescriptor+0x204>
 800811c:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <USBD_GetDescriptor+0xb4>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	0800813d 	.word	0x0800813d
 8008128:	08008171 	.word	0x08008171
 800812c:	080081a5 	.word	0x080081a5
 8008130:	080081d9 	.word	0x080081d9
 8008134:	0800820d 	.word	0x0800820d
 8008138:	08008241 	.word	0x08008241
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00b      	beq.n	8008160 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	7c12      	ldrb	r2, [r2, #16]
 8008154:	f107 0108 	add.w	r1, r7, #8
 8008158:	4610      	mov	r0, r2
 800815a:	4798      	blx	r3
 800815c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800815e:	e091      	b.n	8008284 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa97 	bl	8008696 <USBD_CtlError>
            err++;
 8008168:	7afb      	ldrb	r3, [r7, #11]
 800816a:	3301      	adds	r3, #1
 800816c:	72fb      	strb	r3, [r7, #11]
          break;
 800816e:	e089      	b.n	8008284 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	7c12      	ldrb	r2, [r2, #16]
 8008188:	f107 0108 	add.w	r1, r7, #8
 800818c:	4610      	mov	r0, r2
 800818e:	4798      	blx	r3
 8008190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008192:	e077      	b.n	8008284 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa7d 	bl	8008696 <USBD_CtlError>
            err++;
 800819c:	7afb      	ldrb	r3, [r7, #11]
 800819e:	3301      	adds	r3, #1
 80081a0:	72fb      	strb	r3, [r7, #11]
          break;
 80081a2:	e06f      	b.n	8008284 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7c12      	ldrb	r2, [r2, #16]
 80081bc:	f107 0108 	add.w	r1, r7, #8
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081c6:	e05d      	b.n	8008284 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa63 	bl	8008696 <USBD_CtlError>
            err++;
 80081d0:	7afb      	ldrb	r3, [r7, #11]
 80081d2:	3301      	adds	r3, #1
 80081d4:	72fb      	strb	r3, [r7, #11]
          break;
 80081d6:	e055      	b.n	8008284 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7c12      	ldrb	r2, [r2, #16]
 80081f0:	f107 0108 	add.w	r1, r7, #8
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fa:	e043      	b.n	8008284 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fa49 	bl	8008696 <USBD_CtlError>
            err++;
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	3301      	adds	r3, #1
 8008208:	72fb      	strb	r3, [r7, #11]
          break;
 800820a:	e03b      	b.n	8008284 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	7c12      	ldrb	r2, [r2, #16]
 8008224:	f107 0108 	add.w	r1, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800822e:	e029      	b.n	8008284 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fa2f 	bl	8008696 <USBD_CtlError>
            err++;
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	3301      	adds	r3, #1
 800823c:	72fb      	strb	r3, [r7, #11]
          break;
 800823e:	e021      	b.n	8008284 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	7c12      	ldrb	r2, [r2, #16]
 8008258:	f107 0108 	add.w	r1, r7, #8
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008262:	e00f      	b.n	8008284 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa15 	bl	8008696 <USBD_CtlError>
            err++;
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	3301      	adds	r3, #1
 8008270:	72fb      	strb	r3, [r7, #11]
          break;
 8008272:	e007      	b.n	8008284 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fa0d 	bl	8008696 <USBD_CtlError>
          err++;
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	3301      	adds	r3, #1
 8008280:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008282:	e038      	b.n	80082f6 <USBD_GetDescriptor+0x286>
 8008284:	e037      	b.n	80082f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	7c1b      	ldrb	r3, [r3, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d109      	bne.n	80082a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008296:	f107 0208 	add.w	r2, r7, #8
 800829a:	4610      	mov	r0, r2
 800829c:	4798      	blx	r3
 800829e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082a0:	e029      	b.n	80082f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f9f6 	bl	8008696 <USBD_CtlError>
        err++;
 80082aa:	7afb      	ldrb	r3, [r7, #11]
 80082ac:	3301      	adds	r3, #1
 80082ae:	72fb      	strb	r3, [r7, #11]
      break;
 80082b0:	e021      	b.n	80082f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	7c1b      	ldrb	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10d      	bne.n	80082d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c2:	f107 0208 	add.w	r2, r7, #8
 80082c6:	4610      	mov	r0, r2
 80082c8:	4798      	blx	r3
 80082ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3301      	adds	r3, #1
 80082d0:	2207      	movs	r2, #7
 80082d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082d4:	e00f      	b.n	80082f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f9dc 	bl	8008696 <USBD_CtlError>
        err++;
 80082de:	7afb      	ldrb	r3, [r7, #11]
 80082e0:	3301      	adds	r3, #1
 80082e2:	72fb      	strb	r3, [r7, #11]
      break;
 80082e4:	e007      	b.n	80082f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f9d4 	bl	8008696 <USBD_CtlError>
      err++;
 80082ee:	7afb      	ldrb	r3, [r7, #11]
 80082f0:	3301      	adds	r3, #1
 80082f2:	72fb      	strb	r3, [r7, #11]
      break;
 80082f4:	bf00      	nop
  }

  if (err != 0U)
 80082f6:	7afb      	ldrb	r3, [r7, #11]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d11c      	bne.n	8008336 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80082fc:	893b      	ldrh	r3, [r7, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d011      	beq.n	8008326 <USBD_GetDescriptor+0x2b6>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	88db      	ldrh	r3, [r3, #6]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00d      	beq.n	8008326 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	88da      	ldrh	r2, [r3, #6]
 800830e:	893b      	ldrh	r3, [r7, #8]
 8008310:	4293      	cmp	r3, r2
 8008312:	bf28      	it	cs
 8008314:	4613      	movcs	r3, r2
 8008316:	b29b      	uxth	r3, r3
 8008318:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800831a:	893b      	ldrh	r3, [r7, #8]
 800831c:	461a      	mov	r2, r3
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fa22 	bl	800876a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	88db      	ldrh	r3, [r3, #6]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d104      	bne.n	8008338 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa79 	bl	8008826 <USBD_CtlSendStatus>
 8008334:	e000      	b.n	8008338 <USBD_GetDescriptor+0x2c8>
    return;
 8008336:	bf00      	nop
    }
  }
}
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop

08008340 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	889b      	ldrh	r3, [r3, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d130      	bne.n	80083b4 <USBD_SetAddress+0x74>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	88db      	ldrh	r3, [r3, #6]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d12c      	bne.n	80083b4 <USBD_SetAddress+0x74>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	885b      	ldrh	r3, [r3, #2]
 800835e:	2b7f      	cmp	r3, #127	; 0x7f
 8008360:	d828      	bhi.n	80083b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	885b      	ldrh	r3, [r3, #2]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800836c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008374:	2b03      	cmp	r3, #3
 8008376:	d104      	bne.n	8008382 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f98b 	bl	8008696 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008380:	e01d      	b.n	80083be <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	7bfa      	ldrb	r2, [r7, #15]
 8008386:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 ff4a 	bl	8009228 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fa46 	bl	8008826 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d004      	beq.n	80083aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a8:	e009      	b.n	80083be <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b2:	e004      	b.n	80083be <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f96d 	bl	8008696 <USBD_CtlError>
  }
}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
	...

080083c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	885b      	ldrh	r3, [r3, #2]
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	4b41      	ldr	r3, [pc, #260]	; (80084e0 <USBD_SetConfig+0x118>)
 80083da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083dc:	4b40      	ldr	r3, [pc, #256]	; (80084e0 <USBD_SetConfig+0x118>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d904      	bls.n	80083ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f955 	bl	8008696 <USBD_CtlError>
 80083ec:	e075      	b.n	80084da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d002      	beq.n	80083fe <USBD_SetConfig+0x36>
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d023      	beq.n	8008444 <USBD_SetConfig+0x7c>
 80083fc:	e062      	b.n	80084c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80083fe:	4b38      	ldr	r3, [pc, #224]	; (80084e0 <USBD_SetConfig+0x118>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01a      	beq.n	800843c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008406:	4b36      	ldr	r3, [pc, #216]	; (80084e0 <USBD_SetConfig+0x118>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2203      	movs	r2, #3
 8008414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008418:	4b31      	ldr	r3, [pc, #196]	; (80084e0 <USBD_SetConfig+0x118>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff f9e7 	bl	80077f2 <USBD_SetClassConfig>
 8008424:	4603      	mov	r3, r0
 8008426:	2b02      	cmp	r3, #2
 8008428:	d104      	bne.n	8008434 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f932 	bl	8008696 <USBD_CtlError>
            return;
 8008432:	e052      	b.n	80084da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f9f6 	bl	8008826 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800843a:	e04e      	b.n	80084da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f9f2 	bl	8008826 <USBD_CtlSendStatus>
        break;
 8008442:	e04a      	b.n	80084da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008444:	4b26      	ldr	r3, [pc, #152]	; (80084e0 <USBD_SetConfig+0x118>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d112      	bne.n	8008472 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008454:	4b22      	ldr	r3, [pc, #136]	; (80084e0 <USBD_SetConfig+0x118>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800845e:	4b20      	ldr	r3, [pc, #128]	; (80084e0 <USBD_SetConfig+0x118>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff f9e3 	bl	8007830 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f9db 	bl	8008826 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008470:	e033      	b.n	80084da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008472:	4b1b      	ldr	r3, [pc, #108]	; (80084e0 <USBD_SetConfig+0x118>)
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	d01d      	beq.n	80084bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	b2db      	uxtb	r3, r3
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff f9d1 	bl	8007830 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800848e:	4b14      	ldr	r3, [pc, #80]	; (80084e0 <USBD_SetConfig+0x118>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008498:	4b11      	ldr	r3, [pc, #68]	; (80084e0 <USBD_SetConfig+0x118>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff f9a7 	bl	80077f2 <USBD_SetClassConfig>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d104      	bne.n	80084b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f8f2 	bl	8008696 <USBD_CtlError>
            return;
 80084b2:	e012      	b.n	80084da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f9b6 	bl	8008826 <USBD_CtlSendStatus>
        break;
 80084ba:	e00e      	b.n	80084da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f9b2 	bl	8008826 <USBD_CtlSendStatus>
        break;
 80084c2:	e00a      	b.n	80084da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f8e5 	bl	8008696 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80084cc:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <USBD_SetConfig+0x118>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff f9ac 	bl	8007830 <USBD_ClrClassConfig>
        break;
 80084d8:	bf00      	nop
    }
  }
}
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	200003ac 	.word	0x200003ac

080084e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	88db      	ldrh	r3, [r3, #6]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d004      	beq.n	8008500 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f8cc 	bl	8008696 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084fe:	e022      	b.n	8008546 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008506:	2b02      	cmp	r3, #2
 8008508:	dc02      	bgt.n	8008510 <USBD_GetConfig+0x2c>
 800850a:	2b00      	cmp	r3, #0
 800850c:	dc03      	bgt.n	8008516 <USBD_GetConfig+0x32>
 800850e:	e015      	b.n	800853c <USBD_GetConfig+0x58>
 8008510:	2b03      	cmp	r3, #3
 8008512:	d00b      	beq.n	800852c <USBD_GetConfig+0x48>
 8008514:	e012      	b.n	800853c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3308      	adds	r3, #8
 8008520:	2201      	movs	r2, #1
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f920 	bl	800876a <USBD_CtlSendData>
        break;
 800852a:	e00c      	b.n	8008546 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3304      	adds	r3, #4
 8008530:	2201      	movs	r2, #1
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f918 	bl	800876a <USBD_CtlSendData>
        break;
 800853a:	e004      	b.n	8008546 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f8a9 	bl	8008696 <USBD_CtlError>
        break;
 8008544:	bf00      	nop
}
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800855e:	3b01      	subs	r3, #1
 8008560:	2b02      	cmp	r3, #2
 8008562:	d81e      	bhi.n	80085a2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	88db      	ldrh	r3, [r3, #6]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d004      	beq.n	8008576 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f891 	bl	8008696 <USBD_CtlError>
        break;
 8008574:	e01a      	b.n	80085ac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d005      	beq.n	8008592 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f043 0202 	orr.w	r2, r3, #2
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	330c      	adds	r3, #12
 8008596:	2202      	movs	r2, #2
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f8e5 	bl	800876a <USBD_CtlSendData>
      break;
 80085a0:	e004      	b.n	80085ac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f876 	bl	8008696 <USBD_CtlError>
      break;
 80085aa:	bf00      	nop
  }
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	885b      	ldrh	r3, [r3, #2]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d106      	bne.n	80085d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f929 	bl	8008826 <USBD_CtlSendStatus>
  }
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ec:	3b01      	subs	r3, #1
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d80b      	bhi.n	800860a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	885b      	ldrh	r3, [r3, #2]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d10c      	bne.n	8008614 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f90f 	bl	8008826 <USBD_CtlSendStatus>
      }
      break;
 8008608:	e004      	b.n	8008614 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f842 	bl	8008696 <USBD_CtlError>
      break;
 8008612:	e000      	b.n	8008616 <USBD_ClrFeature+0x3a>
      break;
 8008614:	bf00      	nop
  }
}
 8008616:	bf00      	nop
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800861e:	b480      	push	{r7}
 8008620:	b083      	sub	sp, #12
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781a      	ldrb	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	785a      	ldrb	r2, [r3, #1]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	3302      	adds	r3, #2
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	b29a      	uxth	r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	3303      	adds	r3, #3
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	b29b      	uxth	r3, r3
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	b29b      	uxth	r3, r3
 800864c:	4413      	add	r3, r2
 800864e:	b29a      	uxth	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	3304      	adds	r3, #4
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	b29a      	uxth	r2, r3
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	3305      	adds	r3, #5
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	b29b      	uxth	r3, r3
 8008664:	021b      	lsls	r3, r3, #8
 8008666:	b29b      	uxth	r3, r3
 8008668:	4413      	add	r3, r2
 800866a:	b29a      	uxth	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	3306      	adds	r3, #6
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	b29a      	uxth	r2, r3
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	3307      	adds	r3, #7
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	021b      	lsls	r3, r3, #8
 8008682:	b29b      	uxth	r3, r3
 8008684:	4413      	add	r3, r2
 8008686:	b29a      	uxth	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	80da      	strh	r2, [r3, #6]

}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr

08008696 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80086a0:	2180      	movs	r1, #128	; 0x80
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fd56 	bl	8009154 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80086a8:	2100      	movs	r1, #0
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fd52 	bl	8009154 <USBD_LL_StallEP>
}
 80086b0:	bf00      	nop
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d032      	beq.n	8008734 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 f834 	bl	800873c <USBD_GetLen>
 80086d4:	4603      	mov	r3, r0
 80086d6:	3301      	adds	r3, #1
 80086d8:	b29b      	uxth	r3, r3
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	75fa      	strb	r2, [r7, #23]
 80086e8:	461a      	mov	r2, r3
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	4413      	add	r3, r2
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	7812      	ldrb	r2, [r2, #0]
 80086f2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	75fa      	strb	r2, [r7, #23]
 80086fa:	461a      	mov	r2, r3
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4413      	add	r3, r2
 8008700:	2203      	movs	r2, #3
 8008702:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008704:	e012      	b.n	800872c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	60fa      	str	r2, [r7, #12]
 800870c:	7dfa      	ldrb	r2, [r7, #23]
 800870e:	1c51      	adds	r1, r2, #1
 8008710:	75f9      	strb	r1, [r7, #23]
 8008712:	4611      	mov	r1, r2
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	440a      	add	r2, r1
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	75fa      	strb	r2, [r7, #23]
 8008722:	461a      	mov	r2, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	4413      	add	r3, r2
 8008728:	2200      	movs	r2, #0
 800872a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e8      	bne.n	8008706 <USBD_GetString+0x4e>
    }
  }
}
 8008734:	bf00      	nop
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008748:	e005      	b.n	8008756 <USBD_GetLen+0x1a>
  {
    len++;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	3301      	adds	r3, #1
 800874e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3301      	adds	r3, #1
 8008754:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1f5      	bne.n	800874a <USBD_GetLen+0xe>
  }

  return len;
 800875e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	bc80      	pop	{r7}
 8008768:	4770      	bx	lr

0800876a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	4613      	mov	r3, r2
 8008776:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2202      	movs	r2, #2
 800877c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008780:	88fa      	ldrh	r2, [r7, #6]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008786:	88fa      	ldrh	r2, [r7, #6]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800878c:	88fb      	ldrh	r3, [r7, #6]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	2100      	movs	r1, #0
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 fd67 	bl	8009266 <USBD_LL_Transmit>

  return USBD_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	4613      	mov	r3, r2
 80087ae:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087b0:	88fb      	ldrh	r3, [r7, #6]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	2100      	movs	r1, #0
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 fd55 	bl	8009266 <USBD_LL_Transmit>

  return USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	4613      	mov	r3, r2
 80087d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2203      	movs	r2, #3
 80087d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80087dc:	88fa      	ldrh	r2, [r7, #6]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80087e4:	88fa      	ldrh	r2, [r7, #6]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087ec:	88fb      	ldrh	r3, [r7, #6]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	2100      	movs	r1, #0
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 fd5a 	bl	80092ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	4613      	mov	r3, r2
 800880e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008810:	88fb      	ldrh	r3, [r7, #6]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	2100      	movs	r1, #0
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 fd48 	bl	80092ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2204      	movs	r2, #4
 8008832:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008836:	2300      	movs	r3, #0
 8008838:	2200      	movs	r2, #0
 800883a:	2100      	movs	r1, #0
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fd12 	bl	8009266 <USBD_LL_Transmit>

  return USBD_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2205      	movs	r2, #5
 8008858:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800885c:	2300      	movs	r3, #0
 800885e:	2200      	movs	r2, #0
 8008860:	2100      	movs	r1, #0
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fd22 	bl	80092ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008878:	2200      	movs	r2, #0
 800887a:	4912      	ldr	r1, [pc, #72]	; (80088c4 <MX_USB_DEVICE_Init+0x50>)
 800887c:	4812      	ldr	r0, [pc, #72]	; (80088c8 <MX_USB_DEVICE_Init+0x54>)
 800887e:	f7fe ff5e 	bl	800773e <USBD_Init>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008888:	f7f7 fd61 	bl	800034e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800888c:	490f      	ldr	r1, [pc, #60]	; (80088cc <MX_USB_DEVICE_Init+0x58>)
 800888e:	480e      	ldr	r0, [pc, #56]	; (80088c8 <MX_USB_DEVICE_Init+0x54>)
 8008890:	f7fe ff80 	bl	8007794 <USBD_RegisterClass>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800889a:	f7f7 fd58 	bl	800034e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800889e:	490c      	ldr	r1, [pc, #48]	; (80088d0 <MX_USB_DEVICE_Init+0x5c>)
 80088a0:	4809      	ldr	r0, [pc, #36]	; (80088c8 <MX_USB_DEVICE_Init+0x54>)
 80088a2:	f7fe feb1 	bl	8007608 <USBD_CDC_RegisterInterface>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088ac:	f7f7 fd4f 	bl	800034e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088b0:	4805      	ldr	r0, [pc, #20]	; (80088c8 <MX_USB_DEVICE_Init+0x54>)
 80088b2:	f7fe ff88 	bl	80077c6 <USBD_Start>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088bc:	f7f7 fd47 	bl	800034e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088c0:	bf00      	nop
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20000150 	.word	0x20000150
 80088c8:	200003b0 	.word	0x200003b0
 80088cc:	20000030 	.word	0x20000030
 80088d0:	20000140 	.word	0x20000140

080088d4 <cdcAvailable>:
uint32_t rx_out = 0;
uint32_t rx_len = 512;
uint8_t  rx_buf[512];

uint32_t cdcAvailable(void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 80088da:	4b09      	ldr	r3, [pc, #36]	; (8008900 <cdcAvailable+0x2c>)
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	4b09      	ldr	r3, [pc, #36]	; (8008904 <cdcAvailable+0x30>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	4a08      	ldr	r2, [pc, #32]	; (8008908 <cdcAvailable+0x34>)
 80088e6:	6812      	ldr	r2, [r2, #0]
 80088e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80088ec:	fb01 f202 	mul.w	r2, r1, r2
 80088f0:	1a9b      	subs	r3, r3, r2
 80088f2:	607b      	str	r3, [r7, #4]

  return ret;
 80088f4:	687b      	ldr	r3, [r7, #4]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	4770      	bx	lr
 8008900:	20000674 	.word	0x20000674
 8008904:	20000678 	.word	0x20000678
 8008908:	2000013c 	.word	0x2000013c

0800890c <cdcRead>:

uint32_t cdcRead(void)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8008912:	4b0e      	ldr	r3, [pc, #56]	; (800894c <cdcRead+0x40>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a0e      	ldr	r2, [pc, #56]	; (8008950 <cdcRead+0x44>)
 8008918:	5cd3      	ldrb	r3, [r2, r3]
 800891a:	71fb      	strb	r3, [r7, #7]

  if( rx_out != rx_in)
 800891c:	4b0b      	ldr	r3, [pc, #44]	; (800894c <cdcRead+0x40>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	4b0c      	ldr	r3, [pc, #48]	; (8008954 <cdcRead+0x48>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	429a      	cmp	r2, r3
 8008926:	d00b      	beq.n	8008940 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 8008928:	4b08      	ldr	r3, [pc, #32]	; (800894c <cdcRead+0x40>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3301      	adds	r3, #1
 800892e:	4a0a      	ldr	r2, [pc, #40]	; (8008958 <cdcRead+0x4c>)
 8008930:	6812      	ldr	r2, [r2, #0]
 8008932:	fbb3 f1f2 	udiv	r1, r3, r2
 8008936:	fb01 f202 	mul.w	r2, r1, r2
 800893a:	1a9b      	subs	r3, r3, r2
 800893c:	4a03      	ldr	r2, [pc, #12]	; (800894c <cdcRead+0x40>)
 800893e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008940:	79fb      	ldrb	r3, [r7, #7]
}
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr
 800894c:	20000678 	.word	0x20000678
 8008950:	2000067c 	.word	0x2000067c
 8008954:	20000674 	.word	0x20000674
 8008958:	2000013c 	.word	0x2000013c

0800895c <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 8008966:	4b0e      	ldr	r3, [pc, #56]	; (80089a0 <cdcDataIn+0x44>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	490e      	ldr	r1, [pc, #56]	; (80089a4 <cdcDataIn+0x48>)
 800896c:	79fa      	ldrb	r2, [r7, #7]
 800896e:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1 ) % rx_len;
 8008970:	4b0b      	ldr	r3, [pc, #44]	; (80089a0 <cdcDataIn+0x44>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3301      	adds	r3, #1
 8008976:	4a0c      	ldr	r2, [pc, #48]	; (80089a8 <cdcDataIn+0x4c>)
 8008978:	6812      	ldr	r2, [r2, #0]
 800897a:	fbb3 f1f2 	udiv	r1, r3, r2
 800897e:	fb01 f202 	mul.w	r2, r1, r2
 8008982:	1a9b      	subs	r3, r3, r2
 8008984:	60fb      	str	r3, [r7, #12]

  if (next_rx_in != rx_out)
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <cdcDataIn+0x50>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	429a      	cmp	r2, r3
 800898e:	d002      	beq.n	8008996 <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8008990:	4a03      	ldr	r2, [pc, #12]	; (80089a0 <cdcDataIn+0x44>)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6013      	str	r3, [r2, #0]
  }
}
 8008996:	bf00      	nop
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	bc80      	pop	{r7}
 800899e:	4770      	bx	lr
 80089a0:	20000674 	.word	0x20000674
 80089a4:	2000067c 	.word	0x2000067c
 80089a8:	2000013c 	.word	0x2000013c
 80089ac:	20000678 	.word	0x20000678

080089b0 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 80089ba:	f7f7 fc62 	bl	8000282 <millis>
 80089be:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f914 	bl	8008bf4 <CDC_Transmit_FS>
 80089cc:	4603      	mov	r3, r0
 80089ce:	72fb      	strb	r3, [r7, #11]

    if ( ret == USBD_OK)
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <cdcWrite+0x2a>
    {
      return length;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	e00e      	b.n	80089f8 <cdcWrite+0x48>
    }
    else if ( ret == USBD_FAIL)
 80089da:	7afb      	ldrb	r3, [r7, #11]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d101      	bne.n	80089e4 <cdcWrite+0x34>
    {
      return 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e009      	b.n	80089f8 <cdcWrite+0x48>
    }

    if (millis()-pre_time >= 100)
 80089e4:	f7f7 fc4d 	bl	8000282 <millis>
 80089e8:	4602      	mov	r2, r0
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	2b63      	cmp	r3, #99	; 0x63
 80089f0:	d800      	bhi.n	80089f4 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 80089f2:	e7e5      	b.n	80089c0 <cdcWrite+0x10>
    {
      break;
 80089f4:	bf00      	nop
    }
  }

  return 0;
 80089f6:	2300      	movs	r3, #0

}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a04:	2200      	movs	r2, #0
 8008a06:	4905      	ldr	r1, [pc, #20]	; (8008a1c <CDC_Init_FS+0x1c>)
 8008a08:	4805      	ldr	r0, [pc, #20]	; (8008a20 <CDC_Init_FS+0x20>)
 8008a0a:	f7fe fe13 	bl	8007634 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a0e:	4905      	ldr	r1, [pc, #20]	; (8008a24 <CDC_Init_FS+0x24>)
 8008a10:	4803      	ldr	r0, [pc, #12]	; (8008a20 <CDC_Init_FS+0x20>)
 8008a12:	f7fe fe28 	bl	8007666 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	20000a7c 	.word	0x20000a7c
 8008a20:	200003b0 	.word	0x200003b0
 8008a24:	2000087c 	.word	0x2000087c

08008a28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr
	...

08008a38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	6039      	str	r1, [r7, #0]
 8008a42:	71fb      	strb	r3, [r7, #7]
 8008a44:	4613      	mov	r3, r2
 8008a46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	2b23      	cmp	r3, #35	; 0x23
 8008a4c:	f200 80a3 	bhi.w	8008b96 <CDC_Control_FS+0x15e>
 8008a50:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <CDC_Control_FS+0x20>)
 8008a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a56:	bf00      	nop
 8008a58:	08008b97 	.word	0x08008b97
 8008a5c:	08008b97 	.word	0x08008b97
 8008a60:	08008b97 	.word	0x08008b97
 8008a64:	08008b97 	.word	0x08008b97
 8008a68:	08008b97 	.word	0x08008b97
 8008a6c:	08008b97 	.word	0x08008b97
 8008a70:	08008b97 	.word	0x08008b97
 8008a74:	08008b97 	.word	0x08008b97
 8008a78:	08008b97 	.word	0x08008b97
 8008a7c:	08008b97 	.word	0x08008b97
 8008a80:	08008b97 	.word	0x08008b97
 8008a84:	08008b97 	.word	0x08008b97
 8008a88:	08008b97 	.word	0x08008b97
 8008a8c:	08008b97 	.word	0x08008b97
 8008a90:	08008b97 	.word	0x08008b97
 8008a94:	08008b97 	.word	0x08008b97
 8008a98:	08008b97 	.word	0x08008b97
 8008a9c:	08008b97 	.word	0x08008b97
 8008aa0:	08008b97 	.word	0x08008b97
 8008aa4:	08008b97 	.word	0x08008b97
 8008aa8:	08008b97 	.word	0x08008b97
 8008aac:	08008b97 	.word	0x08008b97
 8008ab0:	08008b97 	.word	0x08008b97
 8008ab4:	08008b97 	.word	0x08008b97
 8008ab8:	08008b97 	.word	0x08008b97
 8008abc:	08008b97 	.word	0x08008b97
 8008ac0:	08008b97 	.word	0x08008b97
 8008ac4:	08008b97 	.word	0x08008b97
 8008ac8:	08008b97 	.word	0x08008b97
 8008acc:	08008b97 	.word	0x08008b97
 8008ad0:	08008b97 	.word	0x08008b97
 8008ad4:	08008b97 	.word	0x08008b97
 8008ad8:	08008ae9 	.word	0x08008ae9
 8008adc:	08008b43 	.word	0x08008b43
 8008ae0:	08008b97 	.word	0x08008b97
 8008ae4:	08008b97 	.word	0x08008b97
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	461a      	mov	r2, r3
 8008aee:	4b2d      	ldr	r3, [pc, #180]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008af0:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 8008af2:	4b2c      	ldr	r3, [pc, #176]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	3201      	adds	r2, #1
 8008afa:	7812      	ldrb	r2, [r2, #0]
 8008afc:	0212      	lsls	r2, r2, #8
 8008afe:	4313      	orrs	r3, r2
 8008b00:	4a28      	ldr	r2, [pc, #160]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b02:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 8008b04:	4b27      	ldr	r3, [pc, #156]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	3202      	adds	r2, #2
 8008b0c:	7812      	ldrb	r2, [r2, #0]
 8008b0e:	0412      	lsls	r2, r2, #16
 8008b10:	4313      	orrs	r3, r2
 8008b12:	4a24      	ldr	r2, [pc, #144]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b14:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 8008b16:	4b23      	ldr	r3, [pc, #140]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	3203      	adds	r2, #3
 8008b1e:	7812      	ldrb	r2, [r2, #0]
 8008b20:	0612      	lsls	r2, r2, #24
 8008b22:	4313      	orrs	r3, r2
 8008b24:	4a1f      	ldr	r2, [pc, #124]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b26:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	791a      	ldrb	r2, [r3, #4]
 8008b2c:	4b1d      	ldr	r3, [pc, #116]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b2e:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	795a      	ldrb	r2, [r3, #5]
 8008b34:	4b1b      	ldr	r3, [pc, #108]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b36:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	799a      	ldrb	r2, [r3, #6]
 8008b3c:	4b19      	ldr	r3, [pc, #100]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b3e:	719a      	strb	r2, [r3, #6]
    break;
 8008b40:	e02a      	b.n	8008b98 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008b42:	4b18      	ldr	r3, [pc, #96]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8008b4c:	4b15      	ldr	r3, [pc, #84]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	0a1a      	lsrs	r2, r3, #8
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	b2d2      	uxtb	r2, r2
 8008b58:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8008b5a:	4b12      	ldr	r3, [pc, #72]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	0c1a      	lsrs	r2, r3, #16
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	3302      	adds	r3, #2
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8008b68:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	0e1a      	lsrs	r2, r3, #24
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	3303      	adds	r3, #3
 8008b72:	b2d2      	uxtb	r2, r2
 8008b74:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b7c:	7912      	ldrb	r2, [r2, #4]
 8008b7e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	3305      	adds	r3, #5
 8008b84:	4a07      	ldr	r2, [pc, #28]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b86:	7952      	ldrb	r2, [r2, #5]
 8008b88:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	3306      	adds	r3, #6
 8008b8e:	4a05      	ldr	r2, [pc, #20]	; (8008ba4 <CDC_Control_FS+0x16c>)
 8008b90:	7992      	ldrb	r2, [r2, #6]
 8008b92:	701a      	strb	r2, [r3, #0]
    break;
 8008b94:	e000      	b.n	8008b98 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b96:	bf00      	nop
  }

  return (USBD_OK);
 8008b98:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bc80      	pop	{r7}
 8008ba2:	4770      	bx	lr
 8008ba4:	20000134 	.word	0x20000134

08008ba8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	480e      	ldr	r0, [pc, #56]	; (8008bf0 <CDC_Receive_FS+0x48>)
 8008bb6:	f7fe fd56 	bl	8007666 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bba:	480d      	ldr	r0, [pc, #52]	; (8008bf0 <CDC_Receive_FS+0x48>)
 8008bbc:	f7fe fd95 	bl	80076ea <USBD_CDC_ReceivePacket>

  for ( int i=0; i<*Len; i++)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]
 8008bc4:	e009      	b.n	8008bda <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	4413      	add	r3, r2
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff fec4 	bl	800895c <cdcDataIn>
  for ( int i=0; i<*Len; i++)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d8f0      	bhi.n	8008bc6 <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 8008be4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	200003b0 	.word	0x200003b0

08008bf4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c04:	4b0d      	ldr	r3, [pc, #52]	; (8008c3c <CDC_Transmit_FS+0x48>)
 8008c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e00b      	b.n	8008c32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c1a:	887b      	ldrh	r3, [r7, #2]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	4806      	ldr	r0, [pc, #24]	; (8008c3c <CDC_Transmit_FS+0x48>)
 8008c22:	f7fe fd07 	bl	8007634 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c26:	4805      	ldr	r0, [pc, #20]	; (8008c3c <CDC_Transmit_FS+0x48>)
 8008c28:	f7fe fd30 	bl	800768c <USBD_CDC_TransmitPacket>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	200003b0 	.word	0x200003b0

08008c40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	6039      	str	r1, [r7, #0]
 8008c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2212      	movs	r2, #18
 8008c50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c52:	4b03      	ldr	r3, [pc, #12]	; (8008c60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	2000016c 	.word	0x2000016c

08008c64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	6039      	str	r1, [r7, #0]
 8008c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2204      	movs	r2, #4
 8008c74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c76:	4b03      	ldr	r3, [pc, #12]	; (8008c84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bc80      	pop	{r7}
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20000180 	.word	0x20000180

08008c88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	6039      	str	r1, [r7, #0]
 8008c92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c94:	79fb      	ldrb	r3, [r7, #7]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d105      	bne.n	8008ca6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	4907      	ldr	r1, [pc, #28]	; (8008cbc <USBD_FS_ProductStrDescriptor+0x34>)
 8008c9e:	4808      	ldr	r0, [pc, #32]	; (8008cc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ca0:	f7ff fd0a 	bl	80086b8 <USBD_GetString>
 8008ca4:	e004      	b.n	8008cb0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	4904      	ldr	r1, [pc, #16]	; (8008cbc <USBD_FS_ProductStrDescriptor+0x34>)
 8008caa:	4805      	ldr	r0, [pc, #20]	; (8008cc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cac:	f7ff fd04 	bl	80086b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb0:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000c7c 	.word	0x20000c7c
 8008cc0:	08009dac 	.word	0x08009dac

08008cc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	4603      	mov	r3, r0
 8008ccc:	6039      	str	r1, [r7, #0]
 8008cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	4904      	ldr	r1, [pc, #16]	; (8008ce4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008cd4:	4804      	ldr	r0, [pc, #16]	; (8008ce8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cd6:	f7ff fcef 	bl	80086b8 <USBD_GetString>
  return USBD_StrDesc;
 8008cda:	4b02      	ldr	r3, [pc, #8]	; (8008ce4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	20000c7c 	.word	0x20000c7c
 8008ce8:	08009dc4 	.word	0x08009dc4

08008cec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	221a      	movs	r2, #26
 8008cfc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008cfe:	f000 f843 	bl	8008d88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d02:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000184 	.word	0x20000184

08008d10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	6039      	str	r1, [r7, #0]
 8008d1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d105      	bne.n	8008d2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	4907      	ldr	r1, [pc, #28]	; (8008d44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d26:	4808      	ldr	r0, [pc, #32]	; (8008d48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d28:	f7ff fcc6 	bl	80086b8 <USBD_GetString>
 8008d2c:	e004      	b.n	8008d38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	4904      	ldr	r1, [pc, #16]	; (8008d44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d32:	4805      	ldr	r0, [pc, #20]	; (8008d48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d34:	f7ff fcc0 	bl	80086b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d38:	4b02      	ldr	r3, [pc, #8]	; (8008d44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20000c7c 	.word	0x20000c7c
 8008d48:	08009dd8 	.word	0x08009dd8

08008d4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	6039      	str	r1, [r7, #0]
 8008d56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d105      	bne.n	8008d6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	4907      	ldr	r1, [pc, #28]	; (8008d80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d62:	4808      	ldr	r0, [pc, #32]	; (8008d84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d64:	f7ff fca8 	bl	80086b8 <USBD_GetString>
 8008d68:	e004      	b.n	8008d74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	4904      	ldr	r1, [pc, #16]	; (8008d80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d6e:	4805      	ldr	r0, [pc, #20]	; (8008d84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d70:	f7ff fca2 	bl	80086b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d74:	4b02      	ldr	r3, [pc, #8]	; (8008d80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000c7c 	.word	0x20000c7c
 8008d84:	08009de4 	.word	0x08009de4

08008d88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d8e:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <Get_SerialNum+0x44>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d94:	4b0e      	ldr	r3, [pc, #56]	; (8008dd0 <Get_SerialNum+0x48>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d9a:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <Get_SerialNum+0x4c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d009      	beq.n	8008dc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dae:	2208      	movs	r2, #8
 8008db0:	4909      	ldr	r1, [pc, #36]	; (8008dd8 <Get_SerialNum+0x50>)
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 f814 	bl	8008de0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008db8:	2204      	movs	r2, #4
 8008dba:	4908      	ldr	r1, [pc, #32]	; (8008ddc <Get_SerialNum+0x54>)
 8008dbc:	68b8      	ldr	r0, [r7, #8]
 8008dbe:	f000 f80f 	bl	8008de0 <IntToUnicode>
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	1ffff7e8 	.word	0x1ffff7e8
 8008dd0:	1ffff7ec 	.word	0x1ffff7ec
 8008dd4:	1ffff7f0 	.word	0x1ffff7f0
 8008dd8:	20000186 	.word	0x20000186
 8008ddc:	20000196 	.word	0x20000196

08008de0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]
 8008df6:	e027      	b.n	8008e48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	0f1b      	lsrs	r3, r3, #28
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d80b      	bhi.n	8008e18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	0f1b      	lsrs	r3, r3, #28
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	440b      	add	r3, r1
 8008e10:	3230      	adds	r2, #48	; 0x30
 8008e12:	b2d2      	uxtb	r2, r2
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	e00a      	b.n	8008e2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	0f1b      	lsrs	r3, r3, #28
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	4619      	mov	r1, r3
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	440b      	add	r3, r1
 8008e28:	3237      	adds	r2, #55	; 0x37
 8008e2a:	b2d2      	uxtb	r2, r2
 8008e2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	3301      	adds	r3, #1
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	2200      	movs	r2, #0
 8008e40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
 8008e44:	3301      	adds	r3, #1
 8008e46:	75fb      	strb	r3, [r7, #23]
 8008e48:	7dfa      	ldrb	r2, [r7, #23]
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d3d3      	bcc.n	8008df8 <IntToUnicode+0x18>
  }
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bc80      	pop	{r7}
 8008e5a:	4770      	bx	lr

08008e5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a0d      	ldr	r2, [pc, #52]	; (8008ea0 <HAL_PCD_MspInit+0x44>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d113      	bne.n	8008e96 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008e6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ea4 <HAL_PCD_MspInit+0x48>)
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	4a0c      	ldr	r2, [pc, #48]	; (8008ea4 <HAL_PCD_MspInit+0x48>)
 8008e74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e78:	61d3      	str	r3, [r2, #28]
 8008e7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ea4 <HAL_PCD_MspInit+0x48>)
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008e86:	2200      	movs	r2, #0
 8008e88:	2100      	movs	r1, #0
 8008e8a:	2014      	movs	r0, #20
 8008e8c:	f7f8 f841 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008e90:	2014      	movs	r0, #20
 8008e92:	f7f8 f85a 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40005c00 	.word	0x40005c00
 8008ea4:	40021000 	.word	0x40021000

08008ea8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f7fe fcc9 	bl	8007856 <USBD_LL_SetupStage>
}
 8008ec4:	bf00      	nop
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008ede:	78fa      	ldrb	r2, [r7, #3]
 8008ee0:	6879      	ldr	r1, [r7, #4]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	440b      	add	r3, r1
 8008eec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	78fb      	ldrb	r3, [r7, #3]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	f7fe fcfb 	bl	80078f0 <USBD_LL_DataOutStage>
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b082      	sub	sp, #8
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f14:	78fa      	ldrb	r2, [r7, #3]
 8008f16:	6879      	ldr	r1, [r7, #4]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	440b      	add	r3, r1
 8008f22:	333c      	adds	r3, #60	; 0x3c
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	78fb      	ldrb	r3, [r7, #3]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	f7fe fd52 	bl	80079d2 <USBD_LL_DataInStage>
}
 8008f2e:	bf00      	nop
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe fe62 	bl	8007c0e <USBD_LL_SOF>
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d001      	beq.n	8008f6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f66:	f7f7 f9f2 	bl	800034e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f70:	7bfa      	ldrb	r2, [r7, #15]
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fe fe12 	bl	8007b9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe fdcb 	bl	8007b1c <USBD_LL_Reset>
}
 8008f86:	bf00      	nop
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe fe0c 	bl	8007bbc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fac:	4b04      	ldr	r3, [pc, #16]	; (8008fc0 <HAL_PCD_SuspendCallback+0x30>)
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	4a03      	ldr	r2, [pc, #12]	; (8008fc0 <HAL_PCD_SuspendCallback+0x30>)
 8008fb2:	f043 0306 	orr.w	r3, r3, #6
 8008fb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	e000ed00 	.word	0xe000ed00

08008fc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fe06 	bl	8007be4 <USBD_LL_Resume>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008fe8:	4a28      	ldr	r2, [pc, #160]	; (800908c <USBD_LL_Init+0xac>)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a26      	ldr	r2, [pc, #152]	; (800908c <USBD_LL_Init+0xac>)
 8008ff4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008ff8:	4b24      	ldr	r3, [pc, #144]	; (800908c <USBD_LL_Init+0xac>)
 8008ffa:	4a25      	ldr	r2, [pc, #148]	; (8009090 <USBD_LL_Init+0xb0>)
 8008ffc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008ffe:	4b23      	ldr	r3, [pc, #140]	; (800908c <USBD_LL_Init+0xac>)
 8009000:	2208      	movs	r2, #8
 8009002:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009004:	4b21      	ldr	r3, [pc, #132]	; (800908c <USBD_LL_Init+0xac>)
 8009006:	2202      	movs	r2, #2
 8009008:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800900a:	4b20      	ldr	r3, [pc, #128]	; (800908c <USBD_LL_Init+0xac>)
 800900c:	2200      	movs	r2, #0
 800900e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009010:	4b1e      	ldr	r3, [pc, #120]	; (800908c <USBD_LL_Init+0xac>)
 8009012:	2200      	movs	r2, #0
 8009014:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009016:	4b1d      	ldr	r3, [pc, #116]	; (800908c <USBD_LL_Init+0xac>)
 8009018:	2200      	movs	r2, #0
 800901a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800901c:	481b      	ldr	r0, [pc, #108]	; (800908c <USBD_LL_Init+0xac>)
 800901e:	f7f8 fa14 	bl	800144a <HAL_PCD_Init>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009028:	f7f7 f991 	bl	800034e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009032:	2318      	movs	r3, #24
 8009034:	2200      	movs	r2, #0
 8009036:	2100      	movs	r1, #0
 8009038:	f7f9 fe88 	bl	8002d4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009042:	2358      	movs	r3, #88	; 0x58
 8009044:	2200      	movs	r2, #0
 8009046:	2180      	movs	r1, #128	; 0x80
 8009048:	f7f9 fe80 	bl	8002d4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009052:	23c0      	movs	r3, #192	; 0xc0
 8009054:	2200      	movs	r2, #0
 8009056:	2181      	movs	r1, #129	; 0x81
 8009058:	f7f9 fe78 	bl	8002d4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009062:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009066:	2200      	movs	r2, #0
 8009068:	2101      	movs	r1, #1
 800906a:	f7f9 fe6f 	bl	8002d4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009078:	2200      	movs	r2, #0
 800907a:	2182      	movs	r1, #130	; 0x82
 800907c:	f7f9 fe66 	bl	8002d4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20000e7c 	.word	0x20000e7c
 8009090:	40005c00 	.word	0x40005c00

08009094 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7f8 fad8 	bl	8001660 <HAL_PCD_Start>
 80090b0:	4603      	mov	r3, r0
 80090b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f94e 	bl	8009358 <USBD_Get_USB_Status>
 80090bc:	4603      	mov	r3, r0
 80090be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b084      	sub	sp, #16
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	4608      	mov	r0, r1
 80090d4:	4611      	mov	r1, r2
 80090d6:	461a      	mov	r2, r3
 80090d8:	4603      	mov	r3, r0
 80090da:	70fb      	strb	r3, [r7, #3]
 80090dc:	460b      	mov	r3, r1
 80090de:	70bb      	strb	r3, [r7, #2]
 80090e0:	4613      	mov	r3, r2
 80090e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090f2:	78bb      	ldrb	r3, [r7, #2]
 80090f4:	883a      	ldrh	r2, [r7, #0]
 80090f6:	78f9      	ldrb	r1, [r7, #3]
 80090f8:	f7f8 fc50 	bl	800199c <HAL_PCD_EP_Open>
 80090fc:	4603      	mov	r3, r0
 80090fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 f928 	bl	8009358 <USBD_Get_USB_Status>
 8009108:	4603      	mov	r3, r0
 800910a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800910c:	7bbb      	ldrb	r3, [r7, #14]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009130:	78fa      	ldrb	r2, [r7, #3]
 8009132:	4611      	mov	r1, r2
 8009134:	4618      	mov	r0, r3
 8009136:	f7f8 fc97 	bl	8001a68 <HAL_PCD_EP_Close>
 800913a:	4603      	mov	r3, r0
 800913c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	4618      	mov	r0, r3
 8009142:	f000 f909 	bl	8009358 <USBD_Get_USB_Status>
 8009146:	4603      	mov	r3, r0
 8009148:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800914a:	7bbb      	ldrb	r3, [r7, #14]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	460b      	mov	r3, r1
 800915e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800916e:	78fa      	ldrb	r2, [r7, #3]
 8009170:	4611      	mov	r1, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f7f8 fd57 	bl	8001c26 <HAL_PCD_EP_SetStall>
 8009178:	4603      	mov	r3, r0
 800917a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	4618      	mov	r0, r3
 8009180:	f000 f8ea 	bl	8009358 <USBD_Get_USB_Status>
 8009184:	4603      	mov	r3, r0
 8009186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009188:	7bbb      	ldrb	r3, [r7, #14]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	460b      	mov	r3, r1
 800919c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091ac:	78fa      	ldrb	r2, [r7, #3]
 80091ae:	4611      	mov	r1, r2
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7f8 fd98 	bl	8001ce6 <HAL_PCD_EP_ClrStall>
 80091b6:	4603      	mov	r3, r0
 80091b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 f8cb 	bl	8009358 <USBD_Get_USB_Status>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80091e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	da0c      	bge.n	8009206 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80091ec:	78fb      	ldrb	r3, [r7, #3]
 80091ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	00db      	lsls	r3, r3, #3
 80091fe:	440b      	add	r3, r1
 8009200:	3302      	adds	r3, #2
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	e00b      	b.n	800921e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009206:	78fb      	ldrb	r3, [r7, #3]
 8009208:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800920c:	68f9      	ldr	r1, [r7, #12]
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	00db      	lsls	r3, r3, #3
 8009216:	440b      	add	r3, r1
 8009218:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800921c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	bc80      	pop	{r7}
 8009226:	4770      	bx	lr

08009228 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f7f8 fb83 	bl	8001952 <HAL_PCD_SetAddress>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f880 	bl	8009358 <USBD_Get_USB_Status>
 8009258:	4603      	mov	r3, r0
 800925a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925c:	7bbb      	ldrb	r3, [r7, #14]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b086      	sub	sp, #24
 800926a:	af00      	add	r7, sp, #0
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	461a      	mov	r2, r3
 8009272:	460b      	mov	r3, r1
 8009274:	72fb      	strb	r3, [r7, #11]
 8009276:	4613      	mov	r3, r2
 8009278:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009288:	893b      	ldrh	r3, [r7, #8]
 800928a:	7af9      	ldrb	r1, [r7, #11]
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	f7f8 fc87 	bl	8001ba0 <HAL_PCD_EP_Transmit>
 8009292:	4603      	mov	r3, r0
 8009294:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	4618      	mov	r0, r3
 800929a:	f000 f85d 	bl	8009358 <USBD_Get_USB_Status>
 800929e:	4603      	mov	r3, r0
 80092a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	607a      	str	r2, [r7, #4]
 80092b6:	461a      	mov	r2, r3
 80092b8:	460b      	mov	r3, r1
 80092ba:	72fb      	strb	r3, [r7, #11]
 80092bc:	4613      	mov	r3, r2
 80092be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ce:	893b      	ldrh	r3, [r7, #8]
 80092d0:	7af9      	ldrb	r1, [r7, #11]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	f7f8 fc10 	bl	8001af8 <HAL_PCD_EP_Receive>
 80092d8:	4603      	mov	r3, r0
 80092da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 f83a 	bl	8009358 <USBD_Get_USB_Status>
 80092e4:	4603      	mov	r3, r0
 80092e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3718      	adds	r7, #24
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009304:	78fa      	ldrb	r2, [r7, #3]
 8009306:	4611      	mov	r1, r2
 8009308:	4618      	mov	r0, r3
 800930a:	f7f8 fc32 	bl	8001b72 <HAL_PCD_EP_GetRxCount>
 800930e:	4603      	mov	r3, r0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009320:	4b02      	ldr	r3, [pc, #8]	; (800932c <USBD_static_malloc+0x14>)
}
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	bc80      	pop	{r7}
 800932a:	4770      	bx	lr
 800932c:	20001168 	.word	0x20001168

08009330 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]

}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	bc80      	pop	{r7}
 8009340:	4770      	bx	lr

08009342 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	bc80      	pop	{r7}
 8009356:	4770      	bx	lr

08009358 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	2b03      	cmp	r3, #3
 800936a:	d817      	bhi.n	800939c <USBD_Get_USB_Status+0x44>
 800936c:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <USBD_Get_USB_Status+0x1c>)
 800936e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009372:	bf00      	nop
 8009374:	08009385 	.word	0x08009385
 8009378:	0800938b 	.word	0x0800938b
 800937c:	08009391 	.word	0x08009391
 8009380:	08009397 	.word	0x08009397
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]
    break;
 8009388:	e00b      	b.n	80093a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800938a:	2302      	movs	r3, #2
 800938c:	73fb      	strb	r3, [r7, #15]
    break;
 800938e:	e008      	b.n	80093a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009390:	2301      	movs	r3, #1
 8009392:	73fb      	strb	r3, [r7, #15]
    break;
 8009394:	e005      	b.n	80093a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009396:	2302      	movs	r3, #2
 8009398:	73fb      	strb	r3, [r7, #15]
    break;
 800939a:	e002      	b.n	80093a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800939c:	2302      	movs	r3, #2
 800939e:	73fb      	strb	r3, [r7, #15]
    break;
 80093a0:	bf00      	nop
  }
  return usb_status;
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bc80      	pop	{r7}
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop

080093b0 <main>:




int main(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
  hwInit();
 80093b4:	f7f7 fc40 	bl	8000c38 <hwInit>
  apInit();
 80093b8:	f7f6 fec8 	bl	800014c <apInit>

  apMain();
 80093bc:	f7f6 fed4 	bl	8000168 <apMain>
  /*test*/

  return 0;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <__errno>:
 80093c8:	4b01      	ldr	r3, [pc, #4]	; (80093d0 <__errno+0x8>)
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	200001a0 	.word	0x200001a0

080093d4 <__libc_init_array>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	2600      	movs	r6, #0
 80093d8:	4d0c      	ldr	r5, [pc, #48]	; (800940c <__libc_init_array+0x38>)
 80093da:	4c0d      	ldr	r4, [pc, #52]	; (8009410 <__libc_init_array+0x3c>)
 80093dc:	1b64      	subs	r4, r4, r5
 80093de:	10a4      	asrs	r4, r4, #2
 80093e0:	42a6      	cmp	r6, r4
 80093e2:	d109      	bne.n	80093f8 <__libc_init_array+0x24>
 80093e4:	f000 fcb6 	bl	8009d54 <_init>
 80093e8:	2600      	movs	r6, #0
 80093ea:	4d0a      	ldr	r5, [pc, #40]	; (8009414 <__libc_init_array+0x40>)
 80093ec:	4c0a      	ldr	r4, [pc, #40]	; (8009418 <__libc_init_array+0x44>)
 80093ee:	1b64      	subs	r4, r4, r5
 80093f0:	10a4      	asrs	r4, r4, #2
 80093f2:	42a6      	cmp	r6, r4
 80093f4:	d105      	bne.n	8009402 <__libc_init_array+0x2e>
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fc:	4798      	blx	r3
 80093fe:	3601      	adds	r6, #1
 8009400:	e7ee      	b.n	80093e0 <__libc_init_array+0xc>
 8009402:	f855 3b04 	ldr.w	r3, [r5], #4
 8009406:	4798      	blx	r3
 8009408:	3601      	adds	r6, #1
 800940a:	e7f2      	b.n	80093f2 <__libc_init_array+0x1e>
 800940c:	08009e40 	.word	0x08009e40
 8009410:	08009e40 	.word	0x08009e40
 8009414:	08009e40 	.word	0x08009e40
 8009418:	08009e44 	.word	0x08009e44

0800941c <memset>:
 800941c:	4603      	mov	r3, r0
 800941e:	4402      	add	r2, r0
 8009420:	4293      	cmp	r3, r2
 8009422:	d100      	bne.n	8009426 <memset+0xa>
 8009424:	4770      	bx	lr
 8009426:	f803 1b01 	strb.w	r1, [r3], #1
 800942a:	e7f9      	b.n	8009420 <memset+0x4>

0800942c <_vsniprintf_r>:
 800942c:	b530      	push	{r4, r5, lr}
 800942e:	4614      	mov	r4, r2
 8009430:	2c00      	cmp	r4, #0
 8009432:	4605      	mov	r5, r0
 8009434:	461a      	mov	r2, r3
 8009436:	b09b      	sub	sp, #108	; 0x6c
 8009438:	da05      	bge.n	8009446 <_vsniprintf_r+0x1a>
 800943a:	238b      	movs	r3, #139	; 0x8b
 800943c:	6003      	str	r3, [r0, #0]
 800943e:	f04f 30ff 	mov.w	r0, #4294967295
 8009442:	b01b      	add	sp, #108	; 0x6c
 8009444:	bd30      	pop	{r4, r5, pc}
 8009446:	f44f 7302 	mov.w	r3, #520	; 0x208
 800944a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800944e:	bf0c      	ite	eq
 8009450:	4623      	moveq	r3, r4
 8009452:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009456:	9302      	str	r3, [sp, #8]
 8009458:	9305      	str	r3, [sp, #20]
 800945a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800945e:	9100      	str	r1, [sp, #0]
 8009460:	9104      	str	r1, [sp, #16]
 8009462:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009466:	4669      	mov	r1, sp
 8009468:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800946a:	f000 f875 	bl	8009558 <_svfiprintf_r>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	bfbc      	itt	lt
 8009472:	238b      	movlt	r3, #139	; 0x8b
 8009474:	602b      	strlt	r3, [r5, #0]
 8009476:	2c00      	cmp	r4, #0
 8009478:	d0e3      	beq.n	8009442 <_vsniprintf_r+0x16>
 800947a:	2200      	movs	r2, #0
 800947c:	9b00      	ldr	r3, [sp, #0]
 800947e:	701a      	strb	r2, [r3, #0]
 8009480:	e7df      	b.n	8009442 <_vsniprintf_r+0x16>
	...

08009484 <vsniprintf>:
 8009484:	b507      	push	{r0, r1, r2, lr}
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	4613      	mov	r3, r2
 800948a:	460a      	mov	r2, r1
 800948c:	4601      	mov	r1, r0
 800948e:	4803      	ldr	r0, [pc, #12]	; (800949c <vsniprintf+0x18>)
 8009490:	6800      	ldr	r0, [r0, #0]
 8009492:	f7ff ffcb 	bl	800942c <_vsniprintf_r>
 8009496:	b003      	add	sp, #12
 8009498:	f85d fb04 	ldr.w	pc, [sp], #4
 800949c:	200001a0 	.word	0x200001a0

080094a0 <__ssputs_r>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	688e      	ldr	r6, [r1, #8]
 80094a6:	4682      	mov	sl, r0
 80094a8:	429e      	cmp	r6, r3
 80094aa:	460c      	mov	r4, r1
 80094ac:	4690      	mov	r8, r2
 80094ae:	461f      	mov	r7, r3
 80094b0:	d838      	bhi.n	8009524 <__ssputs_r+0x84>
 80094b2:	898a      	ldrh	r2, [r1, #12]
 80094b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094b8:	d032      	beq.n	8009520 <__ssputs_r+0x80>
 80094ba:	6825      	ldr	r5, [r4, #0]
 80094bc:	6909      	ldr	r1, [r1, #16]
 80094be:	3301      	adds	r3, #1
 80094c0:	eba5 0901 	sub.w	r9, r5, r1
 80094c4:	6965      	ldr	r5, [r4, #20]
 80094c6:	444b      	add	r3, r9
 80094c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d0:	106d      	asrs	r5, r5, #1
 80094d2:	429d      	cmp	r5, r3
 80094d4:	bf38      	it	cc
 80094d6:	461d      	movcc	r5, r3
 80094d8:	0553      	lsls	r3, r2, #21
 80094da:	d531      	bpl.n	8009540 <__ssputs_r+0xa0>
 80094dc:	4629      	mov	r1, r5
 80094de:	f000 fb6f 	bl	8009bc0 <_malloc_r>
 80094e2:	4606      	mov	r6, r0
 80094e4:	b950      	cbnz	r0, 80094fc <__ssputs_r+0x5c>
 80094e6:	230c      	movs	r3, #12
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ec:	f8ca 3000 	str.w	r3, [sl]
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094fc:	464a      	mov	r2, r9
 80094fe:	6921      	ldr	r1, [r4, #16]
 8009500:	f000 face 	bl	8009aa0 <memcpy>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800950a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	6126      	str	r6, [r4, #16]
 8009512:	444e      	add	r6, r9
 8009514:	6026      	str	r6, [r4, #0]
 8009516:	463e      	mov	r6, r7
 8009518:	6165      	str	r5, [r4, #20]
 800951a:	eba5 0509 	sub.w	r5, r5, r9
 800951e:	60a5      	str	r5, [r4, #8]
 8009520:	42be      	cmp	r6, r7
 8009522:	d900      	bls.n	8009526 <__ssputs_r+0x86>
 8009524:	463e      	mov	r6, r7
 8009526:	4632      	mov	r2, r6
 8009528:	4641      	mov	r1, r8
 800952a:	6820      	ldr	r0, [r4, #0]
 800952c:	f000 fac6 	bl	8009abc <memmove>
 8009530:	68a3      	ldr	r3, [r4, #8]
 8009532:	2000      	movs	r0, #0
 8009534:	1b9b      	subs	r3, r3, r6
 8009536:	60a3      	str	r3, [r4, #8]
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	4433      	add	r3, r6
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	e7db      	b.n	80094f8 <__ssputs_r+0x58>
 8009540:	462a      	mov	r2, r5
 8009542:	f000 fbb1 	bl	8009ca8 <_realloc_r>
 8009546:	4606      	mov	r6, r0
 8009548:	2800      	cmp	r0, #0
 800954a:	d1e1      	bne.n	8009510 <__ssputs_r+0x70>
 800954c:	4650      	mov	r0, sl
 800954e:	6921      	ldr	r1, [r4, #16]
 8009550:	f000 face 	bl	8009af0 <_free_r>
 8009554:	e7c7      	b.n	80094e6 <__ssputs_r+0x46>
	...

08009558 <_svfiprintf_r>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	4698      	mov	r8, r3
 800955e:	898b      	ldrh	r3, [r1, #12]
 8009560:	4607      	mov	r7, r0
 8009562:	061b      	lsls	r3, r3, #24
 8009564:	460d      	mov	r5, r1
 8009566:	4614      	mov	r4, r2
 8009568:	b09d      	sub	sp, #116	; 0x74
 800956a:	d50e      	bpl.n	800958a <_svfiprintf_r+0x32>
 800956c:	690b      	ldr	r3, [r1, #16]
 800956e:	b963      	cbnz	r3, 800958a <_svfiprintf_r+0x32>
 8009570:	2140      	movs	r1, #64	; 0x40
 8009572:	f000 fb25 	bl	8009bc0 <_malloc_r>
 8009576:	6028      	str	r0, [r5, #0]
 8009578:	6128      	str	r0, [r5, #16]
 800957a:	b920      	cbnz	r0, 8009586 <_svfiprintf_r+0x2e>
 800957c:	230c      	movs	r3, #12
 800957e:	603b      	str	r3, [r7, #0]
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	e0d1      	b.n	800972a <_svfiprintf_r+0x1d2>
 8009586:	2340      	movs	r3, #64	; 0x40
 8009588:	616b      	str	r3, [r5, #20]
 800958a:	2300      	movs	r3, #0
 800958c:	9309      	str	r3, [sp, #36]	; 0x24
 800958e:	2320      	movs	r3, #32
 8009590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009594:	2330      	movs	r3, #48	; 0x30
 8009596:	f04f 0901 	mov.w	r9, #1
 800959a:	f8cd 800c 	str.w	r8, [sp, #12]
 800959e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009744 <_svfiprintf_r+0x1ec>
 80095a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095a6:	4623      	mov	r3, r4
 80095a8:	469a      	mov	sl, r3
 80095aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ae:	b10a      	cbz	r2, 80095b4 <_svfiprintf_r+0x5c>
 80095b0:	2a25      	cmp	r2, #37	; 0x25
 80095b2:	d1f9      	bne.n	80095a8 <_svfiprintf_r+0x50>
 80095b4:	ebba 0b04 	subs.w	fp, sl, r4
 80095b8:	d00b      	beq.n	80095d2 <_svfiprintf_r+0x7a>
 80095ba:	465b      	mov	r3, fp
 80095bc:	4622      	mov	r2, r4
 80095be:	4629      	mov	r1, r5
 80095c0:	4638      	mov	r0, r7
 80095c2:	f7ff ff6d 	bl	80094a0 <__ssputs_r>
 80095c6:	3001      	adds	r0, #1
 80095c8:	f000 80aa 	beq.w	8009720 <_svfiprintf_r+0x1c8>
 80095cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095ce:	445a      	add	r2, fp
 80095d0:	9209      	str	r2, [sp, #36]	; 0x24
 80095d2:	f89a 3000 	ldrb.w	r3, [sl]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 80a2 	beq.w	8009720 <_svfiprintf_r+0x1c8>
 80095dc:	2300      	movs	r3, #0
 80095de:	f04f 32ff 	mov.w	r2, #4294967295
 80095e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095e6:	f10a 0a01 	add.w	sl, sl, #1
 80095ea:	9304      	str	r3, [sp, #16]
 80095ec:	9307      	str	r3, [sp, #28]
 80095ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095f2:	931a      	str	r3, [sp, #104]	; 0x68
 80095f4:	4654      	mov	r4, sl
 80095f6:	2205      	movs	r2, #5
 80095f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095fc:	4851      	ldr	r0, [pc, #324]	; (8009744 <_svfiprintf_r+0x1ec>)
 80095fe:	f000 fa41 	bl	8009a84 <memchr>
 8009602:	9a04      	ldr	r2, [sp, #16]
 8009604:	b9d8      	cbnz	r0, 800963e <_svfiprintf_r+0xe6>
 8009606:	06d0      	lsls	r0, r2, #27
 8009608:	bf44      	itt	mi
 800960a:	2320      	movmi	r3, #32
 800960c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009610:	0711      	lsls	r1, r2, #28
 8009612:	bf44      	itt	mi
 8009614:	232b      	movmi	r3, #43	; 0x2b
 8009616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961a:	f89a 3000 	ldrb.w	r3, [sl]
 800961e:	2b2a      	cmp	r3, #42	; 0x2a
 8009620:	d015      	beq.n	800964e <_svfiprintf_r+0xf6>
 8009622:	4654      	mov	r4, sl
 8009624:	2000      	movs	r0, #0
 8009626:	f04f 0c0a 	mov.w	ip, #10
 800962a:	9a07      	ldr	r2, [sp, #28]
 800962c:	4621      	mov	r1, r4
 800962e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009632:	3b30      	subs	r3, #48	; 0x30
 8009634:	2b09      	cmp	r3, #9
 8009636:	d94e      	bls.n	80096d6 <_svfiprintf_r+0x17e>
 8009638:	b1b0      	cbz	r0, 8009668 <_svfiprintf_r+0x110>
 800963a:	9207      	str	r2, [sp, #28]
 800963c:	e014      	b.n	8009668 <_svfiprintf_r+0x110>
 800963e:	eba0 0308 	sub.w	r3, r0, r8
 8009642:	fa09 f303 	lsl.w	r3, r9, r3
 8009646:	4313      	orrs	r3, r2
 8009648:	46a2      	mov	sl, r4
 800964a:	9304      	str	r3, [sp, #16]
 800964c:	e7d2      	b.n	80095f4 <_svfiprintf_r+0x9c>
 800964e:	9b03      	ldr	r3, [sp, #12]
 8009650:	1d19      	adds	r1, r3, #4
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	9103      	str	r1, [sp, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	bfbb      	ittet	lt
 800965a:	425b      	neglt	r3, r3
 800965c:	f042 0202 	orrlt.w	r2, r2, #2
 8009660:	9307      	strge	r3, [sp, #28]
 8009662:	9307      	strlt	r3, [sp, #28]
 8009664:	bfb8      	it	lt
 8009666:	9204      	strlt	r2, [sp, #16]
 8009668:	7823      	ldrb	r3, [r4, #0]
 800966a:	2b2e      	cmp	r3, #46	; 0x2e
 800966c:	d10c      	bne.n	8009688 <_svfiprintf_r+0x130>
 800966e:	7863      	ldrb	r3, [r4, #1]
 8009670:	2b2a      	cmp	r3, #42	; 0x2a
 8009672:	d135      	bne.n	80096e0 <_svfiprintf_r+0x188>
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	3402      	adds	r4, #2
 8009678:	1d1a      	adds	r2, r3, #4
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	9203      	str	r2, [sp, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	bfb8      	it	lt
 8009682:	f04f 33ff 	movlt.w	r3, #4294967295
 8009686:	9305      	str	r3, [sp, #20]
 8009688:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009748 <_svfiprintf_r+0x1f0>
 800968c:	2203      	movs	r2, #3
 800968e:	4650      	mov	r0, sl
 8009690:	7821      	ldrb	r1, [r4, #0]
 8009692:	f000 f9f7 	bl	8009a84 <memchr>
 8009696:	b140      	cbz	r0, 80096aa <_svfiprintf_r+0x152>
 8009698:	2340      	movs	r3, #64	; 0x40
 800969a:	eba0 000a 	sub.w	r0, r0, sl
 800969e:	fa03 f000 	lsl.w	r0, r3, r0
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	3401      	adds	r4, #1
 80096a6:	4303      	orrs	r3, r0
 80096a8:	9304      	str	r3, [sp, #16]
 80096aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ae:	2206      	movs	r2, #6
 80096b0:	4826      	ldr	r0, [pc, #152]	; (800974c <_svfiprintf_r+0x1f4>)
 80096b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096b6:	f000 f9e5 	bl	8009a84 <memchr>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d038      	beq.n	8009730 <_svfiprintf_r+0x1d8>
 80096be:	4b24      	ldr	r3, [pc, #144]	; (8009750 <_svfiprintf_r+0x1f8>)
 80096c0:	bb1b      	cbnz	r3, 800970a <_svfiprintf_r+0x1b2>
 80096c2:	9b03      	ldr	r3, [sp, #12]
 80096c4:	3307      	adds	r3, #7
 80096c6:	f023 0307 	bic.w	r3, r3, #7
 80096ca:	3308      	adds	r3, #8
 80096cc:	9303      	str	r3, [sp, #12]
 80096ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d0:	4433      	add	r3, r6
 80096d2:	9309      	str	r3, [sp, #36]	; 0x24
 80096d4:	e767      	b.n	80095a6 <_svfiprintf_r+0x4e>
 80096d6:	460c      	mov	r4, r1
 80096d8:	2001      	movs	r0, #1
 80096da:	fb0c 3202 	mla	r2, ip, r2, r3
 80096de:	e7a5      	b.n	800962c <_svfiprintf_r+0xd4>
 80096e0:	2300      	movs	r3, #0
 80096e2:	f04f 0c0a 	mov.w	ip, #10
 80096e6:	4619      	mov	r1, r3
 80096e8:	3401      	adds	r4, #1
 80096ea:	9305      	str	r3, [sp, #20]
 80096ec:	4620      	mov	r0, r4
 80096ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f2:	3a30      	subs	r2, #48	; 0x30
 80096f4:	2a09      	cmp	r2, #9
 80096f6:	d903      	bls.n	8009700 <_svfiprintf_r+0x1a8>
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0c5      	beq.n	8009688 <_svfiprintf_r+0x130>
 80096fc:	9105      	str	r1, [sp, #20]
 80096fe:	e7c3      	b.n	8009688 <_svfiprintf_r+0x130>
 8009700:	4604      	mov	r4, r0
 8009702:	2301      	movs	r3, #1
 8009704:	fb0c 2101 	mla	r1, ip, r1, r2
 8009708:	e7f0      	b.n	80096ec <_svfiprintf_r+0x194>
 800970a:	ab03      	add	r3, sp, #12
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	462a      	mov	r2, r5
 8009710:	4638      	mov	r0, r7
 8009712:	4b10      	ldr	r3, [pc, #64]	; (8009754 <_svfiprintf_r+0x1fc>)
 8009714:	a904      	add	r1, sp, #16
 8009716:	f3af 8000 	nop.w
 800971a:	1c42      	adds	r2, r0, #1
 800971c:	4606      	mov	r6, r0
 800971e:	d1d6      	bne.n	80096ce <_svfiprintf_r+0x176>
 8009720:	89ab      	ldrh	r3, [r5, #12]
 8009722:	065b      	lsls	r3, r3, #25
 8009724:	f53f af2c 	bmi.w	8009580 <_svfiprintf_r+0x28>
 8009728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800972a:	b01d      	add	sp, #116	; 0x74
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009730:	ab03      	add	r3, sp, #12
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	462a      	mov	r2, r5
 8009736:	4638      	mov	r0, r7
 8009738:	4b06      	ldr	r3, [pc, #24]	; (8009754 <_svfiprintf_r+0x1fc>)
 800973a:	a904      	add	r1, sp, #16
 800973c:	f000 f87c 	bl	8009838 <_printf_i>
 8009740:	e7eb      	b.n	800971a <_svfiprintf_r+0x1c2>
 8009742:	bf00      	nop
 8009744:	08009e0c 	.word	0x08009e0c
 8009748:	08009e12 	.word	0x08009e12
 800974c:	08009e16 	.word	0x08009e16
 8009750:	00000000 	.word	0x00000000
 8009754:	080094a1 	.word	0x080094a1

08009758 <_printf_common>:
 8009758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800975c:	4616      	mov	r6, r2
 800975e:	4699      	mov	r9, r3
 8009760:	688a      	ldr	r2, [r1, #8]
 8009762:	690b      	ldr	r3, [r1, #16]
 8009764:	4607      	mov	r7, r0
 8009766:	4293      	cmp	r3, r2
 8009768:	bfb8      	it	lt
 800976a:	4613      	movlt	r3, r2
 800976c:	6033      	str	r3, [r6, #0]
 800976e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009772:	460c      	mov	r4, r1
 8009774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009778:	b10a      	cbz	r2, 800977e <_printf_common+0x26>
 800977a:	3301      	adds	r3, #1
 800977c:	6033      	str	r3, [r6, #0]
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	0699      	lsls	r1, r3, #26
 8009782:	bf42      	ittt	mi
 8009784:	6833      	ldrmi	r3, [r6, #0]
 8009786:	3302      	addmi	r3, #2
 8009788:	6033      	strmi	r3, [r6, #0]
 800978a:	6825      	ldr	r5, [r4, #0]
 800978c:	f015 0506 	ands.w	r5, r5, #6
 8009790:	d106      	bne.n	80097a0 <_printf_common+0x48>
 8009792:	f104 0a19 	add.w	sl, r4, #25
 8009796:	68e3      	ldr	r3, [r4, #12]
 8009798:	6832      	ldr	r2, [r6, #0]
 800979a:	1a9b      	subs	r3, r3, r2
 800979c:	42ab      	cmp	r3, r5
 800979e:	dc28      	bgt.n	80097f2 <_printf_common+0x9a>
 80097a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097a4:	1e13      	subs	r3, r2, #0
 80097a6:	6822      	ldr	r2, [r4, #0]
 80097a8:	bf18      	it	ne
 80097aa:	2301      	movne	r3, #1
 80097ac:	0692      	lsls	r2, r2, #26
 80097ae:	d42d      	bmi.n	800980c <_printf_common+0xb4>
 80097b0:	4649      	mov	r1, r9
 80097b2:	4638      	mov	r0, r7
 80097b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097b8:	47c0      	blx	r8
 80097ba:	3001      	adds	r0, #1
 80097bc:	d020      	beq.n	8009800 <_printf_common+0xa8>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	68e5      	ldr	r5, [r4, #12]
 80097c2:	f003 0306 	and.w	r3, r3, #6
 80097c6:	2b04      	cmp	r3, #4
 80097c8:	bf18      	it	ne
 80097ca:	2500      	movne	r5, #0
 80097cc:	6832      	ldr	r2, [r6, #0]
 80097ce:	f04f 0600 	mov.w	r6, #0
 80097d2:	68a3      	ldr	r3, [r4, #8]
 80097d4:	bf08      	it	eq
 80097d6:	1aad      	subeq	r5, r5, r2
 80097d8:	6922      	ldr	r2, [r4, #16]
 80097da:	bf08      	it	eq
 80097dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097e0:	4293      	cmp	r3, r2
 80097e2:	bfc4      	itt	gt
 80097e4:	1a9b      	subgt	r3, r3, r2
 80097e6:	18ed      	addgt	r5, r5, r3
 80097e8:	341a      	adds	r4, #26
 80097ea:	42b5      	cmp	r5, r6
 80097ec:	d11a      	bne.n	8009824 <_printf_common+0xcc>
 80097ee:	2000      	movs	r0, #0
 80097f0:	e008      	b.n	8009804 <_printf_common+0xac>
 80097f2:	2301      	movs	r3, #1
 80097f4:	4652      	mov	r2, sl
 80097f6:	4649      	mov	r1, r9
 80097f8:	4638      	mov	r0, r7
 80097fa:	47c0      	blx	r8
 80097fc:	3001      	adds	r0, #1
 80097fe:	d103      	bne.n	8009808 <_printf_common+0xb0>
 8009800:	f04f 30ff 	mov.w	r0, #4294967295
 8009804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009808:	3501      	adds	r5, #1
 800980a:	e7c4      	b.n	8009796 <_printf_common+0x3e>
 800980c:	2030      	movs	r0, #48	; 0x30
 800980e:	18e1      	adds	r1, r4, r3
 8009810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800981a:	4422      	add	r2, r4
 800981c:	3302      	adds	r3, #2
 800981e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009822:	e7c5      	b.n	80097b0 <_printf_common+0x58>
 8009824:	2301      	movs	r3, #1
 8009826:	4622      	mov	r2, r4
 8009828:	4649      	mov	r1, r9
 800982a:	4638      	mov	r0, r7
 800982c:	47c0      	blx	r8
 800982e:	3001      	adds	r0, #1
 8009830:	d0e6      	beq.n	8009800 <_printf_common+0xa8>
 8009832:	3601      	adds	r6, #1
 8009834:	e7d9      	b.n	80097ea <_printf_common+0x92>
	...

08009838 <_printf_i>:
 8009838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800983c:	7e0f      	ldrb	r7, [r1, #24]
 800983e:	4691      	mov	r9, r2
 8009840:	2f78      	cmp	r7, #120	; 0x78
 8009842:	4680      	mov	r8, r0
 8009844:	460c      	mov	r4, r1
 8009846:	469a      	mov	sl, r3
 8009848:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800984a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800984e:	d807      	bhi.n	8009860 <_printf_i+0x28>
 8009850:	2f62      	cmp	r7, #98	; 0x62
 8009852:	d80a      	bhi.n	800986a <_printf_i+0x32>
 8009854:	2f00      	cmp	r7, #0
 8009856:	f000 80d9 	beq.w	8009a0c <_printf_i+0x1d4>
 800985a:	2f58      	cmp	r7, #88	; 0x58
 800985c:	f000 80a4 	beq.w	80099a8 <_printf_i+0x170>
 8009860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009868:	e03a      	b.n	80098e0 <_printf_i+0xa8>
 800986a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800986e:	2b15      	cmp	r3, #21
 8009870:	d8f6      	bhi.n	8009860 <_printf_i+0x28>
 8009872:	a101      	add	r1, pc, #4	; (adr r1, 8009878 <_printf_i+0x40>)
 8009874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009878:	080098d1 	.word	0x080098d1
 800987c:	080098e5 	.word	0x080098e5
 8009880:	08009861 	.word	0x08009861
 8009884:	08009861 	.word	0x08009861
 8009888:	08009861 	.word	0x08009861
 800988c:	08009861 	.word	0x08009861
 8009890:	080098e5 	.word	0x080098e5
 8009894:	08009861 	.word	0x08009861
 8009898:	08009861 	.word	0x08009861
 800989c:	08009861 	.word	0x08009861
 80098a0:	08009861 	.word	0x08009861
 80098a4:	080099f3 	.word	0x080099f3
 80098a8:	08009915 	.word	0x08009915
 80098ac:	080099d5 	.word	0x080099d5
 80098b0:	08009861 	.word	0x08009861
 80098b4:	08009861 	.word	0x08009861
 80098b8:	08009a15 	.word	0x08009a15
 80098bc:	08009861 	.word	0x08009861
 80098c0:	08009915 	.word	0x08009915
 80098c4:	08009861 	.word	0x08009861
 80098c8:	08009861 	.word	0x08009861
 80098cc:	080099dd 	.word	0x080099dd
 80098d0:	682b      	ldr	r3, [r5, #0]
 80098d2:	1d1a      	adds	r2, r3, #4
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	602a      	str	r2, [r5, #0]
 80098d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098e0:	2301      	movs	r3, #1
 80098e2:	e0a4      	b.n	8009a2e <_printf_i+0x1f6>
 80098e4:	6820      	ldr	r0, [r4, #0]
 80098e6:	6829      	ldr	r1, [r5, #0]
 80098e8:	0606      	lsls	r6, r0, #24
 80098ea:	f101 0304 	add.w	r3, r1, #4
 80098ee:	d50a      	bpl.n	8009906 <_printf_i+0xce>
 80098f0:	680e      	ldr	r6, [r1, #0]
 80098f2:	602b      	str	r3, [r5, #0]
 80098f4:	2e00      	cmp	r6, #0
 80098f6:	da03      	bge.n	8009900 <_printf_i+0xc8>
 80098f8:	232d      	movs	r3, #45	; 0x2d
 80098fa:	4276      	negs	r6, r6
 80098fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009900:	230a      	movs	r3, #10
 8009902:	485e      	ldr	r0, [pc, #376]	; (8009a7c <_printf_i+0x244>)
 8009904:	e019      	b.n	800993a <_printf_i+0x102>
 8009906:	680e      	ldr	r6, [r1, #0]
 8009908:	f010 0f40 	tst.w	r0, #64	; 0x40
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	bf18      	it	ne
 8009910:	b236      	sxthne	r6, r6
 8009912:	e7ef      	b.n	80098f4 <_printf_i+0xbc>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	6820      	ldr	r0, [r4, #0]
 8009918:	1d19      	adds	r1, r3, #4
 800991a:	6029      	str	r1, [r5, #0]
 800991c:	0601      	lsls	r1, r0, #24
 800991e:	d501      	bpl.n	8009924 <_printf_i+0xec>
 8009920:	681e      	ldr	r6, [r3, #0]
 8009922:	e002      	b.n	800992a <_printf_i+0xf2>
 8009924:	0646      	lsls	r6, r0, #25
 8009926:	d5fb      	bpl.n	8009920 <_printf_i+0xe8>
 8009928:	881e      	ldrh	r6, [r3, #0]
 800992a:	2f6f      	cmp	r7, #111	; 0x6f
 800992c:	bf0c      	ite	eq
 800992e:	2308      	moveq	r3, #8
 8009930:	230a      	movne	r3, #10
 8009932:	4852      	ldr	r0, [pc, #328]	; (8009a7c <_printf_i+0x244>)
 8009934:	2100      	movs	r1, #0
 8009936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800993a:	6865      	ldr	r5, [r4, #4]
 800993c:	2d00      	cmp	r5, #0
 800993e:	bfa8      	it	ge
 8009940:	6821      	ldrge	r1, [r4, #0]
 8009942:	60a5      	str	r5, [r4, #8]
 8009944:	bfa4      	itt	ge
 8009946:	f021 0104 	bicge.w	r1, r1, #4
 800994a:	6021      	strge	r1, [r4, #0]
 800994c:	b90e      	cbnz	r6, 8009952 <_printf_i+0x11a>
 800994e:	2d00      	cmp	r5, #0
 8009950:	d04d      	beq.n	80099ee <_printf_i+0x1b6>
 8009952:	4615      	mov	r5, r2
 8009954:	fbb6 f1f3 	udiv	r1, r6, r3
 8009958:	fb03 6711 	mls	r7, r3, r1, r6
 800995c:	5dc7      	ldrb	r7, [r0, r7]
 800995e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009962:	4637      	mov	r7, r6
 8009964:	42bb      	cmp	r3, r7
 8009966:	460e      	mov	r6, r1
 8009968:	d9f4      	bls.n	8009954 <_printf_i+0x11c>
 800996a:	2b08      	cmp	r3, #8
 800996c:	d10b      	bne.n	8009986 <_printf_i+0x14e>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	07de      	lsls	r6, r3, #31
 8009972:	d508      	bpl.n	8009986 <_printf_i+0x14e>
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	6861      	ldr	r1, [r4, #4]
 8009978:	4299      	cmp	r1, r3
 800997a:	bfde      	ittt	le
 800997c:	2330      	movle	r3, #48	; 0x30
 800997e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009982:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009986:	1b52      	subs	r2, r2, r5
 8009988:	6122      	str	r2, [r4, #16]
 800998a:	464b      	mov	r3, r9
 800998c:	4621      	mov	r1, r4
 800998e:	4640      	mov	r0, r8
 8009990:	f8cd a000 	str.w	sl, [sp]
 8009994:	aa03      	add	r2, sp, #12
 8009996:	f7ff fedf 	bl	8009758 <_printf_common>
 800999a:	3001      	adds	r0, #1
 800999c:	d14c      	bne.n	8009a38 <_printf_i+0x200>
 800999e:	f04f 30ff 	mov.w	r0, #4294967295
 80099a2:	b004      	add	sp, #16
 80099a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a8:	4834      	ldr	r0, [pc, #208]	; (8009a7c <_printf_i+0x244>)
 80099aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099ae:	6829      	ldr	r1, [r5, #0]
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80099b6:	6029      	str	r1, [r5, #0]
 80099b8:	061d      	lsls	r5, r3, #24
 80099ba:	d514      	bpl.n	80099e6 <_printf_i+0x1ae>
 80099bc:	07df      	lsls	r7, r3, #31
 80099be:	bf44      	itt	mi
 80099c0:	f043 0320 	orrmi.w	r3, r3, #32
 80099c4:	6023      	strmi	r3, [r4, #0]
 80099c6:	b91e      	cbnz	r6, 80099d0 <_printf_i+0x198>
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	f023 0320 	bic.w	r3, r3, #32
 80099ce:	6023      	str	r3, [r4, #0]
 80099d0:	2310      	movs	r3, #16
 80099d2:	e7af      	b.n	8009934 <_printf_i+0xfc>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	f043 0320 	orr.w	r3, r3, #32
 80099da:	6023      	str	r3, [r4, #0]
 80099dc:	2378      	movs	r3, #120	; 0x78
 80099de:	4828      	ldr	r0, [pc, #160]	; (8009a80 <_printf_i+0x248>)
 80099e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099e4:	e7e3      	b.n	80099ae <_printf_i+0x176>
 80099e6:	0659      	lsls	r1, r3, #25
 80099e8:	bf48      	it	mi
 80099ea:	b2b6      	uxthmi	r6, r6
 80099ec:	e7e6      	b.n	80099bc <_printf_i+0x184>
 80099ee:	4615      	mov	r5, r2
 80099f0:	e7bb      	b.n	800996a <_printf_i+0x132>
 80099f2:	682b      	ldr	r3, [r5, #0]
 80099f4:	6826      	ldr	r6, [r4, #0]
 80099f6:	1d18      	adds	r0, r3, #4
 80099f8:	6961      	ldr	r1, [r4, #20]
 80099fa:	6028      	str	r0, [r5, #0]
 80099fc:	0635      	lsls	r5, r6, #24
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	d501      	bpl.n	8009a06 <_printf_i+0x1ce>
 8009a02:	6019      	str	r1, [r3, #0]
 8009a04:	e002      	b.n	8009a0c <_printf_i+0x1d4>
 8009a06:	0670      	lsls	r0, r6, #25
 8009a08:	d5fb      	bpl.n	8009a02 <_printf_i+0x1ca>
 8009a0a:	8019      	strh	r1, [r3, #0]
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	4615      	mov	r5, r2
 8009a10:	6123      	str	r3, [r4, #16]
 8009a12:	e7ba      	b.n	800998a <_printf_i+0x152>
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	2100      	movs	r1, #0
 8009a18:	1d1a      	adds	r2, r3, #4
 8009a1a:	602a      	str	r2, [r5, #0]
 8009a1c:	681d      	ldr	r5, [r3, #0]
 8009a1e:	6862      	ldr	r2, [r4, #4]
 8009a20:	4628      	mov	r0, r5
 8009a22:	f000 f82f 	bl	8009a84 <memchr>
 8009a26:	b108      	cbz	r0, 8009a2c <_printf_i+0x1f4>
 8009a28:	1b40      	subs	r0, r0, r5
 8009a2a:	6060      	str	r0, [r4, #4]
 8009a2c:	6863      	ldr	r3, [r4, #4]
 8009a2e:	6123      	str	r3, [r4, #16]
 8009a30:	2300      	movs	r3, #0
 8009a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a36:	e7a8      	b.n	800998a <_printf_i+0x152>
 8009a38:	462a      	mov	r2, r5
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	6923      	ldr	r3, [r4, #16]
 8009a40:	47d0      	blx	sl
 8009a42:	3001      	adds	r0, #1
 8009a44:	d0ab      	beq.n	800999e <_printf_i+0x166>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	079b      	lsls	r3, r3, #30
 8009a4a:	d413      	bmi.n	8009a74 <_printf_i+0x23c>
 8009a4c:	68e0      	ldr	r0, [r4, #12]
 8009a4e:	9b03      	ldr	r3, [sp, #12]
 8009a50:	4298      	cmp	r0, r3
 8009a52:	bfb8      	it	lt
 8009a54:	4618      	movlt	r0, r3
 8009a56:	e7a4      	b.n	80099a2 <_printf_i+0x16a>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	4632      	mov	r2, r6
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	4640      	mov	r0, r8
 8009a60:	47d0      	blx	sl
 8009a62:	3001      	adds	r0, #1
 8009a64:	d09b      	beq.n	800999e <_printf_i+0x166>
 8009a66:	3501      	adds	r5, #1
 8009a68:	68e3      	ldr	r3, [r4, #12]
 8009a6a:	9903      	ldr	r1, [sp, #12]
 8009a6c:	1a5b      	subs	r3, r3, r1
 8009a6e:	42ab      	cmp	r3, r5
 8009a70:	dcf2      	bgt.n	8009a58 <_printf_i+0x220>
 8009a72:	e7eb      	b.n	8009a4c <_printf_i+0x214>
 8009a74:	2500      	movs	r5, #0
 8009a76:	f104 0619 	add.w	r6, r4, #25
 8009a7a:	e7f5      	b.n	8009a68 <_printf_i+0x230>
 8009a7c:	08009e1d 	.word	0x08009e1d
 8009a80:	08009e2e 	.word	0x08009e2e

08009a84 <memchr>:
 8009a84:	4603      	mov	r3, r0
 8009a86:	b510      	push	{r4, lr}
 8009a88:	b2c9      	uxtb	r1, r1
 8009a8a:	4402      	add	r2, r0
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	d101      	bne.n	8009a96 <memchr+0x12>
 8009a92:	2000      	movs	r0, #0
 8009a94:	e003      	b.n	8009a9e <memchr+0x1a>
 8009a96:	7804      	ldrb	r4, [r0, #0]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	428c      	cmp	r4, r1
 8009a9c:	d1f6      	bne.n	8009a8c <memchr+0x8>
 8009a9e:	bd10      	pop	{r4, pc}

08009aa0 <memcpy>:
 8009aa0:	440a      	add	r2, r1
 8009aa2:	4291      	cmp	r1, r2
 8009aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aa8:	d100      	bne.n	8009aac <memcpy+0xc>
 8009aaa:	4770      	bx	lr
 8009aac:	b510      	push	{r4, lr}
 8009aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ab2:	4291      	cmp	r1, r2
 8009ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ab8:	d1f9      	bne.n	8009aae <memcpy+0xe>
 8009aba:	bd10      	pop	{r4, pc}

08009abc <memmove>:
 8009abc:	4288      	cmp	r0, r1
 8009abe:	b510      	push	{r4, lr}
 8009ac0:	eb01 0402 	add.w	r4, r1, r2
 8009ac4:	d902      	bls.n	8009acc <memmove+0x10>
 8009ac6:	4284      	cmp	r4, r0
 8009ac8:	4623      	mov	r3, r4
 8009aca:	d807      	bhi.n	8009adc <memmove+0x20>
 8009acc:	1e43      	subs	r3, r0, #1
 8009ace:	42a1      	cmp	r1, r4
 8009ad0:	d008      	beq.n	8009ae4 <memmove+0x28>
 8009ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ada:	e7f8      	b.n	8009ace <memmove+0x12>
 8009adc:	4601      	mov	r1, r0
 8009ade:	4402      	add	r2, r0
 8009ae0:	428a      	cmp	r2, r1
 8009ae2:	d100      	bne.n	8009ae6 <memmove+0x2a>
 8009ae4:	bd10      	pop	{r4, pc}
 8009ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aee:	e7f7      	b.n	8009ae0 <memmove+0x24>

08009af0 <_free_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4605      	mov	r5, r0
 8009af4:	2900      	cmp	r1, #0
 8009af6:	d040      	beq.n	8009b7a <_free_r+0x8a>
 8009af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009afc:	1f0c      	subs	r4, r1, #4
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	bfb8      	it	lt
 8009b02:	18e4      	addlt	r4, r4, r3
 8009b04:	f000 f910 	bl	8009d28 <__malloc_lock>
 8009b08:	4a1c      	ldr	r2, [pc, #112]	; (8009b7c <_free_r+0x8c>)
 8009b0a:	6813      	ldr	r3, [r2, #0]
 8009b0c:	b933      	cbnz	r3, 8009b1c <_free_r+0x2c>
 8009b0e:	6063      	str	r3, [r4, #4]
 8009b10:	6014      	str	r4, [r2, #0]
 8009b12:	4628      	mov	r0, r5
 8009b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b18:	f000 b90c 	b.w	8009d34 <__malloc_unlock>
 8009b1c:	42a3      	cmp	r3, r4
 8009b1e:	d908      	bls.n	8009b32 <_free_r+0x42>
 8009b20:	6820      	ldr	r0, [r4, #0]
 8009b22:	1821      	adds	r1, r4, r0
 8009b24:	428b      	cmp	r3, r1
 8009b26:	bf01      	itttt	eq
 8009b28:	6819      	ldreq	r1, [r3, #0]
 8009b2a:	685b      	ldreq	r3, [r3, #4]
 8009b2c:	1809      	addeq	r1, r1, r0
 8009b2e:	6021      	streq	r1, [r4, #0]
 8009b30:	e7ed      	b.n	8009b0e <_free_r+0x1e>
 8009b32:	461a      	mov	r2, r3
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	b10b      	cbz	r3, 8009b3c <_free_r+0x4c>
 8009b38:	42a3      	cmp	r3, r4
 8009b3a:	d9fa      	bls.n	8009b32 <_free_r+0x42>
 8009b3c:	6811      	ldr	r1, [r2, #0]
 8009b3e:	1850      	adds	r0, r2, r1
 8009b40:	42a0      	cmp	r0, r4
 8009b42:	d10b      	bne.n	8009b5c <_free_r+0x6c>
 8009b44:	6820      	ldr	r0, [r4, #0]
 8009b46:	4401      	add	r1, r0
 8009b48:	1850      	adds	r0, r2, r1
 8009b4a:	4283      	cmp	r3, r0
 8009b4c:	6011      	str	r1, [r2, #0]
 8009b4e:	d1e0      	bne.n	8009b12 <_free_r+0x22>
 8009b50:	6818      	ldr	r0, [r3, #0]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	4401      	add	r1, r0
 8009b56:	6011      	str	r1, [r2, #0]
 8009b58:	6053      	str	r3, [r2, #4]
 8009b5a:	e7da      	b.n	8009b12 <_free_r+0x22>
 8009b5c:	d902      	bls.n	8009b64 <_free_r+0x74>
 8009b5e:	230c      	movs	r3, #12
 8009b60:	602b      	str	r3, [r5, #0]
 8009b62:	e7d6      	b.n	8009b12 <_free_r+0x22>
 8009b64:	6820      	ldr	r0, [r4, #0]
 8009b66:	1821      	adds	r1, r4, r0
 8009b68:	428b      	cmp	r3, r1
 8009b6a:	bf01      	itttt	eq
 8009b6c:	6819      	ldreq	r1, [r3, #0]
 8009b6e:	685b      	ldreq	r3, [r3, #4]
 8009b70:	1809      	addeq	r1, r1, r0
 8009b72:	6021      	streq	r1, [r4, #0]
 8009b74:	6063      	str	r3, [r4, #4]
 8009b76:	6054      	str	r4, [r2, #4]
 8009b78:	e7cb      	b.n	8009b12 <_free_r+0x22>
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	20001388 	.word	0x20001388

08009b80 <sbrk_aligned>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	4e0e      	ldr	r6, [pc, #56]	; (8009bbc <sbrk_aligned+0x3c>)
 8009b84:	460c      	mov	r4, r1
 8009b86:	6831      	ldr	r1, [r6, #0]
 8009b88:	4605      	mov	r5, r0
 8009b8a:	b911      	cbnz	r1, 8009b92 <sbrk_aligned+0x12>
 8009b8c:	f000 f8bc 	bl	8009d08 <_sbrk_r>
 8009b90:	6030      	str	r0, [r6, #0]
 8009b92:	4621      	mov	r1, r4
 8009b94:	4628      	mov	r0, r5
 8009b96:	f000 f8b7 	bl	8009d08 <_sbrk_r>
 8009b9a:	1c43      	adds	r3, r0, #1
 8009b9c:	d00a      	beq.n	8009bb4 <sbrk_aligned+0x34>
 8009b9e:	1cc4      	adds	r4, r0, #3
 8009ba0:	f024 0403 	bic.w	r4, r4, #3
 8009ba4:	42a0      	cmp	r0, r4
 8009ba6:	d007      	beq.n	8009bb8 <sbrk_aligned+0x38>
 8009ba8:	1a21      	subs	r1, r4, r0
 8009baa:	4628      	mov	r0, r5
 8009bac:	f000 f8ac 	bl	8009d08 <_sbrk_r>
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d101      	bne.n	8009bb8 <sbrk_aligned+0x38>
 8009bb4:	f04f 34ff 	mov.w	r4, #4294967295
 8009bb8:	4620      	mov	r0, r4
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	2000138c 	.word	0x2000138c

08009bc0 <_malloc_r>:
 8009bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc4:	1ccd      	adds	r5, r1, #3
 8009bc6:	f025 0503 	bic.w	r5, r5, #3
 8009bca:	3508      	adds	r5, #8
 8009bcc:	2d0c      	cmp	r5, #12
 8009bce:	bf38      	it	cc
 8009bd0:	250c      	movcc	r5, #12
 8009bd2:	2d00      	cmp	r5, #0
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	db01      	blt.n	8009bdc <_malloc_r+0x1c>
 8009bd8:	42a9      	cmp	r1, r5
 8009bda:	d905      	bls.n	8009be8 <_malloc_r+0x28>
 8009bdc:	230c      	movs	r3, #12
 8009bde:	2600      	movs	r6, #0
 8009be0:	603b      	str	r3, [r7, #0]
 8009be2:	4630      	mov	r0, r6
 8009be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be8:	4e2e      	ldr	r6, [pc, #184]	; (8009ca4 <_malloc_r+0xe4>)
 8009bea:	f000 f89d 	bl	8009d28 <__malloc_lock>
 8009bee:	6833      	ldr	r3, [r6, #0]
 8009bf0:	461c      	mov	r4, r3
 8009bf2:	bb34      	cbnz	r4, 8009c42 <_malloc_r+0x82>
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	f7ff ffc2 	bl	8009b80 <sbrk_aligned>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	4604      	mov	r4, r0
 8009c00:	d14d      	bne.n	8009c9e <_malloc_r+0xde>
 8009c02:	6834      	ldr	r4, [r6, #0]
 8009c04:	4626      	mov	r6, r4
 8009c06:	2e00      	cmp	r6, #0
 8009c08:	d140      	bne.n	8009c8c <_malloc_r+0xcc>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4638      	mov	r0, r7
 8009c10:	eb04 0803 	add.w	r8, r4, r3
 8009c14:	f000 f878 	bl	8009d08 <_sbrk_r>
 8009c18:	4580      	cmp	r8, r0
 8009c1a:	d13a      	bne.n	8009c92 <_malloc_r+0xd2>
 8009c1c:	6821      	ldr	r1, [r4, #0]
 8009c1e:	3503      	adds	r5, #3
 8009c20:	1a6d      	subs	r5, r5, r1
 8009c22:	f025 0503 	bic.w	r5, r5, #3
 8009c26:	3508      	adds	r5, #8
 8009c28:	2d0c      	cmp	r5, #12
 8009c2a:	bf38      	it	cc
 8009c2c:	250c      	movcc	r5, #12
 8009c2e:	4638      	mov	r0, r7
 8009c30:	4629      	mov	r1, r5
 8009c32:	f7ff ffa5 	bl	8009b80 <sbrk_aligned>
 8009c36:	3001      	adds	r0, #1
 8009c38:	d02b      	beq.n	8009c92 <_malloc_r+0xd2>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	442b      	add	r3, r5
 8009c3e:	6023      	str	r3, [r4, #0]
 8009c40:	e00e      	b.n	8009c60 <_malloc_r+0xa0>
 8009c42:	6822      	ldr	r2, [r4, #0]
 8009c44:	1b52      	subs	r2, r2, r5
 8009c46:	d41e      	bmi.n	8009c86 <_malloc_r+0xc6>
 8009c48:	2a0b      	cmp	r2, #11
 8009c4a:	d916      	bls.n	8009c7a <_malloc_r+0xba>
 8009c4c:	1961      	adds	r1, r4, r5
 8009c4e:	42a3      	cmp	r3, r4
 8009c50:	6025      	str	r5, [r4, #0]
 8009c52:	bf18      	it	ne
 8009c54:	6059      	strne	r1, [r3, #4]
 8009c56:	6863      	ldr	r3, [r4, #4]
 8009c58:	bf08      	it	eq
 8009c5a:	6031      	streq	r1, [r6, #0]
 8009c5c:	5162      	str	r2, [r4, r5]
 8009c5e:	604b      	str	r3, [r1, #4]
 8009c60:	4638      	mov	r0, r7
 8009c62:	f104 060b 	add.w	r6, r4, #11
 8009c66:	f000 f865 	bl	8009d34 <__malloc_unlock>
 8009c6a:	f026 0607 	bic.w	r6, r6, #7
 8009c6e:	1d23      	adds	r3, r4, #4
 8009c70:	1af2      	subs	r2, r6, r3
 8009c72:	d0b6      	beq.n	8009be2 <_malloc_r+0x22>
 8009c74:	1b9b      	subs	r3, r3, r6
 8009c76:	50a3      	str	r3, [r4, r2]
 8009c78:	e7b3      	b.n	8009be2 <_malloc_r+0x22>
 8009c7a:	6862      	ldr	r2, [r4, #4]
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	bf0c      	ite	eq
 8009c80:	6032      	streq	r2, [r6, #0]
 8009c82:	605a      	strne	r2, [r3, #4]
 8009c84:	e7ec      	b.n	8009c60 <_malloc_r+0xa0>
 8009c86:	4623      	mov	r3, r4
 8009c88:	6864      	ldr	r4, [r4, #4]
 8009c8a:	e7b2      	b.n	8009bf2 <_malloc_r+0x32>
 8009c8c:	4634      	mov	r4, r6
 8009c8e:	6876      	ldr	r6, [r6, #4]
 8009c90:	e7b9      	b.n	8009c06 <_malloc_r+0x46>
 8009c92:	230c      	movs	r3, #12
 8009c94:	4638      	mov	r0, r7
 8009c96:	603b      	str	r3, [r7, #0]
 8009c98:	f000 f84c 	bl	8009d34 <__malloc_unlock>
 8009c9c:	e7a1      	b.n	8009be2 <_malloc_r+0x22>
 8009c9e:	6025      	str	r5, [r4, #0]
 8009ca0:	e7de      	b.n	8009c60 <_malloc_r+0xa0>
 8009ca2:	bf00      	nop
 8009ca4:	20001388 	.word	0x20001388

08009ca8 <_realloc_r>:
 8009ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cac:	4680      	mov	r8, r0
 8009cae:	4614      	mov	r4, r2
 8009cb0:	460e      	mov	r6, r1
 8009cb2:	b921      	cbnz	r1, 8009cbe <_realloc_r+0x16>
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cba:	f7ff bf81 	b.w	8009bc0 <_malloc_r>
 8009cbe:	b92a      	cbnz	r2, 8009ccc <_realloc_r+0x24>
 8009cc0:	f7ff ff16 	bl	8009af0 <_free_r>
 8009cc4:	4625      	mov	r5, r4
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ccc:	f000 f838 	bl	8009d40 <_malloc_usable_size_r>
 8009cd0:	4284      	cmp	r4, r0
 8009cd2:	4607      	mov	r7, r0
 8009cd4:	d802      	bhi.n	8009cdc <_realloc_r+0x34>
 8009cd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cda:	d812      	bhi.n	8009d02 <_realloc_r+0x5a>
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4640      	mov	r0, r8
 8009ce0:	f7ff ff6e 	bl	8009bc0 <_malloc_r>
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d0ed      	beq.n	8009cc6 <_realloc_r+0x1e>
 8009cea:	42bc      	cmp	r4, r7
 8009cec:	4622      	mov	r2, r4
 8009cee:	4631      	mov	r1, r6
 8009cf0:	bf28      	it	cs
 8009cf2:	463a      	movcs	r2, r7
 8009cf4:	f7ff fed4 	bl	8009aa0 <memcpy>
 8009cf8:	4631      	mov	r1, r6
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f7ff fef8 	bl	8009af0 <_free_r>
 8009d00:	e7e1      	b.n	8009cc6 <_realloc_r+0x1e>
 8009d02:	4635      	mov	r5, r6
 8009d04:	e7df      	b.n	8009cc6 <_realloc_r+0x1e>
	...

08009d08 <_sbrk_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	4d05      	ldr	r5, [pc, #20]	; (8009d24 <_sbrk_r+0x1c>)
 8009d0e:	4604      	mov	r4, r0
 8009d10:	4608      	mov	r0, r1
 8009d12:	602b      	str	r3, [r5, #0]
 8009d14:	f7f6 fb8e 	bl	8000434 <_sbrk>
 8009d18:	1c43      	adds	r3, r0, #1
 8009d1a:	d102      	bne.n	8009d22 <_sbrk_r+0x1a>
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	b103      	cbz	r3, 8009d22 <_sbrk_r+0x1a>
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	bd38      	pop	{r3, r4, r5, pc}
 8009d24:	20001390 	.word	0x20001390

08009d28 <__malloc_lock>:
 8009d28:	4801      	ldr	r0, [pc, #4]	; (8009d30 <__malloc_lock+0x8>)
 8009d2a:	f000 b811 	b.w	8009d50 <__retarget_lock_acquire_recursive>
 8009d2e:	bf00      	nop
 8009d30:	20001394 	.word	0x20001394

08009d34 <__malloc_unlock>:
 8009d34:	4801      	ldr	r0, [pc, #4]	; (8009d3c <__malloc_unlock+0x8>)
 8009d36:	f000 b80c 	b.w	8009d52 <__retarget_lock_release_recursive>
 8009d3a:	bf00      	nop
 8009d3c:	20001394 	.word	0x20001394

08009d40 <_malloc_usable_size_r>:
 8009d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d44:	1f18      	subs	r0, r3, #4
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bfbc      	itt	lt
 8009d4a:	580b      	ldrlt	r3, [r1, r0]
 8009d4c:	18c0      	addlt	r0, r0, r3
 8009d4e:	4770      	bx	lr

08009d50 <__retarget_lock_acquire_recursive>:
 8009d50:	4770      	bx	lr

08009d52 <__retarget_lock_release_recursive>:
 8009d52:	4770      	bx	lr

08009d54 <_init>:
 8009d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d56:	bf00      	nop
 8009d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5a:	bc08      	pop	{r3}
 8009d5c:	469e      	mov	lr, r3
 8009d5e:	4770      	bx	lr

08009d60 <_fini>:
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d62:	bf00      	nop
 8009d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d66:	bc08      	pop	{r3}
 8009d68:	469e      	mov	lr, r3
 8009d6a:	4770      	bx	lr
