
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009720  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098ac  080098ac  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  080098ac  080098ac  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098ac  080098ac  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098ac  080098ac  000198ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098b0  080098b0  000198b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  080098b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  200001a0  08009a54  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001364  08009a54  00021364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123e2  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ecb  00000000  00000000  000325ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00036478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  000375b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbb9  00000000  00000000  000384f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8f0  00000000  00000000  000550a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d9b  00000000  00000000  00070999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa734  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004244  00000000  00000000  000fa784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a0 	.word	0x200001a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009814 	.word	0x08009814

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a4 	.word	0x200001a4
 8000148:	08009814 	.word	0x08009814

0800014c <apInit>:




void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 115200);  //USB
 8000150:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fad3 	bl	8000700 <uartOpen>
  uartOpen(_DEF_UART2, 115200); //UART
 800015a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800015e:	2001      	movs	r0, #1
 8000160:	f000 face 	bl	8000700 <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apMain>:



void apMain(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
  uint32_t pre_time;
  uint32_t led_blink_time = 500;
 800016e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000172:	603b      	str	r3, [r7, #0]

  pre_time = millis();
 8000174:	f000 f85f 	bl	8000236 <millis>
 8000178:	6078      	str	r0, [r7, #4]

  while(1)
  {
    if ( millis()-pre_time >= led_blink_time)
 800017a:	f000 f85c 	bl	8000236 <millis>
 800017e:	4602      	mov	r2, r0
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	683a      	ldr	r2, [r7, #0]
 8000186:	429a      	cmp	r2, r3
 8000188:	d8f7      	bhi.n	800017a <apMain+0x12>
    {
      pre_time = millis();
 800018a:	f000 f854 	bl	8000236 <millis>
 800018e:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 8000190:	2000      	movs	r0, #0
 8000192:	f000 f9df 	bl	8000554 <ledToggle>
      //delay(500);
      ledToggle(_DEF_LED2);
 8000196:	2001      	movs	r0, #1
 8000198:	f000 f9dc 	bl	8000554 <ledToggle>
      ledToggle(_DEF_LED3);
 800019c:	2002      	movs	r0, #2
 800019e:	f000 f9d9 	bl	8000554 <ledToggle>
    if ( millis()-pre_time >= led_blink_time)
 80001a2:	e7ea      	b.n	800017a <apMain+0x12>

080001a4 <bspInit>:
void SystemClock_Config(void);



void bspInit(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0
  HAL_Init();
 80001aa:	f000 fc3d 	bl	8000a28 <HAL_Init>
  SystemClock_Config();
 80001ae:	f000 f849 	bl	8000244 <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001b2:	4b1a      	ldr	r3, [pc, #104]	; (800021c <bspInit+0x78>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	4a19      	ldr	r2, [pc, #100]	; (800021c <bspInit+0x78>)
 80001b8:	f043 0320 	orr.w	r3, r3, #32
 80001bc:	6193      	str	r3, [r2, #24]
 80001be:	4b17      	ldr	r3, [pc, #92]	; (800021c <bspInit+0x78>)
 80001c0:	699b      	ldr	r3, [r3, #24]
 80001c2:	f003 0320 	and.w	r3, r3, #32
 80001c6:	60fb      	str	r3, [r7, #12]
 80001c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <bspInit+0x78>)
 80001cc:	699b      	ldr	r3, [r3, #24]
 80001ce:	4a13      	ldr	r2, [pc, #76]	; (800021c <bspInit+0x78>)
 80001d0:	f043 0304 	orr.w	r3, r3, #4
 80001d4:	6193      	str	r3, [r2, #24]
 80001d6:	4b11      	ldr	r3, [pc, #68]	; (800021c <bspInit+0x78>)
 80001d8:	699b      	ldr	r3, [r3, #24]
 80001da:	f003 0304 	and.w	r3, r3, #4
 80001de:	60bb      	str	r3, [r7, #8]
 80001e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001e2:	4b0e      	ldr	r3, [pc, #56]	; (800021c <bspInit+0x78>)
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	4a0d      	ldr	r2, [pc, #52]	; (800021c <bspInit+0x78>)
 80001e8:	f043 0308 	orr.w	r3, r3, #8
 80001ec:	6193      	str	r3, [r2, #24]
 80001ee:	4b0b      	ldr	r3, [pc, #44]	; (800021c <bspInit+0x78>)
 80001f0:	699b      	ldr	r3, [r3, #24]
 80001f2:	f003 0308 	and.w	r3, r3, #8
 80001f6:	607b      	str	r3, [r7, #4]
 80001f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <bspInit+0x78>)
 80001fc:	699b      	ldr	r3, [r3, #24]
 80001fe:	4a07      	ldr	r2, [pc, #28]	; (800021c <bspInit+0x78>)
 8000200:	f043 0310 	orr.w	r3, r3, #16
 8000204:	6193      	str	r3, [r2, #24]
 8000206:	4b05      	ldr	r3, [pc, #20]	; (800021c <bspInit+0x78>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	f003 0310 	and.w	r3, r3, #16
 800020e:	603b      	str	r3, [r7, #0]
 8000210:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


  MX_USB_DEVICE_Init();
*/
}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40021000 	.word	0x40021000

08000220 <delay>:

void delay(uint32_t ms)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 HAL_Delay(ms);
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f000 fc5f 	bl	8000aec <HAL_Delay>
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}

08000236 <millis>:
uint32_t millis(void)
{
 8000236:	b580      	push	{r7, lr}
 8000238:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800023a:	f000 fc4d 	bl	8000ad8 <HAL_GetTick>
 800023e:	4603      	mov	r3, r0
}
 8000240:	4618      	mov	r0, r3
 8000242:	bd80      	pop	{r7, pc}

08000244 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b094      	sub	sp, #80	; 0x50
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f009 fad6 	bl	8009804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000274:	2305      	movs	r3, #5
 8000276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000286:	2301      	movs	r3, #1
 8000288:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000294:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000298:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 ffc2 	bl	8003228 <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002aa:	f000 f82a 	bl	8000302 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b2:	2302      	movs	r3, #2
 80002b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	2102      	movs	r1, #2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f003 fa2e 	bl	800372c <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002d6:	f000 f814 	bl	8000302 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80002da:	2311      	movs	r3, #17
 80002dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80002de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002e4:	2300      	movs	r3, #0
 80002e6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 fbb6 	bl	8003a5c <HAL_RCCEx_PeriphCLKConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002f6:	f000 f804 	bl	8000302 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3750      	adds	r7, #80	; 0x50
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000306:	b672      	cpsid	i
}
 8000308:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800030a:	e7fe      	b.n	800030a <Error_Handler+0x8>

0800030c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <HAL_MspInit+0x5c>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4a14      	ldr	r2, [pc, #80]	; (8000368 <HAL_MspInit+0x5c>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6193      	str	r3, [r2, #24]
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <HAL_MspInit+0x5c>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <HAL_MspInit+0x5c>)
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <HAL_MspInit+0x5c>)
 8000330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000334:	61d3      	str	r3, [r2, #28]
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <HAL_MspInit+0x5c>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <HAL_MspInit+0x60>)
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <HAL_MspInit+0x60>)
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000
 800036c:	40010000 	.word	0x40010000

08000370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000374:	e7fe      	b.n	8000374 <NMI_Handler+0x4>

08000376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800037a:	e7fe      	b.n	800037a <HardFault_Handler+0x4>

0800037c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <MemManage_Handler+0x4>

08000382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <BusFault_Handler+0x4>

08000388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800038c:	e7fe      	b.n	800038c <UsageFault_Handler+0x4>

0800038e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr

0800039a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr

080003a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b6:	f000 fb7d 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80003c4:	4802      	ldr	r0, [pc, #8]	; (80003d0 <DMA1_Channel5_IRQHandler+0x10>)
 80003c6:	f000 febb 	bl	8001140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	2000033c 	.word	0x2000033c

080003d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003d8:	4802      	ldr	r0, [pc, #8]	; (80003e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003da:	f001 fb87 	bl	8001aec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000e58 	.word	0x20000e58

080003e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80003ec:	4802      	ldr	r0, [pc, #8]	; (80003f8 <USART1_IRQHandler+0x10>)
 80003ee:	f003 fea1 	bl	8004134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	200002f8 	.word	0x200002f8

080003fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000408:	480c      	ldr	r0, [pc, #48]	; (800043c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800040a:	490d      	ldr	r1, [pc, #52]	; (8000440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800040c:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000410:	e002      	b.n	8000418 <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000416:	3304      	adds	r3, #4

08000418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800041c:	d3f9      	bcc.n	8000412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041e:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000420:	4c0a      	ldr	r4, [pc, #40]	; (800044c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000424:	e001      	b.n	800042a <LoopFillZerobss>

08000426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000428:	3204      	adds	r2, #4

0800042a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800042c:	d3fb      	bcc.n	8000426 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800042e:	f7ff ffe5 	bl	80003fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000432:	f009 f9c3 	bl	80097bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000436:	f009 f9b5 	bl	80097a4 <main>
  bx lr
 800043a:	4770      	bx	lr
  ldr r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000440:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8000444:	080098b4 	.word	0x080098b4
  ldr r2, =_sbss
 8000448:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 800044c:	20001364 	.word	0x20001364

08000450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000450:	e7fe      	b.n	8000450 <ADC1_2_IRQHandler>

08000452 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000452:	b480      	push	{r7}
 8000454:	b087      	sub	sp, #28
 8000456:	af00      	add	r7, sp, #0
 8000458:	60f8      	str	r0, [r7, #12]
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800045e:	2301      	movs	r3, #1
 8000460:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	2200      	movs	r2, #0
 800046c:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	60da      	str	r2, [r3, #12]
    p_node->len = 0;
    p_node->p_buf = NULL;
    ret = false;
  }
*/
  return ret;
 800047a:	7dfb      	ldrb	r3, [r7, #23]

}
 800047c:	4618      	mov	r0, r3
 800047e:	371c      	adds	r7, #28
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
	...

08000488 <ledInit>:
    };



bool ledInit(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
  bool ret = true;
 800048e:	2301      	movs	r3, #1
 8000490:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 0308 	add.w	r3, r7, #8
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <ledInit+0x84>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a19      	ldr	r2, [pc, #100]	; (800050c <ledInit+0x84>)
 80004a6:	f043 0308 	orr.w	r3, r3, #8
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b17      	ldr	r3, [pc, #92]	; (800050c <ledInit+0x84>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0308 	and.w	r3, r3, #8
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);


  /*Configure GPIO pin : PB12 */
  //GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b8:	2301      	movs	r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c0:	2302      	movs	r3, #2
 80004c2:	617b      	str	r3, [r7, #20]
  //HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  for (int i=0; i<LED_MAX_CH; i++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	61fb      	str	r3, [r7, #28]
 80004c8:	e017      	b.n	80004fa <ledInit+0x72>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80004ca:	4a11      	ldr	r2, [pc, #68]	; (8000510 <ledInit+0x88>)
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	4413      	add	r3, r2
 80004d2:	889b      	ldrh	r3, [r3, #4]
 80004d4:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <ledInit+0x88>)
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80004de:	f107 0208 	add.w	r2, r7, #8
 80004e2:	4611      	mov	r1, r2
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 ff5f 	bl	80013a8 <HAL_GPIO_Init>

    ledOff(i);
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f810 	bl	8000514 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 80004f4:	69fb      	ldr	r3, [r7, #28]
 80004f6:	3301      	adds	r3, #1
 80004f8:	61fb      	str	r3, [r7, #28]
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	dde4      	ble.n	80004ca <ledInit+0x42>

  }

  return ret;
 8000500:	7efb      	ldrb	r3, [r7, #27]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3720      	adds	r7, #32
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000
 8000510:	20000004 	.word	0x20000004

08000514 <ledOff>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}


void ledOff(uint8_t ch)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b02      	cmp	r3, #2
 8000522:	d811      	bhi.n	8000548 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <ledOff+0x3c>)
 8000528:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <ledOff+0x3c>)
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	4413      	add	r3, r2
 8000534:	8899      	ldrh	r1, [r3, #4]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <ledOff+0x3c>)
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	4413      	add	r3, r2
 800053e:	79db      	ldrb	r3, [r3, #7]
 8000540:	461a      	mov	r2, r3
 8000542:	f001 f971 	bl	8001828 <HAL_GPIO_WritePin>
 8000546:	e000      	b.n	800054a <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8000548:	bf00      	nop
}
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000004 	.word	0x20000004

08000554 <ledToggle>:


void ledToggle(uint8_t ch)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d80d      	bhi.n	8000580 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4a08      	ldr	r2, [pc, #32]	; (8000588 <ledToggle+0x34>)
 8000568:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	4906      	ldr	r1, [pc, #24]	; (8000588 <ledToggle+0x34>)
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	440b      	add	r3, r1
 8000574:	889b      	ldrh	r3, [r3, #4]
 8000576:	4619      	mov	r1, r3
 8000578:	4610      	mov	r0, r2
 800057a:	f001 f96d 	bl	8001858 <HAL_GPIO_TogglePin>
 800057e:	e000      	b.n	8000582 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8000580:	bf00      	nop
}
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000004 	.word	0x20000004

0800058c <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	bool ret = true;
 8000592:	2301      	movs	r3, #1
 8000594:	71fb      	strb	r3, [r7, #7]


	//만약 Reset 핀이 눌렸다면
	if (RCC->CSR & (1<<26))
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <resetInit+0x50>)
 8000598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800059a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d012      	beq.n	80005c8 <resetInit+0x3c>
	{
	  rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 f84e 	bl	8000644 <rtcBackupRegRead>
 80005a8:	4603      	mov	r3, r0
 80005aa:	3301      	adds	r3, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 f858 	bl	8000664 <rtcBackupRegWrite>
	  delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b8:	f7ff fe32 	bl	8000220 <delay>
	  reset_count = rtcBackupRegRead(1);
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 f841 	bl	8000644 <rtcBackupRegRead>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <resetInit+0x54>)
 80005c6:	6013      	str	r3, [r2, #0]
	}

	rtcBackupRegWrite(1, 0);
 80005c8:	2100      	movs	r1, #0
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 f84a 	bl	8000664 <rtcBackupRegWrite>

	return ret;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000
 80005e0:	200001bc 	.word	0x200001bc

080005e4 <rtcInit>:

static RTC_HandleTypeDef hrtc;


bool rtcInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	bool ret = true;
 80005ea:	2301      	movs	r3, #1
 80005ec:	71fb      	strb	r3, [r7, #7]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <rtcInit+0x54>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a11      	ldr	r2, [pc, #68]	; (8000638 <rtcInit+0x54>)
 80005f4:	f043 0310 	orr.w	r3, r3, #16
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <rtcInit+0x54>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0310 	and.w	r3, r3, #16
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

	/** Initialize RTC Only	  */
	hrtc.Instance 			= RTC;
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <rtcInit+0x58>)
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <rtcInit+0x5c>)
 800060a:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv 	= RTC_AUTO_1_SECOND;
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <rtcInit+0x58>)
 800060e:	f04f 32ff 	mov.w	r2, #4294967295
 8000612:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut 		= RTC_OUTPUTSOURCE_ALARM;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <rtcInit+0x58>)
 8000616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800061a:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <rtcInit+0x58>)
 800061e:	f003 fb93 	bl	8003d48 <HAL_RTC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <rtcInit+0x48>
	{
	  Error_Handler();
 8000628:	f7ff fe6b 	bl	8000302 <Error_Handler>
	}

	return ret;
 800062c:	79fb      	ldrb	r3, [r7, #7]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	200001c0 	.word	0x200001c0
 8000640:	40002800 	.word	0x40002800

08000644 <rtcBackupRegRead>:


uint32_t rtcBackupRegRead(uint32_t index)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <rtcBackupRegRead+0x1c>)
 8000650:	f003 fca8 	bl	8003fa4 <HAL_RTCEx_BKUPRead>
 8000654:	4603      	mov	r3, r0
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200001c0 	.word	0x200001c0

08000664 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <rtcBackupRegWrite+0x1c>)
 8000674:	f003 fc7c 	bl	8003f70 <HAL_RTCEx_BKUPWrite>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200001c0 	.word	0x200001c0

08000684 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <HAL_RTC_MspInit+0x3c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d110      	bne.n	80006b8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000696:	f002 fdbb 	bl	8003210 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_RTC_MspInit+0x40>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <HAL_RTC_MspInit+0x40>)
 80006a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <HAL_RTC_MspInit+0x40>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_RTC_MspInit+0x44>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40002800 	.word	0x40002800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	4242043c 	.word	0x4242043c

080006cc <uartInit>:

UART_HandleTypeDef huart1;
DMA_HandleTypeDef  hdma_usart1_rx;

bool uartInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	e007      	b.n	80006e8 <uartInit+0x1c>
  {
    is_open[i] = false;
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <uartInit+0x30>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3301      	adds	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	ddf4      	ble.n	80006d8 <uartInit+0xc>
  }

  return true;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	200001d4 	.word	0x200001d4

08000700 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <uartOpen+0x1c>
 8000716:	2b01      	cmp	r3, #1
 8000718:	d007      	beq.n	800072a <uartOpen+0x2a>
 800071a:	e074      	b.n	8000806 <uartOpen+0x106>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4a3c      	ldr	r2, [pc, #240]	; (8000810 <uartOpen+0x110>)
 8000720:	2101      	movs	r1, #1
 8000722:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8000724:	2301      	movs	r3, #1
 8000726:	73fb      	strb	r3, [r7, #15]
      break;
 8000728:	e06d      	b.n	8000806 <uartOpen+0x106>

    case _DEF_UART2:
      huart1.Instance            = USART1;
 800072a:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <uartOpen+0x114>)
 800072c:	4a3a      	ldr	r2, [pc, #232]	; (8000818 <uartOpen+0x118>)
 800072e:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate       = baud;
 8000730:	4a38      	ldr	r2, [pc, #224]	; (8000814 <uartOpen+0x114>)
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength     = UART_WORDLENGTH_8B;
 8000736:	4b37      	ldr	r3, [pc, #220]	; (8000814 <uartOpen+0x114>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits       = UART_STOPBITS_1;
 800073c:	4b35      	ldr	r3, [pc, #212]	; (8000814 <uartOpen+0x114>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity         = UART_PARITY_NONE;
 8000742:	4b34      	ldr	r3, [pc, #208]	; (8000814 <uartOpen+0x114>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode           = UART_MODE_TX_RX;
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <uartOpen+0x114>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <uartOpen+0x114>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling   = UART_OVERSAMPLING_16;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <uartOpen+0x114>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 800075a:	482e      	ldr	r0, [pc, #184]	; (8000814 <uartOpen+0x114>)
 800075c:	f003 fc8b 	bl	8004076 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	011b      	lsls	r3, r3, #4
 8000764:	4a2d      	ldr	r2, [pc, #180]	; (800081c <uartOpen+0x11c>)
 8000766:	4413      	add	r3, r2
 8000768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076c:	492c      	ldr	r1, [pc, #176]	; (8000820 <uartOpen+0x120>)
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fe6f 	bl	8000452 <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8000774:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <uartOpen+0x124>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <uartOpen+0x124>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	6153      	str	r3, [r2, #20]
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <uartOpen+0x124>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	200f      	movs	r0, #15
 8000792:	f000 faca 	bl	8000d2a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 fae3 	bl	8000d62 <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart1) != HAL_OK)
 800079c:	481d      	ldr	r0, [pc, #116]	; (8000814 <uartOpen+0x114>)
 800079e:	f003 fc1d 	bl	8003fdc <HAL_UART_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <uartOpen+0xae>
      {
        //Error_Handler();
        ret = false;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]

        qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
        qbuffer[ch].out = qbuffer[ch].in;
      }

      break;
 80007ac:	e02a      	b.n	8000804 <uartOpen+0x104>
        ret = true;
 80007ae:	2301      	movs	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4a16      	ldr	r2, [pc, #88]	; (8000810 <uartOpen+0x110>)
 80007b6:	2101      	movs	r1, #1
 80007b8:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80007ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007be:	4918      	ldr	r1, [pc, #96]	; (8000820 <uartOpen+0x120>)
 80007c0:	4814      	ldr	r0, [pc, #80]	; (8000814 <uartOpen+0x114>)
 80007c2:	f003 fc87 	bl	80040d4 <HAL_UART_Receive_DMA>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <uartOpen+0xd0>
          ret = false;
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]
        qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <uartOpen+0x11c>)
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	4413      	add	r3, r2
 80007d8:	3308      	adds	r3, #8
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <uartOpen+0x128>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	1a8a      	subs	r2, r1, r2
 80007e6:	490d      	ldr	r1, [pc, #52]	; (800081c <uartOpen+0x11c>)
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	440b      	add	r3, r1
 80007ec:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	490a      	ldr	r1, [pc, #40]	; (800081c <uartOpen+0x11c>)
 80007f4:	0112      	lsls	r2, r2, #4
 80007f6:	440a      	add	r2, r1
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	4908      	ldr	r1, [pc, #32]	; (800081c <uartOpen+0x11c>)
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	440b      	add	r3, r1
 8000800:	3304      	adds	r3, #4
 8000802:	601a      	str	r2, [r3, #0]
      break;
 8000804:	bf00      	nop
  }

  return ret;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200001d4 	.word	0x200001d4
 8000814:	200002f8 	.word	0x200002f8
 8000818:	40013800 	.word	0x40013800
 800081c:	200001d8 	.word	0x200001d8
 8000820:	200001f8 	.word	0x200001f8
 8000824:	40021000 	.word	0x40021000
 8000828:	2000033c 	.word	0x2000033c

0800082c <HAL_UART_ErrorCallback>:
  return ret;

}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {

  }
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a33      	ldr	r2, [pc, #204]	; (8000938 <HAL_UART_MspInit+0xe8>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d15f      	bne.n	8000930 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000870:	4b32      	ldr	r3, [pc, #200]	; (800093c <HAL_UART_MspInit+0xec>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a31      	ldr	r2, [pc, #196]	; (800093c <HAL_UART_MspInit+0xec>)
 8000876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b2f      	ldr	r3, [pc, #188]	; (800093c <HAL_UART_MspInit+0xec>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b2c      	ldr	r3, [pc, #176]	; (800093c <HAL_UART_MspInit+0xec>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a2b      	ldr	r2, [pc, #172]	; (800093c <HAL_UART_MspInit+0xec>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <HAL_UART_MspInit+0xec>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	4619      	mov	r1, r3
 80008b4:	4822      	ldr	r0, [pc, #136]	; (8000940 <HAL_UART_MspInit+0xf0>)
 80008b6:	f000 fd77 	bl	80013a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	; (8000940 <HAL_UART_MspInit+0xf0>)
 80008d0:	f000 fd6a 	bl	80013a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <HAL_UART_MspInit+0xf4>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <HAL_UART_MspInit+0xf8>)
 80008d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <HAL_UART_MspInit+0xf4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_UART_MspInit+0xf4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_UART_MspInit+0xf4>)
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_UART_MspInit+0xf4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_UART_MspInit+0xf4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_UART_MspInit+0xf4>)
 80008fa:	2220      	movs	r2, #32
 80008fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_UART_MspInit+0xf4>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000904:	480f      	ldr	r0, [pc, #60]	; (8000944 <HAL_UART_MspInit+0xf4>)
 8000906:	f000 fa55 	bl	8000db4 <HAL_DMA_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000910:	f7ff fcf7 	bl	8000302 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <HAL_UART_MspInit+0xf4>)
 8000918:	639a      	str	r2, [r3, #56]	; 0x38
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_UART_MspInit+0xf4>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	2025      	movs	r0, #37	; 0x25
 8000926:	f000 fa00 	bl	8000d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800092a:	2025      	movs	r0, #37	; 0x25
 800092c:	f000 fa19 	bl	8000d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40013800 	.word	0x40013800
 800093c:	40021000 	.word	0x40021000
 8000940:	40010800 	.word	0x40010800
 8000944:	2000033c 	.word	0x2000033c
 8000948:	40020058 	.word	0x40020058

0800094c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0c      	ldr	r2, [pc, #48]	; (800098c <HAL_UART_MspDeInit+0x40>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d112      	bne.n	8000984 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_UART_MspDeInit+0x44>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <HAL_UART_MspDeInit+0x44>)
 8000964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000968:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800096a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <HAL_UART_MspDeInit+0x48>)
 8000970:	f000 fe9e 	bl	80016b0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fa75 	bl	8000e68 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800097e:	2025      	movs	r0, #37	; 0x25
 8000980:	f000 f9fd 	bl	8000d7e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40013800 	.word	0x40013800
 8000990:	40021000 	.word	0x40021000
 8000994:	40010800 	.word	0x40010800

08000998 <usbInit>:

#include "usb.h"
#include "usb_device.h"

bool usbInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
	bool ret = true;
 800099e:	2301      	movs	r3, #1
 80009a0:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009b4:	2311      	movs	r3, #17
 80009b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2302      	movs	r3, #2
 80009be:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	480f      	ldr	r0, [pc, #60]	; (8000a04 <usbInit+0x6c>)
 80009c6:	f000 fcef 	bl	80013a8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <usbInit+0x6c>)
 80009d2:	f000 ff29 	bl	8001828 <HAL_GPIO_WritePin>
	delay(100);
 80009d6:	2064      	movs	r0, #100	; 0x64
 80009d8:	f7ff fc22 	bl	8000220 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <usbInit+0x6c>)
 80009e4:	f000 ff20 	bl	8001828 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <usbInit+0x6c>)
 80009f2:	f000 fcd9 	bl	80013a8 <HAL_GPIO_Init>


	MX_USB_DEVICE_Init();
 80009f6:	f008 f979 	bl	8008cec <MX_USB_DEVICE_Init>

	return ret;
 80009fa:	7dfb      	ldrb	r3, [r7, #23]

}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40010800 	.word	0x40010800

08000a08 <hwInit>:




void hwInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  bspInit();
 8000a0c:	f7ff fbca 	bl	80001a4 <bspInit>
  rtcInit();
 8000a10:	f7ff fde8 	bl	80005e4 <rtcInit>

  resetInit();
 8000a14:	f7ff fdba 	bl	800058c <resetInit>
  ledInit();
 8000a18:	f7ff fd36 	bl	8000488 <ledInit>
  usbInit();
 8000a1c:	f7ff ffbc 	bl	8000998 <usbInit>
  uartInit();
 8000a20:	f7ff fe54 	bl	80006cc <uartInit>

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x28>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x28>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f96b 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fc62 	bl	800030c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40022000 	.word	0x40022000

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f991 	bl	8000d9a <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f94b 	bl	8000d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000020 	.word	0x20000020
 8000ab0:	2000001c 	.word	0x2000001c

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x1c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a03      	ldr	r2, [pc, #12]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	20000020 	.word	0x20000020
 8000ad4:	20000380 	.word	0x20000380

08000ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <HAL_GetTick+0x10>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000380 	.word	0x20000380

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff fff0 	bl	8000ad8 <HAL_GetTick>
 8000af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Delay+0x44>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b12:	bf00      	nop
 8000b14:	f7ff ffe0 	bl	8000ad8 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000020 	.word	0x20000020

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4906      	ldr	r1, [pc, #24]	; (8000bcc <__NVIC_EnableIRQ+0x34>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db12      	blt.n	8000c08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	490a      	ldr	r1, [pc, #40]	; (8000c14 <__NVIC_DisableIRQ+0x44>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	3320      	adds	r3, #32
 8000bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bfc:	f3bf 8f4f 	dsb	sy
}
 8000c00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c02:	f3bf 8f6f 	isb	sy
}
 8000c06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce0:	d301      	bcc.n	8000ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00f      	b.n	8000d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <SysTick_Config+0x40>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f7ff ff90 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <SysTick_Config+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SysTick_Config+0x40>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff09 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff1e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ff90 	bl	8000c6c <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff5f 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff11 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff1f 	bl	8000bd0 <__NVIC_DisableIRQ>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff94 	bl	8000cd0 <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e043      	b.n	8000e52 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_DMA_Init+0xa8>)
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <HAL_DMA_Init+0xac>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	009a      	lsls	r2, r3, #2
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <HAL_DMA_Init+0xb0>)
 8000de6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2202      	movs	r2, #2
 8000dec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dfe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	bffdfff8 	.word	0xbffdfff8
 8000e60:	cccccccd 	.word	0xcccccccd
 8000e64:	40020000 	.word	0x40020000

08000e68 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e046      	b.n	8000f08 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0201 	bic.w	r2, r2, #1
 8000e88:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_DMA_DeInit+0xac>)
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <HAL_DMA_DeInit+0xb0>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	091b      	lsrs	r3, r3, #4
 8000ebc:	009a      	lsls	r2, r3, #2
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <HAL_DMA_DeInit+0xb4>)
 8000ec6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed6:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	bffdfff8 	.word	0xbffdfff8
 8000f18:	cccccccd 	.word	0xcccccccd
 8000f1c:	40020000 	.word	0x40020000

08000f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d101      	bne.n	8000f40 <HAL_DMA_Start_IT+0x20>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e04a      	b.n	8000fd6 <HAL_DMA_Start_IT+0xb6>
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d13a      	bne.n	8000fc8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2202      	movs	r2, #2
 8000f56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0201 	bic.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f000 f9e8 	bl	800134c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d008      	beq.n	8000f96 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 020e 	orr.w	r2, r2, #14
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	e00f      	b.n	8000fb6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0204 	bic.w	r2, r2, #4
 8000fa4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 020a 	orr.w	r2, r2, #10
 8000fb4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f042 0201 	orr.w	r2, r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e005      	b.n	8000fd4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b085      	sub	sp, #20
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d008      	beq.n	8001006 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e020      	b.n	8001048 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 020e 	bic.w	r2, r2, #14
 8001014:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102e:	2101      	movs	r1, #1
 8001030:	fa01 f202 	lsl.w	r2, r1, r2
 8001034:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
	...

08001054 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001066:	2b02      	cmp	r3, #2
 8001068:	d005      	beq.n	8001076 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2204      	movs	r2, #4
 800106e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e051      	b.n	800111a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 020e 	bic.w	r2, r2, #14
 8001084:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0201 	bic.w	r2, r2, #1
 8001094:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_DMA_Abort_IT+0xd0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d029      	beq.n	80010f4 <HAL_DMA_Abort_IT+0xa0>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a20      	ldr	r2, [pc, #128]	; (8001128 <HAL_DMA_Abort_IT+0xd4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d022      	beq.n	80010f0 <HAL_DMA_Abort_IT+0x9c>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a1f      	ldr	r2, [pc, #124]	; (800112c <HAL_DMA_Abort_IT+0xd8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d01a      	beq.n	80010ea <HAL_DMA_Abort_IT+0x96>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <HAL_DMA_Abort_IT+0xdc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d012      	beq.n	80010e4 <HAL_DMA_Abort_IT+0x90>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_DMA_Abort_IT+0xe0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d00a      	beq.n	80010de <HAL_DMA_Abort_IT+0x8a>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1a      	ldr	r2, [pc, #104]	; (8001138 <HAL_DMA_Abort_IT+0xe4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d102      	bne.n	80010d8 <HAL_DMA_Abort_IT+0x84>
 80010d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010d6:	e00e      	b.n	80010f6 <HAL_DMA_Abort_IT+0xa2>
 80010d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010dc:	e00b      	b.n	80010f6 <HAL_DMA_Abort_IT+0xa2>
 80010de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e2:	e008      	b.n	80010f6 <HAL_DMA_Abort_IT+0xa2>
 80010e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e8:	e005      	b.n	80010f6 <HAL_DMA_Abort_IT+0xa2>
 80010ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ee:	e002      	b.n	80010f6 <HAL_DMA_Abort_IT+0xa2>
 80010f0:	2310      	movs	r3, #16
 80010f2:	e000      	b.n	80010f6 <HAL_DMA_Abort_IT+0xa2>
 80010f4:	2301      	movs	r3, #1
 80010f6:	4a11      	ldr	r2, [pc, #68]	; (800113c <HAL_DMA_Abort_IT+0xe8>)
 80010f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	4798      	blx	r3
    } 
  }
  return status;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020008 	.word	0x40020008
 8001128:	4002001c 	.word	0x4002001c
 800112c:	40020030 	.word	0x40020030
 8001130:	40020044 	.word	0x40020044
 8001134:	40020058 	.word	0x40020058
 8001138:	4002006c 	.word	0x4002006c
 800113c:	40020000 	.word	0x40020000

08001140 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	2204      	movs	r2, #4
 800115e:	409a      	lsls	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d04f      	beq.n	8001208 <HAL_DMA_IRQHandler+0xc8>
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	2b00      	cmp	r3, #0
 8001170:	d04a      	beq.n	8001208 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0320 	and.w	r3, r3, #32
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0204 	bic.w	r2, r2, #4
 800118e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a66      	ldr	r2, [pc, #408]	; (8001330 <HAL_DMA_IRQHandler+0x1f0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d029      	beq.n	80011ee <HAL_DMA_IRQHandler+0xae>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a65      	ldr	r2, [pc, #404]	; (8001334 <HAL_DMA_IRQHandler+0x1f4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d022      	beq.n	80011ea <HAL_DMA_IRQHandler+0xaa>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a63      	ldr	r2, [pc, #396]	; (8001338 <HAL_DMA_IRQHandler+0x1f8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01a      	beq.n	80011e4 <HAL_DMA_IRQHandler+0xa4>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a62      	ldr	r2, [pc, #392]	; (800133c <HAL_DMA_IRQHandler+0x1fc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d012      	beq.n	80011de <HAL_DMA_IRQHandler+0x9e>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a60      	ldr	r2, [pc, #384]	; (8001340 <HAL_DMA_IRQHandler+0x200>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00a      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x98>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a5f      	ldr	r2, [pc, #380]	; (8001344 <HAL_DMA_IRQHandler+0x204>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d102      	bne.n	80011d2 <HAL_DMA_IRQHandler+0x92>
 80011cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d0:	e00e      	b.n	80011f0 <HAL_DMA_IRQHandler+0xb0>
 80011d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011d6:	e00b      	b.n	80011f0 <HAL_DMA_IRQHandler+0xb0>
 80011d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011dc:	e008      	b.n	80011f0 <HAL_DMA_IRQHandler+0xb0>
 80011de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011e2:	e005      	b.n	80011f0 <HAL_DMA_IRQHandler+0xb0>
 80011e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e8:	e002      	b.n	80011f0 <HAL_DMA_IRQHandler+0xb0>
 80011ea:	2340      	movs	r3, #64	; 0x40
 80011ec:	e000      	b.n	80011f0 <HAL_DMA_IRQHandler+0xb0>
 80011ee:	2304      	movs	r3, #4
 80011f0:	4a55      	ldr	r2, [pc, #340]	; (8001348 <HAL_DMA_IRQHandler+0x208>)
 80011f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 8094 	beq.w	8001326 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001206:	e08e      	b.n	8001326 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	2202      	movs	r2, #2
 800120e:	409a      	lsls	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d056      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x186>
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d051      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10b      	bne.n	8001248 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 020a 	bic.w	r2, r2, #10
 800123e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a38      	ldr	r2, [pc, #224]	; (8001330 <HAL_DMA_IRQHandler+0x1f0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d029      	beq.n	80012a6 <HAL_DMA_IRQHandler+0x166>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a37      	ldr	r2, [pc, #220]	; (8001334 <HAL_DMA_IRQHandler+0x1f4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d022      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x162>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a35      	ldr	r2, [pc, #212]	; (8001338 <HAL_DMA_IRQHandler+0x1f8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01a      	beq.n	800129c <HAL_DMA_IRQHandler+0x15c>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a34      	ldr	r2, [pc, #208]	; (800133c <HAL_DMA_IRQHandler+0x1fc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d012      	beq.n	8001296 <HAL_DMA_IRQHandler+0x156>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a32      	ldr	r2, [pc, #200]	; (8001340 <HAL_DMA_IRQHandler+0x200>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00a      	beq.n	8001290 <HAL_DMA_IRQHandler+0x150>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a31      	ldr	r2, [pc, #196]	; (8001344 <HAL_DMA_IRQHandler+0x204>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d102      	bne.n	800128a <HAL_DMA_IRQHandler+0x14a>
 8001284:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001288:	e00e      	b.n	80012a8 <HAL_DMA_IRQHandler+0x168>
 800128a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800128e:	e00b      	b.n	80012a8 <HAL_DMA_IRQHandler+0x168>
 8001290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001294:	e008      	b.n	80012a8 <HAL_DMA_IRQHandler+0x168>
 8001296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129a:	e005      	b.n	80012a8 <HAL_DMA_IRQHandler+0x168>
 800129c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a0:	e002      	b.n	80012a8 <HAL_DMA_IRQHandler+0x168>
 80012a2:	2320      	movs	r3, #32
 80012a4:	e000      	b.n	80012a8 <HAL_DMA_IRQHandler+0x168>
 80012a6:	2302      	movs	r3, #2
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <HAL_DMA_IRQHandler+0x208>)
 80012aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d034      	beq.n	8001326 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012c4:	e02f      	b.n	8001326 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	2208      	movs	r2, #8
 80012cc:	409a      	lsls	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d028      	beq.n	8001328 <HAL_DMA_IRQHandler+0x1e8>
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d023      	beq.n	8001328 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 020e 	bic.w	r2, r2, #14
 80012ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f8:	2101      	movs	r1, #1
 80012fa:	fa01 f202 	lsl.w	r2, r1, r2
 80012fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	4798      	blx	r3
    }
  }
  return;
 8001326:	bf00      	nop
 8001328:	bf00      	nop
}
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40020008 	.word	0x40020008
 8001334:	4002001c 	.word	0x4002001c
 8001338:	40020030 	.word	0x40020030
 800133c:	40020044 	.word	0x40020044
 8001340:	40020058 	.word	0x40020058
 8001344:	4002006c 	.word	0x4002006c
 8001348:	40020000 	.word	0x40020000

0800134c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b10      	cmp	r3, #16
 8001378:	d108      	bne.n	800138c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800138a:	e007      	b.n	800139c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	60da      	str	r2, [r3, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b08b      	sub	sp, #44	; 0x2c
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	e169      	b.n	8001690 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013bc:	2201      	movs	r2, #1
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8158 	bne.w	800168a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4a9a      	ldr	r2, [pc, #616]	; (8001648 <HAL_GPIO_Init+0x2a0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d05e      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013e4:	4a98      	ldr	r2, [pc, #608]	; (8001648 <HAL_GPIO_Init+0x2a0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d875      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 80013ea:	4a98      	ldr	r2, [pc, #608]	; (800164c <HAL_GPIO_Init+0x2a4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d058      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013f0:	4a96      	ldr	r2, [pc, #600]	; (800164c <HAL_GPIO_Init+0x2a4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d86f      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 80013f6:	4a96      	ldr	r2, [pc, #600]	; (8001650 <HAL_GPIO_Init+0x2a8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d052      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013fc:	4a94      	ldr	r2, [pc, #592]	; (8001650 <HAL_GPIO_Init+0x2a8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d869      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 8001402:	4a94      	ldr	r2, [pc, #592]	; (8001654 <HAL_GPIO_Init+0x2ac>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d04c      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 8001408:	4a92      	ldr	r2, [pc, #584]	; (8001654 <HAL_GPIO_Init+0x2ac>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d863      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 800140e:	4a92      	ldr	r2, [pc, #584]	; (8001658 <HAL_GPIO_Init+0x2b0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d046      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 8001414:	4a90      	ldr	r2, [pc, #576]	; (8001658 <HAL_GPIO_Init+0x2b0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d85d      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 800141a:	2b12      	cmp	r3, #18
 800141c:	d82a      	bhi.n	8001474 <HAL_GPIO_Init+0xcc>
 800141e:	2b12      	cmp	r3, #18
 8001420:	d859      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 8001422:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <HAL_GPIO_Init+0x80>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	080014a3 	.word	0x080014a3
 800142c:	0800147d 	.word	0x0800147d
 8001430:	0800148f 	.word	0x0800148f
 8001434:	080014d1 	.word	0x080014d1
 8001438:	080014d7 	.word	0x080014d7
 800143c:	080014d7 	.word	0x080014d7
 8001440:	080014d7 	.word	0x080014d7
 8001444:	080014d7 	.word	0x080014d7
 8001448:	080014d7 	.word	0x080014d7
 800144c:	080014d7 	.word	0x080014d7
 8001450:	080014d7 	.word	0x080014d7
 8001454:	080014d7 	.word	0x080014d7
 8001458:	080014d7 	.word	0x080014d7
 800145c:	080014d7 	.word	0x080014d7
 8001460:	080014d7 	.word	0x080014d7
 8001464:	080014d7 	.word	0x080014d7
 8001468:	080014d7 	.word	0x080014d7
 800146c:	08001485 	.word	0x08001485
 8001470:	08001499 	.word	0x08001499
 8001474:	4a79      	ldr	r2, [pc, #484]	; (800165c <HAL_GPIO_Init+0x2b4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800147a:	e02c      	b.n	80014d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	623b      	str	r3, [r7, #32]
          break;
 8001482:	e029      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	3304      	adds	r3, #4
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e024      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	3308      	adds	r3, #8
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e01f      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	330c      	adds	r3, #12
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e01a      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014aa:	2304      	movs	r3, #4
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e013      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b8:	2308      	movs	r3, #8
 80014ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	611a      	str	r2, [r3, #16]
          break;
 80014c2:	e009      	b.n	80014d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	615a      	str	r2, [r3, #20]
          break;
 80014ce:	e003      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          break;
 80014d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2bff      	cmp	r3, #255	; 0xff
 80014dc:	d801      	bhi.n	80014e2 <HAL_GPIO_Init+0x13a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	e001      	b.n	80014e6 <HAL_GPIO_Init+0x13e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3304      	adds	r3, #4
 80014e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2bff      	cmp	r3, #255	; 0xff
 80014ec:	d802      	bhi.n	80014f4 <HAL_GPIO_Init+0x14c>
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x152>
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	3b08      	subs	r3, #8
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	210f      	movs	r1, #15
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	6a39      	ldr	r1, [r7, #32]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	431a      	orrs	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80b1 	beq.w	800168a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001528:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <HAL_GPIO_Init+0x2b8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a4c      	ldr	r2, [pc, #304]	; (8001660 <HAL_GPIO_Init+0x2b8>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_GPIO_Init+0x2b8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001540:	4a48      	ldr	r2, [pc, #288]	; (8001664 <HAL_GPIO_Init+0x2bc>)
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a40      	ldr	r2, [pc, #256]	; (8001668 <HAL_GPIO_Init+0x2c0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d013      	beq.n	8001594 <HAL_GPIO_Init+0x1ec>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a3f      	ldr	r2, [pc, #252]	; (800166c <HAL_GPIO_Init+0x2c4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d00d      	beq.n	8001590 <HAL_GPIO_Init+0x1e8>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a3e      	ldr	r2, [pc, #248]	; (8001670 <HAL_GPIO_Init+0x2c8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d007      	beq.n	800158c <HAL_GPIO_Init+0x1e4>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a3d      	ldr	r2, [pc, #244]	; (8001674 <HAL_GPIO_Init+0x2cc>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_GPIO_Init+0x1e0>
 8001584:	2303      	movs	r3, #3
 8001586:	e006      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001588:	2304      	movs	r3, #4
 800158a:	e004      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 800158c:	2302      	movs	r3, #2
 800158e:	e002      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001594:	2300      	movs	r3, #0
 8001596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001598:	f002 0203 	and.w	r2, r2, #3
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	4093      	lsls	r3, r2
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015a6:	492f      	ldr	r1, [pc, #188]	; (8001664 <HAL_GPIO_Init+0x2bc>)
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	492c      	ldr	r1, [pc, #176]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ce:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4928      	ldr	r1, [pc, #160]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015d8:	4013      	ands	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4922      	ldr	r1, [pc, #136]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	491e      	ldr	r1, [pc, #120]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001600:	4013      	ands	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	4918      	ldr	r1, [pc, #96]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	608b      	str	r3, [r1, #8]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	4914      	ldr	r1, [pc, #80]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d021      	beq.n	800167c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	490e      	ldr	r1, [pc, #56]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	60cb      	str	r3, [r1, #12]
 8001644:	e021      	b.n	800168a <HAL_GPIO_Init+0x2e2>
 8001646:	bf00      	nop
 8001648:	10320000 	.word	0x10320000
 800164c:	10310000 	.word	0x10310000
 8001650:	10220000 	.word	0x10220000
 8001654:	10210000 	.word	0x10210000
 8001658:	10120000 	.word	0x10120000
 800165c:	10110000 	.word	0x10110000
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	40010800 	.word	0x40010800
 800166c:	40010c00 	.word	0x40010c00
 8001670:	40011000 	.word	0x40011000
 8001674:	40011400 	.word	0x40011400
 8001678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_GPIO_Init+0x304>)
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	43db      	mvns	r3, r3
 8001684:	4909      	ldr	r1, [pc, #36]	; (80016ac <HAL_GPIO_Init+0x304>)
 8001686:	4013      	ands	r3, r2
 8001688:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	3301      	adds	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	f47f ae8e 	bne.w	80013bc <HAL_GPIO_Init+0x14>
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	372c      	adds	r7, #44	; 0x2c
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80016be:	e09a      	b.n	80017f6 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80016c0:	2201      	movs	r2, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 808d 	beq.w	80017f0 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80016d6:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_GPIO_DeInit+0x160>)
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	220f      	movs	r2, #15
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4013      	ands	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a46      	ldr	r2, [pc, #280]	; (8001814 <HAL_GPIO_DeInit+0x164>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d013      	beq.n	8001728 <HAL_GPIO_DeInit+0x78>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a45      	ldr	r2, [pc, #276]	; (8001818 <HAL_GPIO_DeInit+0x168>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d00d      	beq.n	8001724 <HAL_GPIO_DeInit+0x74>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a44      	ldr	r2, [pc, #272]	; (800181c <HAL_GPIO_DeInit+0x16c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d007      	beq.n	8001720 <HAL_GPIO_DeInit+0x70>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a43      	ldr	r2, [pc, #268]	; (8001820 <HAL_GPIO_DeInit+0x170>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d101      	bne.n	800171c <HAL_GPIO_DeInit+0x6c>
 8001718:	2303      	movs	r3, #3
 800171a:	e006      	b.n	800172a <HAL_GPIO_DeInit+0x7a>
 800171c:	2304      	movs	r3, #4
 800171e:	e004      	b.n	800172a <HAL_GPIO_DeInit+0x7a>
 8001720:	2302      	movs	r3, #2
 8001722:	e002      	b.n	800172a <HAL_GPIO_DeInit+0x7a>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_GPIO_DeInit+0x7a>
 8001728:	2300      	movs	r3, #0
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	f002 0203 	and.w	r2, r2, #3
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	4093      	lsls	r3, r2
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	429a      	cmp	r2, r3
 8001738:	d132      	bne.n	80017a0 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800174a:	4a31      	ldr	r2, [pc, #196]	; (8001810 <HAL_GPIO_DeInit+0x160>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	43da      	mvns	r2, r3
 800175a:	482d      	ldr	r0, [pc, #180]	; (8001810 <HAL_GPIO_DeInit+0x160>)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	400a      	ands	r2, r1
 8001762:	3302      	adds	r3, #2
 8001764:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001768:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <HAL_GPIO_DeInit+0x174>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	43db      	mvns	r3, r3
 8001770:	492c      	ldr	r1, [pc, #176]	; (8001824 <HAL_GPIO_DeInit+0x174>)
 8001772:	4013      	ands	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_GPIO_DeInit+0x174>)
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	43db      	mvns	r3, r3
 800177e:	4929      	ldr	r1, [pc, #164]	; (8001824 <HAL_GPIO_DeInit+0x174>)
 8001780:	4013      	ands	r3, r2
 8001782:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_GPIO_DeInit+0x174>)
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	43db      	mvns	r3, r3
 800178c:	4925      	ldr	r1, [pc, #148]	; (8001824 <HAL_GPIO_DeInit+0x174>)
 800178e:	4013      	ands	r3, r2
 8001790:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_GPIO_DeInit+0x174>)
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_GPIO_DeInit+0x174>)
 800179c:	4013      	ands	r3, r2
 800179e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2bff      	cmp	r3, #255	; 0xff
 80017a4:	d801      	bhi.n	80017aa <HAL_GPIO_DeInit+0xfa>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_DeInit+0xfe>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2bff      	cmp	r3, #255	; 0xff
 80017b4:	d802      	bhi.n	80017bc <HAL_GPIO_DeInit+0x10c>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_DeInit+0x112>
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	3b08      	subs	r3, #8
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	210f      	movs	r1, #15
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	401a      	ands	r2, r3
 80017d4:	2104      	movs	r1, #4
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	431a      	orrs	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	401a      	ands	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]
    }

    position++;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	3301      	adds	r3, #1
 80017f4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f47f af5e 	bne.w	80016c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40010000 	.word	0x40010000
 8001814:	40010800 	.word	0x40010800
 8001818:	40010c00 	.word	0x40010c00
 800181c:	40011000 	.word	0x40011000
 8001820:	40011400 	.word	0x40011400
 8001824:	40010400 	.word	0x40010400

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	611a      	str	r2, [r3, #16]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43d9      	mvns	r1, r3
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	400b      	ands	r3, r1
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800188a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188c:	b08b      	sub	sp, #44	; 0x2c
 800188e:	af06      	add	r7, sp, #24
 8001890:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0fd      	b.n	8001a98 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d106      	bne.n	80018b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f007 fccd 	bl	8009250 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2203      	movs	r2, #3
 80018ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f92c 	bl	8004b20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	687e      	ldr	r6, [r7, #4]
 80018d0:	466d      	mov	r5, sp
 80018d2:	f106 0410 	add.w	r4, r6, #16
 80018d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	602b      	str	r3, [r5, #0]
 80018de:	1d33      	adds	r3, r6, #4
 80018e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e2:	6838      	ldr	r0, [r7, #0]
 80018e4:	f003 f8f6 	bl	8004ad4 <USB_CoreInit>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2202      	movs	r2, #2
 80018f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0ce      	b.n	8001a98 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f003 f927 	bl	8004b54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
 800190a:	e04c      	b.n	80019a6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	3301      	adds	r3, #1
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	b298      	uxth	r0, r3
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	3336      	adds	r3, #54	; 0x36
 800194a:	4602      	mov	r2, r0
 800194c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	3303      	adds	r3, #3
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	3338      	adds	r3, #56	; 0x38
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	333c      	adds	r3, #60	; 0x3c
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	3340      	adds	r3, #64	; 0x40
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	3301      	adds	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d3ad      	bcc.n	800190c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e044      	b.n	8001a40 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	440b      	add	r3, r1
 80019da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	440b      	add	r3, r1
 80019f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	440b      	add	r3, r1
 8001a06:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	7bfa      	ldrb	r2, [r7, #15]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d3b5      	bcc.n	80019b6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	687e      	ldr	r6, [r7, #4]
 8001a52:	466d      	mov	r5, sp
 8001a54:	f106 0410 	add.w	r4, r6, #16
 8001a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	602b      	str	r3, [r5, #0]
 8001a60:	1d33      	adds	r3, r6, #4
 8001a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f003 f881 	bl	8004b6c <USB_DevInit>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e00d      	b.n	8001a98 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f005 fd33 	bl	80074fc <USB_DevDisconnect>

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aa0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_PCD_Start+0x16>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e016      	b.n	8001ae4 <HAL_PCD_Start+0x44>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 f816 	bl	8004af4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ac8:	2101      	movs	r1, #1
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f007 fe33 	bl	8009736 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 fd07 	bl	80074e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f005 fd09 	bl	8007510 <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b08:	d102      	bne.n	8001b10 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fb5f 	bl	80021ce <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f005 fcfb 	bl	8007510 <USB_ReadInterrupts>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b24:	d112      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b38:	b292      	uxth	r2, r2
 8001b3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f007 fc01 	bl	8009346 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b44:	2100      	movs	r1, #0
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f923 	bl	8001d92 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f005 fcdd 	bl	8007510 <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b60:	d10b      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b74:	b292      	uxth	r2, r2
 8001b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 fcc6 	bl	8007510 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f005 fcaf 	bl	8007510 <USB_ReadInterrupts>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bbc:	d126      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0204 	bic.w	r2, r2, #4
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0208 	bic.w	r2, r2, #8
 8001be8:	b292      	uxth	r2, r2
 8001bea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f007 fbe2 	bl	80093b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c06:	b292      	uxth	r2, r2
 8001c08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f005 fc7d 	bl	8007510 <USB_ReadInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c20:	f040 8082 	bne.w	8001d28 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	77fb      	strb	r3, [r7, #31]
 8001c28:	e010      	b.n	8001c4c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	7ffb      	ldrb	r3, [r7, #31]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	441a      	add	r2, r3
 8001c36:	7ffb      	ldrb	r3, [r7, #31]
 8001c38:	8812      	ldrh	r2, [r2, #0]
 8001c3a:	b292      	uxth	r2, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	3320      	adds	r3, #32
 8001c40:	443b      	add	r3, r7
 8001c42:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001c46:	7ffb      	ldrb	r3, [r7, #31]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	77fb      	strb	r3, [r7, #31]
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
 8001c4e:	2b07      	cmp	r3, #7
 8001c50:	d9eb      	bls.n	8001c2a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	b292      	uxth	r2, r2
 8001c66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0201 	bic.w	r2, r2, #1
 8001c7c:	b292      	uxth	r2, r2
 8001c7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001c82:	bf00      	nop
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f6      	beq.n	8001c84 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	77fb      	strb	r3, [r7, #31]
 8001cb2:	e00f      	b.n	8001cd4 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	7ffa      	ldrb	r2, [r7, #31]
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	440a      	add	r2, r1
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	3320      	adds	r3, #32
 8001cc6:	443b      	add	r3, r7
 8001cc8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001ccc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	77fb      	strb	r3, [r7, #31]
 8001cd4:	7ffb      	ldrb	r3, [r7, #31]
 8001cd6:	2b07      	cmp	r3, #7
 8001cd8:	d9ec      	bls.n	8001cb4 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0208 	orr.w	r2, r2, #8
 8001cec:	b292      	uxth	r2, r2
 8001cee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d04:	b292      	uxth	r2, r2
 8001d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0204 	orr.w	r2, r2, #4
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f007 fb2e 	bl	8009384 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f005 fbef 	bl	8007510 <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3c:	d10e      	bne.n	8001d5c <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d50:	b292      	uxth	r2, r2
 8001d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f007 fae7 	bl	800932a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f005 fbd5 	bl	8007510 <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d70:	d10b      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d84:	b292      	uxth	r2, r2
 8001d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3720      	adds	r7, #32
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_PCD_SetAddress+0x1a>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e013      	b.n	8001dd4 <HAL_PCD_SetAddress+0x42>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f005 fb7c 	bl	80074c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	70fb      	strb	r3, [r7, #3]
 8001dee:	460b      	mov	r3, r1
 8001df0:	803b      	strh	r3, [r7, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da0e      	bge.n	8001e20 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	705a      	strb	r2, [r3, #1]
 8001e1e:	e00e      	b.n	8001e3e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 0207 	and.w	r2, r3, #7
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e4a:	883a      	ldrh	r2, [r7, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	78ba      	ldrb	r2, [r7, #2]
 8001e54:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e68:	78bb      	ldrb	r3, [r7, #2]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d102      	bne.n	8001e74 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_PCD_EP_Open+0xa6>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e00e      	b.n	8001ea0 <HAL_PCD_EP_Open+0xc4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68f9      	ldr	r1, [r7, #12]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 fe8b 	bl	8004bac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0e      	bge.n	8001eda <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	705a      	strb	r2, [r3, #1]
 8001ed8:	e00e      	b.n	8001ef8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 0207 	and.w	r2, r3, #7
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_EP_Close+0x6a>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e00e      	b.n	8001f30 <HAL_PCD_EP_Close+0x88>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68f9      	ldr	r1, [r7, #12]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 f9ad 	bl	8005280 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	460b      	mov	r3, r1
 8001f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	7afb      	ldrb	r3, [r7, #11]
 8001f4a:	f003 0207 	and.w	r2, r3, #7
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6979      	ldr	r1, [r7, #20]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 fb5f 	bl	8005658 <USB_EPStartXfer>
 8001f9a:	e005      	b.n	8001fa8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6979      	ldr	r1, [r7, #20]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fb58 	bl	8005658 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	f003 0207 	and.w	r2, r3, #7
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001fd4:	681b      	ldr	r3, [r3, #0]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2201      	movs	r2, #1
 800202a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	b2da      	uxtb	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6979      	ldr	r1, [r7, #20]
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fb05 	bl	8005658 <USB_EPStartXfer>
 800204e:	e005      	b.n	800205c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6979      	ldr	r1, [r7, #20]
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fafe 	bl	8005658 <USB_EPStartXfer>
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 0207 	and.w	r2, r3, #7
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d901      	bls.n	8002084 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e04c      	b.n	800211e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b00      	cmp	r3, #0
 800208a:	da0e      	bge.n	80020aa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	705a      	strb	r2, [r3, #1]
 80020a8:	e00c      	b.n	80020c4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_PCD_EP_SetStall+0x7e>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e01c      	b.n	800211e <HAL_PCD_EP_SetStall+0xb8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f005 f8e8 	bl	80072c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f005 fa0d 	bl	800752e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 020f 	and.w	r2, r3, #15
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d901      	bls.n	8002144 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e040      	b.n	80021c6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002148:	2b00      	cmp	r3, #0
 800214a:	da0e      	bge.n	800216a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	705a      	strb	r2, [r3, #1]
 8002168:	e00e      	b.n	8002188 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0207 	and.w	r2, r3, #7
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_PCD_EP_ClrStall+0x82>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e00e      	b.n	80021c6 <HAL_PCD_EP_ClrStall+0xa0>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68f9      	ldr	r1, [r7, #12]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f005 f8d6 	bl	8007368 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b08e      	sub	sp, #56	; 0x38
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021d6:	e2ec      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80021ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8161 	bne.w	80024ba <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d152      	bne.n	80022a8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	81fb      	strh	r3, [r7, #14]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	89fb      	ldrh	r3, [r7, #14]
 800221a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002222:	b29b      	uxth	r3, r3
 8002224:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3328      	adds	r3, #40	; 0x28
 800222a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	3302      	adds	r3, #2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	441a      	add	r2, r3
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002266:	2100      	movs	r1, #0
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f007 f844 	bl	80092f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 829b 	beq.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 8296 	bne.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002292:	b2da      	uxtb	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b292      	uxth	r2, r2
 800229a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022a6:	e284      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d034      	beq.n	800232c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	3306      	adds	r3, #6
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002300:	b29b      	uxth	r3, r3
 8002302:	f005 f964 	bl	80075ce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	b29a      	uxth	r2, r3
 800230e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002312:	4013      	ands	r3, r2
 8002314:	823b      	strh	r3, [r7, #16]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	8a3a      	ldrh	r2, [r7, #16]
 800231c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002320:	b292      	uxth	r2, r2
 8002322:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f006 ffb9 	bl	800929c <HAL_PCD_SetupStageCallback>
 800232a:	e242      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800232c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002330:	2b00      	cmp	r3, #0
 8002332:	f280 823e 	bge.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b29a      	uxth	r2, r3
 800233e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002342:	4013      	ands	r3, r2
 8002344:	83bb      	strh	r3, [r7, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	8bba      	ldrh	r2, [r7, #28]
 800234c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002350:	b292      	uxth	r2, r2
 8002352:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	3306      	adds	r3, #6
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d019      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1ee>
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	6959      	ldr	r1, [r3, #20]
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f005 f914 	bl	80075ce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	441a      	add	r2, r3
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023b4:	2100      	movs	r1, #0
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f006 ff82 	bl	80092c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 81f2 	bne.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	4413      	add	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d112      	bne.n	800241c <PCD_EP_ISR_Handler+0x24e>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002400:	b29a      	uxth	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002414:	b29a      	uxth	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	801a      	strh	r2, [r3, #0]
 800241a:	e02f      	b.n	800247c <PCD_EP_ISR_Handler+0x2ae>
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b3e      	cmp	r3, #62	; 0x3e
 8002422:	d813      	bhi.n	800244c <PCD_EP_ISR_Handler+0x27e>
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <PCD_EP_ISR_Handler+0x270>
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	3301      	adds	r3, #1
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	b29b      	uxth	r3, r3
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	b29a      	uxth	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e017      	b.n	800247c <PCD_EP_ISR_Handler+0x2ae>
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <PCD_EP_ISR_Handler+0x298>
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	3b01      	subs	r3, #1
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	b29b      	uxth	r3, r3
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	b29b      	uxth	r3, r3
 800246e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002476:	b29a      	uxth	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248c:	827b      	strh	r3, [r7, #18]
 800248e:	8a7b      	ldrh	r3, [r7, #18]
 8002490:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002494:	827b      	strh	r3, [r7, #18]
 8002496:	8a7b      	ldrh	r3, [r7, #18]
 8002498:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800249c:	827b      	strh	r3, [r7, #18]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	8a7b      	ldrh	r3, [r7, #18]
 80024a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	8013      	strh	r3, [r2, #0]
 80024b8:	e17b      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f280 80ea 	bge.w	80026aa <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024ec:	4013      	ands	r3, r2
 80024ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002504:	b292      	uxth	r2, r2
 8002506:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002508:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	7b1b      	ldrb	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d122      	bne.n	800256c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	3306      	adds	r3, #6
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002550:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8087 	beq.w	8002666 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	6959      	ldr	r1, [r3, #20]
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	88da      	ldrh	r2, [r3, #6]
 8002564:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002566:	f005 f832 	bl	80075ce <USB_ReadPMA>
 800256a:	e07c      	b.n	8002666 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	78db      	ldrb	r3, [r3, #3]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d108      	bne.n	8002586 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002574:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002576:	461a      	mov	r2, r3
 8002578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f927 	bl	80027ce <HAL_PCD_EP_DB_Receive>
 8002580:	4603      	mov	r3, r0
 8002582:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002584:	e06f      	b.n	8002666 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800259c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a0:	847b      	strh	r3, [r7, #34]	; 0x22
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	441a      	add	r2, r3
 80025b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d021      	beq.n	8002624 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	3302      	adds	r3, #2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002608:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800260a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800260c:	2b00      	cmp	r3, #0
 800260e:	d02a      	beq.n	8002666 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	6959      	ldr	r1, [r3, #20]
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	891a      	ldrh	r2, [r3, #8]
 800261c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800261e:	f004 ffd6 	bl	80075ce <USB_ReadPMA>
 8002622:	e020      	b.n	8002666 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262c:	b29b      	uxth	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	3306      	adds	r3, #6
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800264e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	6959      	ldr	r1, [r3, #20]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	895a      	ldrh	r2, [r3, #10]
 8002660:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002662:	f004 ffb4 	bl	80075ce <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800266c:	441a      	add	r2, r3
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002678:	441a      	add	r2, r3
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <PCD_EP_ISR_Handler+0x4c2>
 8002686:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d206      	bcs.n	800269e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f006 fe12 	bl	80092c0 <HAL_PCD_DataOutStageCallback>
 800269c:	e005      	b.n	80026aa <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 ffd7 	bl	8005658 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d07e      	beq.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80026b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e2:	843b      	strh	r3, [r7, #32]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	441a      	add	r2, r3
 80026f2:	8c3b      	ldrh	r3, [r7, #32]
 80026f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	78db      	ldrb	r3, [r3, #3]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d00c      	beq.n	8002722 <PCD_EP_ISR_Handler+0x554>
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	78db      	ldrb	r3, [r3, #3]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002714:	2b02      	cmp	r3, #2
 8002716:	d146      	bne.n	80027a6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002718:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d141      	bne.n	80027a6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	3302      	adds	r3, #2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	8bfb      	ldrh	r3, [r7, #30]
 8002752:	429a      	cmp	r2, r3
 8002754:	d906      	bls.n	8002764 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	8bfb      	ldrh	r3, [r7, #30]
 800275c:	1ad2      	subs	r2, r2, r3
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	619a      	str	r2, [r3, #24]
 8002762:	e002      	b.n	800276a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f006 fdbc 	bl	80092f6 <HAL_PCD_DataInStageCallback>
 800277e:	e018      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	8bfb      	ldrh	r3, [r7, #30]
 8002786:	441a      	add	r2, r3
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	8bfb      	ldrh	r3, [r7, #30]
 8002792:	441a      	add	r2, r3
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 ff5a 	bl	8005658 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80027a4:	e005      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80027a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027a8:	461a      	mov	r2, r3
 80027aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f91b 	bl	80029e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	b21b      	sxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f6ff ad0a 	blt.w	80021d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3738      	adds	r7, #56	; 0x38
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b088      	sub	sp, #32
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	4613      	mov	r3, r2
 80027da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d07e      	beq.n	80028e4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	3302      	adds	r3, #2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	8b7b      	ldrh	r3, [r7, #26]
 8002816:	429a      	cmp	r2, r3
 8002818:	d306      	bcc.n	8002828 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	8b7b      	ldrh	r3, [r7, #26]
 8002820:	1ad2      	subs	r2, r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	619a      	str	r2, [r3, #24]
 8002826:	e002      	b.n	800282e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d123      	bne.n	800287e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	833b      	strh	r3, [r7, #24]
 8002852:	8b3b      	ldrh	r3, [r7, #24]
 8002854:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002858:	833b      	strh	r3, [r7, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	441a      	add	r2, r3
 8002868:	8b3b      	ldrh	r3, [r7, #24]
 800286a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800286e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287a:	b29b      	uxth	r3, r3
 800287c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01f      	beq.n	80028c8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a2:	82fb      	strh	r3, [r7, #22]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	8afb      	ldrh	r3, [r7, #22]
 80028b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028c8:	8b7b      	ldrh	r3, [r7, #26]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8087 	beq.w	80029de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6959      	ldr	r1, [r3, #20]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	891a      	ldrh	r2, [r3, #8]
 80028dc:	8b7b      	ldrh	r3, [r7, #26]
 80028de:	f004 fe76 	bl	80075ce <USB_ReadPMA>
 80028e2:	e07c      	b.n	80029de <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	3306      	adds	r3, #6
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	8b7b      	ldrh	r3, [r7, #26]
 8002914:	429a      	cmp	r2, r3
 8002916:	d306      	bcc.n	8002926 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	8b7b      	ldrh	r3, [r7, #26]
 800291e:	1ad2      	subs	r2, r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	619a      	str	r2, [r3, #24]
 8002924:	e002      	b.n	800292c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d123      	bne.n	800297c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	83fb      	strh	r3, [r7, #30]
 8002950:	8bfb      	ldrh	r3, [r7, #30]
 8002952:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002956:	83fb      	strh	r3, [r7, #30]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	8bfb      	ldrh	r3, [r7, #30]
 8002968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800296c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002978:	b29b      	uxth	r3, r3
 800297a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11f      	bne.n	80029c6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a0:	83bb      	strh	r3, [r7, #28]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	441a      	add	r2, r3
 80029b0:	8bbb      	ldrh	r3, [r7, #28]
 80029b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029c6:	8b7b      	ldrh	r3, [r7, #26]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	6959      	ldr	r1, [r3, #20]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	895a      	ldrh	r2, [r3, #10]
 80029d8:	8b7b      	ldrh	r3, [r7, #26]
 80029da:	f004 fdf8 	bl	80075ce <USB_ReadPMA>
    }
  }

  return count;
 80029de:	8b7b      	ldrh	r3, [r7, #26]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b0a2      	sub	sp, #136	; 0x88
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 81c7 	beq.w	8002d90 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	3302      	adds	r3, #2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d907      	bls.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a42:	1ad2      	subs	r2, r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	619a      	str	r2, [r3, #24]
 8002a48:	e002      	b.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 80b9 	bne.w	8002bcc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d126      	bne.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	4413      	add	r3, r2
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	011a      	lsls	r2, r3, #4
 8002a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a82:	4413      	add	r3, r2
 8002a84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	801a      	strh	r2, [r3, #0]
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	801a      	strh	r2, [r3, #0]
 8002aae:	e01a      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	785b      	ldrb	r3, [r3, #1]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d116      	bne.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	633b      	str	r3, [r7, #48]	; 0x30
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	4413      	add	r3, r2
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	011a      	lsls	r2, r3, #4
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	4413      	add	r3, r2
 8002ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	785b      	ldrb	r3, [r3, #1]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d126      	bne.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4413      	add	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	011a      	lsls	r2, r3, #4
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4413      	add	r3, r2
 8002b16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e017      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	785b      	ldrb	r3, [r3, #1]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d113      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	4413      	add	r3, r2
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	011a      	lsls	r2, r3, #4
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	4413      	add	r3, r2
 8002b66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f006 fbbc 	bl	80092f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 82d4 	beq.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba4:	827b      	strh	r3, [r7, #18]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	441a      	add	r2, r3
 8002bb4:	8a7b      	ldrh	r3, [r7, #18]
 8002bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	8013      	strh	r3, [r2, #0]
 8002bca:	e2b2      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d021      	beq.n	8002c1a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	441a      	add	r2, r3
 8002c02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	f040 8286 	bne.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c2e:	441a      	add	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3c:	441a      	add	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d309      	bcc.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6a1a      	ldr	r2, [r3, #32]
 8002c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5a:	1ad2      	subs	r2, r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	621a      	str	r2, [r3, #32]
 8002c60:	e015      	b.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d107      	bne.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c78:	e009      	b.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	785b      	ldrb	r3, [r3, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d155      	bne.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002caa:	4413      	add	r3, r2
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	011a      	lsls	r2, r3, #4
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d112      	bne.n	8002cea <HAL_PCD_EP_DB_Transmit+0x302>
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	801a      	strh	r2, [r3, #0]
 8002ce8:	e047      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cec:	2b3e      	cmp	r3, #62	; 0x3e
 8002cee:	d811      	bhi.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d02:	3301      	adds	r3, #1
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	029b      	lsls	r3, r3, #10
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	801a      	strh	r2, [r3, #0]
 8002d12:	e032      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <HAL_PCD_EP_DB_Transmit+0x342>
 8002d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d26:	3b01      	subs	r3, #1
 8002d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	029b      	lsls	r3, r3, #10
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	e01b      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	785b      	ldrb	r3, [r3, #1]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d117      	bne.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5e:	4413      	add	r3, r2
 8002d60:	643b      	str	r3, [r7, #64]	; 0x40
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	011a      	lsls	r2, r3, #4
 8002d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d78:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6959      	ldr	r1, [r3, #20]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	891a      	ldrh	r2, [r3, #8]
 8002d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f004 fbdb 	bl	8007544 <USB_WritePMA>
 8002d8e:	e1d0      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	3306      	adds	r3, #6
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d307      	bcc.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dd0:	1ad2      	subs	r2, r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	619a      	str	r2, [r3, #24]
 8002dd6:	e002      	b.n	8002dde <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 80c4 	bne.w	8002f70 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d126      	bne.n	8002e3e <HAL_PCD_EP_DB_Transmit+0x456>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	4413      	add	r3, r2
 8002e06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	011a      	lsls	r2, r3, #4
 8002e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e10:	4413      	add	r3, r2
 8002e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e26:	801a      	strh	r2, [r3, #0]
 8002e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e3a:	801a      	strh	r2, [r3, #0]
 8002e3c:	e01a      	b.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d116      	bne.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	677b      	str	r3, [r7, #116]	; 0x74
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e5a:	4413      	add	r3, r2
 8002e5c:	677b      	str	r3, [r7, #116]	; 0x74
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	011a      	lsls	r2, r3, #4
 8002e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e66:	4413      	add	r3, r2
 8002e68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e6c:	673b      	str	r3, [r7, #112]	; 0x70
 8002e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e70:	2200      	movs	r2, #0
 8002e72:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	785b      	ldrb	r3, [r3, #1]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d12f      	bne.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	011a      	lsls	r2, r3, #4
 8002ea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eaa:	4413      	add	r3, r2
 8002eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ec6:	801a      	strh	r2, [r3, #0]
 8002ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ede:	801a      	strh	r2, [r3, #0]
 8002ee0:	e017      	b.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d113      	bne.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef8:	4413      	add	r3, r2
 8002efa:	67bb      	str	r3, [r7, #120]	; 0x78
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	011a      	lsls	r2, r3, #4
 8002f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f04:	4413      	add	r3, r2
 8002f06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f0e:	2200      	movs	r2, #0
 8002f10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	4619      	mov	r1, r3
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f006 f9ec 	bl	80092f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 8104 	bne.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	8013      	strh	r3, [r2, #0]
 8002f6e:	e0e0      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d121      	bne.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	f040 80b4 	bne.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fe0:	441a      	add	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d309      	bcc.n	8003006 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
 8002ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffe:	1ad2      	subs	r2, r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	621a      	str	r2, [r3, #32]
 8003004:	e015      	b.n	8003032 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800300e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003012:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800301c:	e009      	b.n	8003032 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2200      	movs	r2, #0
 8003028:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	667b      	str	r3, [r7, #100]	; 0x64
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d155      	bne.n	80030ec <HAL_PCD_EP_DB_Transmit+0x704>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003054:	4413      	add	r3, r2
 8003056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	011a      	lsls	r2, r3, #4
 800305e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003060:	4413      	add	r3, r2
 8003062:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003066:	65bb      	str	r3, [r7, #88]	; 0x58
 8003068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306a:	2b00      	cmp	r3, #0
 800306c:	d112      	bne.n	8003094 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800306e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003078:	b29a      	uxth	r2, r3
 800307a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308c:	b29a      	uxth	r2, r3
 800308e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	e044      	b.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 8003094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003096:	2b3e      	cmp	r3, #62	; 0x3e
 8003098:	d811      	bhi.n	80030be <HAL_PCD_EP_DB_Transmit+0x6d6>
 800309a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	657b      	str	r3, [r7, #84]	; 0x54
 80030a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80030aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ac:	3301      	adds	r3, #1
 80030ae:	657b      	str	r3, [r7, #84]	; 0x54
 80030b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	029b      	lsls	r3, r3, #10
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e02f      	b.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 80030be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	657b      	str	r3, [r7, #84]	; 0x54
 80030c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80030ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d0:	3b01      	subs	r3, #1
 80030d2:	657b      	str	r3, [r7, #84]	; 0x54
 80030d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	029b      	lsls	r3, r3, #10
 80030da:	b29b      	uxth	r3, r3
 80030dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e8:	801a      	strh	r2, [r3, #0]
 80030ea:	e018      	b.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	785b      	ldrb	r3, [r3, #1]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d114      	bne.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003102:	4413      	add	r3, r2
 8003104:	667b      	str	r3, [r7, #100]	; 0x64
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	011a      	lsls	r2, r3, #4
 800310c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800310e:	4413      	add	r3, r2
 8003110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003114:	663b      	str	r3, [r7, #96]	; 0x60
 8003116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003118:	b29a      	uxth	r2, r3
 800311a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800311c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6959      	ldr	r1, [r3, #20]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	895a      	ldrh	r2, [r3, #10]
 800312a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312c:	b29b      	uxth	r3, r3
 800312e:	f004 fa09 	bl	8007544 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314c:	823b      	strh	r3, [r7, #16]
 800314e:	8a3b      	ldrh	r3, [r7, #16]
 8003150:	f083 0310 	eor.w	r3, r3, #16
 8003154:	823b      	strh	r3, [r7, #16]
 8003156:	8a3b      	ldrh	r3, [r7, #16]
 8003158:	f083 0320 	eor.w	r3, r3, #32
 800315c:	823b      	strh	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	441a      	add	r2, r3
 800316c:	8a3b      	ldrh	r3, [r7, #16]
 800316e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800317e:	b29b      	uxth	r3, r3
 8003180:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3788      	adds	r7, #136	; 0x88
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	817b      	strh	r3, [r7, #10]
 800319a:	4613      	mov	r3, r2
 800319c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800319e:	897b      	ldrh	r3, [r7, #10]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	e009      	b.n	80031d6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031c2:	897a      	ldrh	r2, [r7, #10]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031d6:	893b      	ldrh	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d107      	bne.n	80031ec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	80da      	strh	r2, [r3, #6]
 80031ea:	e00b      	b.n	8003204 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2201      	movs	r2, #1
 80031f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	0c1b      	lsrs	r3, r3, #16
 80031fe:	b29a      	uxth	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]
}
 800321a:	bf00      	nop
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	420e0020 	.word	0x420e0020

08003228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e272      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8087 	beq.w	8003356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003248:	4b92      	ldr	r3, [pc, #584]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b04      	cmp	r3, #4
 8003252:	d00c      	beq.n	800326e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003254:	4b8f      	ldr	r3, [pc, #572]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d112      	bne.n	8003286 <HAL_RCC_OscConfig+0x5e>
 8003260:	4b8c      	ldr	r3, [pc, #560]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d10b      	bne.n	8003286 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326e:	4b89      	ldr	r3, [pc, #548]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d06c      	beq.n	8003354 <HAL_RCC_OscConfig+0x12c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d168      	bne.n	8003354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e24c      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x76>
 8003290:	4b80      	ldr	r3, [pc, #512]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a7f      	ldr	r2, [pc, #508]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e02e      	b.n	80032fc <HAL_RCC_OscConfig+0xd4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x98>
 80032a6:	4b7b      	ldr	r3, [pc, #492]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a7a      	ldr	r2, [pc, #488]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b78      	ldr	r3, [pc, #480]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a77      	ldr	r2, [pc, #476]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e01d      	b.n	80032fc <HAL_RCC_OscConfig+0xd4>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0xbc>
 80032ca:	4b72      	ldr	r3, [pc, #456]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a71      	ldr	r2, [pc, #452]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4b6f      	ldr	r3, [pc, #444]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6e      	ldr	r2, [pc, #440]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0xd4>
 80032e4:	4b6b      	ldr	r3, [pc, #428]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a6a      	ldr	r2, [pc, #424]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b68      	ldr	r3, [pc, #416]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a67      	ldr	r2, [pc, #412]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fd fbe8 	bl	8000ad8 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800330c:	f7fd fbe4 	bl	8000ad8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e200      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0xe4>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fd fbd4 	bl	8000ad8 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7fd fbd0 	bl	8000ad8 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	; 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e1ec      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003346:	4b53      	ldr	r3, [pc, #332]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x10c>
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d063      	beq.n	800342a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003362:	4b4c      	ldr	r3, [pc, #304]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800336e:	4b49      	ldr	r3, [pc, #292]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b08      	cmp	r3, #8
 8003378:	d11c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x18c>
 800337a:	4b46      	ldr	r3, [pc, #280]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	4b43      	ldr	r3, [pc, #268]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_RCC_OscConfig+0x176>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e1c0      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339e:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4939      	ldr	r1, [pc, #228]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b2:	e03a      	b.n	800342a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d020      	beq.n	80033fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033bc:	4b36      	ldr	r3, [pc, #216]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fd fb89 	bl	8000ad8 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ca:	f7fd fb85 	bl	8000ad8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e1a1      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033dc:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e8:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4927      	ldr	r1, [pc, #156]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]
 80033fc:	e015      	b.n	800342a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fe:	4b26      	ldr	r3, [pc, #152]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd fb68 	bl	8000ad8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340c:	f7fd fb64 	bl	8000ad8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e180      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341e:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d03a      	beq.n	80034ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d019      	beq.n	8003472 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343e:	4b17      	ldr	r3, [pc, #92]	; (800349c <HAL_RCC_OscConfig+0x274>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003444:	f7fd fb48 	bl	8000ad8 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344c:	f7fd fb44 	bl	8000ad8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e160      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345e:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <HAL_RCC_OscConfig+0x26c>)
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800346a:	2001      	movs	r0, #1
 800346c:	f000 fad8 	bl	8003a20 <RCC_Delay>
 8003470:	e01c      	b.n	80034ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_RCC_OscConfig+0x274>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fd fb2e 	bl	8000ad8 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347e:	e00f      	b.n	80034a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003480:	f7fd fb2a 	bl	8000ad8 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d908      	bls.n	80034a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e146      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	42420000 	.word	0x42420000
 800349c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a0:	4b92      	ldr	r3, [pc, #584]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e9      	bne.n	8003480 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80a6 	beq.w	8003606 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ba:	2300      	movs	r3, #0
 80034bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034be:	4b8b      	ldr	r3, [pc, #556]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10d      	bne.n	80034e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ca:	4b88      	ldr	r3, [pc, #544]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4a87      	ldr	r2, [pc, #540]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d4:	61d3      	str	r3, [r2, #28]
 80034d6:	4b85      	ldr	r3, [pc, #532]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e6:	4b82      	ldr	r3, [pc, #520]	; (80036f0 <HAL_RCC_OscConfig+0x4c8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d118      	bne.n	8003524 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f2:	4b7f      	ldr	r3, [pc, #508]	; (80036f0 <HAL_RCC_OscConfig+0x4c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a7e      	ldr	r2, [pc, #504]	; (80036f0 <HAL_RCC_OscConfig+0x4c8>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fe:	f7fd faeb 	bl	8000ad8 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003506:	f7fd fae7 	bl	8000ad8 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b64      	cmp	r3, #100	; 0x64
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e103      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003518:	4b75      	ldr	r3, [pc, #468]	; (80036f0 <HAL_RCC_OscConfig+0x4c8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x312>
 800352c:	4b6f      	ldr	r3, [pc, #444]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4a6e      	ldr	r2, [pc, #440]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6213      	str	r3, [r2, #32]
 8003538:	e02d      	b.n	8003596 <HAL_RCC_OscConfig+0x36e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x334>
 8003542:	4b6a      	ldr	r3, [pc, #424]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4a69      	ldr	r2, [pc, #420]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	6213      	str	r3, [r2, #32]
 800354e:	4b67      	ldr	r3, [pc, #412]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a66      	ldr	r2, [pc, #408]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	6213      	str	r3, [r2, #32]
 800355a:	e01c      	b.n	8003596 <HAL_RCC_OscConfig+0x36e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b05      	cmp	r3, #5
 8003562:	d10c      	bne.n	800357e <HAL_RCC_OscConfig+0x356>
 8003564:	4b61      	ldr	r3, [pc, #388]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	4a60      	ldr	r2, [pc, #384]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 800356a:	f043 0304 	orr.w	r3, r3, #4
 800356e:	6213      	str	r3, [r2, #32]
 8003570:	4b5e      	ldr	r3, [pc, #376]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a5d      	ldr	r2, [pc, #372]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6213      	str	r3, [r2, #32]
 800357c:	e00b      	b.n	8003596 <HAL_RCC_OscConfig+0x36e>
 800357e:	4b5b      	ldr	r3, [pc, #364]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4a5a      	ldr	r2, [pc, #360]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	6213      	str	r3, [r2, #32]
 800358a:	4b58      	ldr	r3, [pc, #352]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a57      	ldr	r2, [pc, #348]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003590:	f023 0304 	bic.w	r3, r3, #4
 8003594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d015      	beq.n	80035ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359e:	f7fd fa9b 	bl	8000ad8 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a6:	f7fd fa97 	bl	8000ad8 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e0b1      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035bc:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0ee      	beq.n	80035a6 <HAL_RCC_OscConfig+0x37e>
 80035c8:	e014      	b.n	80035f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ca:	f7fd fa85 	bl	8000ad8 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7fd fa81 	bl	8000ad8 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e09b      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e8:	4b40      	ldr	r3, [pc, #256]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1ee      	bne.n	80035d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d105      	bne.n	8003606 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fa:	4b3c      	ldr	r3, [pc, #240]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	4a3b      	ldr	r2, [pc, #236]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003604:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8087 	beq.w	800371e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003610:	4b36      	ldr	r3, [pc, #216]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b08      	cmp	r3, #8
 800361a:	d061      	beq.n	80036e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d146      	bne.n	80036b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003624:	4b33      	ldr	r3, [pc, #204]	; (80036f4 <HAL_RCC_OscConfig+0x4cc>)
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362a:	f7fd fa55 	bl	8000ad8 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003632:	f7fd fa51 	bl	8000ad8 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e06d      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003644:	4b29      	ldr	r3, [pc, #164]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d108      	bne.n	800366c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800365a:	4b24      	ldr	r3, [pc, #144]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	4921      	ldr	r1, [pc, #132]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800366c:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a19      	ldr	r1, [r3, #32]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	430b      	orrs	r3, r1
 800367e:	491b      	ldr	r1, [pc, #108]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_RCC_OscConfig+0x4cc>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368a:	f7fd fa25 	bl	8000ad8 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003692:	f7fd fa21 	bl	8000ad8 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e03d      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x46a>
 80036b0:	e035      	b.n	800371e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <HAL_RCC_OscConfig+0x4cc>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fd fa0e 	bl	8000ad8 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fd fa0a 	bl	8000ad8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e026      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x498>
 80036de:	e01e      	b.n	800371e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e019      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40007000 	.word	0x40007000
 80036f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_OscConfig+0x500>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	429a      	cmp	r2, r3
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d001      	beq.n	800371e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000

0800372c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0d0      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003740:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <HAL_RCC_ClockConfig+0x1c0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d910      	bls.n	8003770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b67      	ldr	r3, [pc, #412]	; (80038ec <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 0207 	bic.w	r2, r3, #7
 8003756:	4965      	ldr	r1, [pc, #404]	; (80038ec <HAL_RCC_ClockConfig+0x1c0>)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b63      	ldr	r3, [pc, #396]	; (80038ec <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0b8      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d020      	beq.n	80037be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003788:	4b59      	ldr	r3, [pc, #356]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a58      	ldr	r2, [pc, #352]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003792:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a0:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4a52      	ldr	r2, [pc, #328]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ac:	4b50      	ldr	r3, [pc, #320]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	494d      	ldr	r1, [pc, #308]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d040      	beq.n	800384c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d115      	bne.n	800380a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e07f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ea:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e073      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fa:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e06b      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800380a:	4b39      	ldr	r3, [pc, #228]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f023 0203 	bic.w	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4936      	ldr	r1, [pc, #216]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800381c:	f7fd f95c 	bl	8000ad8 <HAL_GetTick>
 8003820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	e00a      	b.n	800383a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003824:	f7fd f958 	bl	8000ad8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e053      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 020c 	and.w	r2, r3, #12
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	429a      	cmp	r2, r3
 800384a:	d1eb      	bne.n	8003824 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800384c:	4b27      	ldr	r3, [pc, #156]	; (80038ec <HAL_RCC_ClockConfig+0x1c0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d210      	bcs.n	800387c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 0207 	bic.w	r2, r3, #7
 8003862:	4922      	ldr	r1, [pc, #136]	; (80038ec <HAL_RCC_ClockConfig+0x1c0>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b20      	ldr	r3, [pc, #128]	; (80038ec <HAL_RCC_ClockConfig+0x1c0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e032      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003888:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4916      	ldr	r1, [pc, #88]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	490e      	ldr	r1, [pc, #56]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ba:	f000 f821 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80038be:	4602      	mov	r2, r0
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	490a      	ldr	r1, [pc, #40]	; (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80038cc:	5ccb      	ldrb	r3, [r1, r3]
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <HAL_RCC_ClockConfig+0x1cc>)
 80038d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_RCC_ClockConfig+0x1d0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd f8ba 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40022000 	.word	0x40022000
 80038f0:	40021000 	.word	0x40021000
 80038f4:	08009894 	.word	0x08009894
 80038f8:	20000000 	.word	0x20000000
 80038fc:	2000001c 	.word	0x2000001c

08003900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003900:	b490      	push	{r4, r7}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <HAL_RCC_GetSysClockFreq+0xac>)
 8003908:	1d3c      	adds	r4, r7, #4
 800390a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800390c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003910:	f240 2301 	movw	r3, #513	; 0x201
 8003914:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	2300      	movs	r3, #0
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	2300      	movs	r3, #0
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800392a:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b04      	cmp	r3, #4
 8003938:	d002      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x40>
 800393a:	2b08      	cmp	r3, #8
 800393c:	d003      	beq.n	8003946 <HAL_RCC_GetSysClockFreq+0x46>
 800393e:	e02b      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003940:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003942:	623b      	str	r3, [r7, #32]
      break;
 8003944:	e02b      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	0c9b      	lsrs	r3, r3, #18
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	3328      	adds	r3, #40	; 0x28
 8003950:	443b      	add	r3, r7
 8003952:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003956:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d012      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	0c5b      	lsrs	r3, r3, #17
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	3328      	adds	r3, #40	; 0x28
 800396e:	443b      	add	r3, r7
 8003970:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003974:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	4a0e      	ldr	r2, [pc, #56]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800397a:	fb03 f202 	mul.w	r2, r3, r2
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
 8003986:	e004      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800398c:	fb02 f303 	mul.w	r3, r2, r3
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	623b      	str	r3, [r7, #32]
      break;
 8003996:	e002      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800399a:	623b      	str	r3, [r7, #32]
      break;
 800399c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800399e:	6a3b      	ldr	r3, [r7, #32]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3728      	adds	r7, #40	; 0x28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc90      	pop	{r4, r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	0800982c 	.word	0x0800982c
 80039b0:	40021000 	.word	0x40021000
 80039b4:	007a1200 	.word	0x007a1200
 80039b8:	003d0900 	.word	0x003d0900

080039bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c0:	4b02      	ldr	r3, [pc, #8]	; (80039cc <HAL_RCC_GetHCLKFreq+0x10>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	20000000 	.word	0x20000000

080039d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039d4:	f7ff fff2 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40021000 	.word	0x40021000
 80039f4:	080098a4 	.word	0x080098a4

080039f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039fc:	f7ff ffde 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	0adb      	lsrs	r3, r3, #11
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4903      	ldr	r1, [pc, #12]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	080098a4 	.word	0x080098a4

08003a20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <RCC_Delay+0x34>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <RCC_Delay+0x38>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	0a5b      	lsrs	r3, r3, #9
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a3c:	bf00      	nop
  }
  while (Delay --);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1e5a      	subs	r2, r3, #1
 8003a42:	60fa      	str	r2, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f9      	bne.n	8003a3c <RCC_Delay+0x1c>
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	20000000 	.word	0x20000000
 8003a58:	10624dd3 	.word	0x10624dd3

08003a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d07d      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7c:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10d      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a88:	4b4c      	ldr	r3, [pc, #304]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	4a4b      	ldr	r2, [pc, #300]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a92:	61d3      	str	r3, [r2, #28]
 8003a94:	4b49      	ldr	r3, [pc, #292]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	4b46      	ldr	r3, [pc, #280]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d118      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab0:	4b43      	ldr	r3, [pc, #268]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a42      	ldr	r2, [pc, #264]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003abc:	f7fd f80c 	bl	8000ad8 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac4:	f7fd f808 	bl	8000ad8 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e06d      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b3a      	ldr	r3, [pc, #232]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ae2:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d02e      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d027      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b00:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b10:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b16:	4a29      	ldr	r2, [pc, #164]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d014      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fc ffd7 	bl	8000ad8 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2e:	f7fc ffd3 	bl	8000ad8 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e036      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b44:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ee      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4917      	ldr	r1, [pc, #92]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d105      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b68:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b80:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	490b      	ldr	r1, [pc, #44]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b9e:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	4904      	ldr	r1, [pc, #16]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40007000 	.word	0x40007000
 8003bc4:	42420440 	.word	0x42420440

08003bc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b08d      	sub	sp, #52	; 0x34
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bd0:	4b58      	ldr	r3, [pc, #352]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003bd2:	f107 040c 	add.w	r4, r7, #12
 8003bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bdc:	f240 2301 	movw	r3, #513	; 0x201
 8003be0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
 8003be6:	2300      	movs	r3, #0
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bea:	2300      	movs	r3, #0
 8003bec:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	f200 808e 	bhi.w	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d049      	beq.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d079      	beq.n	8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c10:	e086      	b.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003c12:	4b49      	ldr	r3, [pc, #292]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c18:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d07f      	beq.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	0c9b      	lsrs	r3, r3, #18
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	3330      	adds	r3, #48	; 0x30
 8003c2e:	443b      	add	r3, r7
 8003c30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c34:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d017      	beq.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c40:	4b3d      	ldr	r3, [pc, #244]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	0c5b      	lsrs	r3, r3, #17
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	3330      	adds	r3, #48	; 0x30
 8003c4c:	443b      	add	r3, r7
 8003c4e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c5e:	4a37      	ldr	r2, [pc, #220]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6e:	e004      	b.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	4a33      	ldr	r2, [pc, #204]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c7a:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c86:	d102      	bne.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c8c:	e04a      	b.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4a2c      	ldr	r2, [pc, #176]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c9c:	e042      	b.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003c9e:	4b26      	ldr	r3, [pc, #152]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cae:	d108      	bne.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc0:	e01f      	b.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003cda:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ce0:	e00f      	b.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cec:	d11c      	bne.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003cfa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d00:	e012      	b.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003d02:	e011      	b.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d04:	f7ff fe78 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	0b9b      	lsrs	r3, r3, #14
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	3301      	adds	r3, #1
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d1e:	e004      	b.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d20:	bf00      	nop
 8003d22:	e002      	b.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d24:	bf00      	nop
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d28:	bf00      	nop
    }
  }
  return (frequency);
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3734      	adds	r7, #52	; 0x34
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd90      	pop	{r4, r7, pc}
 8003d34:	0800983c 	.word	0x0800983c
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	007a1200 	.word	0x007a1200
 8003d40:	003d0900 	.word	0x003d0900
 8003d44:	aaaaaaab 	.word	0xaaaaaaab

08003d48 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e084      	b.n	8003e68 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	7c5b      	ldrb	r3, [r3, #17]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d105      	bne.n	8003d74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fc fc88 	bl	8000684 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f87a 	bl	8003e74 <HAL_RTC_WaitForSynchro>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2204      	movs	r2, #4
 8003d8a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e06b      	b.n	8003e68 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f89c 	bl	8003ece <RTC_EnterInitMode>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2204      	movs	r2, #4
 8003da0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e060      	b.n	8003e68 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0207 	bic.w	r2, r2, #7
 8003db4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003dbe:	4b2c      	ldr	r3, [pc, #176]	; (8003e70 <HAL_RTC_Init+0x128>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	4a2b      	ldr	r2, [pc, #172]	; (8003e70 <HAL_RTC_Init+0x128>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003dca:	4b29      	ldr	r3, [pc, #164]	; (8003e70 <HAL_RTC_Init+0x128>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	4926      	ldr	r1, [pc, #152]	; (8003e70 <HAL_RTC_Init+0x128>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d003      	beq.n	8003dee <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e00e      	b.n	8003e0c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003dee:	2001      	movs	r0, #1
 8003df0:	f7ff feea 	bl	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003df4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d104      	bne.n	8003e06 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2204      	movs	r2, #4
 8003e00:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e030      	b.n	8003e68 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 010f 	bic.w	r1, r3, #15
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	0c1a      	lsrs	r2, r3, #16
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	b291      	uxth	r1, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f870 	bl	8003f1e <RTC_ExitInitMode>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2204      	movs	r2, #4
 8003e48:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e00c      	b.n	8003e68 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003e66:	2300      	movs	r3, #0
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40006c00 	.word	0x40006c00

08003e74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e01d      	b.n	8003ec6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0208 	bic.w	r2, r2, #8
 8003e98:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003e9a:	f7fc fe1d 	bl	8000ad8 <HAL_GetTick>
 8003e9e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003ea0:	e009      	b.n	8003eb6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ea2:	f7fc fe19 	bl	8000ad8 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e007      	b.n	8003ec6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ee      	beq.n	8003ea2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003eda:	f7fc fdfd 	bl	8000ad8 <HAL_GetTick>
 8003ede:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ee0:	e009      	b.n	8003ef6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ee2:	f7fc fdf9 	bl	8000ad8 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ef0:	d901      	bls.n	8003ef6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e00f      	b.n	8003f16 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ee      	beq.n	8003ee2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0210 	orr.w	r2, r2, #16
 8003f12:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0210 	bic.w	r2, r2, #16
 8003f38:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003f3a:	f7fc fdcd 	bl	8000ad8 <HAL_GetTick>
 8003f3e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f40:	e009      	b.n	8003f56 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003f42:	f7fc fdc9 	bl	8000ad8 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f50:	d901      	bls.n	8003f56 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e007      	b.n	8003f66 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ee      	beq.n	8003f42 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003f80:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <HAL_RTCEx_BKUPWrite+0x30>)
 8003f82:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	b292      	uxth	r2, r2
 8003f94:	601a      	str	r2, [r3, #0]
}
 8003f96:	bf00      	nop
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr
 8003fa0:	40006c00 	.word	0x40006c00

08003fa4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8003fb6:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <HAL_RTCEx_BKUPRead+0x34>)
 8003fb8:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	40006c00 	.word	0x40006c00

08003fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e03f      	b.n	800406e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fc fc24 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2224      	movs	r2, #36	; 0x24
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800401e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fcc9 	bl	80049b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e021      	b.n	80040cc <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	; 0x24
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7fc fc53 	bl	800094c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	4613      	mov	r3, r2
 80040e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	d11d      	bne.n	800412a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_UART_Receive_DMA+0x26>
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e016      	b.n	800412c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_UART_Receive_DMA+0x38>
 8004108:	2302      	movs	r3, #2
 800410a:	e00f      	b.n	800412c <HAL_UART_Receive_DMA+0x58>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	461a      	mov	r2, r3
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fa7f 	bl	8004624 <UART_Start_Receive_DMA>
 8004126:	4603      	mov	r3, r0
 8004128:	e000      	b.n	800412c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800412a:	2302      	movs	r3, #2
  }
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	; 0x28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004154:	2300      	movs	r3, #0
 8004156:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10d      	bne.n	8004186 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_UART_IRQHandler+0x52>
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fb70 	bl	8004864 <UART_Receive_IT>
      return;
 8004184:	e17b      	b.n	800447e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80b1 	beq.w	80042f0 <HAL_UART_IRQHandler+0x1bc>
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <HAL_UART_IRQHandler+0x70>
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80a6 	beq.w	80042f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_UART_IRQHandler+0x90>
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_UART_IRQHandler+0xb0>
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	f043 0202 	orr.w	r2, r3, #2
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_UART_IRQHandler+0xd0>
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f043 0204 	orr.w	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00f      	beq.n	800422e <HAL_UART_IRQHandler+0xfa>
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d104      	bne.n	8004222 <HAL_UART_IRQHandler+0xee>
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f043 0208 	orr.w	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 811e 	beq.w	8004474 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <HAL_UART_IRQHandler+0x11e>
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fb09 	bl	8004864 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <HAL_UART_IRQHandler+0x146>
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d031      	beq.n	80042de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa4b 	bl	8004716 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d023      	beq.n	80042d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d013      	beq.n	80042ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	4a76      	ldr	r2, [pc, #472]	; (8004484 <HAL_UART_IRQHandler+0x350>)
 80042ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc fece 	bl	8001054 <HAL_DMA_Abort_IT>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042c8:	4610      	mov	r0, r2
 80042ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042cc:	e00e      	b.n	80042ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fc faac 	bl	800082c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d4:	e00a      	b.n	80042ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fc faa8 	bl	800082c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	e006      	b.n	80042ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc faa4 	bl	800082c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042ea:	e0c3      	b.n	8004474 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	bf00      	nop
    return;
 80042ee:	e0c1      	b.n	8004474 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 80a1 	bne.w	800443c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 809b 	beq.w	800443c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8095 	beq.w	800443c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04e      	beq.n	80043d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004340:	8a3b      	ldrh	r3, [r7, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8098 	beq.w	8004478 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800434c:	8a3a      	ldrh	r2, [r7, #16]
 800434e:	429a      	cmp	r2, r3
 8004350:	f080 8092 	bcs.w	8004478 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8a3a      	ldrh	r2, [r7, #16]
 8004358:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	2b20      	cmp	r3, #32
 8004362:	d02b      	beq.n	80043bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004372:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0201 	bic.w	r2, r2, #1
 8004382:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004392:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0210 	bic.w	r2, r2, #16
 80043b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fc fe11 	bl	8000fde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f86d 	bl	80044ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043d2:	e051      	b.n	8004478 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043dc:	b29b      	uxth	r3, r3
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d047      	beq.n	800447c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80043ec:	8a7b      	ldrh	r3, [r7, #18]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d044      	beq.n	800447c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004400:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695a      	ldr	r2, [r3, #20]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0210 	bic.w	r2, r2, #16
 800442e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004430:	8a7b      	ldrh	r3, [r7, #18]
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f839 	bl	80044ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800443a:	e01f      	b.n	800447c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_UART_IRQHandler+0x324>
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f9a0 	bl	8004796 <UART_Transmit_IT>
    return;
 8004456:	e012      	b.n	800447e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <HAL_UART_IRQHandler+0x34a>
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f9e1 	bl	8004834 <UART_EndTransmit_IT>
    return;
 8004472:	e004      	b.n	800447e <HAL_UART_IRQHandler+0x34a>
    return;
 8004474:	bf00      	nop
 8004476:	e002      	b.n	800447e <HAL_UART_IRQHandler+0x34a>
      return;
 8004478:	bf00      	nop
 800447a:	e000      	b.n	800447e <HAL_UART_IRQHandler+0x34a>
      return;
 800447c:	bf00      	nop
  }
}
 800447e:	3728      	adds	r7, #40	; 0x28
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	0800476f 	.word	0x0800476f

08004488 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr

080044c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d12a      	bne.n	8004534 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044f2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004512:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	2b01      	cmp	r3, #1
 8004522:	d107      	bne.n	8004534 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0210 	bic.w	r2, r2, #16
 8004532:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	2b01      	cmp	r3, #1
 800453a:	d106      	bne.n	800454a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004540:	4619      	mov	r1, r3
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff ffb2 	bl	80044ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004548:	e002      	b.n	8004550 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7fc f977 	bl	800083e <HAL_UART_RxCpltCallback>
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	2b01      	cmp	r3, #1
 800456c:	d108      	bne.n	8004580 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	b29b      	uxth	r3, r3
 8004576:	4619      	mov	r1, r3
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7ff ff97 	bl	80044ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800457e:	e002      	b.n	8004586 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff ff8a 	bl	800449a <HAL_UART_RxHalfCpltCallback>
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bf14      	ite	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	2300      	moveq	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b21      	cmp	r3, #33	; 0x21
 80045c0:	d108      	bne.n	80045d4 <UART_DMAError+0x46>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2200      	movs	r2, #0
 80045cc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80045ce:	68b8      	ldr	r0, [r7, #8]
 80045d0:	f000 f88c 	bl	80046ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bf14      	ite	ne
 80045e2:	2301      	movne	r3, #1
 80045e4:	2300      	moveq	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b22      	cmp	r3, #34	; 0x22
 80045f4:	d108      	bne.n	8004608 <UART_DMAError+0x7a>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2200      	movs	r2, #0
 8004600:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004602:	68b8      	ldr	r0, [r7, #8]
 8004604:	f000 f887 	bl	8004716 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f043 0210 	orr.w	r2, r3, #16
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004614:	68b8      	ldr	r0, [r7, #8]
 8004616:	f7fc f909 	bl	800082c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	4613      	mov	r3, r2
 8004630:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2222      	movs	r2, #34	; 0x22
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <UART_Start_Receive_DMA+0xbc>)
 8004652:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <UART_Start_Receive_DMA+0xc0>)
 800465a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <UART_Start_Receive_DMA+0xc4>)
 8004662:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	2200      	movs	r2, #0
 800466a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800466c:	f107 0308 	add.w	r3, r7, #8
 8004670:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	f7fc fc4c 	bl	8000f20 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004688:	2300      	movs	r3, #0
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0201 	orr.w	r2, r2, #1
 80046c4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	080044c3 	.word	0x080044c3
 80046e4:	08004559 	.word	0x08004559
 80046e8:	0800458f 	.word	0x0800458f

080046ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004702:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800472c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0201 	bic.w	r2, r2, #1
 800473c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0210 	bic.w	r2, r2, #16
 8004754:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7fc f84f 	bl	800082c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b21      	cmp	r3, #33	; 0x21
 80047a8:	d13e      	bne.n	8004828 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b2:	d114      	bne.n	80047de <UART_Transmit_IT+0x48>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d110      	bne.n	80047de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	1c9a      	adds	r2, r3, #2
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	621a      	str	r2, [r3, #32]
 80047dc:	e008      	b.n	80047f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	1c59      	adds	r1, r3, #1
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6211      	str	r1, [r2, #32]
 80047e8:	781a      	ldrb	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4619      	mov	r1, r3
 80047fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10f      	bne.n	8004824 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004812:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004822:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr

08004834 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800484a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fe17 	bl	8004488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b22      	cmp	r3, #34	; 0x22
 8004876:	f040 8099 	bne.w	80049ac <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004882:	d117      	bne.n	80048b4 <UART_Receive_IT+0x50>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d113      	bne.n	80048b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	1c9a      	adds	r2, r3, #2
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	629a      	str	r2, [r3, #40]	; 0x28
 80048b2:	e026      	b.n	8004902 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c6:	d007      	beq.n	80048d8 <UART_Receive_IT+0x74>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <UART_Receive_IT+0x82>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e008      	b.n	80048f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29b      	uxth	r3, r3
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4619      	mov	r1, r3
 8004910:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004912:	2b00      	cmp	r3, #0
 8004914:	d148      	bne.n	80049a8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0220 	bic.w	r2, r2, #32
 8004924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004934:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	2b01      	cmp	r3, #1
 8004954:	d123      	bne.n	800499e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0210 	bic.w	r2, r2, #16
 800496a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b10      	cmp	r3, #16
 8004978:	d10a      	bne.n	8004990 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fd88 	bl	80044ac <HAL_UARTEx_RxEventCallback>
 800499c:	e002      	b.n	80049a4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fb ff4d 	bl	800083e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e002      	b.n	80049ae <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
  }
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049f2:	f023 030c 	bic.w	r3, r3, #12
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	430b      	orrs	r3, r1
 80049fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <UART_SetConfig+0x114>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d103      	bne.n	8004a28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fe ffea 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	e002      	b.n	8004a2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a28:	f7fe ffd2 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 8004a2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009a      	lsls	r2, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	4a22      	ldr	r2, [pc, #136]	; (8004ad0 <UART_SetConfig+0x118>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	0119      	lsls	r1, r3, #4
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	009a      	lsls	r2, r3, #2
 8004a58:	441a      	add	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a64:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <UART_SetConfig+0x118>)
 8004a66:	fba3 0302 	umull	r0, r3, r3, r2
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	2064      	movs	r0, #100	; 0x64
 8004a6e:	fb00 f303 	mul.w	r3, r0, r3
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	3332      	adds	r3, #50	; 0x32
 8004a78:	4a15      	ldr	r2, [pc, #84]	; (8004ad0 <UART_SetConfig+0x118>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a84:	4419      	add	r1, r3
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009a      	lsls	r2, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <UART_SetConfig+0x118>)
 8004a9e:	fba3 0302 	umull	r0, r3, r3, r2
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2064      	movs	r0, #100	; 0x64
 8004aa6:	fb00 f303 	mul.w	r3, r0, r3
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	3332      	adds	r3, #50	; 0x32
 8004ab0:	4a07      	ldr	r2, [pc, #28]	; (8004ad0 <UART_SetConfig+0x118>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	f003 020f 	and.w	r2, r3, #15
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	440a      	add	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40013800 	.word	0x40013800
 8004ad0:	51eb851f 	.word	0x51eb851f

08004ad4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	f107 0014 	add.w	r0, r7, #20
 8004ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	b004      	add	sp, #16
 8004af2:	4770      	bx	lr

08004af4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b04:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b08:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b28:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	4013      	ands	r3, r2
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	f107 0014 	add.w	r0, r7, #20
 8004b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	b004      	add	sp, #16
 8004baa:	4770      	bx	lr

08004bac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b09b      	sub	sp, #108	; 0x6c
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	78db      	ldrb	r3, [r3, #3]
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d81f      	bhi.n	8004c1e <USB_ActivateEndpoint+0x72>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <USB_ActivateEndpoint+0x38>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004bf5 	.word	0x08004bf5
 8004be8:	08004c11 	.word	0x08004c11
 8004bec:	08004c27 	.word	0x08004c27
 8004bf0:	08004c03 	.word	0x08004c03
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bf4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bfc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c00:	e012      	b.n	8004c28 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c06:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004c0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c0e:	e00b      	b.n	8004c28 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c1c:	e004      	b.n	8004c28 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004c24:	e000      	b.n	8004c28 <USB_ActivateEndpoint+0x7c>
      break;
 8004c26:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	441a      	add	r2, r3
 8004c32:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	7b1b      	ldrb	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f040 8149 	bne.w	8004f2c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	785b      	ldrb	r3, [r3, #1]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8084 	beq.w	8004dac <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	011a      	lsls	r2, r3, #4
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	88db      	ldrh	r3, [r3, #6]
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	81fb      	strh	r3, [r7, #14]
 8004ce6:	89fb      	ldrh	r3, [r7, #14]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01b      	beq.n	8004d28 <USB_ActivateEndpoint+0x17c>
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	81bb      	strh	r3, [r7, #12]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	89bb      	ldrh	r3, [r7, #12]
 8004d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	78db      	ldrb	r3, [r3, #3]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d020      	beq.n	8004d72 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d46:	813b      	strh	r3, [r7, #8]
 8004d48:	893b      	ldrh	r3, [r7, #8]
 8004d4a:	f083 0320 	eor.w	r3, r3, #32
 8004d4e:	813b      	strh	r3, [r7, #8]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	893b      	ldrh	r3, [r7, #8]
 8004d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8013      	strh	r3, [r2, #0]
 8004d70:	e27f      	b.n	8005272 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d88:	817b      	strh	r3, [r7, #10]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	897b      	ldrh	r3, [r7, #10]
 8004d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	8013      	strh	r3, [r2, #0]
 8004daa:	e262      	b.n	8005272 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	4413      	add	r3, r2
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	011a      	lsls	r2, r3, #4
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	88db      	ldrh	r3, [r3, #6]
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	4413      	add	r3, r2
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	011a      	lsls	r2, r3, #4
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e02:	623b      	str	r3, [r7, #32]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d112      	bne.n	8004e32 <USB_ActivateEndpoint+0x286>
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	e02f      	b.n	8004e92 <USB_ActivateEndpoint+0x2e6>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b3e      	cmp	r3, #62	; 0x3e
 8004e38:	d813      	bhi.n	8004e62 <USB_ActivateEndpoint+0x2b6>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	663b      	str	r3, [r7, #96]	; 0x60
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <USB_ActivateEndpoint+0x2a8>
 8004e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e50:	3301      	adds	r3, #1
 8004e52:	663b      	str	r3, [r7, #96]	; 0x60
 8004e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	801a      	strh	r2, [r3, #0]
 8004e60:	e017      	b.n	8004e92 <USB_ActivateEndpoint+0x2e6>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	663b      	str	r3, [r7, #96]	; 0x60
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d102      	bne.n	8004e7c <USB_ActivateEndpoint+0x2d0>
 8004e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	029b      	lsls	r3, r3, #10
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	83fb      	strh	r3, [r7, #30]
 8004ea0:	8bfb      	ldrh	r3, [r7, #30]
 8004ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01b      	beq.n	8004ee2 <USB_ActivateEndpoint+0x336>
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	83bb      	strh	r3, [r7, #28]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	441a      	add	r2, r3
 8004ecc:	8bbb      	ldrh	r3, [r7, #28]
 8004ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef8:	837b      	strh	r3, [r7, #26]
 8004efa:	8b7b      	ldrh	r3, [r7, #26]
 8004efc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f00:	837b      	strh	r3, [r7, #26]
 8004f02:	8b7b      	ldrh	r3, [r7, #26]
 8004f04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f08:	837b      	strh	r3, [r7, #26]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	8b7b      	ldrh	r3, [r7, #26]
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]
 8004f2a:	e1a2      	b.n	8005272 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f78:	4413      	add	r3, r2
 8004f7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	011a      	lsls	r2, r3, #4
 8004f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	891b      	ldrh	r3, [r3, #8]
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fac:	4413      	add	r3, r2
 8004fae:	653b      	str	r3, [r7, #80]	; 0x50
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	011a      	lsls	r2, r3, #4
 8004fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	895b      	ldrh	r3, [r3, #10]
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f040 8091 	bne.w	80050fc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004fe8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01b      	beq.n	800502a <USB_ActivateEndpoint+0x47e>
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005008:	877b      	strh	r3, [r7, #58]	; 0x3a
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005026:	b29b      	uxth	r3, r3
 8005028:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	873b      	strh	r3, [r7, #56]	; 0x38
 8005038:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01b      	beq.n	800507a <USB_ActivateEndpoint+0x4ce>
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	86fb      	strh	r3, [r7, #54]	; 0x36
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	441a      	add	r2, r3
 8005064:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005072:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005076:	b29b      	uxth	r3, r3
 8005078:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800508c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005090:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005092:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005094:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005098:	86bb      	strh	r3, [r7, #52]	; 0x34
 800509a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800509c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	441a      	add	r2, r3
 80050ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050be:	b29b      	uxth	r3, r3
 80050c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d8:	867b      	strh	r3, [r7, #50]	; 0x32
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80050e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8013      	strh	r3, [r2, #0]
 80050fa:	e0ba      	b.n	8005272 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800510c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01d      	beq.n	8005154 <USB_ActivateEndpoint+0x5a8>
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	441a      	add	r2, r3
 800513c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800514c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005150:	b29b      	uxth	r3, r3
 8005152:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005164:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01d      	beq.n	80051ac <USB_ActivateEndpoint+0x600>
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	441a      	add	r2, r3
 8005194:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	78db      	ldrb	r3, [r3, #3]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d024      	beq.n	80051fe <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051d2:	f083 0320 	eor.w	r3, r3, #32
 80051d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	8013      	strh	r3, [r2, #0]
 80051fc:	e01d      	b.n	800523a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005214:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	441a      	add	r2, r3
 8005222:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005236:	b29b      	uxth	r3, r3
 8005238:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29b      	uxth	r3, r3
 8005248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800524c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005250:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	441a      	add	r2, r3
 800525c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800525e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800526a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526e:	b29b      	uxth	r3, r3
 8005270:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005272:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005276:	4618      	mov	r0, r3
 8005278:	376c      	adds	r7, #108	; 0x6c
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005280:	b480      	push	{r7}
 8005282:	b08d      	sub	sp, #52	; 0x34
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	7b1b      	ldrb	r3, [r3, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	f040 808e 	bne.w	80053b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	785b      	ldrb	r3, [r3, #1]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d044      	beq.n	8005326 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	81bb      	strh	r3, [r7, #12]
 80052aa:	89bb      	ldrh	r3, [r7, #12]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01b      	beq.n	80052ec <USB_DeactivateEndpoint+0x6c>
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ca:	817b      	strh	r3, [r7, #10]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	441a      	add	r2, r3
 80052d6:	897b      	ldrh	r3, [r7, #10]
 80052d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005302:	813b      	strh	r3, [r7, #8]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	441a      	add	r2, r3
 800530e:	893b      	ldrh	r3, [r7, #8]
 8005310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005320:	b29b      	uxth	r3, r3
 8005322:	8013      	strh	r3, [r2, #0]
 8005324:	e192      	b.n	800564c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	827b      	strh	r3, [r7, #18]
 8005334:	8a7b      	ldrh	r3, [r7, #18]
 8005336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01b      	beq.n	8005376 <USB_DeactivateEndpoint+0xf6>
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005354:	823b      	strh	r3, [r7, #16]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	441a      	add	r2, r3
 8005360:	8a3b      	ldrh	r3, [r7, #16]
 8005362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800536a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800536e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005372:	b29b      	uxth	r3, r3
 8005374:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538c:	81fb      	strh	r3, [r7, #14]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	441a      	add	r2, r3
 8005398:	89fb      	ldrh	r3, [r7, #14]
 800539a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	8013      	strh	r3, [r2, #0]
 80053ae:	e14d      	b.n	800564c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	785b      	ldrb	r3, [r3, #1]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f040 80a5 	bne.w	8005504 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	843b      	strh	r3, [r7, #32]
 80053c8:	8c3b      	ldrh	r3, [r7, #32]
 80053ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01b      	beq.n	800540a <USB_DeactivateEndpoint+0x18a>
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e8:	83fb      	strh	r3, [r7, #30]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	441a      	add	r2, r3
 80053f4:	8bfb      	ldrh	r3, [r7, #30]
 80053f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005406:	b29b      	uxth	r3, r3
 8005408:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	83bb      	strh	r3, [r7, #28]
 8005418:	8bbb      	ldrh	r3, [r7, #28]
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d01b      	beq.n	800545a <USB_DeactivateEndpoint+0x1da>
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005438:	837b      	strh	r3, [r7, #26]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	441a      	add	r2, r3
 8005444:	8b7b      	ldrh	r3, [r7, #26]
 8005446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005452:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005456:	b29b      	uxth	r3, r3
 8005458:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005470:	833b      	strh	r3, [r7, #24]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	441a      	add	r2, r3
 800547c:	8b3b      	ldrh	r3, [r7, #24]
 800547e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800548e:	b29b      	uxth	r3, r3
 8005490:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a8:	82fb      	strh	r3, [r7, #22]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	441a      	add	r2, r3
 80054b4:	8afb      	ldrh	r3, [r7, #22]
 80054b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e0:	82bb      	strh	r3, [r7, #20]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	441a      	add	r2, r3
 80054ec:	8abb      	ldrh	r3, [r7, #20]
 80054ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054fe:	b29b      	uxth	r3, r3
 8005500:	8013      	strh	r3, [r2, #0]
 8005502:	e0a3      	b.n	800564c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005512:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <USB_DeactivateEndpoint+0x2d4>
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005532:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	b29b      	uxth	r3, r3
 8005552:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005562:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01b      	beq.n	80055a4 <USB_DeactivateEndpoint+0x324>
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	853b      	strh	r3, [r7, #40]	; 0x28
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	441a      	add	r2, r3
 800558e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	441a      	add	r2, r3
 80055c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d8:	b29b      	uxth	r3, r3
 80055da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005610:	b29b      	uxth	r3, r3
 8005612:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	847b      	strh	r3, [r7, #34]	; 0x22
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005648:	b29b      	uxth	r3, r3
 800564a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3734      	adds	r7, #52	; 0x34
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b0cc      	sub	sp, #304	; 0x130
 800565c:	af00      	add	r7, sp, #0
 800565e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005662:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005666:	6018      	str	r0, [r3, #0]
 8005668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005670:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	785b      	ldrb	r3, [r3, #1]
 800567e:	2b01      	cmp	r3, #1
 8005680:	f041 817d 	bne.w	800697e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	429a      	cmp	r2, r3
 800569e:	d908      	bls.n	80056b2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80056a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80056b0:	e007      	b.n	80056c2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80056b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	7b1b      	ldrb	r3, [r3, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d152      	bne.n	8005778 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6959      	ldr	r1, [r3, #20]
 80056de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	88da      	ldrh	r2, [r3, #6]
 80056ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056f8:	6800      	ldr	r0, [r0, #0]
 80056fa:	f001 ff23 	bl	8007544 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005702:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005706:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800570a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005716:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005720:	b29b      	uxth	r3, r3
 8005722:	4619      	mov	r1, r3
 8005724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005728:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800572c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005730:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	440a      	add	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	011a      	lsls	r2, r3, #4
 8005748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4413      	add	r3, r2
 8005754:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005766:	b29a      	uxth	r2, r3
 8005768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	f001 b8b5 	b.w	80068e2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	78db      	ldrb	r3, [r3, #3]
 8005784:	2b02      	cmp	r3, #2
 8005786:	f040 84c6 	bne.w	8006116 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800578a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6a1a      	ldr	r2, [r3, #32]
 8005796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	f240 8443 	bls.w	800602e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80057a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80057d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005800:	b29b      	uxth	r3, r3
 8005802:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6a1a      	ldr	r2, [r3, #32]
 8005810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005814:	1ad2      	subs	r2, r2, r3
 8005816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005826:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 823e 	beq.w	8005cc6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800584a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005852:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005856:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f040 809a 	bne.w	80059a4 <USB_EPStartXfer+0x34c>
 8005870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005878:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800587c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005888:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005892:	b29b      	uxth	r3, r3
 8005894:	4619      	mov	r1, r3
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058a2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	440a      	add	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	011a      	lsls	r2, r3, #4
 80058ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4413      	add	r3, r2
 80058c6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80058ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d122      	bne.n	8005922 <USB_EPStartXfer+0x2ca>
 80058dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005900:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005912:	b29a      	uxth	r2, r3
 8005914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005918:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	e079      	b.n	8005a16 <USB_EPStartXfer+0x3be>
 8005922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005926:	2b3e      	cmp	r3, #62	; 0x3e
 8005928:	d81b      	bhi.n	8005962 <USB_EPStartXfer+0x30a>
 800592a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <USB_EPStartXfer+0x2f2>
 8005940:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005944:	3301      	adds	r3, #1
 8005946:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800594a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800594e:	b29b      	uxth	r3, r3
 8005950:	029b      	lsls	r3, r3, #10
 8005952:	b29a      	uxth	r2, r3
 8005954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	e059      	b.n	8005a16 <USB_EPStartXfer+0x3be>
 8005962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800596c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2b00      	cmp	r3, #0
 8005976:	d104      	bne.n	8005982 <USB_EPStartXfer+0x32a>
 8005978:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800597c:	3b01      	subs	r3, #1
 800597e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005982:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005986:	b29b      	uxth	r3, r3
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	b29b      	uxth	r3, r3
 800598c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005994:	b29a      	uxth	r2, r3
 8005996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	e038      	b.n	8005a16 <USB_EPStartXfer+0x3be>
 80059a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d130      	bne.n	8005a16 <USB_EPStartXfer+0x3be>
 80059b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	4619      	mov	r1, r3
 80059c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80059ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059d2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	440a      	add	r2, r1
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	011a      	lsls	r2, r3, #4
 80059ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4413      	add	r3, r2
 80059f6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80059fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	895b      	ldrh	r3, [r3, #10]
 8005a22:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6959      	ldr	r1, [r3, #20]
 8005a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a3c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a40:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a44:	6800      	ldr	r0, [r0, #0]
 8005a46:	f001 fd7d 	bl	8007544 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695a      	ldr	r2, [r3, #20]
 8005a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a5a:	441a      	add	r2, r3
 8005a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d90f      	bls.n	8005aa4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6a1a      	ldr	r2, [r3, #32]
 8005a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a94:	1ad2      	subs	r2, r2, r3
 8005a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	621a      	str	r2, [r3, #32]
 8005aa2:	e00e      	b.n	8005ac2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f040 809a 	bne.w	8005c08 <USB_EPStartXfer+0x5b0>
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005adc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ae0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4619      	mov	r1, r3
 8005afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005b02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b06:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	011a      	lsls	r2, r3, #4
 8005b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b22:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d122      	bne.n	8005b86 <USB_EPStartXfer+0x52e>
 8005b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b44:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	801a      	strh	r2, [r3, #0]
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	e083      	b.n	8005c8e <USB_EPStartXfer+0x636>
 8005b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b8c:	d81b      	bhi.n	8005bc6 <USB_EPStartXfer+0x56e>
 8005b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <USB_EPStartXfer+0x556>
 8005ba4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005bae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	029b      	lsls	r3, r3, #10
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	e063      	b.n	8005c8e <USB_EPStartXfer+0x636>
 8005bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd4:	f003 031f 	and.w	r3, r3, #31
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d104      	bne.n	8005be6 <USB_EPStartXfer+0x58e>
 8005bdc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005be0:	3b01      	subs	r3, #1
 8005be2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005be6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	029b      	lsls	r3, r3, #10
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	801a      	strh	r2, [r3, #0]
 8005c06:	e042      	b.n	8005c8e <USB_EPStartXfer+0x636>
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d13a      	bne.n	8005c8e <USB_EPStartXfer+0x636>
 8005c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c24:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c42:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c4a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	440a      	add	r2, r1
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	011a      	lsls	r2, r3, #4
 8005c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c66:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	891b      	ldrh	r3, [r3, #8]
 8005c9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6959      	ldr	r1, [r3, #20]
 8005caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cb4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cb8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cbc:	6800      	ldr	r0, [r0, #0]
 8005cbe:	f001 fc41 	bl	8007544 <USB_WritePMA>
 8005cc2:	f000 be0e 	b.w	80068e2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d16d      	bne.n	8005db2 <USB_EPStartXfer+0x75a>
 8005cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf6:	4413      	add	r3, r2
 8005cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	011a      	lsls	r2, r3, #4
 8005d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d10:	647b      	str	r3, [r7, #68]	; 0x44
 8005d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d112      	bne.n	8005d40 <USB_EPStartXfer+0x6e8>
 8005d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	e063      	b.n	8005e08 <USB_EPStartXfer+0x7b0>
 8005d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d44:	2b3e      	cmp	r3, #62	; 0x3e
 8005d46:	d817      	bhi.n	8005d78 <USB_EPStartXfer+0x720>
 8005d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <USB_EPStartXfer+0x710>
 8005d5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d62:	3301      	adds	r3, #1
 8005d64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	029b      	lsls	r3, r3, #10
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e047      	b.n	8005e08 <USB_EPStartXfer+0x7b0>
 8005d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <USB_EPStartXfer+0x740>
 8005d8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d92:	3b01      	subs	r3, #1
 8005d94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	029b      	lsls	r3, r3, #10
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e02a      	b.n	8005e08 <USB_EPStartXfer+0x7b0>
 8005db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d122      	bne.n	8005e08 <USB_EPStartXfer+0x7b0>
 8005dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	653b      	str	r3, [r7, #80]	; 0x50
 8005dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de2:	4413      	add	r3, r2
 8005de4:	653b      	str	r3, [r7, #80]	; 0x50
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df6:	4413      	add	r3, r2
 8005df8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	891b      	ldrh	r3, [r3, #8]
 8005e14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6959      	ldr	r1, [r3, #20]
 8005e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e2e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e32:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e36:	6800      	ldr	r0, [r0, #0]
 8005e38:	f001 fb84 	bl	8007544 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695a      	ldr	r2, [r3, #20]
 8005e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4c:	441a      	add	r2, r3
 8005e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6a1a      	ldr	r2, [r3, #32]
 8005e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d90f      	bls.n	8005e96 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6a1a      	ldr	r2, [r3, #32]
 8005e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e86:	1ad2      	subs	r2, r2, r3
 8005e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	621a      	str	r2, [r3, #32]
 8005e94:	e00e      	b.n	8005eb4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d16d      	bne.n	8005fac <USB_EPStartXfer+0x954>
 8005ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	4413      	add	r3, r2
 8005ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	011a      	lsls	r2, r3, #4
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	4413      	add	r3, r2
 8005f06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d112      	bne.n	8005f3a <USB_EPStartXfer+0x8e2>
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f22:	801a      	strh	r2, [r3, #0]
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f36:	801a      	strh	r2, [r3, #0]
 8005f38:	e05d      	b.n	8005ff6 <USB_EPStartXfer+0x99e>
 8005f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f40:	d817      	bhi.n	8005f72 <USB_EPStartXfer+0x91a>
 8005f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f46:	085b      	lsrs	r3, r3, #1
 8005f48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <USB_EPStartXfer+0x90a>
 8005f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	029b      	lsls	r3, r3, #10
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	e041      	b.n	8005ff6 <USB_EPStartXfer+0x99e>
 8005f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d104      	bne.n	8005f92 <USB_EPStartXfer+0x93a>
 8005f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	029b      	lsls	r3, r3, #10
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	801a      	strh	r2, [r3, #0]
 8005faa:	e024      	b.n	8005ff6 <USB_EPStartXfer+0x99e>
 8005fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d11c      	bne.n	8005ff6 <USB_EPStartXfer+0x99e>
 8005fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd0:	4413      	add	r3, r2
 8005fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	011a      	lsls	r2, r3, #4
 8005fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	895b      	ldrh	r3, [r3, #10]
 8006002:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6959      	ldr	r1, [r3, #20]
 8006012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006016:	b29b      	uxth	r3, r3
 8006018:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800601c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006020:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006024:	6800      	ldr	r0, [r0, #0]
 8006026:	f001 fa8d 	bl	8007544 <USB_WritePMA>
 800602a:	f000 bc5a 	b.w	80068e2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800603e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006042:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006064:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800609a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ba:	4413      	add	r3, r2
 80060bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	011a      	lsls	r2, r3, #4
 80060cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ce:	4413      	add	r3, r2
 80060d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80060d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060da:	b29a      	uxth	r2, r3
 80060dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	891b      	ldrh	r3, [r3, #8]
 80060ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6959      	ldr	r1, [r3, #20]
 80060fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006100:	b29b      	uxth	r3, r3
 8006102:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006106:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800610a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800610e:	6800      	ldr	r0, [r0, #0]
 8006110:	f001 fa18 	bl	8007544 <USB_WritePMA>
 8006114:	e3e5      	b.n	80068e2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006144:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	441a      	add	r2, r3
 800615a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800615e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006166:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616e:	b29b      	uxth	r3, r3
 8006170:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6a1a      	ldr	r2, [r3, #32]
 800617e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006182:	1ad2      	subs	r2, r2, r3
 8006184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 81bc 	beq.w	8006530 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d16d      	bne.n	80062b2 <USB_EPStartXfer+0xc5a>
 80061d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80061e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f6:	4413      	add	r3, r2
 80061f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80061fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	011a      	lsls	r2, r3, #4
 8006208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800620a:	4413      	add	r3, r2
 800620c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006210:	677b      	str	r3, [r7, #116]	; 0x74
 8006212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d112      	bne.n	8006240 <USB_EPStartXfer+0xbe8>
 800621a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006224:	b29a      	uxth	r2, r3
 8006226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006238:	b29a      	uxth	r2, r3
 800623a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	e060      	b.n	8006302 <USB_EPStartXfer+0xcaa>
 8006240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006244:	2b3e      	cmp	r3, #62	; 0x3e
 8006246:	d817      	bhi.n	8006278 <USB_EPStartXfer+0xc20>
 8006248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <USB_EPStartXfer+0xc10>
 800625e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006262:	3301      	adds	r3, #1
 8006264:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006268:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800626c:	b29b      	uxth	r3, r3
 800626e:	029b      	lsls	r3, r3, #10
 8006270:	b29a      	uxth	r2, r3
 8006272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	e044      	b.n	8006302 <USB_EPStartXfer+0xcaa>
 8006278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <USB_EPStartXfer+0xc40>
 800628e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006292:	3b01      	subs	r3, #1
 8006294:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006298:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800629c:	b29b      	uxth	r3, r3
 800629e:	029b      	lsls	r3, r3, #10
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ae:	801a      	strh	r2, [r3, #0]
 80062b0:	e027      	b.n	8006302 <USB_EPStartXfer+0xcaa>
 80062b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d11f      	bne.n	8006302 <USB_EPStartXfer+0xcaa>
 80062c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062d8:	4413      	add	r3, r2
 80062da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	011a      	lsls	r2, r3, #4
 80062ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062f0:	4413      	add	r3, r2
 80062f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006300:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	895b      	ldrh	r3, [r3, #10]
 800630e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6959      	ldr	r1, [r3, #20]
 800631e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006322:	b29b      	uxth	r3, r3
 8006324:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006328:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800632c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006330:	6800      	ldr	r0, [r0, #0]
 8006332:	f001 f907 	bl	8007544 <USB_WritePMA>
          ep->xfer_buff += len;
 8006336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695a      	ldr	r2, [r3, #20]
 8006342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006346:	441a      	add	r2, r3
 8006348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6a1a      	ldr	r2, [r3, #32]
 8006360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	429a      	cmp	r2, r3
 800636e:	d90f      	bls.n	8006390 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6a1a      	ldr	r2, [r3, #32]
 800637c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006380:	1ad2      	subs	r2, r2, r3
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	621a      	str	r2, [r3, #32]
 800638e:	e00e      	b.n	80063ae <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2200      	movs	r2, #0
 80063ac:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80063ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 8295 	beq.w	80068e2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d16d      	bne.n	80064a4 <USB_EPStartXfer+0xe4c>
 80063c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063e8:	4413      	add	r3, r2
 80063ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	011a      	lsls	r2, r3, #4
 80063fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063fc:	4413      	add	r3, r2
 80063fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006402:	667b      	str	r3, [r7, #100]	; 0x64
 8006404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d112      	bne.n	8006432 <USB_EPStartXfer+0xdda>
 800640c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006416:	b29a      	uxth	r2, r3
 8006418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800641a:	801a      	strh	r2, [r3, #0]
 800641c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642a:	b29a      	uxth	r2, r3
 800642c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800642e:	801a      	strh	r2, [r3, #0]
 8006430:	e063      	b.n	80064fa <USB_EPStartXfer+0xea2>
 8006432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006436:	2b3e      	cmp	r3, #62	; 0x3e
 8006438:	d817      	bhi.n	800646a <USB_EPStartXfer+0xe12>
 800643a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <USB_EPStartXfer+0xe02>
 8006450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006454:	3301      	adds	r3, #1
 8006456:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800645a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800645e:	b29b      	uxth	r3, r3
 8006460:	029b      	lsls	r3, r3, #10
 8006462:	b29a      	uxth	r2, r3
 8006464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e047      	b.n	80064fa <USB_EPStartXfer+0xea2>
 800646a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006478:	f003 031f 	and.w	r3, r3, #31
 800647c:	2b00      	cmp	r3, #0
 800647e:	d104      	bne.n	800648a <USB_EPStartXfer+0xe32>
 8006480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006484:	3b01      	subs	r3, #1
 8006486:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648e:	b29b      	uxth	r3, r3
 8006490:	029b      	lsls	r3, r3, #10
 8006492:	b29b      	uxth	r3, r3
 8006494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649c:	b29a      	uxth	r2, r3
 800649e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e02a      	b.n	80064fa <USB_EPStartXfer+0xea2>
 80064a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d122      	bne.n	80064fa <USB_EPStartXfer+0xea2>
 80064b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	673b      	str	r3, [r7, #112]	; 0x70
 80064c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064d4:	4413      	add	r3, r2
 80064d6:	673b      	str	r3, [r7, #112]	; 0x70
 80064d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	011a      	lsls	r2, r3, #4
 80064e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	891b      	ldrh	r3, [r3, #8]
 8006506:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800650a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6959      	ldr	r1, [r3, #20]
 8006516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651a:	b29b      	uxth	r3, r3
 800651c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006520:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006524:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006528:	6800      	ldr	r0, [r0, #0]
 800652a:	f001 f80b 	bl	8007544 <USB_WritePMA>
 800652e:	e1d8      	b.n	80068e2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006534:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d178      	bne.n	8006632 <USB_EPStartXfer+0xfda>
 8006540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800654e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006552:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655c:	b29b      	uxth	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006564:	4413      	add	r3, r2
 8006566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800656a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	011a      	lsls	r2, r3, #4
 8006578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800657c:	4413      	add	r3, r2
 800657e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006582:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d116      	bne.n	80065bc <USB_EPStartXfer+0xf64>
 800658e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800659a:	b29a      	uxth	r2, r3
 800659c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	e06b      	b.n	8006694 <USB_EPStartXfer+0x103c>
 80065bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c0:	2b3e      	cmp	r3, #62	; 0x3e
 80065c2:	d818      	bhi.n	80065f6 <USB_EPStartXfer+0xf9e>
 80065c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <USB_EPStartXfer+0xf8c>
 80065da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065de:	3301      	adds	r3, #1
 80065e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	029b      	lsls	r3, r3, #10
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	e04e      	b.n	8006694 <USB_EPStartXfer+0x103c>
 80065f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <USB_EPStartXfer+0xfbe>
 800660c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006610:	3b01      	subs	r3, #1
 8006612:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006616:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800661a:	b29b      	uxth	r3, r3
 800661c:	029b      	lsls	r3, r3, #10
 800661e:	b29b      	uxth	r3, r3
 8006620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006628:	b29a      	uxth	r2, r3
 800662a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e030      	b.n	8006694 <USB_EPStartXfer+0x103c>
 8006632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d128      	bne.n	8006694 <USB_EPStartXfer+0x103c>
 8006642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006654:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665e:	b29b      	uxth	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006666:	4413      	add	r3, r2
 8006668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800666c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	011a      	lsls	r2, r3, #4
 800667a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800667e:	4413      	add	r3, r2
 8006680:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006684:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668c:	b29a      	uxth	r2, r3
 800668e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006692:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	891b      	ldrh	r3, [r3, #8]
 80066a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6959      	ldr	r1, [r3, #20]
 80066b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066ba:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066be:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066c2:	6800      	ldr	r0, [r0, #0]
 80066c4:	f000 ff3e 	bl	8007544 <USB_WritePMA>
          ep->xfer_buff += len;
 80066c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695a      	ldr	r2, [r3, #20]
 80066d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d8:	441a      	add	r2, r3
 80066da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80066e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6a1a      	ldr	r2, [r3, #32]
 80066f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d90f      	bls.n	8006722 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6a1a      	ldr	r2, [r3, #32]
 800670e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006712:	1ad2      	subs	r2, r2, r3
 8006714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	621a      	str	r2, [r3, #32]
 8006720:	e00e      	b.n	8006740 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2200      	movs	r2, #0
 800673e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 80cc 	beq.w	80068e2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	785b      	ldrb	r3, [r3, #1]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d178      	bne.n	800685a <USB_EPStartXfer+0x1202>
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006784:	b29b      	uxth	r3, r3
 8006786:	461a      	mov	r2, r3
 8006788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800678c:	4413      	add	r3, r2
 800678e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	011a      	lsls	r2, r3, #4
 80067a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067a4:	4413      	add	r3, r2
 80067a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d116      	bne.n	80067e4 <USB_EPStartXfer+0x118c>
 80067b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067da:	b29a      	uxth	r2, r3
 80067dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067e0:	801a      	strh	r2, [r3, #0]
 80067e2:	e064      	b.n	80068ae <USB_EPStartXfer+0x1256>
 80067e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e8:	2b3e      	cmp	r3, #62	; 0x3e
 80067ea:	d818      	bhi.n	800681e <USB_EPStartXfer+0x11c6>
 80067ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f0:	085b      	lsrs	r3, r3, #1
 80067f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <USB_EPStartXfer+0x11b4>
 8006802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006806:	3301      	adds	r3, #1
 8006808:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800680c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006810:	b29b      	uxth	r3, r3
 8006812:	029b      	lsls	r3, r3, #10
 8006814:	b29a      	uxth	r2, r3
 8006816:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800681a:	801a      	strh	r2, [r3, #0]
 800681c:	e047      	b.n	80068ae <USB_EPStartXfer+0x1256>
 800681e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	2b00      	cmp	r3, #0
 8006832:	d104      	bne.n	800683e <USB_EPStartXfer+0x11e6>
 8006834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006838:	3b01      	subs	r3, #1
 800683a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800683e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006842:	b29b      	uxth	r3, r3
 8006844:	029b      	lsls	r3, r3, #10
 8006846:	b29b      	uxth	r3, r3
 8006848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800684c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006850:	b29a      	uxth	r2, r3
 8006852:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006856:	801a      	strh	r2, [r3, #0]
 8006858:	e029      	b.n	80068ae <USB_EPStartXfer+0x1256>
 800685a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d121      	bne.n	80068ae <USB_EPStartXfer+0x1256>
 800686a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006878:	b29b      	uxth	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006880:	4413      	add	r3, r2
 8006882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	011a      	lsls	r2, r3, #4
 8006894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006898:	4413      	add	r3, r2
 800689a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800689e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80068a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	895b      	ldrh	r3, [r3, #10]
 80068ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6959      	ldr	r1, [r3, #20]
 80068ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80068dc:	6800      	ldr	r0, [r0, #0]
 80068de:	f000 fe31 	bl	8007544 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80068e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006904:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006910:	8013      	strh	r3, [r2, #0]
 8006912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006916:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800691a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800691e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006922:	8812      	ldrh	r2, [r2, #0]
 8006924:	f082 0210 	eor.w	r2, r2, #16
 8006928:	801a      	strh	r2, [r3, #0]
 800692a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006932:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006936:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800693a:	8812      	ldrh	r2, [r2, #0]
 800693c:	f082 0220 	eor.w	r2, r2, #32
 8006940:	801a      	strh	r2, [r3, #0]
 8006942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006946:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	441a      	add	r2, r3
 800695c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006960:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800696e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006976:	b29b      	uxth	r3, r3
 8006978:	8013      	strh	r3, [r2, #0]
 800697a:	f000 bc9f 	b.w	80072bc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800697e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	7b1b      	ldrb	r3, [r3, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 80ae 	bne.w	8006aec <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d917      	bls.n	80069dc <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80069ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80069bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	699a      	ldr	r2, [r3, #24]
 80069c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069cc:	1ad2      	subs	r2, r2, r3
 80069ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	619a      	str	r2, [r3, #24]
 80069da:	e00e      	b.n	80069fa <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80069dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80069ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2200      	movs	r2, #0
 80069f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80069fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a1e:	4413      	add	r3, r2
 8006a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	011a      	lsls	r2, r3, #4
 8006a32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a36:	4413      	add	r3, r2
 8006a38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d116      	bne.n	8006a76 <USB_EPStartXfer+0x141e>
 8006a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	e3e8      	b.n	8007248 <USB_EPStartXfer+0x1bf0>
 8006a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a7c:	d818      	bhi.n	8006ab0 <USB_EPStartXfer+0x1458>
 8006a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a82:	085b      	lsrs	r3, r3, #1
 8006a84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <USB_EPStartXfer+0x1446>
 8006a94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a98:	3301      	adds	r3, #1
 8006a9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	029b      	lsls	r3, r3, #10
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aac:	801a      	strh	r2, [r3, #0]
 8006aae:	e3cb      	b.n	8007248 <USB_EPStartXfer+0x1bf0>
 8006ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab4:	095b      	lsrs	r3, r3, #5
 8006ab6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d104      	bne.n	8006ad0 <USB_EPStartXfer+0x1478>
 8006ac6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aca:	3b01      	subs	r3, #1
 8006acc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006ad0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	029b      	lsls	r3, r3, #10
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ae8:	801a      	strh	r2, [r3, #0]
 8006aea:	e3ad      	b.n	8007248 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	78db      	ldrb	r3, [r3, #3]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	f040 8200 	bne.w	8006efe <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	785b      	ldrb	r3, [r3, #1]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f040 8091 	bne.w	8006c32 <USB_EPStartXfer+0x15da>
 8006b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b34:	4413      	add	r3, r2
 8006b36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	011a      	lsls	r2, r3, #4
 8006b48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d116      	bne.n	8006b94 <USB_EPStartXfer+0x153c>
 8006b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b78:	801a      	strh	r2, [r3, #0]
 8006b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b90:	801a      	strh	r2, [r3, #0]
 8006b92:	e083      	b.n	8006c9c <USB_EPStartXfer+0x1644>
 8006b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ba2:	d820      	bhi.n	8006be6 <USB_EPStartXfer+0x158e>
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	085b      	lsrs	r3, r3, #1
 8006bb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d004      	beq.n	8006bd4 <USB_EPStartXfer+0x157c>
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bce:	3301      	adds	r3, #1
 8006bd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	029b      	lsls	r3, r3, #10
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006be2:	801a      	strh	r2, [r3, #0]
 8006be4:	e05a      	b.n	8006c9c <USB_EPStartXfer+0x1644>
 8006be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 031f 	and.w	r3, r3, #31
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d104      	bne.n	8006c16 <USB_EPStartXfer+0x15be>
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c10:	3b01      	subs	r3, #1
 8006c12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	029b      	lsls	r3, r3, #10
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c2e:	801a      	strh	r2, [r3, #0]
 8006c30:	e034      	b.n	8006c9c <USB_EPStartXfer+0x1644>
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	785b      	ldrb	r3, [r3, #1]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d12c      	bne.n	8006c9c <USB_EPStartXfer+0x1644>
 8006c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	461a      	mov	r2, r3
 8006c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c66:	4413      	add	r3, r2
 8006c68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	011a      	lsls	r2, r3, #4
 8006c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c7e:	4413      	add	r3, r2
 8006c80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f040 8091 	bne.w	8006dde <USB_EPStartXfer+0x1786>
 8006cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	011a      	lsls	r2, r3, #4
 8006cf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d116      	bne.n	8006d40 <USB_EPStartXfer+0x16e8>
 8006d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d24:	801a      	strh	r2, [r3, #0]
 8006d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d3c:	801a      	strh	r2, [r3, #0]
 8006d3e:	e07c      	b.n	8006e3a <USB_EPStartXfer+0x17e2>
 8006d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d4e:	d820      	bhi.n	8006d92 <USB_EPStartXfer+0x173a>
 8006d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	085b      	lsrs	r3, r3, #1
 8006d5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d004      	beq.n	8006d80 <USB_EPStartXfer+0x1728>
 8006d76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	029b      	lsls	r3, r3, #10
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	e053      	b.n	8006e3a <USB_EPStartXfer+0x17e2>
 8006d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <USB_EPStartXfer+0x176a>
 8006db8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006dc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	029b      	lsls	r3, r3, #10
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dda:	801a      	strh	r2, [r3, #0]
 8006ddc:	e02d      	b.n	8006e3a <USB_EPStartXfer+0x17e2>
 8006dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	785b      	ldrb	r3, [r3, #1]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d125      	bne.n	8006e3a <USB_EPStartXfer+0x17e2>
 8006dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e04:	4413      	add	r3, r2
 8006e06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	011a      	lsls	r2, r3, #4
 8006e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e38:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 81fe 	beq.w	8007248 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e6c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <USB_EPStartXfer+0x182c>
 8006e78:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10d      	bne.n	8006ea0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e84:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f040 81db 	bne.w	8007248 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e92:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f040 81d4 	bne.w	8007248 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	8013      	strh	r3, [r2, #0]
 8006efc:	e1a4      	b.n	8007248 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	78db      	ldrb	r3, [r3, #3]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	f040 819a 	bne.w	8007244 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699a      	ldr	r2, [r3, #24]
 8006f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d917      	bls.n	8006f5c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4c:	1ad2      	subs	r2, r2, r3
 8006f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	619a      	str	r2, [r3, #24]
 8006f5a:	e00e      	b.n	8006f7a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d178      	bne.n	800707c <USB_EPStartXfer+0x1a24>
 8006f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fae:	4413      	add	r3, r2
 8006fb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	011a      	lsls	r2, r3, #4
 8006fc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d116      	bne.n	8007006 <USB_EPStartXfer+0x19ae>
 8006fd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fea:	801a      	strh	r2, [r3, #0]
 8006fec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007002:	801a      	strh	r2, [r3, #0]
 8007004:	e06b      	b.n	80070de <USB_EPStartXfer+0x1a86>
 8007006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800700a:	2b3e      	cmp	r3, #62	; 0x3e
 800700c:	d818      	bhi.n	8007040 <USB_EPStartXfer+0x19e8>
 800700e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007012:	085b      	lsrs	r3, r3, #1
 8007014:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <USB_EPStartXfer+0x19d6>
 8007024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007028:	3301      	adds	r3, #1
 800702a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800702e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007032:	b29b      	uxth	r3, r3
 8007034:	029b      	lsls	r3, r3, #10
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e04e      	b.n	80070de <USB_EPStartXfer+0x1a86>
 8007040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007044:	095b      	lsrs	r3, r3, #5
 8007046:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800704a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704e:	f003 031f 	and.w	r3, r3, #31
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <USB_EPStartXfer+0x1a08>
 8007056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800705a:	3b01      	subs	r3, #1
 800705c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007064:	b29b      	uxth	r3, r3
 8007066:	029b      	lsls	r3, r3, #10
 8007068:	b29b      	uxth	r3, r3
 800706a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007072:	b29a      	uxth	r2, r3
 8007074:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007078:	801a      	strh	r2, [r3, #0]
 800707a:	e030      	b.n	80070de <USB_EPStartXfer+0x1a86>
 800707c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d128      	bne.n	80070de <USB_EPStartXfer+0x1a86>
 800708c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007090:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800709a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	461a      	mov	r2, r3
 80070ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b0:	4413      	add	r3, r2
 80070b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	011a      	lsls	r2, r3, #4
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c8:	4413      	add	r3, r2
 80070ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070dc:	801a      	strh	r2, [r3, #0]
 80070de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	785b      	ldrb	r3, [r3, #1]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d178      	bne.n	80071ee <USB_EPStartXfer+0x1b96>
 80070fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800710a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007118:	b29b      	uxth	r3, r3
 800711a:	461a      	mov	r2, r3
 800711c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007120:	4413      	add	r3, r2
 8007122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	011a      	lsls	r2, r3, #4
 8007134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007138:	4413      	add	r3, r2
 800713a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800713e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d116      	bne.n	8007178 <USB_EPStartXfer+0x1b20>
 800714a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007156:	b29a      	uxth	r2, r3
 8007158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800715c:	801a      	strh	r2, [r3, #0]
 800715e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29b      	uxth	r3, r3
 8007166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800716e:	b29a      	uxth	r2, r3
 8007170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	e067      	b.n	8007248 <USB_EPStartXfer+0x1bf0>
 8007178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717c:	2b3e      	cmp	r3, #62	; 0x3e
 800717e:	d818      	bhi.n	80071b2 <USB_EPStartXfer+0x1b5a>
 8007180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007184:	085b      	lsrs	r3, r3, #1
 8007186:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800718a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <USB_EPStartXfer+0x1b48>
 8007196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800719a:	3301      	adds	r3, #1
 800719c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	029b      	lsls	r3, r3, #10
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ae:	801a      	strh	r2, [r3, #0]
 80071b0:	e04a      	b.n	8007248 <USB_EPStartXfer+0x1bf0>
 80071b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c0:	f003 031f 	and.w	r3, r3, #31
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <USB_EPStartXfer+0x1b7a>
 80071c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071cc:	3b01      	subs	r3, #1
 80071ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	029b      	lsls	r3, r3, #10
 80071da:	b29b      	uxth	r3, r3
 80071dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	e02c      	b.n	8007248 <USB_EPStartXfer+0x1bf0>
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d124      	bne.n	8007248 <USB_EPStartXfer+0x1bf0>
 80071fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007202:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800720c:	b29b      	uxth	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007214:	4413      	add	r3, r2
 8007216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800721a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	011a      	lsls	r2, r3, #4
 8007228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722c:	4413      	add	r3, r2
 800722e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007232:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723a:	b29a      	uxth	r2, r3
 800723c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	e001      	b.n	8007248 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e03a      	b.n	80072be <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	b29b      	uxth	r3, r3
 8007266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800726a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007272:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007276:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800727a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800727e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007282:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007286:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800728a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007298:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	441a      	add	r2, r3
 80072a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80072a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d020      	beq.n	800731c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f0:	81bb      	strh	r3, [r7, #12]
 80072f2:	89bb      	ldrh	r3, [r7, #12]
 80072f4:	f083 0310 	eor.w	r3, r3, #16
 80072f8:	81bb      	strh	r3, [r7, #12]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	441a      	add	r2, r3
 8007304:	89bb      	ldrh	r3, [r7, #12]
 8007306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800730a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800730e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007316:	b29b      	uxth	r3, r3
 8007318:	8013      	strh	r3, [r2, #0]
 800731a:	e01f      	b.n	800735c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800732e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007332:	81fb      	strh	r3, [r7, #14]
 8007334:	89fb      	ldrh	r3, [r7, #14]
 8007336:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800733a:	81fb      	strh	r3, [r7, #14]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	441a      	add	r2, r3
 8007346:	89fb      	ldrh	r3, [r7, #14]
 8007348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800734c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007358:	b29b      	uxth	r3, r3
 800735a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	bc80      	pop	{r7}
 8007366:	4770      	bx	lr

08007368 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	7b1b      	ldrb	r3, [r3, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f040 809d 	bne.w	80074b6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d04c      	beq.n	800741e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	823b      	strh	r3, [r7, #16]
 8007392:	8a3b      	ldrh	r3, [r7, #16]
 8007394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01b      	beq.n	80073d4 <USB_EPClearStall+0x6c>
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b2:	81fb      	strh	r3, [r7, #14]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	441a      	add	r2, r3
 80073be:	89fb      	ldrh	r3, [r7, #14]
 80073c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	78db      	ldrb	r3, [r3, #3]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d06c      	beq.n	80074b6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f2:	81bb      	strh	r3, [r7, #12]
 80073f4:	89bb      	ldrh	r3, [r7, #12]
 80073f6:	f083 0320 	eor.w	r3, r3, #32
 80073fa:	81bb      	strh	r3, [r7, #12]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	89bb      	ldrh	r3, [r7, #12]
 8007408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	b29b      	uxth	r3, r3
 800741a:	8013      	strh	r3, [r2, #0]
 800741c:	e04b      	b.n	80074b6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	82fb      	strh	r3, [r7, #22]
 800742c:	8afb      	ldrh	r3, [r7, #22]
 800742e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01b      	beq.n	800746e <USB_EPClearStall+0x106>
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744c:	82bb      	strh	r3, [r7, #20]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	441a      	add	r2, r3
 8007458:	8abb      	ldrh	r3, [r7, #20]
 800745a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007484:	827b      	strh	r3, [r7, #18]
 8007486:	8a7b      	ldrh	r3, [r7, #18]
 8007488:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800748c:	827b      	strh	r3, [r7, #18]
 800748e:	8a7b      	ldrh	r3, [r7, #18]
 8007490:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007494:	827b      	strh	r3, [r7, #18]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	441a      	add	r2, r3
 80074a0:	8a7b      	ldrh	r3, [r7, #18]
 80074a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	371c      	adds	r7, #28
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr

080074c2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d103      	bne.n	80074dc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2280      	movs	r2, #128	; 0x80
 80074d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr

080074e8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr

080074fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr

08007510 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800751e:	b29b      	uxth	r3, r3
 8007520:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007522:	68fb      	ldr	r3, [r7, #12]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr

0800752e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr

08007544 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007544:	b480      	push	{r7}
 8007546:	b08d      	sub	sp, #52	; 0x34
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	4611      	mov	r1, r2
 8007550:	461a      	mov	r2, r3
 8007552:	460b      	mov	r3, r1
 8007554:	80fb      	strh	r3, [r7, #6]
 8007556:	4613      	mov	r3, r2
 8007558:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800755a:	88bb      	ldrh	r3, [r7, #4]
 800755c:	3301      	adds	r3, #1
 800755e:	085b      	lsrs	r3, r3, #1
 8007560:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800756a:	88fb      	ldrh	r3, [r7, #6]
 800756c:	005a      	lsls	r2, r3, #1
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007576:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800757c:	e01e      	b.n	80075bc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	3301      	adds	r3, #1
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	b29b      	uxth	r3, r3
 8007590:	021b      	lsls	r3, r3, #8
 8007592:	b29b      	uxth	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	b29a      	uxth	r2, r3
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	3302      	adds	r3, #2
 80075a8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	3302      	adds	r3, #2
 80075ae:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	3301      	adds	r3, #1
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	3b01      	subs	r3, #1
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1dd      	bne.n	800757e <USB_WritePMA+0x3a>
  }
}
 80075c2:	bf00      	nop
 80075c4:	bf00      	nop
 80075c6:	3734      	adds	r7, #52	; 0x34
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr

080075ce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b08b      	sub	sp, #44	; 0x2c
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	4611      	mov	r1, r2
 80075da:	461a      	mov	r2, r3
 80075dc:	460b      	mov	r3, r1
 80075de:	80fb      	strh	r3, [r7, #6]
 80075e0:	4613      	mov	r3, r2
 80075e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075e4:	88bb      	ldrh	r3, [r7, #4]
 80075e6:	085b      	lsrs	r3, r3, #1
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	005a      	lsls	r2, r3, #1
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007600:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
 8007606:	e01b      	b.n	8007640 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	3302      	adds	r3, #2
 8007614:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	b2da      	uxtb	r2, r3
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	3301      	adds	r3, #1
 8007622:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	0a1b      	lsrs	r3, r3, #8
 8007628:	b2da      	uxtb	r2, r3
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	3301      	adds	r3, #1
 8007632:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	3302      	adds	r3, #2
 8007638:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	3b01      	subs	r3, #1
 800763e:	627b      	str	r3, [r7, #36]	; 0x24
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e0      	bne.n	8007608 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007646:	88bb      	ldrh	r3, [r7, #4]
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d007      	beq.n	8007662 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	b2da      	uxtb	r2, r3
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	701a      	strb	r2, [r3, #0]
  }
}
 8007662:	bf00      	nop
 8007664:	372c      	adds	r7, #44	; 0x2c
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7c1b      	ldrb	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d115      	bne.n	80076b0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007688:	2202      	movs	r2, #2
 800768a:	2181      	movs	r1, #129	; 0x81
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 ff16 	bl	80094be <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800769c:	2202      	movs	r2, #2
 800769e:	2101      	movs	r1, #1
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 ff0c 	bl	80094be <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80076ae:	e012      	b.n	80076d6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80076b0:	2340      	movs	r3, #64	; 0x40
 80076b2:	2202      	movs	r2, #2
 80076b4:	2181      	movs	r1, #129	; 0x81
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 ff01 	bl	80094be <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80076c2:	2340      	movs	r3, #64	; 0x40
 80076c4:	2202      	movs	r2, #2
 80076c6:	2101      	movs	r1, #1
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 fef8 	bl	80094be <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076d6:	2308      	movs	r3, #8
 80076d8:	2203      	movs	r2, #3
 80076da:	2182      	movs	r1, #130	; 0x82
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 feee 	bl	80094be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80076e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80076ec:	f002 f80e 	bl	800970c <USBD_static_malloc>
 80076f0:	4602      	mov	r2, r0
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d102      	bne.n	8007708 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007702:	2301      	movs	r3, #1
 8007704:	73fb      	strb	r3, [r7, #15]
 8007706:	e026      	b.n	8007756 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2200      	movs	r2, #0
 800771e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2200      	movs	r2, #0
 8007726:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7c1b      	ldrb	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800773c:	2101      	movs	r1, #1
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 ffae 	bl	80096a0 <USBD_LL_PrepareReceive>
 8007744:	e007      	b.n	8007756 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800774c:	2340      	movs	r3, #64	; 0x40
 800774e:	2101      	movs	r1, #1
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 ffa5 	bl	80096a0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007770:	2181      	movs	r1, #129	; 0x81
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 fec9 	bl	800950a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800777e:	2101      	movs	r1, #1
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fec2 	bl	800950a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800778e:	2182      	movs	r1, #130	; 0x82
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 feba 	bl	800950a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00e      	beq.n	80077c4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 ffb4 	bl	8009724 <USBD_static_free>
    pdev->pClassData = NULL;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b086      	sub	sp, #24
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077de:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d039      	beq.n	800786c <USBD_CDC_Setup+0x9e>
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d17f      	bne.n	80078fc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	88db      	ldrh	r3, [r3, #6]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d029      	beq.n	8007858 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	b25b      	sxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	da11      	bge.n	8007832 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800781a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	88d2      	ldrh	r2, [r2, #6]
 8007820:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007822:	6939      	ldr	r1, [r7, #16]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	88db      	ldrh	r3, [r3, #6]
 8007828:	461a      	mov	r2, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 f9d9 	bl	8008be2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007830:	e06b      	b.n	800790a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	785a      	ldrb	r2, [r3, #1]
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	88db      	ldrh	r3, [r3, #6]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007848:	6939      	ldr	r1, [r7, #16]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	88db      	ldrh	r3, [r3, #6]
 800784e:	461a      	mov	r2, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 f9f4 	bl	8008c3e <USBD_CtlPrepareRx>
      break;
 8007856:	e058      	b.n	800790a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	7850      	ldrb	r0, [r2, #1]
 8007864:	2200      	movs	r2, #0
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	4798      	blx	r3
      break;
 800786a:	e04e      	b.n	800790a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	2b0b      	cmp	r3, #11
 8007872:	d02e      	beq.n	80078d2 <USBD_CDC_Setup+0x104>
 8007874:	2b0b      	cmp	r3, #11
 8007876:	dc38      	bgt.n	80078ea <USBD_CDC_Setup+0x11c>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <USBD_CDC_Setup+0xb4>
 800787c:	2b0a      	cmp	r3, #10
 800787e:	d014      	beq.n	80078aa <USBD_CDC_Setup+0xdc>
 8007880:	e033      	b.n	80078ea <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007888:	2b03      	cmp	r3, #3
 800788a:	d107      	bne.n	800789c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800788c:	f107 030c 	add.w	r3, r7, #12
 8007890:	2202      	movs	r2, #2
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 f9a4 	bl	8008be2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800789a:	e02e      	b.n	80078fa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 f935 	bl	8008b0e <USBD_CtlError>
            ret = USBD_FAIL;
 80078a4:	2302      	movs	r3, #2
 80078a6:	75fb      	strb	r3, [r7, #23]
          break;
 80078a8:	e027      	b.n	80078fa <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d107      	bne.n	80078c4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80078b4:	f107 030f 	add.w	r3, r7, #15
 80078b8:	2201      	movs	r2, #1
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 f990 	bl	8008be2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078c2:	e01a      	b.n	80078fa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 f921 	bl	8008b0e <USBD_CtlError>
            ret = USBD_FAIL;
 80078cc:	2302      	movs	r3, #2
 80078ce:	75fb      	strb	r3, [r7, #23]
          break;
 80078d0:	e013      	b.n	80078fa <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d00d      	beq.n	80078f8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 f915 	bl	8008b0e <USBD_CtlError>
            ret = USBD_FAIL;
 80078e4:	2302      	movs	r3, #2
 80078e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80078e8:	e006      	b.n	80078f8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 f90e 	bl	8008b0e <USBD_CtlError>
          ret = USBD_FAIL;
 80078f2:	2302      	movs	r3, #2
 80078f4:	75fb      	strb	r3, [r7, #23]
          break;
 80078f6:	e000      	b.n	80078fa <USBD_CDC_Setup+0x12c>
          break;
 80078f8:	bf00      	nop
      }
      break;
 80078fa:	e006      	b.n	800790a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 f905 	bl	8008b0e <USBD_CtlError>
      ret = USBD_FAIL;
 8007904:	2302      	movs	r3, #2
 8007906:	75fb      	strb	r3, [r7, #23]
      break;
 8007908:	bf00      	nop
  }

  return ret;
 800790a:	7dfb      	ldrb	r3, [r7, #23]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007926:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800792e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d03a      	beq.n	80079b0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800793a:	78fa      	ldrb	r2, [r7, #3]
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	440b      	add	r3, r1
 8007948:	331c      	adds	r3, #28
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d029      	beq.n	80079a4 <USBD_CDC_DataIn+0x90>
 8007950:	78fa      	ldrb	r2, [r7, #3]
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	4613      	mov	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	440b      	add	r3, r1
 800795e:	331c      	adds	r3, #28
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	78f9      	ldrb	r1, [r7, #3]
 8007964:	68b8      	ldr	r0, [r7, #8]
 8007966:	460b      	mov	r3, r1
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	4403      	add	r3, r0
 8007970:	3338      	adds	r3, #56	; 0x38
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	fbb2 f1f3 	udiv	r1, r2, r3
 8007978:	fb01 f303 	mul.w	r3, r1, r3
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d110      	bne.n	80079a4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	331c      	adds	r3, #28
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007996:	78f9      	ldrb	r1, [r7, #3]
 8007998:	2300      	movs	r3, #0
 800799a:	2200      	movs	r2, #0
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 fe5c 	bl	800965a <USBD_LL_Transmit>
 80079a2:	e003      	b.n	80079ac <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	e000      	b.n	80079b2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80079b0:	2302      	movs	r3, #2
  }
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079cc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fe87 	bl	80096e6 <USBD_LL_GetRxDataSize>
 80079d8:	4602      	mov	r2, r0
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00d      	beq.n	8007a06 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079fe:	4611      	mov	r1, r2
 8007a00:	4798      	blx	r3

    return USBD_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e000      	b.n	8007a08 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007a06:	2302      	movs	r3, #2
  }
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a1e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d015      	beq.n	8007a56 <USBD_CDC_EP0_RxReady+0x46>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a30:	2bff      	cmp	r3, #255	; 0xff
 8007a32:	d010      	beq.n	8007a56 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007a42:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a4a:	b292      	uxth	r2, r2
 8007a4c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	22ff      	movs	r2, #255	; 0xff
 8007a52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2243      	movs	r2, #67	; 0x43
 8007a6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007a6e:	4b03      	ldr	r3, [pc, #12]	; (8007a7c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	200000ac 	.word	0x200000ac

08007a80 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2243      	movs	r2, #67	; 0x43
 8007a8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a8e:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	20000068 	.word	0x20000068

08007aa0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2243      	movs	r2, #67	; 0x43
 8007aac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007aae:	4b03      	ldr	r3, [pc, #12]	; (8007abc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	200000f0 	.word	0x200000f0

08007ac0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	220a      	movs	r2, #10
 8007acc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007ace:	4b03      	ldr	r3, [pc, #12]	; (8007adc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20000024 	.word	0x20000024

08007ae0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007aea:	2302      	movs	r3, #2
 8007aec:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d005      	beq.n	8007b00 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bc80      	pop	{r7}
 8007b0a:	4770      	bx	lr

08007b0c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b20:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b2a:	88fa      	ldrh	r2, [r7, #6]
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr

08007b3e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr

08007b64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d017      	beq.n	8007bae <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	7c1b      	ldrb	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b90:	2101      	movs	r1, #1
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 fd84 	bl	80096a0 <USBD_LL_PrepareReceive>
 8007b98:	e007      	b.n	8007baa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fd7b 	bl	80096a0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	e000      	b.n	8007bb0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007bae:	2302      	movs	r3, #2
  }
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e01a      	b.n	8007c06 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	79fa      	ldrb	r2, [r7, #7]
 8007bfc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f001 fbe8 	bl	80093d4 <USBD_LL_Init>

  return USBD_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b085      	sub	sp, #20
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d006      	beq.n	8007c30 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]
 8007c2e:	e001      	b.n	8007c34 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c30:	2302      	movs	r3, #2
 8007c32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bc80      	pop	{r7}
 8007c3e:	4770      	bx	lr

08007c40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 fc1d 	bl	8009488 <USBD_LL_Start>

  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr

08007c6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00c      	beq.n	8007ca0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	78fa      	ldrb	r2, [r7, #3]
 8007c90:	4611      	mov	r1, r2
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	4798      	blx	r3
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	78fa      	ldrb	r2, [r7, #3]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3

  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 fed7 	bl	8008a96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d04:	f003 031f 	and.w	r3, r3, #31
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d016      	beq.n	8007d3a <USBD_LL_SetupStage+0x6a>
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d81c      	bhi.n	8007d4a <USBD_LL_SetupStage+0x7a>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <USBD_LL_SetupStage+0x4a>
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d008      	beq.n	8007d2a <USBD_LL_SetupStage+0x5a>
 8007d18:	e017      	b.n	8007d4a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9ca 	bl	80080bc <USBD_StdDevReq>
      break;
 8007d28:	e01a      	b.n	8007d60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa2c 	bl	8008190 <USBD_StdItfReq>
      break;
 8007d38:	e012      	b.n	8007d60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa6c 	bl	8008220 <USBD_StdEPReq>
      break;
 8007d48:	e00a      	b.n	8007d60 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 fbf5 	bl	8009548 <USBD_LL_StallEP>
      break;
 8007d5e:	bf00      	nop
  }

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b086      	sub	sp, #24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	460b      	mov	r3, r1
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d78:	7afb      	ldrb	r3, [r7, #11]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d14b      	bne.n	8007e16 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d134      	bne.n	8007dfa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d919      	bls.n	8007dd0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	1ad2      	subs	r2, r2, r3
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d203      	bcs.n	8007dbe <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	e002      	b.n	8007dc4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 ff56 	bl	8008c7a <USBD_CtlContinueRx>
 8007dce:	e038      	b.n	8007e42 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00a      	beq.n	8007df2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d105      	bne.n	8007df2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 ff53 	bl	8008c9e <USBD_CtlSendStatus>
 8007df8:	e023      	b.n	8007e42 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e00:	2b05      	cmp	r3, #5
 8007e02:	d11e      	bne.n	8007e42 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f001 fb9a 	bl	8009548 <USBD_LL_StallEP>
 8007e14:	e015      	b.n	8007e42 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00d      	beq.n	8007e3e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d108      	bne.n	8007e3e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	7afa      	ldrb	r2, [r7, #11]
 8007e36:	4611      	mov	r1, r2
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	4798      	blx	r3
 8007e3c:	e001      	b.n	8007e42 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e000      	b.n	8007e44 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	460b      	mov	r3, r1
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e5a:	7afb      	ldrb	r3, [r7, #11]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d17f      	bne.n	8007f60 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3314      	adds	r3, #20
 8007e64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d15c      	bne.n	8007f2a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d915      	bls.n	8007ea8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	1ad2      	subs	r2, r2, r3
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fec0 	bl	8008c1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f001 fbfd 	bl	80096a0 <USBD_LL_PrepareReceive>
 8007ea6:	e04e      	b.n	8007f46 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	6912      	ldr	r2, [r2, #16]
 8007eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eb4:	fb01 f202 	mul.w	r2, r1, r2
 8007eb8:	1a9b      	subs	r3, r3, r2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d11c      	bne.n	8007ef8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d316      	bcc.n	8007ef8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d20f      	bcs.n	8007ef8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2100      	movs	r1, #0
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fe9c 	bl	8008c1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eea:	2300      	movs	r3, #0
 8007eec:	2200      	movs	r2, #0
 8007eee:	2100      	movs	r1, #0
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f001 fbd5 	bl	80096a0 <USBD_LL_PrepareReceive>
 8007ef6:	e026      	b.n	8007f46 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d105      	bne.n	8007f1a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f1a:	2180      	movs	r1, #128	; 0x80
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f001 fb13 	bl	8009548 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 fece 	bl	8008cc4 <USBD_CtlReceiveStatus>
 8007f28:	e00d      	b.n	8007f46 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d004      	beq.n	8007f3e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f3e:	2180      	movs	r1, #128	; 0x80
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f001 fb01 	bl	8009548 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d11d      	bne.n	8007f8c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff fe81 	bl	8007c58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f5e:	e015      	b.n	8007f8c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00d      	beq.n	8007f88 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d108      	bne.n	8007f88 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	7afa      	ldrb	r2, [r7, #11]
 8007f80:	4611      	mov	r1, r2
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	4798      	blx	r3
 8007f86:	e001      	b.n	8007f8c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e000      	b.n	8007f8e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f9e:	2340      	movs	r3, #64	; 0x40
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 fa8a 	bl	80094be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2240      	movs	r2, #64	; 0x40
 8007fb6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fba:	2340      	movs	r3, #64	; 0x40
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2180      	movs	r1, #128	; 0x80
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 fa7c 	bl	80094be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2240      	movs	r2, #64	; 0x40
 8007fd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d009      	beq.n	800800e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	6852      	ldr	r2, [r2, #4]
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	4611      	mov	r1, r2
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
  }

  return USBD_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr

08008036 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2204      	movs	r2, #4
 800804e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr

0800805e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806c:	2b04      	cmp	r3, #4
 800806e:	d105      	bne.n	800807c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr

08008088 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008096:	2b03      	cmp	r3, #3
 8008098:	d10b      	bne.n	80080b2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d005      	beq.n	80080b2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080d2:	2b40      	cmp	r3, #64	; 0x40
 80080d4:	d005      	beq.n	80080e2 <USBD_StdDevReq+0x26>
 80080d6:	2b40      	cmp	r3, #64	; 0x40
 80080d8:	d84f      	bhi.n	800817a <USBD_StdDevReq+0xbe>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <USBD_StdDevReq+0x36>
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d14b      	bne.n	800817a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
      break;
 80080f0:	e048      	b.n	8008184 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b09      	cmp	r3, #9
 80080f8:	d839      	bhi.n	800816e <USBD_StdDevReq+0xb2>
 80080fa:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <USBD_StdDevReq+0x44>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008151 	.word	0x08008151
 8008104:	08008165 	.word	0x08008165
 8008108:	0800816f 	.word	0x0800816f
 800810c:	0800815b 	.word	0x0800815b
 8008110:	0800816f 	.word	0x0800816f
 8008114:	08008133 	.word	0x08008133
 8008118:	08008129 	.word	0x08008129
 800811c:	0800816f 	.word	0x0800816f
 8008120:	08008147 	.word	0x08008147
 8008124:	0800813d 	.word	0x0800813d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f9dc 	bl	80084e8 <USBD_GetDescriptor>
          break;
 8008130:	e022      	b.n	8008178 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fb3f 	bl	80087b8 <USBD_SetAddress>
          break;
 800813a:	e01d      	b.n	8008178 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fb7e 	bl	8008840 <USBD_SetConfig>
          break;
 8008144:	e018      	b.n	8008178 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fc07 	bl	800895c <USBD_GetConfig>
          break;
 800814e:	e013      	b.n	8008178 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fc37 	bl	80089c6 <USBD_GetStatus>
          break;
 8008158:	e00e      	b.n	8008178 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fc65 	bl	8008a2c <USBD_SetFeature>
          break;
 8008162:	e009      	b.n	8008178 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fc74 	bl	8008a54 <USBD_ClrFeature>
          break;
 800816c:	e004      	b.n	8008178 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fccc 	bl	8008b0e <USBD_CtlError>
          break;
 8008176:	bf00      	nop
      }
      break;
 8008178:	e004      	b.n	8008184 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fcc6 	bl	8008b0e <USBD_CtlError>
      break;
 8008182:	bf00      	nop
  }

  return ret;
 8008184:	7bfb      	ldrb	r3, [r7, #15]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop

08008190 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081a6:	2b40      	cmp	r3, #64	; 0x40
 80081a8:	d005      	beq.n	80081b6 <USBD_StdItfReq+0x26>
 80081aa:	2b40      	cmp	r3, #64	; 0x40
 80081ac:	d82e      	bhi.n	800820c <USBD_StdItfReq+0x7c>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <USBD_StdItfReq+0x26>
 80081b2:	2b20      	cmp	r3, #32
 80081b4:	d12a      	bne.n	800820c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081bc:	3b01      	subs	r3, #1
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d81d      	bhi.n	80081fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	889b      	ldrh	r3, [r3, #4]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d813      	bhi.n	80081f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
 80081da:	4603      	mov	r3, r0
 80081dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	88db      	ldrh	r3, [r3, #6]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d110      	bne.n	8008208 <USBD_StdItfReq+0x78>
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10d      	bne.n	8008208 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fd56 	bl	8008c9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081f2:	e009      	b.n	8008208 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fc89 	bl	8008b0e <USBD_CtlError>
          break;
 80081fc:	e004      	b.n	8008208 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fc84 	bl	8008b0e <USBD_CtlError>
          break;
 8008206:	e000      	b.n	800820a <USBD_StdItfReq+0x7a>
          break;
 8008208:	bf00      	nop
      }
      break;
 800820a:	e004      	b.n	8008216 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fc7d 	bl	8008b0e <USBD_CtlError>
      break;
 8008214:	bf00      	nop
  }

  return USBD_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	889b      	ldrh	r3, [r3, #4]
 8008232:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800823c:	2b40      	cmp	r3, #64	; 0x40
 800823e:	d007      	beq.n	8008250 <USBD_StdEPReq+0x30>
 8008240:	2b40      	cmp	r3, #64	; 0x40
 8008242:	f200 8146 	bhi.w	80084d2 <USBD_StdEPReq+0x2b2>
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <USBD_StdEPReq+0x40>
 800824a:	2b20      	cmp	r3, #32
 800824c:	f040 8141 	bne.w	80084d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	4798      	blx	r3
      break;
 800825e:	e13d      	b.n	80084dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008268:	2b20      	cmp	r3, #32
 800826a:	d10a      	bne.n	8008282 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	4798      	blx	r3
 800827a:	4603      	mov	r3, r0
 800827c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	e12d      	b.n	80084de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b03      	cmp	r3, #3
 8008288:	d007      	beq.n	800829a <USBD_StdEPReq+0x7a>
 800828a:	2b03      	cmp	r3, #3
 800828c:	f300 811b 	bgt.w	80084c6 <USBD_StdEPReq+0x2a6>
 8008290:	2b00      	cmp	r3, #0
 8008292:	d072      	beq.n	800837a <USBD_StdEPReq+0x15a>
 8008294:	2b01      	cmp	r3, #1
 8008296:	d03a      	beq.n	800830e <USBD_StdEPReq+0xee>
 8008298:	e115      	b.n	80084c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d002      	beq.n	80082aa <USBD_StdEPReq+0x8a>
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d015      	beq.n	80082d4 <USBD_StdEPReq+0xb4>
 80082a8:	e02b      	b.n	8008302 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00c      	beq.n	80082ca <USBD_StdEPReq+0xaa>
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2b80      	cmp	r3, #128	; 0x80
 80082b4:	d009      	beq.n	80082ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 f944 	bl	8009548 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082c0:	2180      	movs	r1, #128	; 0x80
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f001 f940 	bl	8009548 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082c8:	e020      	b.n	800830c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fc1e 	bl	8008b0e <USBD_CtlError>
              break;
 80082d2:	e01b      	b.n	800830c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	885b      	ldrh	r3, [r3, #2]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10e      	bne.n	80082fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00b      	beq.n	80082fa <USBD_StdEPReq+0xda>
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b80      	cmp	r3, #128	; 0x80
 80082e6:	d008      	beq.n	80082fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	88db      	ldrh	r3, [r3, #6]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d104      	bne.n	80082fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 f927 	bl	8009548 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fccf 	bl	8008c9e <USBD_CtlSendStatus>

              break;
 8008300:	e004      	b.n	800830c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fc02 	bl	8008b0e <USBD_CtlError>
              break;
 800830a:	bf00      	nop
          }
          break;
 800830c:	e0e0      	b.n	80084d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008314:	2b02      	cmp	r3, #2
 8008316:	d002      	beq.n	800831e <USBD_StdEPReq+0xfe>
 8008318:	2b03      	cmp	r3, #3
 800831a:	d015      	beq.n	8008348 <USBD_StdEPReq+0x128>
 800831c:	e026      	b.n	800836c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00c      	beq.n	800833e <USBD_StdEPReq+0x11e>
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	2b80      	cmp	r3, #128	; 0x80
 8008328:	d009      	beq.n	800833e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 f90a 	bl	8009548 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008334:	2180      	movs	r1, #128	; 0x80
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 f906 	bl	8009548 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800833c:	e01c      	b.n	8008378 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fbe4 	bl	8008b0e <USBD_CtlError>
              break;
 8008346:	e017      	b.n	8008378 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	885b      	ldrh	r3, [r3, #2]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d112      	bne.n	8008376 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008356:	2b00      	cmp	r3, #0
 8008358:	d004      	beq.n	8008364 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 f911 	bl	8009586 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fc9a 	bl	8008c9e <USBD_CtlSendStatus>
              }
              break;
 800836a:	e004      	b.n	8008376 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fbcd 	bl	8008b0e <USBD_CtlError>
              break;
 8008374:	e000      	b.n	8008378 <USBD_StdEPReq+0x158>
              break;
 8008376:	bf00      	nop
          }
          break;
 8008378:	e0aa      	b.n	80084d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008380:	2b02      	cmp	r3, #2
 8008382:	d002      	beq.n	800838a <USBD_StdEPReq+0x16a>
 8008384:	2b03      	cmp	r3, #3
 8008386:	d032      	beq.n	80083ee <USBD_StdEPReq+0x1ce>
 8008388:	e097      	b.n	80084ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d007      	beq.n	80083a0 <USBD_StdEPReq+0x180>
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	2b80      	cmp	r3, #128	; 0x80
 8008394:	d004      	beq.n	80083a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fbb8 	bl	8008b0e <USBD_CtlError>
                break;
 800839e:	e091      	b.n	80084c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	da0b      	bge.n	80083c0 <USBD_StdEPReq+0x1a0>
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	3310      	adds	r3, #16
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	4413      	add	r3, r2
 80083bc:	3304      	adds	r3, #4
 80083be:	e00b      	b.n	80083d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	4413      	add	r3, r2
 80083d6:	3304      	adds	r3, #4
 80083d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2202      	movs	r2, #2
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fbfb 	bl	8008be2 <USBD_CtlSendData>
              break;
 80083ec:	e06a      	b.n	80084c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	da11      	bge.n	800841a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083f6:	7bbb      	ldrb	r3, [r7, #14]
 80083f8:	f003 020f 	and.w	r2, r3, #15
 80083fc:	6879      	ldr	r1, [r7, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	3318      	adds	r3, #24
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d117      	bne.n	8008440 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fb7b 	bl	8008b0e <USBD_CtlError>
                  break;
 8008418:	e054      	b.n	80084c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	f003 020f 	and.w	r2, r3, #15
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d104      	bne.n	8008440 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fb68 	bl	8008b0e <USBD_CtlError>
                  break;
 800843e:	e041      	b.n	80084c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008444:	2b00      	cmp	r3, #0
 8008446:	da0b      	bge.n	8008460 <USBD_StdEPReq+0x240>
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	3310      	adds	r3, #16
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	4413      	add	r3, r2
 800845c:	3304      	adds	r3, #4
 800845e:	e00b      	b.n	8008478 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	4413      	add	r3, r2
 8008476:	3304      	adds	r3, #4
 8008478:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <USBD_StdEPReq+0x266>
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b80      	cmp	r3, #128	; 0x80
 8008484:	d103      	bne.n	800848e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	e00e      	b.n	80084ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 f896 	bl	80095c4 <USBD_LL_IsStallEP>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2201      	movs	r2, #1
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	e002      	b.n	80084ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2202      	movs	r2, #2
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fb95 	bl	8008be2 <USBD_CtlSendData>
              break;
 80084b8:	e004      	b.n	80084c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fb26 	bl	8008b0e <USBD_CtlError>
              break;
 80084c2:	bf00      	nop
          }
          break;
 80084c4:	e004      	b.n	80084d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fb20 	bl	8008b0e <USBD_CtlError>
          break;
 80084ce:	bf00      	nop
      }
      break;
 80084d0:	e004      	b.n	80084dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fb1a 	bl	8008b0e <USBD_CtlError>
      break;
 80084da:	bf00      	nop
  }

  return ret;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	885b      	ldrh	r3, [r3, #2]
 8008502:	0a1b      	lsrs	r3, r3, #8
 8008504:	b29b      	uxth	r3, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	2b06      	cmp	r3, #6
 800850a:	f200 8128 	bhi.w	800875e <USBD_GetDescriptor+0x276>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <USBD_GetDescriptor+0x2c>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	08008531 	.word	0x08008531
 8008518:	08008549 	.word	0x08008549
 800851c:	08008589 	.word	0x08008589
 8008520:	0800875f 	.word	0x0800875f
 8008524:	0800875f 	.word	0x0800875f
 8008528:	080086ff 	.word	0x080086ff
 800852c:	0800872b 	.word	0x0800872b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	7c12      	ldrb	r2, [r2, #16]
 800853c:	f107 0108 	add.w	r1, r7, #8
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3
 8008544:	60f8      	str	r0, [r7, #12]
      break;
 8008546:	e112      	b.n	800876e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	7c1b      	ldrb	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10d      	bne.n	800856c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	f107 0208 	add.w	r2, r7, #8
 800855c:	4610      	mov	r0, r2
 800855e:	4798      	blx	r3
 8008560:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3301      	adds	r3, #1
 8008566:	2202      	movs	r2, #2
 8008568:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800856a:	e100      	b.n	800876e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	f107 0208 	add.w	r2, r7, #8
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3301      	adds	r3, #1
 8008582:	2202      	movs	r2, #2
 8008584:	701a      	strb	r2, [r3, #0]
      break;
 8008586:	e0f2      	b.n	800876e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	885b      	ldrh	r3, [r3, #2]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b05      	cmp	r3, #5
 8008590:	f200 80ac 	bhi.w	80086ec <USBD_GetDescriptor+0x204>
 8008594:	a201      	add	r2, pc, #4	; (adr r2, 800859c <USBD_GetDescriptor+0xb4>)
 8008596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859a:	bf00      	nop
 800859c:	080085b5 	.word	0x080085b5
 80085a0:	080085e9 	.word	0x080085e9
 80085a4:	0800861d 	.word	0x0800861d
 80085a8:	08008651 	.word	0x08008651
 80085ac:	08008685 	.word	0x08008685
 80085b0:	080086b9 	.word	0x080086b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00b      	beq.n	80085d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	7c12      	ldrb	r2, [r2, #16]
 80085cc:	f107 0108 	add.w	r1, r7, #8
 80085d0:	4610      	mov	r0, r2
 80085d2:	4798      	blx	r3
 80085d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085d6:	e091      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fa97 	bl	8008b0e <USBD_CtlError>
            err++;
 80085e0:	7afb      	ldrb	r3, [r7, #11]
 80085e2:	3301      	adds	r3, #1
 80085e4:	72fb      	strb	r3, [r7, #11]
          break;
 80085e6:	e089      	b.n	80086fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	7c12      	ldrb	r2, [r2, #16]
 8008600:	f107 0108 	add.w	r1, r7, #8
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
 8008608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860a:	e077      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fa7d 	bl	8008b0e <USBD_CtlError>
            err++;
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	3301      	adds	r3, #1
 8008618:	72fb      	strb	r3, [r7, #11]
          break;
 800861a:	e06f      	b.n	80086fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	7c12      	ldrb	r2, [r2, #16]
 8008634:	f107 0108 	add.w	r1, r7, #8
 8008638:	4610      	mov	r0, r2
 800863a:	4798      	blx	r3
 800863c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800863e:	e05d      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa63 	bl	8008b0e <USBD_CtlError>
            err++;
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	3301      	adds	r3, #1
 800864c:	72fb      	strb	r3, [r7, #11]
          break;
 800864e:	e055      	b.n	80086fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	7c12      	ldrb	r2, [r2, #16]
 8008668:	f107 0108 	add.w	r1, r7, #8
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
 8008670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008672:	e043      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa49 	bl	8008b0e <USBD_CtlError>
            err++;
 800867c:	7afb      	ldrb	r3, [r7, #11]
 800867e:	3301      	adds	r3, #1
 8008680:	72fb      	strb	r3, [r7, #11]
          break;
 8008682:	e03b      	b.n	80086fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00b      	beq.n	80086a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	7c12      	ldrb	r2, [r2, #16]
 800869c:	f107 0108 	add.w	r1, r7, #8
 80086a0:	4610      	mov	r0, r2
 80086a2:	4798      	blx	r3
 80086a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086a6:	e029      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa2f 	bl	8008b0e <USBD_CtlError>
            err++;
 80086b0:	7afb      	ldrb	r3, [r7, #11]
 80086b2:	3301      	adds	r3, #1
 80086b4:	72fb      	strb	r3, [r7, #11]
          break;
 80086b6:	e021      	b.n	80086fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	7c12      	ldrb	r2, [r2, #16]
 80086d0:	f107 0108 	add.w	r1, r7, #8
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086da:	e00f      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa15 	bl	8008b0e <USBD_CtlError>
            err++;
 80086e4:	7afb      	ldrb	r3, [r7, #11]
 80086e6:	3301      	adds	r3, #1
 80086e8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ea:	e007      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa0d 	bl	8008b0e <USBD_CtlError>
          err++;
 80086f4:	7afb      	ldrb	r3, [r7, #11]
 80086f6:	3301      	adds	r3, #1
 80086f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80086fa:	e038      	b.n	800876e <USBD_GetDescriptor+0x286>
 80086fc:	e037      	b.n	800876e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	7c1b      	ldrb	r3, [r3, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d109      	bne.n	800871a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870e:	f107 0208 	add.w	r2, r7, #8
 8008712:	4610      	mov	r0, r2
 8008714:	4798      	blx	r3
 8008716:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008718:	e029      	b.n	800876e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f9f6 	bl	8008b0e <USBD_CtlError>
        err++;
 8008722:	7afb      	ldrb	r3, [r7, #11]
 8008724:	3301      	adds	r3, #1
 8008726:	72fb      	strb	r3, [r7, #11]
      break;
 8008728:	e021      	b.n	800876e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	7c1b      	ldrb	r3, [r3, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10d      	bne.n	800874e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	f107 0208 	add.w	r2, r7, #8
 800873e:	4610      	mov	r0, r2
 8008740:	4798      	blx	r3
 8008742:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	2207      	movs	r2, #7
 800874a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800874c:	e00f      	b.n	800876e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f9dc 	bl	8008b0e <USBD_CtlError>
        err++;
 8008756:	7afb      	ldrb	r3, [r7, #11]
 8008758:	3301      	adds	r3, #1
 800875a:	72fb      	strb	r3, [r7, #11]
      break;
 800875c:	e007      	b.n	800876e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f9d4 	bl	8008b0e <USBD_CtlError>
      err++;
 8008766:	7afb      	ldrb	r3, [r7, #11]
 8008768:	3301      	adds	r3, #1
 800876a:	72fb      	strb	r3, [r7, #11]
      break;
 800876c:	bf00      	nop
  }

  if (err != 0U)
 800876e:	7afb      	ldrb	r3, [r7, #11]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d11c      	bne.n	80087ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008774:	893b      	ldrh	r3, [r7, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d011      	beq.n	800879e <USBD_GetDescriptor+0x2b6>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	88db      	ldrh	r3, [r3, #6]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00d      	beq.n	800879e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	88da      	ldrh	r2, [r3, #6]
 8008786:	893b      	ldrh	r3, [r7, #8]
 8008788:	4293      	cmp	r3, r2
 800878a:	bf28      	it	cs
 800878c:	4613      	movcs	r3, r2
 800878e:	b29b      	uxth	r3, r3
 8008790:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008792:	893b      	ldrh	r3, [r7, #8]
 8008794:	461a      	mov	r2, r3
 8008796:	68f9      	ldr	r1, [r7, #12]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fa22 	bl	8008be2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	88db      	ldrh	r3, [r3, #6]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d104      	bne.n	80087b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa79 	bl	8008c9e <USBD_CtlSendStatus>
 80087ac:	e000      	b.n	80087b0 <USBD_GetDescriptor+0x2c8>
    return;
 80087ae:	bf00      	nop
    }
  }
}
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop

080087b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	889b      	ldrh	r3, [r3, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d130      	bne.n	800882c <USBD_SetAddress+0x74>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	88db      	ldrh	r3, [r3, #6]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d12c      	bne.n	800882c <USBD_SetAddress+0x74>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	2b7f      	cmp	r3, #127	; 0x7f
 80087d8:	d828      	bhi.n	800882c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	885b      	ldrh	r3, [r3, #2]
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d104      	bne.n	80087fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f98b 	bl	8008b0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f8:	e01d      	b.n	8008836 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	7bfa      	ldrb	r2, [r7, #15]
 80087fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 ff08 	bl	800961c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fa46 	bl	8008c9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2202      	movs	r2, #2
 800881c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008820:	e009      	b.n	8008836 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882a:	e004      	b.n	8008836 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f96d 	bl	8008b0e <USBD_CtlError>
  }
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	885b      	ldrh	r3, [r3, #2]
 800884e:	b2da      	uxtb	r2, r3
 8008850:	4b41      	ldr	r3, [pc, #260]	; (8008958 <USBD_SetConfig+0x118>)
 8008852:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008854:	4b40      	ldr	r3, [pc, #256]	; (8008958 <USBD_SetConfig+0x118>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d904      	bls.n	8008866 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f955 	bl	8008b0e <USBD_CtlError>
 8008864:	e075      	b.n	8008952 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800886c:	2b02      	cmp	r3, #2
 800886e:	d002      	beq.n	8008876 <USBD_SetConfig+0x36>
 8008870:	2b03      	cmp	r3, #3
 8008872:	d023      	beq.n	80088bc <USBD_SetConfig+0x7c>
 8008874:	e062      	b.n	800893c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008876:	4b38      	ldr	r3, [pc, #224]	; (8008958 <USBD_SetConfig+0x118>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d01a      	beq.n	80088b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800887e:	4b36      	ldr	r3, [pc, #216]	; (8008958 <USBD_SetConfig+0x118>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2203      	movs	r2, #3
 800888c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008890:	4b31      	ldr	r3, [pc, #196]	; (8008958 <USBD_SetConfig+0x118>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff f9e8 	bl	8007c6c <USBD_SetClassConfig>
 800889c:	4603      	mov	r3, r0
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d104      	bne.n	80088ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f932 	bl	8008b0e <USBD_CtlError>
            return;
 80088aa:	e052      	b.n	8008952 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f9f6 	bl	8008c9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088b2:	e04e      	b.n	8008952 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f9f2 	bl	8008c9e <USBD_CtlSendStatus>
        break;
 80088ba:	e04a      	b.n	8008952 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80088bc:	4b26      	ldr	r3, [pc, #152]	; (8008958 <USBD_SetConfig+0x118>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d112      	bne.n	80088ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80088cc:	4b22      	ldr	r3, [pc, #136]	; (8008958 <USBD_SetConfig+0x118>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	461a      	mov	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80088d6:	4b20      	ldr	r3, [pc, #128]	; (8008958 <USBD_SetConfig+0x118>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff f9e4 	bl	8007caa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f9db 	bl	8008c9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088e8:	e033      	b.n	8008952 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80088ea:	4b1b      	ldr	r3, [pc, #108]	; (8008958 <USBD_SetConfig+0x118>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d01d      	beq.n	8008934 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff f9d2 	bl	8007caa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008906:	4b14      	ldr	r3, [pc, #80]	; (8008958 <USBD_SetConfig+0x118>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008910:	4b11      	ldr	r3, [pc, #68]	; (8008958 <USBD_SetConfig+0x118>)
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff f9a8 	bl	8007c6c <USBD_SetClassConfig>
 800891c:	4603      	mov	r3, r0
 800891e:	2b02      	cmp	r3, #2
 8008920:	d104      	bne.n	800892c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f8f2 	bl	8008b0e <USBD_CtlError>
            return;
 800892a:	e012      	b.n	8008952 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f9b6 	bl	8008c9e <USBD_CtlSendStatus>
        break;
 8008932:	e00e      	b.n	8008952 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f9b2 	bl	8008c9e <USBD_CtlSendStatus>
        break;
 800893a:	e00a      	b.n	8008952 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f8e5 	bl	8008b0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008944:	4b04      	ldr	r3, [pc, #16]	; (8008958 <USBD_SetConfig+0x118>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff f9ad 	bl	8007caa <USBD_ClrClassConfig>
        break;
 8008950:	bf00      	nop
    }
  }
}
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	20000384 	.word	0x20000384

0800895c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	88db      	ldrh	r3, [r3, #6]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d004      	beq.n	8008978 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f8cc 	bl	8008b0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008976:	e022      	b.n	80089be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897e:	2b02      	cmp	r3, #2
 8008980:	dc02      	bgt.n	8008988 <USBD_GetConfig+0x2c>
 8008982:	2b00      	cmp	r3, #0
 8008984:	dc03      	bgt.n	800898e <USBD_GetConfig+0x32>
 8008986:	e015      	b.n	80089b4 <USBD_GetConfig+0x58>
 8008988:	2b03      	cmp	r3, #3
 800898a:	d00b      	beq.n	80089a4 <USBD_GetConfig+0x48>
 800898c:	e012      	b.n	80089b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3308      	adds	r3, #8
 8008998:	2201      	movs	r2, #1
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f920 	bl	8008be2 <USBD_CtlSendData>
        break;
 80089a2:	e00c      	b.n	80089be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3304      	adds	r3, #4
 80089a8:	2201      	movs	r2, #1
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f918 	bl	8008be2 <USBD_CtlSendData>
        break;
 80089b2:	e004      	b.n	80089be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f8a9 	bl	8008b0e <USBD_CtlError>
        break;
 80089bc:	bf00      	nop
}
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d6:	3b01      	subs	r3, #1
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d81e      	bhi.n	8008a1a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	88db      	ldrh	r3, [r3, #6]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d004      	beq.n	80089ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f891 	bl	8008b0e <USBD_CtlError>
        break;
 80089ec:	e01a      	b.n	8008a24 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d005      	beq.n	8008a0a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f043 0202 	orr.w	r2, r3, #2
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	2202      	movs	r2, #2
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f8e5 	bl	8008be2 <USBD_CtlSendData>
      break;
 8008a18:	e004      	b.n	8008a24 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f876 	bl	8008b0e <USBD_CtlError>
      break;
 8008a22:	bf00      	nop
  }
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	885b      	ldrh	r3, [r3, #2]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d106      	bne.n	8008a4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f929 	bl	8008c9e <USBD_CtlSendStatus>
  }
}
 8008a4c:	bf00      	nop
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a64:	3b01      	subs	r3, #1
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d80b      	bhi.n	8008a82 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	885b      	ldrh	r3, [r3, #2]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d10c      	bne.n	8008a8c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f90f 	bl	8008c9e <USBD_CtlSendStatus>
      }
      break;
 8008a80:	e004      	b.n	8008a8c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f842 	bl	8008b0e <USBD_CtlError>
      break;
 8008a8a:	e000      	b.n	8008a8e <USBD_ClrFeature+0x3a>
      break;
 8008a8c:	bf00      	nop
  }
}
 8008a8e:	bf00      	nop
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781a      	ldrb	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	785a      	ldrb	r2, [r3, #1]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	3302      	adds	r3, #2
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	3303      	adds	r3, #3
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	4413      	add	r3, r2
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	3305      	adds	r3, #5
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	021b      	lsls	r3, r3, #8
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	4413      	add	r3, r2
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	3306      	adds	r3, #6
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	3307      	adds	r3, #7
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	4413      	add	r3, r2
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	80da      	strh	r2, [r3, #6]

}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bc80      	pop	{r7}
 8008b0c:	4770      	bx	lr

08008b0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b082      	sub	sp, #8
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b18:	2180      	movs	r1, #128	; 0x80
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fd14 	bl	8009548 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b20:	2100      	movs	r1, #0
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fd10 	bl	8009548 <USBD_LL_StallEP>
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d032      	beq.n	8008bac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 f834 	bl	8008bb4 <USBD_GetLen>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	3301      	adds	r3, #1
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	75fa      	strb	r2, [r7, #23]
 8008b60:	461a      	mov	r2, r3
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	4413      	add	r3, r2
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	7812      	ldrb	r2, [r2, #0]
 8008b6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	75fa      	strb	r2, [r7, #23]
 8008b72:	461a      	mov	r2, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	4413      	add	r3, r2
 8008b78:	2203      	movs	r2, #3
 8008b7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008b7c:	e012      	b.n	8008ba4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	60fa      	str	r2, [r7, #12]
 8008b84:	7dfa      	ldrb	r2, [r7, #23]
 8008b86:	1c51      	adds	r1, r2, #1
 8008b88:	75f9      	strb	r1, [r7, #23]
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	440a      	add	r2, r1
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	75fa      	strb	r2, [r7, #23]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e8      	bne.n	8008b7e <USBD_GetString+0x4e>
    }
  }
}
 8008bac:	bf00      	nop
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008bc0:	e005      	b.n	8008bce <USBD_GetLen+0x1a>
  {
    len++;
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1f5      	bne.n	8008bc2 <USBD_GetLen+0xe>
  }

  return len;
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bc80      	pop	{r7}
 8008be0:	4770      	bx	lr

08008be2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	4613      	mov	r3, r2
 8008bee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bf8:	88fa      	ldrh	r2, [r7, #6]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008bfe:	88fa      	ldrh	r2, [r7, #6]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c04:	88fb      	ldrh	r3, [r7, #6]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fd25 	bl	800965a <USBD_LL_Transmit>

  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	4613      	mov	r3, r2
 8008c26:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c28:	88fb      	ldrh	r3, [r7, #6]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 fd13 	bl	800965a <USBD_LL_Transmit>

  return USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c54:	88fa      	ldrh	r2, [r7, #6]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008c5c:	88fa      	ldrh	r2, [r7, #6]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c64:	88fb      	ldrh	r3, [r7, #6]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 fd18 	bl	80096a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	60f8      	str	r0, [r7, #12]
 8008c82:	60b9      	str	r1, [r7, #8]
 8008c84:	4613      	mov	r3, r2
 8008c86:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c88:	88fb      	ldrh	r3, [r7, #6]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 fd06 	bl	80096a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2204      	movs	r2, #4
 8008caa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cae:	2300      	movs	r3, #0
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fcd0 	bl	800965a <USBD_LL_Transmit>

  return USBD_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2205      	movs	r2, #5
 8008cd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2100      	movs	r1, #0
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fce0 	bl	80096a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4912      	ldr	r1, [pc, #72]	; (8008d3c <MX_USB_DEVICE_Init+0x50>)
 8008cf4:	4812      	ldr	r0, [pc, #72]	; (8008d40 <MX_USB_DEVICE_Init+0x54>)
 8008cf6:	f7fe ff5f 	bl	8007bb8 <USBD_Init>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d00:	f7f7 faff 	bl	8000302 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d04:	490f      	ldr	r1, [pc, #60]	; (8008d44 <MX_USB_DEVICE_Init+0x58>)
 8008d06:	480e      	ldr	r0, [pc, #56]	; (8008d40 <MX_USB_DEVICE_Init+0x54>)
 8008d08:	f7fe ff81 	bl	8007c0e <USBD_RegisterClass>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d12:	f7f7 faf6 	bl	8000302 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d16:	490c      	ldr	r1, [pc, #48]	; (8008d48 <MX_USB_DEVICE_Init+0x5c>)
 8008d18:	4809      	ldr	r0, [pc, #36]	; (8008d40 <MX_USB_DEVICE_Init+0x54>)
 8008d1a:	f7fe fee1 	bl	8007ae0 <USBD_CDC_RegisterInterface>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d24:	f7f7 faed 	bl	8000302 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d28:	4805      	ldr	r0, [pc, #20]	; (8008d40 <MX_USB_DEVICE_Init+0x54>)
 8008d2a:	f7fe ff89 	bl	8007c40 <USBD_Start>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d34:	f7f7 fae5 	bl	8000302 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d38:	bf00      	nop
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20000150 	.word	0x20000150
 8008d40:	20000388 	.word	0x20000388
 8008d44:	20000030 	.word	0x20000030
 8008d48:	20000140 	.word	0x20000140

08008d4c <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t  rx_buf[512];
bool     rx_full = false;

uint32_t cdcAvailable(void)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8008d52:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <cdcAvailable+0x2c>)
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	4b09      	ldr	r3, [pc, #36]	; (8008d7c <cdcAvailable+0x30>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	4a08      	ldr	r2, [pc, #32]	; (8008d80 <cdcAvailable+0x34>)
 8008d5e:	6812      	ldr	r2, [r2, #0]
 8008d60:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d64:	fb01 f202 	mul.w	r2, r1, r2
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	607b      	str	r3, [r7, #4]

  return ret;
 8008d6c:	687b      	ldr	r3, [r7, #4]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bc80      	pop	{r7}
 8008d76:	4770      	bx	lr
 8008d78:	2000064c 	.word	0x2000064c
 8008d7c:	20000650 	.word	0x20000650
 8008d80:	2000013c 	.word	0x2000013c

08008d84 <cdcDataIn>:

  return ret;
}

void cdcDataIn(uint8_t rx_data)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 8008d8e:	4b0e      	ldr	r3, [pc, #56]	; (8008dc8 <cdcDataIn+0x44>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	490e      	ldr	r1, [pc, #56]	; (8008dcc <cdcDataIn+0x48>)
 8008d94:	79fa      	ldrb	r2, [r7, #7]
 8008d96:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1 ) % rx_len;
 8008d98:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <cdcDataIn+0x44>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	4a0c      	ldr	r2, [pc, #48]	; (8008dd0 <cdcDataIn+0x4c>)
 8008da0:	6812      	ldr	r2, [r2, #0]
 8008da2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008da6:	fb01 f202 	mul.w	r2, r1, r2
 8008daa:	1a9b      	subs	r3, r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]

  if (next_rx_in != rx_out)
 8008dae:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <cdcDataIn+0x50>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d002      	beq.n	8008dbe <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8008db8:	4a03      	ldr	r2, [pc, #12]	; (8008dc8 <cdcDataIn+0x44>)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6013      	str	r3, [r2, #0]
  }
}
 8008dbe:	bf00      	nop
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bc80      	pop	{r7}
 8008dc6:	4770      	bx	lr
 8008dc8:	2000064c 	.word	0x2000064c
 8008dcc:	20000654 	.word	0x20000654
 8008dd0:	2000013c 	.word	0x2000013c
 8008dd4:	20000650 	.word	0x20000650

08008dd8 <USBD_CDC_SOF>:
  return LineCoding.bitrate;
}


uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 8008dd8:	b590      	push	{r4, r7, lr}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  if ( rx_full == true)
 8008de0:	4b0c      	ldr	r3, [pc, #48]	; (8008e14 <USBD_CDC_SOF+0x3c>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d010      	beq.n	8008e0a <USBD_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    //수신 버퍼에서 비어있는 데이터 양
    buf_len = (rx_len - cdcAvailable()) - 1;
 8008de8:	4b0b      	ldr	r3, [pc, #44]	; (8008e18 <USBD_CDC_SOF+0x40>)
 8008dea:	681c      	ldr	r4, [r3, #0]
 8008dec:	f7ff ffae 	bl	8008d4c <cdcAvailable>
 8008df0:	4603      	mov	r3, r0
 8008df2:	1ae3      	subs	r3, r4, r3
 8008df4:	3b01      	subs	r3, #1
 8008df6:	60fb      	str	r3, [r7, #12]

    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b3f      	cmp	r3, #63	; 0x3f
 8008dfc:	d905      	bls.n	8008e0a <USBD_CDC_SOF+0x32>
    {
      //다음 데이터도 보내주세요 라고 컴퓨터에 알려준다.
      USBD_CDC_ReceivePacket(pdev);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7fe feb0 	bl	8007b64 <USBD_CDC_ReceivePacket>
      rx_full = false;
 8008e04:	4b03      	ldr	r3, [pc, #12]	; (8008e14 <USBD_CDC_SOF+0x3c>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
    }
  }

  return 0;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd90      	pop	{r4, r7, pc}
 8008e14:	20000854 	.word	0x20000854
 8008e18:	2000013c 	.word	0x2000013c

08008e1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e20:	2200      	movs	r2, #0
 8008e22:	4905      	ldr	r1, [pc, #20]	; (8008e38 <CDC_Init_FS+0x1c>)
 8008e24:	4805      	ldr	r0, [pc, #20]	; (8008e3c <CDC_Init_FS+0x20>)
 8008e26:	f7fe fe71 	bl	8007b0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e2a:	4905      	ldr	r1, [pc, #20]	; (8008e40 <CDC_Init_FS+0x24>)
 8008e2c:	4803      	ldr	r0, [pc, #12]	; (8008e3c <CDC_Init_FS+0x20>)
 8008e2e:	f7fe fe86 	bl	8007b3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	20000a58 	.word	0x20000a58
 8008e3c:	20000388 	.word	0x20000388
 8008e40:	20000858 	.word	0x20000858

08008e44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e44:	b480      	push	{r7}
 8008e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bc80      	pop	{r7}
 8008e50:	4770      	bx	lr
	...

08008e54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	6039      	str	r1, [r7, #0]
 8008e5e:	71fb      	strb	r3, [r7, #7]
 8008e60:	4613      	mov	r3, r2
 8008e62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b23      	cmp	r3, #35	; 0x23
 8008e68:	f200 80a3 	bhi.w	8008fb2 <CDC_Control_FS+0x15e>
 8008e6c:	a201      	add	r2, pc, #4	; (adr r2, 8008e74 <CDC_Control_FS+0x20>)
 8008e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e72:	bf00      	nop
 8008e74:	08008fb3 	.word	0x08008fb3
 8008e78:	08008fb3 	.word	0x08008fb3
 8008e7c:	08008fb3 	.word	0x08008fb3
 8008e80:	08008fb3 	.word	0x08008fb3
 8008e84:	08008fb3 	.word	0x08008fb3
 8008e88:	08008fb3 	.word	0x08008fb3
 8008e8c:	08008fb3 	.word	0x08008fb3
 8008e90:	08008fb3 	.word	0x08008fb3
 8008e94:	08008fb3 	.word	0x08008fb3
 8008e98:	08008fb3 	.word	0x08008fb3
 8008e9c:	08008fb3 	.word	0x08008fb3
 8008ea0:	08008fb3 	.word	0x08008fb3
 8008ea4:	08008fb3 	.word	0x08008fb3
 8008ea8:	08008fb3 	.word	0x08008fb3
 8008eac:	08008fb3 	.word	0x08008fb3
 8008eb0:	08008fb3 	.word	0x08008fb3
 8008eb4:	08008fb3 	.word	0x08008fb3
 8008eb8:	08008fb3 	.word	0x08008fb3
 8008ebc:	08008fb3 	.word	0x08008fb3
 8008ec0:	08008fb3 	.word	0x08008fb3
 8008ec4:	08008fb3 	.word	0x08008fb3
 8008ec8:	08008fb3 	.word	0x08008fb3
 8008ecc:	08008fb3 	.word	0x08008fb3
 8008ed0:	08008fb3 	.word	0x08008fb3
 8008ed4:	08008fb3 	.word	0x08008fb3
 8008ed8:	08008fb3 	.word	0x08008fb3
 8008edc:	08008fb3 	.word	0x08008fb3
 8008ee0:	08008fb3 	.word	0x08008fb3
 8008ee4:	08008fb3 	.word	0x08008fb3
 8008ee8:	08008fb3 	.word	0x08008fb3
 8008eec:	08008fb3 	.word	0x08008fb3
 8008ef0:	08008fb3 	.word	0x08008fb3
 8008ef4:	08008f05 	.word	0x08008f05
 8008ef8:	08008f5f 	.word	0x08008f5f
 8008efc:	08008fb3 	.word	0x08008fb3
 8008f00:	08008fb3 	.word	0x08008fb3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	4b2d      	ldr	r3, [pc, #180]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f0c:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 8008f0e:	4b2c      	ldr	r3, [pc, #176]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	3201      	adds	r2, #1
 8008f16:	7812      	ldrb	r2, [r2, #0]
 8008f18:	0212      	lsls	r2, r2, #8
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	4a28      	ldr	r2, [pc, #160]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f1e:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 8008f20:	4b27      	ldr	r3, [pc, #156]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	3202      	adds	r2, #2
 8008f28:	7812      	ldrb	r2, [r2, #0]
 8008f2a:	0412      	lsls	r2, r2, #16
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	4a24      	ldr	r2, [pc, #144]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f30:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 8008f32:	4b23      	ldr	r3, [pc, #140]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	3203      	adds	r2, #3
 8008f3a:	7812      	ldrb	r2, [r2, #0]
 8008f3c:	0612      	lsls	r2, r2, #24
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	4a1f      	ldr	r2, [pc, #124]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f42:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	791a      	ldrb	r2, [r3, #4]
 8008f48:	4b1d      	ldr	r3, [pc, #116]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f4a:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	795a      	ldrb	r2, [r3, #5]
 8008f50:	4b1b      	ldr	r3, [pc, #108]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f52:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	799a      	ldrb	r2, [r3, #6]
 8008f58:	4b19      	ldr	r3, [pc, #100]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f5a:	719a      	strb	r2, [r3, #6]
    break;
 8008f5c:	e02a      	b.n	8008fb4 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008f5e:	4b18      	ldr	r3, [pc, #96]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8008f68:	4b15      	ldr	r3, [pc, #84]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	0a1a      	lsrs	r2, r3, #8
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	3301      	adds	r3, #1
 8008f72:	b2d2      	uxtb	r2, r2
 8008f74:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8008f76:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	0c1a      	lsrs	r2, r3, #16
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	3302      	adds	r3, #2
 8008f80:	b2d2      	uxtb	r2, r2
 8008f82:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8008f84:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	0e1a      	lsrs	r2, r3, #24
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	3303      	adds	r3, #3
 8008f8e:	b2d2      	uxtb	r2, r2
 8008f90:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	3304      	adds	r3, #4
 8008f96:	4a0a      	ldr	r2, [pc, #40]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008f98:	7912      	ldrb	r2, [r2, #4]
 8008f9a:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	3305      	adds	r3, #5
 8008fa0:	4a07      	ldr	r2, [pc, #28]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008fa2:	7952      	ldrb	r2, [r2, #5]
 8008fa4:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	3306      	adds	r3, #6
 8008faa:	4a05      	ldr	r2, [pc, #20]	; (8008fc0 <CDC_Control_FS+0x16c>)
 8008fac:	7992      	ldrb	r2, [r2, #6]
 8008fae:	701a      	strb	r2, [r3, #0]
    break;
 8008fb0:	e000      	b.n	8008fb4 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008fb2:	bf00      	nop
  }

  return (USBD_OK);
 8008fb4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bc80      	pop	{r7}
 8008fbe:	4770      	bx	lr
 8008fc0:	20000134 	.word	0x20000134

08008fc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fc4:	b590      	push	{r4, r7, lr}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */



  for ( int i=0; i<*Len; i++)
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60fb      	str	r3, [r7, #12]
 8008fd2:	e009      	b.n	8008fe8 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff fed1 	bl	8008d84 <cdcDataIn>
  for ( int i=0; i<*Len; i++)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d8f0      	bhi.n	8008fd4 <CDC_Receive_FS+0x10>
  }

  uint32_t buf_len;

  //수신 버퍼에서 비어있는 데이터 양
  buf_len = (rx_len - cdcAvailable()) - 1;
 8008ff2:	4b0d      	ldr	r3, [pc, #52]	; (8009028 <CDC_Receive_FS+0x64>)
 8008ff4:	681c      	ldr	r4, [r3, #0]
 8008ff6:	f7ff fea9 	bl	8008d4c <cdcAvailable>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	1ae3      	subs	r3, r4, r3
 8008ffe:	3b01      	subs	r3, #1
 8009000:	60bb      	str	r3, [r7, #8]

  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b3f      	cmp	r3, #63	; 0x3f
 8009006:	d907      	bls.n	8009018 <CDC_Receive_FS+0x54>
  {
    //다음 데이터도 보내주세요 라고 컴퓨터에 알려준다.
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009008:	6879      	ldr	r1, [r7, #4]
 800900a:	4808      	ldr	r0, [pc, #32]	; (800902c <CDC_Receive_FS+0x68>)
 800900c:	f7fe fd97 	bl	8007b3e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009010:	4806      	ldr	r0, [pc, #24]	; (800902c <CDC_Receive_FS+0x68>)
 8009012:	f7fe fda7 	bl	8007b64 <USBD_CDC_ReceivePacket>
 8009016:	e002      	b.n	800901e <CDC_Receive_FS+0x5a>
  }
  else
  {
    // 버퍼 용량이 부족하니 좀 기려라 컴튜터야.
    rx_full = true;
 8009018:	4b05      	ldr	r3, [pc, #20]	; (8009030 <CDC_Receive_FS+0x6c>)
 800901a:	2201      	movs	r2, #1
 800901c:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 800901e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	bd90      	pop	{r4, r7, pc}
 8009028:	2000013c 	.word	0x2000013c
 800902c:	20000388 	.word	0x20000388
 8009030:	20000854 	.word	0x20000854

08009034 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2212      	movs	r2, #18
 8009044:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009046:	4b03      	ldr	r3, [pc, #12]	; (8009054 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	bc80      	pop	{r7}
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	2000016c 	.word	0x2000016c

08009058 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	6039      	str	r1, [r7, #0]
 8009062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2204      	movs	r2, #4
 8009068:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800906a:	4b03      	ldr	r3, [pc, #12]	; (8009078 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800906c:	4618      	mov	r0, r3
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	bc80      	pop	{r7}
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	20000180 	.word	0x20000180

0800907c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d105      	bne.n	800909a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4907      	ldr	r1, [pc, #28]	; (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009092:	4808      	ldr	r0, [pc, #32]	; (80090b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009094:	f7ff fd4c 	bl	8008b30 <USBD_GetString>
 8009098:	e004      	b.n	80090a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	4904      	ldr	r1, [pc, #16]	; (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800909e:	4805      	ldr	r0, [pc, #20]	; (80090b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090a0:	f7ff fd46 	bl	8008b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090a4:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000c58 	.word	0x20000c58
 80090b4:	0800984c 	.word	0x0800984c

080090b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	4904      	ldr	r1, [pc, #16]	; (80090d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090c8:	4804      	ldr	r0, [pc, #16]	; (80090dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090ca:	f7ff fd31 	bl	8008b30 <USBD_GetString>
  return USBD_StrDesc;
 80090ce:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20000c58 	.word	0x20000c58
 80090dc:	08009864 	.word	0x08009864

080090e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	6039      	str	r1, [r7, #0]
 80090ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	221a      	movs	r2, #26
 80090f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090f2:	f000 f843 	bl	800917c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090f6:	4b02      	ldr	r3, [pc, #8]	; (8009100 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20000184 	.word	0x20000184

08009104 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	6039      	str	r1, [r7, #0]
 800910e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d105      	bne.n	8009122 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	4907      	ldr	r1, [pc, #28]	; (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
 800911a:	4808      	ldr	r0, [pc, #32]	; (800913c <USBD_FS_ConfigStrDescriptor+0x38>)
 800911c:	f7ff fd08 	bl	8008b30 <USBD_GetString>
 8009120:	e004      	b.n	800912c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	4904      	ldr	r1, [pc, #16]	; (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009126:	4805      	ldr	r0, [pc, #20]	; (800913c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009128:	f7ff fd02 	bl	8008b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800912c:	4b02      	ldr	r3, [pc, #8]	; (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20000c58 	.word	0x20000c58
 800913c:	08009878 	.word	0x08009878

08009140 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	6039      	str	r1, [r7, #0]
 800914a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800914c:	79fb      	ldrb	r3, [r7, #7]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d105      	bne.n	800915e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	4907      	ldr	r1, [pc, #28]	; (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009156:	4808      	ldr	r0, [pc, #32]	; (8009178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009158:	f7ff fcea 	bl	8008b30 <USBD_GetString>
 800915c:	e004      	b.n	8009168 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	4904      	ldr	r1, [pc, #16]	; (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009162:	4805      	ldr	r0, [pc, #20]	; (8009178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009164:	f7ff fce4 	bl	8008b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009168:	4b02      	ldr	r3, [pc, #8]	; (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20000c58 	.word	0x20000c58
 8009178:	08009884 	.word	0x08009884

0800917c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009182:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <Get_SerialNum+0x44>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009188:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <Get_SerialNum+0x48>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800918e:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <Get_SerialNum+0x4c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d009      	beq.n	80091b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091a2:	2208      	movs	r2, #8
 80091a4:	4909      	ldr	r1, [pc, #36]	; (80091cc <Get_SerialNum+0x50>)
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 f814 	bl	80091d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091ac:	2204      	movs	r2, #4
 80091ae:	4908      	ldr	r1, [pc, #32]	; (80091d0 <Get_SerialNum+0x54>)
 80091b0:	68b8      	ldr	r0, [r7, #8]
 80091b2:	f000 f80f 	bl	80091d4 <IntToUnicode>
  }
}
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	1ffff7e8 	.word	0x1ffff7e8
 80091c4:	1ffff7ec 	.word	0x1ffff7ec
 80091c8:	1ffff7f0 	.word	0x1ffff7f0
 80091cc:	20000186 	.word	0x20000186
 80091d0:	20000196 	.word	0x20000196

080091d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	4613      	mov	r3, r2
 80091e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091e6:	2300      	movs	r3, #0
 80091e8:	75fb      	strb	r3, [r7, #23]
 80091ea:	e027      	b.n	800923c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	0f1b      	lsrs	r3, r3, #28
 80091f0:	2b09      	cmp	r3, #9
 80091f2:	d80b      	bhi.n	800920c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	0f1b      	lsrs	r3, r3, #28
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	4619      	mov	r1, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	440b      	add	r3, r1
 8009204:	3230      	adds	r2, #48	; 0x30
 8009206:	b2d2      	uxtb	r2, r2
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	e00a      	b.n	8009222 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	0f1b      	lsrs	r3, r3, #28
 8009210:	b2da      	uxtb	r2, r3
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	4619      	mov	r1, r3
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	440b      	add	r3, r1
 800921c:	3237      	adds	r2, #55	; 0x37
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	011b      	lsls	r3, r3, #4
 8009226:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	3301      	adds	r3, #1
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	4413      	add	r3, r2
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	3301      	adds	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]
 800923c:	7dfa      	ldrb	r2, [r7, #23]
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	429a      	cmp	r2, r3
 8009242:	d3d3      	bcc.n	80091ec <IntToUnicode+0x18>
  }
}
 8009244:	bf00      	nop
 8009246:	bf00      	nop
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	bc80      	pop	{r7}
 800924e:	4770      	bx	lr

08009250 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a0d      	ldr	r2, [pc, #52]	; (8009294 <HAL_PCD_MspInit+0x44>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d113      	bne.n	800928a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009262:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <HAL_PCD_MspInit+0x48>)
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	4a0c      	ldr	r2, [pc, #48]	; (8009298 <HAL_PCD_MspInit+0x48>)
 8009268:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800926c:	61d3      	str	r3, [r2, #28]
 800926e:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <HAL_PCD_MspInit+0x48>)
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800927a:	2200      	movs	r2, #0
 800927c:	2100      	movs	r1, #0
 800927e:	2014      	movs	r0, #20
 8009280:	f7f7 fd53 	bl	8000d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009284:	2014      	movs	r0, #20
 8009286:	f7f7 fd6c 	bl	8000d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800928a:	bf00      	nop
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	40005c00 	.word	0x40005c00
 8009298:	40021000 	.word	0x40021000

0800929c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092b0:	4619      	mov	r1, r3
 80092b2:	4610      	mov	r0, r2
 80092b4:	f7fe fd0c 	bl	8007cd0 <USBD_LL_SetupStage>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80092d2:	78fa      	ldrb	r2, [r7, #3]
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	00db      	lsls	r3, r3, #3
 80092de:	440b      	add	r3, r1
 80092e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	78fb      	ldrb	r3, [r7, #3]
 80092e8:	4619      	mov	r1, r3
 80092ea:	f7fe fd3e 	bl	8007d6a <USBD_LL_DataOutStage>
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009308:	78fa      	ldrb	r2, [r7, #3]
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	440b      	add	r3, r1
 8009316:	333c      	adds	r3, #60	; 0x3c
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	4619      	mov	r1, r3
 800931e:	f7fe fd95 	bl	8007e4c <USBD_LL_DataInStage>
}
 8009322:	bf00      	nop
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b082      	sub	sp, #8
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fea5 	bl	8008088 <USBD_LL_SOF>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800934e:	2301      	movs	r3, #1
 8009350:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	2b02      	cmp	r3, #2
 8009358:	d001      	beq.n	800935e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800935a:	f7f6 ffd2 	bl	8000302 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009364:	7bfa      	ldrb	r2, [r7, #15]
 8009366:	4611      	mov	r1, r2
 8009368:	4618      	mov	r0, r3
 800936a:	f7fe fe55 	bl	8008018 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009374:	4618      	mov	r0, r3
 8009376:	f7fe fe0e 	bl	8007f96 <USBD_LL_Reset>
}
 800937a:	bf00      	nop
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009392:	4618      	mov	r0, r3
 8009394:	f7fe fe4f 	bl	8008036 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093a0:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <HAL_PCD_SuspendCallback+0x30>)
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	4a03      	ldr	r2, [pc, #12]	; (80093b4 <HAL_PCD_SuspendCallback+0x30>)
 80093a6:	f043 0306 	orr.w	r3, r3, #6
 80093aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	e000ed00 	.word	0xe000ed00

080093b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe fe49 	bl	800805e <USBD_LL_Resume>
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80093dc:	4a28      	ldr	r2, [pc, #160]	; (8009480 <USBD_LL_Init+0xac>)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a26      	ldr	r2, [pc, #152]	; (8009480 <USBD_LL_Init+0xac>)
 80093e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80093ec:	4b24      	ldr	r3, [pc, #144]	; (8009480 <USBD_LL_Init+0xac>)
 80093ee:	4a25      	ldr	r2, [pc, #148]	; (8009484 <USBD_LL_Init+0xb0>)
 80093f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80093f2:	4b23      	ldr	r3, [pc, #140]	; (8009480 <USBD_LL_Init+0xac>)
 80093f4:	2208      	movs	r2, #8
 80093f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80093f8:	4b21      	ldr	r3, [pc, #132]	; (8009480 <USBD_LL_Init+0xac>)
 80093fa:	2202      	movs	r2, #2
 80093fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80093fe:	4b20      	ldr	r3, [pc, #128]	; (8009480 <USBD_LL_Init+0xac>)
 8009400:	2200      	movs	r2, #0
 8009402:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009404:	4b1e      	ldr	r3, [pc, #120]	; (8009480 <USBD_LL_Init+0xac>)
 8009406:	2200      	movs	r2, #0
 8009408:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800940a:	4b1d      	ldr	r3, [pc, #116]	; (8009480 <USBD_LL_Init+0xac>)
 800940c:	2200      	movs	r2, #0
 800940e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009410:	481b      	ldr	r0, [pc, #108]	; (8009480 <USBD_LL_Init+0xac>)
 8009412:	f7f8 fa3a 	bl	800188a <HAL_PCD_Init>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800941c:	f7f6 ff71 	bl	8000302 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009426:	2318      	movs	r3, #24
 8009428:	2200      	movs	r2, #0
 800942a:	2100      	movs	r1, #0
 800942c:	f7f9 feae 	bl	800318c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009436:	2358      	movs	r3, #88	; 0x58
 8009438:	2200      	movs	r2, #0
 800943a:	2180      	movs	r1, #128	; 0x80
 800943c:	f7f9 fea6 	bl	800318c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009446:	23c0      	movs	r3, #192	; 0xc0
 8009448:	2200      	movs	r2, #0
 800944a:	2181      	movs	r1, #129	; 0x81
 800944c:	f7f9 fe9e 	bl	800318c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009456:	f44f 7388 	mov.w	r3, #272	; 0x110
 800945a:	2200      	movs	r2, #0
 800945c:	2101      	movs	r1, #1
 800945e:	f7f9 fe95 	bl	800318c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800946c:	2200      	movs	r2, #0
 800946e:	2182      	movs	r1, #130	; 0x82
 8009470:	f7f9 fe8c 	bl	800318c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20000e58 	.word	0x20000e58
 8009484:	40005c00 	.word	0x40005c00

08009488 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800949e:	4618      	mov	r0, r3
 80094a0:	f7f8 fafe 	bl	8001aa0 <HAL_PCD_Start>
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 f94e 	bl	800974c <USBD_Get_USB_Status>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	4608      	mov	r0, r1
 80094c8:	4611      	mov	r1, r2
 80094ca:	461a      	mov	r2, r3
 80094cc:	4603      	mov	r3, r0
 80094ce:	70fb      	strb	r3, [r7, #3]
 80094d0:	460b      	mov	r3, r1
 80094d2:	70bb      	strb	r3, [r7, #2]
 80094d4:	4613      	mov	r3, r2
 80094d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094e6:	78bb      	ldrb	r3, [r7, #2]
 80094e8:	883a      	ldrh	r2, [r7, #0]
 80094ea:	78f9      	ldrb	r1, [r7, #3]
 80094ec:	f7f8 fc76 	bl	8001ddc <HAL_PCD_EP_Open>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 f928 	bl	800974c <USBD_Get_USB_Status>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009500:	7bbb      	ldrb	r3, [r7, #14]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009524:	78fa      	ldrb	r2, [r7, #3]
 8009526:	4611      	mov	r1, r2
 8009528:	4618      	mov	r0, r3
 800952a:	f7f8 fcbd 	bl	8001ea8 <HAL_PCD_EP_Close>
 800952e:	4603      	mov	r3, r0
 8009530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	4618      	mov	r0, r3
 8009536:	f000 f909 	bl	800974c <USBD_Get_USB_Status>
 800953a:	4603      	mov	r3, r0
 800953c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	4611      	mov	r1, r2
 8009566:	4618      	mov	r0, r3
 8009568:	f7f8 fd7d 	bl	8002066 <HAL_PCD_EP_SetStall>
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	4618      	mov	r0, r3
 8009574:	f000 f8ea 	bl	800974c <USBD_Get_USB_Status>
 8009578:	4603      	mov	r3, r0
 800957a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800957c:	7bbb      	ldrb	r3, [r7, #14]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095a0:	78fa      	ldrb	r2, [r7, #3]
 80095a2:	4611      	mov	r1, r2
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7f8 fdbe 	bl	8002126 <HAL_PCD_EP_ClrStall>
 80095aa:	4603      	mov	r3, r0
 80095ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 f8cb 	bl	800974c <USBD_Get_USB_Status>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	da0c      	bge.n	80095fa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	00db      	lsls	r3, r3, #3
 80095f2:	440b      	add	r3, r1
 80095f4:	3302      	adds	r3, #2
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	e00b      	b.n	8009612 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009600:	68f9      	ldr	r1, [r7, #12]
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	440b      	add	r3, r1
 800960c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009610:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr

0800961c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009636:	78fa      	ldrb	r2, [r7, #3]
 8009638:	4611      	mov	r1, r2
 800963a:	4618      	mov	r0, r3
 800963c:	f7f8 fba9 	bl	8001d92 <HAL_PCD_SetAddress>
 8009640:	4603      	mov	r3, r0
 8009642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	4618      	mov	r0, r3
 8009648:	f000 f880 	bl	800974c <USBD_Get_USB_Status>
 800964c:	4603      	mov	r3, r0
 800964e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009650:	7bbb      	ldrb	r3, [r7, #14]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b086      	sub	sp, #24
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	607a      	str	r2, [r7, #4]
 8009664:	461a      	mov	r2, r3
 8009666:	460b      	mov	r3, r1
 8009668:	72fb      	strb	r3, [r7, #11]
 800966a:	4613      	mov	r3, r2
 800966c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800967c:	893b      	ldrh	r3, [r7, #8]
 800967e:	7af9      	ldrb	r1, [r7, #11]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	f7f8 fcad 	bl	8001fe0 <HAL_PCD_EP_Transmit>
 8009686:	4603      	mov	r3, r0
 8009688:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	4618      	mov	r0, r3
 800968e:	f000 f85d 	bl	800974c <USBD_Get_USB_Status>
 8009692:	4603      	mov	r3, r0
 8009694:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009696:	7dbb      	ldrb	r3, [r7, #22]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	461a      	mov	r2, r3
 80096ac:	460b      	mov	r3, r1
 80096ae:	72fb      	strb	r3, [r7, #11]
 80096b0:	4613      	mov	r3, r2
 80096b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096c2:	893b      	ldrh	r3, [r7, #8]
 80096c4:	7af9      	ldrb	r1, [r7, #11]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	f7f8 fc36 	bl	8001f38 <HAL_PCD_EP_Receive>
 80096cc:	4603      	mov	r3, r0
 80096ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 f83a 	bl	800974c <USBD_Get_USB_Status>
 80096d8:	4603      	mov	r3, r0
 80096da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096f8:	78fa      	ldrb	r2, [r7, #3]
 80096fa:	4611      	mov	r1, r2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7f8 fc58 	bl	8001fb2 <HAL_PCD_EP_GetRxCount>
 8009702:	4603      	mov	r3, r0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009714:	4b02      	ldr	r3, [pc, #8]	; (8009720 <USBD_static_malloc+0x14>)
}
 8009716:	4618      	mov	r0, r3
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr
 8009720:	20001144 	.word	0x20001144

08009724 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr

08009736 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009736:	b480      	push	{r7}
 8009738:	b083      	sub	sp, #12
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009742:	bf00      	nop
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	bc80      	pop	{r7}
 800974a:	4770      	bx	lr

0800974c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	2b03      	cmp	r3, #3
 800975e:	d817      	bhi.n	8009790 <USBD_Get_USB_Status+0x44>
 8009760:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <USBD_Get_USB_Status+0x1c>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	08009779 	.word	0x08009779
 800976c:	0800977f 	.word	0x0800977f
 8009770:	08009785 	.word	0x08009785
 8009774:	0800978b 	.word	0x0800978b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]
    break;
 800977c:	e00b      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800977e:	2302      	movs	r3, #2
 8009780:	73fb      	strb	r3, [r7, #15]
    break;
 8009782:	e008      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009784:	2301      	movs	r3, #1
 8009786:	73fb      	strb	r3, [r7, #15]
    break;
 8009788:	e005      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800978a:	2302      	movs	r3, #2
 800978c:	73fb      	strb	r3, [r7, #15]
    break;
 800978e:	e002      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009790:	2302      	movs	r3, #2
 8009792:	73fb      	strb	r3, [r7, #15]
    break;
 8009794:	bf00      	nop
  }
  return usb_status;
 8009796:	7bfb      	ldrb	r3, [r7, #15]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	bc80      	pop	{r7}
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop

080097a4 <main>:




int main(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
  hwInit();
 80097a8:	f7f7 f92e 	bl	8000a08 <hwInit>
  apInit();
 80097ac:	f7f6 fcce 	bl	800014c <apInit>

  apMain();
 80097b0:	f7f6 fcda 	bl	8000168 <apMain>
  /*test*/

  return 0;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <__libc_init_array>:
 80097bc:	b570      	push	{r4, r5, r6, lr}
 80097be:	2600      	movs	r6, #0
 80097c0:	4d0c      	ldr	r5, [pc, #48]	; (80097f4 <__libc_init_array+0x38>)
 80097c2:	4c0d      	ldr	r4, [pc, #52]	; (80097f8 <__libc_init_array+0x3c>)
 80097c4:	1b64      	subs	r4, r4, r5
 80097c6:	10a4      	asrs	r4, r4, #2
 80097c8:	42a6      	cmp	r6, r4
 80097ca:	d109      	bne.n	80097e0 <__libc_init_array+0x24>
 80097cc:	f000 f822 	bl	8009814 <_init>
 80097d0:	2600      	movs	r6, #0
 80097d2:	4d0a      	ldr	r5, [pc, #40]	; (80097fc <__libc_init_array+0x40>)
 80097d4:	4c0a      	ldr	r4, [pc, #40]	; (8009800 <__libc_init_array+0x44>)
 80097d6:	1b64      	subs	r4, r4, r5
 80097d8:	10a4      	asrs	r4, r4, #2
 80097da:	42a6      	cmp	r6, r4
 80097dc:	d105      	bne.n	80097ea <__libc_init_array+0x2e>
 80097de:	bd70      	pop	{r4, r5, r6, pc}
 80097e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e4:	4798      	blx	r3
 80097e6:	3601      	adds	r6, #1
 80097e8:	e7ee      	b.n	80097c8 <__libc_init_array+0xc>
 80097ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ee:	4798      	blx	r3
 80097f0:	3601      	adds	r6, #1
 80097f2:	e7f2      	b.n	80097da <__libc_init_array+0x1e>
 80097f4:	080098ac 	.word	0x080098ac
 80097f8:	080098ac 	.word	0x080098ac
 80097fc:	080098ac 	.word	0x080098ac
 8009800:	080098b0 	.word	0x080098b0

08009804 <memset>:
 8009804:	4603      	mov	r3, r0
 8009806:	4402      	add	r2, r0
 8009808:	4293      	cmp	r3, r2
 800980a:	d100      	bne.n	800980e <memset+0xa>
 800980c:	4770      	bx	lr
 800980e:	f803 1b01 	strb.w	r1, [r3], #1
 8009812:	e7f9      	b.n	8009808 <memset+0x4>

08009814 <_init>:
 8009814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009816:	bf00      	nop
 8009818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981a:	bc08      	pop	{r3}
 800981c:	469e      	mov	lr, r3
 800981e:	4770      	bx	lr

08009820 <_fini>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	bf00      	nop
 8009824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009826:	bc08      	pop	{r3}
 8009828:	469e      	mov	lr, r3
 800982a:	4770      	bx	lr
