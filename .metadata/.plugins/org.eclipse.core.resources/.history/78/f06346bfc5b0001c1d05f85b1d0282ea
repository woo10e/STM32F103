/*
 * uart.c
 *
 *  Created on: 2022. 3. 30.
 *      Author: uylee
 */


#include "uart.h"
#include "cdc.h"


static bool is_open[UART_MAX_CH];
/*cdc.h 로 이동되며 cdc.c driver 생성.
extern uint32_t cdcAvailable(void);
extern uint32_t cdcRead(void);
extern void cdcDataIn(uint8_t rx_data);
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);
extern uint32_t cdcGetBaud(void);
*/

UART_HandleTypeDef huart1;

bool uartInit(void)
{
  for (int i=0; i<UART_MAX_CH; i++)
  {
    is_open[i] = false;
  }

  return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
  bool ret = false;

  switch(ch)
  {
    case _DEF_UART1:
      is_open[ch] = true;
      ret = true;
      break;

    case _DEF_UART2:
      huart1.Instance            = USART1;
      huart1.Init.BaudRate       = 115200;
      huart1.Init.WordLength     = UART_WORDLENGTH_8B;
      huart1.Init.StopBits       = UART_STOPBITS_1;
      huart1.Init.Parity         = UART_PARITY_NONE;
      huart1.Init.Mode           = UART_MODE_TX_RX;
      huart1.Init.HwFlowCtl      = UART_HWCONTROL_NONE;
      huart1.Init.OverSampling   = UART_OVERSAMPLING_16;
      if (HAL_UART_Init(&huart1) != HAL_OK)
      {
        Error_Handler();
      }

      break;
  }

  return ret;
}

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
  {
    case _DEF_UART1:
      ret = cdcAvailable();
      break;
  }

  return ret;
}

uint8_t uartRead(uint8_t ch)
{
  uint8_t ret  = 0;

  switch(ch)
  {
    case _DEF_UART1:
      ret = cdcRead();
      break;
  }

  return ret;
}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
  uint32_t ret = 0;

  switch(ch)
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
      break;
  }

  return ret;
}

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
  len = vsnprintf(buf, 256, fmt, args);

  ret = uartWrite(ch, (uint8_t *)buf, len);

  va_end(args);

  return ret;

}

uint32_t uartGetBaud(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
  {
    case _DEF_UART1:
      ret = cdcGetBaud();
      break;
  }

  return ret;

}
